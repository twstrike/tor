!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A01	src/or/routerparse.c	/^#define A01(/;"	d	file:
ABSOLUTE_MIN_BW_VALUE_TO_CONSIDER_KB	src/or/dirserv.c	/^#define ABSOLUTE_MIN_BW_VALUE_TO_CONSIDER_KB /;"	d	file:
ABSOLUTE_MIN_VALUE_FOR_FAST_FLAG	src/or/dirserv.c	/^#define ABSOLUTE_MIN_VALUE_FOR_FAST_FLAG /;"	d	file:
ACCT_MAX	src/or/or.h	/^  enum { ACCT_MAX, ACCT_SUM } AccountingRule;$/;"	e	enum:__anon55::__anon58
ACCT_SUM	src/or/or.h	/^  enum { ACCT_MAX, ACCT_SUM } AccountingRule;$/;"	e	enum:__anon55::__anon58
ADD	src/test/test_dir.c	/^#define ADD(/;"	d	file:
ADD	src/test/test_dir.c	/^#undef ADD$/;"	d	file:
ADD	src/test/test_keypin.c	/^#define ADD(/;"	d	file:
ADD	src/test/test_keypin.c	/^#undef ADD$/;"	d	file:
ADD	src/test/test_microdesc.c	/^#define ADD(/;"	d	file:
ADDR	src/common/tortls.c	/^#define ADDR(/;"	d	file:
ADDRESSMAP_PRIVATE	src/or/addressmap.c	/^#define ADDRESSMAP_PRIVATE$/;"	d	file:
ADDRESSMAP_PRIVATE	src/test/test_addr.c	/^#define ADDRESSMAP_PRIVATE$/;"	d	file:
ADDRESS_PRIVATE	src/common/address.c	/^#define ADDRESS_PRIVATE$/;"	d	file:
ADDRESS_PRIVATE	src/test/test_address.c	/^#define ADDRESS_PRIVATE$/;"	d	file:
ADDRESS_TEST	src/test/test_address.c	/^#define ADDRESS_TEST(/;"	d	file:
ADDRMAPSRC_AUTOMAP	src/or/or.h	/^  ADDRMAPSRC_AUTOMAP,$/;"	e	enum:__anon63
ADDRMAPSRC_CONTROLLER	src/or/or.h	/^  ADDRMAPSRC_CONTROLLER,$/;"	e	enum:__anon63
ADDRMAPSRC_DNS	src/or/or.h	/^  ADDRMAPSRC_DNS,$/;"	e	enum:__anon63
ADDRMAPSRC_NONE	src/or/or.h	/^  ADDRMAPSRC_NONE$/;"	e	enum:__anon63
ADDRMAPSRC_TORRC	src/or/or.h	/^  ADDRMAPSRC_TORRC,$/;"	e	enum:__anon63
ADDRMAPSRC_TRACKEXIT	src/or/or.h	/^  ADDRMAPSRC_TRACKEXIT,$/;"	e	enum:__anon63
ADDR_LEGACY	src/test/test_addr.c	/^#define ADDR_LEGACY(/;"	d	file:
ADDR_POLICY_ACCEPT	src/or/or.h	/^  ADDR_POLICY_ACCEPT=1,$/;"	e	enum:__anon42
ADDR_POLICY_ACCEPTED	src/or/or.h	/^  ADDR_POLICY_ACCEPTED=0,$/;"	e	enum:__anon71
ADDR_POLICY_PROBABLY_ACCEPTED	src/or/or.h	/^  ADDR_POLICY_PROBABLY_ACCEPTED=1,$/;"	e	enum:__anon71
ADDR_POLICY_PROBABLY_REJECTED	src/or/or.h	/^  ADDR_POLICY_PROBABLY_REJECTED=2,$/;"	e	enum:__anon71
ADDR_POLICY_REJECT	src/or/or.h	/^  ADDR_POLICY_REJECT=2,$/;"	e	enum:__anon42
ADDR_POLICY_REJECTED	src/or/or.h	/^  ADDR_POLICY_REJECTED=-1,$/;"	e	enum:__anon71
ADD_DATA	src/test/test_socks.c	/^#define ADD_DATA(/;"	d	file:
ADD_ENTROPY	src/common/crypto.c	/^#define ADD_ENTROPY /;"	d	file:
ADD_MALLINFO_LINE	src/or/directory.c	/^#define ADD_MALLINFO_LINE(/;"	d	file:
AES_PRIVATE	src/test/test_aes.c	/^#define AES_PRIVATE$/;"	d	file:
ALIGN	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#define ALIGN(/;"	d
ALIGN	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#undef ALIGN$/;"	d
ALLOC	src/or/routerparse.c	/^#define ALLOC(/;"	d	file:
ALLOC	src/or/routerparse.c	/^#undef ALLOC$/;"	d	file:
ALLOC_ZERO	src/or/routerparse.c	/^#define ALLOC_ZERO(/;"	d	file:
ALLOC_ZERO	src/or/routerparse.c	/^#undef ALLOC_ZERO$/;"	d	file:
ALLOW_DIRECTORY_TIME_SKEW	src/or/directory.c	/^#define ALLOW_DIRECTORY_TIME_SKEW /;"	d	file:
ALLOW_INVALID_ENTRY	src/or/or.h	/^  ALLOW_INVALID_ENTRY       =1,$/;"	e	enum:invalid_router_usage_t
ALLOW_INVALID_EXIT	src/or/or.h	/^  ALLOW_INVALID_EXIT        =2,$/;"	e	enum:invalid_router_usage_t
ALLOW_INVALID_INTRODUCTION	src/or/or.h	/^  ALLOW_INVALID_INTRODUCTION=16,$/;"	e	enum:invalid_router_usage_t
ALLOW_INVALID_MIDDLE	src/or/or.h	/^  ALLOW_INVALID_MIDDLE      =4,$/;"	e	enum:invalid_router_usage_t
ALLOW_INVALID_RENDEZVOUS	src/or/or.h	/^  ALLOW_INVALID_RENDEZVOUS  =8,$/;"	e	enum:invalid_router_usage_t
ALL_DIRINFO	src/or/or.h	/^#define ALL_DIRINFO /;"	d
ALL_PARSING	src/test/test_introduce.c	/^#define ALL_PARSING /;"	d	file:
AMR_FLAG_USE_AUTOMAP	src/or/addressmap.h	/^#define AMR_FLAG_USE_AUTOMAP /;"	d
AMR_FLAG_USE_IPV4_DNS	src/or/addressmap.h	/^#define AMR_FLAG_USE_IPV4_DNS /;"	d
AMR_FLAG_USE_IPV6_DNS	src/or/addressmap.h	/^#define AMR_FLAG_USE_IPV6_DNS /;"	d
AMR_FLAG_USE_MAPADDRESS	src/or/addressmap.h	/^#define AMR_FLAG_USE_MAPADDRESS /;"	d
AMR_FLAG_USE_TRACKEXIT	src/or/addressmap.h	/^#define AMR_FLAG_USE_TRACKEXIT /;"	d
APPDATA_PATH	src/or/config.c	/^#define APPDATA_PATH /;"	d	file:
APPEND	src/or/onion_ntor.c	/^#define APPEND(/;"	d	file:
AP_CONN_STATE_CIRCUIT_WAIT	src/or/or.h	/^#define AP_CONN_STATE_CIRCUIT_WAIT /;"	d
AP_CONN_STATE_CONNECT_WAIT	src/or/or.h	/^#define AP_CONN_STATE_CONNECT_WAIT /;"	d
AP_CONN_STATE_CONTROLLER_WAIT	src/or/or.h	/^#define AP_CONN_STATE_CONTROLLER_WAIT /;"	d
AP_CONN_STATE_IS_UNATTACHED	src/or/or.h	/^#define AP_CONN_STATE_IS_UNATTACHED(/;"	d
AP_CONN_STATE_MAX_	src/or/or.h	/^#define AP_CONN_STATE_MAX_ /;"	d
AP_CONN_STATE_MIN_	src/or/or.h	/^#define AP_CONN_STATE_MIN_ /;"	d
AP_CONN_STATE_NATD_WAIT	src/or/or.h	/^#define AP_CONN_STATE_NATD_WAIT /;"	d
AP_CONN_STATE_OPEN	src/or/or.h	/^#define AP_CONN_STATE_OPEN /;"	d
AP_CONN_STATE_RENDDESC_WAIT	src/or/or.h	/^#define AP_CONN_STATE_RENDDESC_WAIT /;"	d
AP_CONN_STATE_RESOLVE_WAIT	src/or/or.h	/^#define AP_CONN_STATE_RESOLVE_WAIT /;"	d
AP_CONN_STATE_SOCKS_WAIT	src/or/or.h	/^#define AP_CONN_STATE_SOCKS_WAIT /;"	d
ARGS	src/or/routerparse.c	/^#define ARGS /;"	d	file:
ARGUMENT_NECESSARY	src/or/config.c	/^  ARGUMENT_NECESSARY = 1,$/;"	e	enum:__anon6	file:
ARGUMENT_OPTIONAL	src/or/config.c	/^  ARGUMENT_OPTIONAL = 2$/;"	e	enum:__anon6	file:
ARRAY_LENGTH	src/common/util.h	/^#define ARRAY_LENGTH(/;"	d
ASOCKS_NOEVENTFD	src/common/compat_threads.h	/^#define ASOCKS_NOEVENTFD /;"	d
ASOCKS_NOEVENTFD2	src/common/compat_threads.h	/^#define ASOCKS_NOEVENTFD2 /;"	d
ASOCKS_NOPIPE	src/common/compat_threads.h	/^#define ASOCKS_NOPIPE /;"	d
ASOCKS_NOPIPE2	src/common/compat_threads.h	/^#define ASOCKS_NOPIPE2 /;"	d
ASOCKS_NOSOCKETPAIR	src/common/compat_threads.h	/^#define ASOCKS_NOSOCKETPAIR /;"	d
ASPECT	src/test/test.h	/^#define ASPECT(/;"	d
ASSERT_CAPACITY	src/common/container.c	/^#undef ASSERT_CAPACITY$/;"	d	file:
ASSERT_MARK_CALLED	src/test/test_relaycell.c	/^#define ASSERT_MARK_CALLED(/;"	d	file:
ASSERT_RESOLVED_CALLED	src/test/test_relaycell.c	/^#define ASSERT_RESOLVED_CALLED(/;"	d	file:
AT	src/or/policies.c	/^#define AT(/;"	d	file:
ATTR_CONST	src/common/compat.h	/^#define ATTR_CONST /;"	d
ATTR_CONST	src/common/compat.h	/^#define ATTR_CONST$/;"	d
ATTR_MALLOC	src/common/compat.h	/^#define ATTR_MALLOC /;"	d
ATTR_MALLOC	src/common/compat.h	/^#define ATTR_MALLOC$/;"	d
ATTR_NONNULL	src/common/compat.h	/^#define ATTR_NONNULL(/;"	d
ATTR_NORETURN	src/common/compat.h	/^#define ATTR_NORETURN /;"	d
ATTR_NORETURN	src/common/compat.h	/^#define ATTR_NORETURN$/;"	d
ATTR_UNUSED	src/common/compat.h	/^#define ATTR_UNUSED /;"	d
ATTR_UNUSED	src/common/compat.h	/^#define ATTR_UNUSED$/;"	d
AT_END	src/or/routerparse.c	/^#define AT_END /;"	d	file:
AT_START	src/or/routerparse.c	/^#define AT_START /;"	d	file:
AUTHCHALLENGE_FAIL	src/test/test_link_handshake.c	/^#define AUTHCHALLENGE_FAIL(/;"	d	file:
AUTHENTICATE_FAIL	src/test/test_link_handshake.c	/^#define AUTHENTICATE_FAIL(/;"	d	file:
AUTHENTICATION_COOKIE_LEN	src/or/control.c	/^#define AUTHENTICATION_COOKIE_LEN /;"	d	file:
AUTHORITY_CERT_A	src/test/test_data.c	/^#define AUTHORITY_CERT_A /;"	d	file:
AUTHORITY_CERT_A	src/test/test_data.c	/^const char AUTHORITY_CERT_A[] =$/;"	v
AUTHORITY_CERT_B	src/test/test_data.c	/^#define AUTHORITY_CERT_B /;"	d	file:
AUTHORITY_CERT_B	src/test/test_data.c	/^const char AUTHORITY_CERT_B[] =$/;"	v
AUTHORITY_CERT_C	src/test/test_data.c	/^#define AUTHORITY_CERT_C /;"	d	file:
AUTHORITY_CERT_C	src/test/test_data.c	/^const char AUTHORITY_CERT_C[] =$/;"	v
AUTHORITY_NS_CACHE_INTERVAL	src/or/networkstatus.c	/^#define AUTHORITY_NS_CACHE_INTERVAL /;"	d	file:
AUTHORITY_SIGNKEY_A	src/test/test_data.c	/^#define AUTHORITY_SIGNKEY_A /;"	d	file:
AUTHORITY_SIGNKEY_A	src/test/test_data.c	/^const char AUTHORITY_SIGNKEY_A[] =$/;"	v
AUTHORITY_SIGNKEY_A_DIGEST	src/test/test_data.c	/^const char AUTHORITY_SIGNKEY_A_DIGEST[] =$/;"	v
AUTHORITY_SIGNKEY_A_DIGEST256	src/test/test_data.c	/^const char AUTHORITY_SIGNKEY_A_DIGEST256[] =$/;"	v
AUTHORITY_SIGNKEY_B	src/test/test_data.c	/^#define AUTHORITY_SIGNKEY_B /;"	d	file:
AUTHORITY_SIGNKEY_B	src/test/test_data.c	/^const char AUTHORITY_SIGNKEY_B[] =$/;"	v
AUTHORITY_SIGNKEY_C	src/test/test_data.c	/^#define AUTHORITY_SIGNKEY_C /;"	d	file:
AUTHORITY_SIGNKEY_C	src/test/test_data.c	/^const char AUTHORITY_SIGNKEY_C[] =$/;"	v
AUTHTYPE_RSA_SHA256_TLSSECRET	src/or/or.h	/^#define AUTHTYPE_RSA_SHA256_TLSSECRET /;"	d
AUTH_INPUT_LEN	src/or/onion_ntor.c	/^#define AUTH_INPUT_LEN /;"	d	file:
A_FEW_KILOBYTES	src/common/torgzip.c	/^#define A_FEW_KILOBYTES /;"	d	file:
A_FEW_KILOBYTES	src/common/torgzip.c	/^#undef A_FEW_KILOBYTES$/;"	d	file:
A_LAST_LISTED	src/or/routerparse.c	/^  A_LAST_LISTED,$/;"	e	enum:__anon96	file:
A_PURPOSE	src/or/routerparse.c	/^  A_PURPOSE,$/;"	e	enum:__anon96	file:
A_UNKNOWN_	src/or/routerparse.c	/^  A_UNKNOWN_,$/;"	e	enum:__anon96	file:
AccelDir	src/or/or.h	/^  char *AccelDir; \/**< Optional hardware acceleration engine search dir. *\/$/;"	m	struct:__anon55
AccelName	src/or/or.h	/^  char *AccelName; \/**< Optional hardware acceleration engine name. *\/$/;"	m	struct:__anon55
AccountingBytesAtSoftLimit	src/or/or.h	/^  uint64_t AccountingBytesAtSoftLimit;$/;"	m	struct:__anon61
AccountingBytesReadInInterval	src/or/or.h	/^  uint64_t AccountingBytesReadInInterval;$/;"	m	struct:__anon61
AccountingBytesWrittenInInterval	src/or/or.h	/^  uint64_t AccountingBytesWrittenInInterval;$/;"	m	struct:__anon61
AccountingExpectedUsage	src/or/or.h	/^  uint64_t AccountingExpectedUsage;$/;"	m	struct:__anon61
AccountingIntervalStart	src/or/or.h	/^  time_t AccountingIntervalStart;$/;"	m	struct:__anon61
AccountingMax	src/or/or.h	/^  uint64_t AccountingMax; \/**< How many bytes do we allow per accounting$/;"	m	struct:__anon55
AccountingRule	src/or/or.h	/^  enum { ACCT_MAX, ACCT_SUM } AccountingRule;$/;"	m	struct:__anon55	typeref:enum:__anon55::__anon58
AccountingRule_option	src/or/or.h	/^  char *AccountingRule_option;$/;"	m	struct:__anon55
AccountingSecondsActive	src/or/or.h	/^  int AccountingSecondsActive;$/;"	m	struct:__anon61
AccountingSecondsToReachSoftLimit	src/or/or.h	/^  int AccountingSecondsToReachSoftLimit;$/;"	m	struct:__anon61
AccountingSoftLimitHitAt	src/or/or.h	/^  time_t AccountingSoftLimitHitAt;$/;"	m	struct:__anon61
AccountingStart	src/or/or.h	/^  char *AccountingStart; \/**< How long is the accounting interval, and when$/;"	m	struct:__anon55
Address	src/or/or.h	/^  char *Address; \/**< OR only: configured address for this onion router. *\/$/;"	m	struct:__anon55
AddressMap	src/or/or.h	/^  config_line_t *AddressMap; \/**< List of address map directives. *\/$/;"	m	struct:__anon55
AllDirActionsPrivate	src/or/or.h	/^  int AllDirActionsPrivate; \/**< Should every directory action be sent$/;"	m	struct:__anon55
AllowDotExit	src/or/or.h	/^  int AllowDotExit;$/;"	m	struct:__anon55
AllowInvalidNodes	src/or/or.h	/^  smartlist_t *AllowInvalidNodes;$/;"	m	struct:__anon55
AllowInvalid_	src/or/or.h	/^  invalid_router_usage_t AllowInvalid_;$/;"	m	struct:__anon55
AllowNonRFC953Hostnames	src/or/or.h	/^  int AllowNonRFC953Hostnames; \/**< If true, we allow connections to hostnames$/;"	m	struct:__anon55
AllowSingleHopCircuits	src/or/or.h	/^  int AllowSingleHopCircuits;$/;"	m	struct:__anon55
AllowSingleHopExits	src/or/or.h	/^  int AllowSingleHopExits;$/;"	m	struct:__anon55
AlternateBridgeAuthority	src/or/or.h	/^  config_line_t *AlternateBridgeAuthority;$/;"	m	struct:__anon55
AlternateDirAuthority	src/or/or.h	/^  config_line_t *AlternateDirAuthority;$/;"	m	struct:__anon55
AssumeReachable	src/or/or.h	/^  int AssumeReachable; \/**< Whether to publish our descriptor regardless. *\/$/;"	m	struct:__anon55
AuthDirBadExit	src/or/or.h	/^  config_line_t *AuthDirBadExit; \/**< Address policy for descriptors to$/;"	m	struct:__anon55
AuthDirBadExitCCs	src/or/or.h	/^  smartlist_t *AuthDirBadExitCCs;$/;"	m	struct:__anon55
AuthDirFastGuarantee	src/or/or.h	/^  uint64_t AuthDirFastGuarantee;$/;"	m	struct:__anon55
AuthDirGuardBWGuarantee	src/or/or.h	/^  uint64_t AuthDirGuardBWGuarantee;$/;"	m	struct:__anon55
AuthDirHasIPv6Connectivity	src/or/or.h	/^  int AuthDirHasIPv6Connectivity; \/**< Boolean: are we on IPv6?  *\/$/;"	m	struct:__anon55
AuthDirInvalid	src/or/or.h	/^  config_line_t *AuthDirInvalid; \/**< Address policy for descriptors to$/;"	m	struct:__anon55
AuthDirInvalidCCs	src/or/or.h	/^  smartlist_t *AuthDirInvalidCCs;$/;"	m	struct:__anon55
AuthDirListBadExits	src/or/or.h	/^  int AuthDirListBadExits; \/**< True iff we should list bad exits,$/;"	m	struct:__anon55
AuthDirMaxServersPerAddr	src/or/or.h	/^  int AuthDirMaxServersPerAddr; \/**< Do not permit more than this$/;"	m	struct:__anon55
AuthDirMaxServersPerAuthAddr	src/or/or.h	/^  int AuthDirMaxServersPerAuthAddr; \/**< Do not permit more than this$/;"	m	struct:__anon55
AuthDirReject	src/or/or.h	/^  config_line_t *AuthDirReject; \/**< Address policy for descriptors to$/;"	m	struct:__anon55
AuthDirRejectCCs	src/or/or.h	/^  smartlist_t *AuthDirRejectCCs;$/;"	m	struct:__anon55
AuthoritativeDir	src/or/or.h	/^  int AuthoritativeDir; \/**< Boolean: is this an authoritative directory? *\/$/;"	m	struct:__anon55
AutomapHostsOnResolve	src/or/or.h	/^  int AutomapHostsOnResolve; \/**< If true, when we get a resolve request for a$/;"	m	struct:__anon55
AutomapHostsSuffixes	src/or/or.h	/^  smartlist_t *AutomapHostsSuffixes;$/;"	m	struct:__anon55
AvoidDiskWrites	src/or/or.h	/^  int AvoidDiskWrites; \/**< Boolean: should we never cache things to disk?$/;"	m	struct:__anon55
B64_1	src/test/test_dir.c	/^#define B64_1 /;"	d	file:
B64_2	src/test/test_dir.c	/^#define B64_2 /;"	d	file:
B64_256_1	src/test/test_dir.c	/^#define B64_256_1 /;"	d	file:
B64_256_1	src/test/test_dir_handle_get.c	/^  #define B64_256_1 /;"	d	file:
B64_256_2	src/test/test_dir.c	/^#define B64_256_2 /;"	d	file:
B64_256_2	src/test/test_dir_handle_get.c	/^  #define B64_256_2 /;"	d	file:
BAD	src/test/test_dir.c	/^#define BAD(/;"	d	file:
BAD	src/test/test_dir.c	/^#undef BAD$/;"	d	file:
BAD_HOSTNAME	src/or/connection_edge.h	/^  NORMAL_HOSTNAME, ONION_HOSTNAME, EXIT_HOSTNAME, BAD_HOSTNAME$/;"	e	enum:hostname_type_t
BAD_REQUEST	src/test/test_dir_handle_get.c	/^#define BAD_REQUEST /;"	d	file:
BAD_SIGNING_KEYS	src/or/routerlist.c	/^static const char *BAD_SIGNING_KEYS[] = {$/;"	v	file:
BANDWIDTH_RECHECK_INTERVAL	src/or/main.c	/^#define BANDWIDTH_RECHECK_INTERVAL /;"	d	file:
BASE16	src/test/test_ntor_cl.c	/^#define BASE16(/;"	d	file:
BASE32_CHARS	src/common/util_format.h	/^#define BASE32_CHARS /;"	d
BASE64_DIGEST256_LEN	src/common/crypto.h	/^#define BASE64_DIGEST256_LEN /;"	d
BASE64_DIGEST_LEN	src/common/crypto.h	/^#define BASE64_DIGEST_LEN /;"	d
BASE64_ENCODE_MULTILINE	src/common/util_format.h	/^#define BASE64_ENCODE_MULTILINE /;"	d
BASE64_OPENSSL_LINELEN	src/common/util_format.c	/^#define BASE64_OPENSSL_LINELEN /;"	d	file:
BASE64_OPENSSL_LINELEN	src/common/util_format.c	/^#undef BASE64_OPENSSL_LINELEN$/;"	d	file:
BASE_CHAN_TO_TLS	src/or/channeltls.h	/^#define BASE_CHAN_TO_TLS(/;"	d
BASE_CONNECTION_MAGIC	src/or/or.h	/^#define BASE_CONNECTION_MAGIC /;"	d
BEGIN_END_OVERHEAD_LEN	src/or/routerparse.c	/^#define BEGIN_END_OVERHEAD_LEN /;"	d	file:
BEGIN_FLAG_IPV4_NOT_OK	src/or/connection_edge.h	/^#define BEGIN_FLAG_IPV4_NOT_OK /;"	d
BEGIN_FLAG_IPV6_OK	src/or/connection_edge.h	/^#define BEGIN_FLAG_IPV6_OK /;"	d
BEGIN_FLAG_IPV6_PREFERRED	src/or/connection_edge.h	/^#define BEGIN_FLAG_IPV6_PREFERRED /;"	d
BIDI_FACTOR	src/or/rephist.c	/^#define BIDI_FACTOR /;"	d	file:
BIDI_INTERVAL	src/or/rephist.c	/^#define BIDI_INTERVAL /;"	d	file:
BIDI_THRESHOLD	src/or/rephist.c	/^#define BIDI_THRESHOLD /;"	d	file:
BIT	src/common/container.h	/^#define BIT(/;"	d
BIT	src/common/container.h	/^#undef BIT$/;"	d
BITARRAY_MASK	src/common/container.h	/^#define BITARRAY_MASK /;"	d
BITARRAY_SHIFT	src/common/container.h	/^#define BITARRAY_SHIFT /;"	d
BOOTSTRAP_MSG_LEN	src/or/control.c	/^#define BOOTSTRAP_MSG_LEN /;"	d	file:
BOOTSTRAP_PCT_INCREMENT	src/or/control.c	/^#define BOOTSTRAP_PCT_INCREMENT /;"	d	file:
BOOTSTRAP_PROBLEM_THRESHOLD	src/or/control.c	/^#define BOOTSTRAP_PROBLEM_THRESHOLD /;"	d	file:
BOOTSTRAP_STATUS_CIRCUIT_CREATE	src/or/or.h	/^  BOOTSTRAP_STATUS_CIRCUIT_CREATE=90,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_CONN_DIR	src/or/or.h	/^  BOOTSTRAP_STATUS_CONN_DIR=5,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_CONN_OR	src/or/or.h	/^  BOOTSTRAP_STATUS_CONN_OR=80,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_DONE	src/or/or.h	/^  BOOTSTRAP_STATUS_DONE=100$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_HANDSHAKE	src/or/or.h	/^  BOOTSTRAP_STATUS_HANDSHAKE=-2,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_HANDSHAKE_DIR	src/or/or.h	/^  BOOTSTRAP_STATUS_HANDSHAKE_DIR=10,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_HANDSHAKE_OR	src/or/or.h	/^  BOOTSTRAP_STATUS_HANDSHAKE_OR=85,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_LOADING_DESCRIPTORS	src/or/or.h	/^  BOOTSTRAP_STATUS_LOADING_DESCRIPTORS=50,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_LOADING_KEYS	src/or/or.h	/^  BOOTSTRAP_STATUS_LOADING_KEYS=40,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_LOADING_STATUS	src/or/or.h	/^  BOOTSTRAP_STATUS_LOADING_STATUS=25,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_ONEHOP_CREATE	src/or/or.h	/^  BOOTSTRAP_STATUS_ONEHOP_CREATE=15,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_REQUESTING_DESCRIPTORS	src/or/or.h	/^  BOOTSTRAP_STATUS_REQUESTING_DESCRIPTORS=45,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_REQUESTING_STATUS	src/or/or.h	/^  BOOTSTRAP_STATUS_REQUESTING_STATUS=20,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_STARTING	src/or/or.h	/^  BOOTSTRAP_STATUS_STARTING=0,$/;"	e	enum:__anon64
BOOTSTRAP_STATUS_UNDEF	src/or/or.h	/^  BOOTSTRAP_STATUS_UNDEF=-1,$/;"	e	enum:__anon64
BRIDGES_PATH	src/test/test_dir_handle_get.c	/^#define BRIDGES_PATH /;"	d	file:
BRIDGE_DIRINFO	src/or/or.h	/^  BRIDGE_DIRINFO  = 1 << 4,$/;"	e	enum:__anon49
BRIDGE_MAX_BELIEVABLE_BANDWIDTH	src/or/routerlist.c	/^#define BRIDGE_MAX_BELIEVABLE_BANDWIDTH /;"	d	file:
BRIDGE_MIN_BELIEVABLE_BANDWIDTH	src/or/routerlist.c	/^#define BRIDGE_MIN_BELIEVABLE_BANDWIDTH /;"	d	file:
BRIDGE_REQUIRED_MIN_BANDWIDTH	src/or/or.h	/^#define BRIDGE_REQUIRED_MIN_BANDWIDTH /;"	d
BRIDGE_STATUSFILE_INTERVAL	src/or/main.c	/^#define BRIDGE_STATUSFILE_INTERVAL /;"	d	file:
BSWAP64	src/ext/trunnel/trunnel.c	/^#  define BSWAP64(/;"	d	file:
BUFFERS_PRIVATE	src/or/buffers.c	/^#define BUFFERS_PRIVATE$/;"	d	file:
BUFFERS_PRIVATE	src/test/test_buffers.c	/^#define BUFFERS_PRIVATE$/;"	d	file:
BUFFERS_PRIVATE	src/test/test_oom.c	/^#define BUFFERS_PRIVATE$/;"	d	file:
BUFFER_MAGIC	src/or/buffers.h	/^#define BUFFER_MAGIC /;"	d
BUF_LEN	src/test/test-memwipe.c	/^#define BUF_LEN /;"	d	file:
BUILDDIR	src/test/test_util_slow.c	/^#define BUILDDIR /;"	d	file:
BUILDTIMEOUT_SET_EVENT_COMPUTED	src/or/or.h	/^  BUILDTIMEOUT_SET_EVENT_COMPUTED  = 0,$/;"	e	enum:buildtimeout_set_event_t
BUILDTIMEOUT_SET_EVENT_DISCARD	src/or/or.h	/^  BUILDTIMEOUT_SET_EVENT_DISCARD = 3,$/;"	e	enum:buildtimeout_set_event_t
BUILDTIMEOUT_SET_EVENT_RESET	src/or/or.h	/^  BUILDTIMEOUT_SET_EVENT_RESET     = 1,$/;"	e	enum:buildtimeout_set_event_t
BUILDTIMEOUT_SET_EVENT_RESUME	src/or/or.h	/^  BUILDTIMEOUT_SET_EVENT_RESUME = 4$/;"	e	enum:buildtimeout_set_event_t
BUILDTIMEOUT_SET_EVENT_SUSPENDED	src/or/or.h	/^  BUILDTIMEOUT_SET_EVENT_SUSPENDED = 2,$/;"	e	enum:buildtimeout_set_event_t
BWHistoryDirReadEnds	src/or/or.h	/^  time_t      BWHistoryDirReadEnds;$/;"	m	struct:__anon61
BWHistoryDirReadInterval	src/or/or.h	/^  int         BWHistoryDirReadInterval;$/;"	m	struct:__anon61
BWHistoryDirReadMaxima	src/or/or.h	/^  smartlist_t *BWHistoryDirReadMaxima;$/;"	m	struct:__anon61
BWHistoryDirReadValues	src/or/or.h	/^  smartlist_t *BWHistoryDirReadValues;$/;"	m	struct:__anon61
BWHistoryDirWriteEnds	src/or/or.h	/^  time_t      BWHistoryDirWriteEnds;$/;"	m	struct:__anon61
BWHistoryDirWriteInterval	src/or/or.h	/^  int         BWHistoryDirWriteInterval;$/;"	m	struct:__anon61
BWHistoryDirWriteMaxima	src/or/or.h	/^  smartlist_t *BWHistoryDirWriteMaxima;$/;"	m	struct:__anon61
BWHistoryDirWriteValues	src/or/or.h	/^  smartlist_t *BWHistoryDirWriteValues;$/;"	m	struct:__anon61
BWHistoryReadEnds	src/or/or.h	/^  time_t      BWHistoryReadEnds;$/;"	m	struct:__anon61
BWHistoryReadInterval	src/or/or.h	/^  int         BWHistoryReadInterval;$/;"	m	struct:__anon61
BWHistoryReadMaxima	src/or/or.h	/^  smartlist_t *BWHistoryReadMaxima;$/;"	m	struct:__anon61
BWHistoryReadValues	src/or/or.h	/^  smartlist_t *BWHistoryReadValues;$/;"	m	struct:__anon61
BWHistoryWriteEnds	src/or/or.h	/^  time_t      BWHistoryWriteEnds;$/;"	m	struct:__anon61
BWHistoryWriteInterval	src/or/or.h	/^  int         BWHistoryWriteInterval;$/;"	m	struct:__anon61
BWHistoryWriteMaxima	src/or/or.h	/^  smartlist_t *BWHistoryWriteMaxima;$/;"	m	struct:__anon61
BWHistoryWriteValues	src/or/or.h	/^  smartlist_t *BWHistoryWriteValues;$/;"	m	struct:__anon61
BW_MAX_WEIGHT_SCALE	src/or/or.h	/^#define BW_MAX_WEIGHT_SCALE /;"	d
BW_MIN_WEIGHT_SCALE	src/or/or.h	/^#define BW_MIN_WEIGHT_SCALE /;"	d
BW_WEIGHTS_BALANCE_EG_ERROR	src/or/dirvote.c	/^ BW_WEIGHTS_BALANCE_EG_ERROR = 6$/;"	e	enum:__anon98	file:
BW_WEIGHTS_BALANCE_MID_ERROR	src/or/dirvote.c	/^ BW_WEIGHTS_BALANCE_MID_ERROR = 5,$/;"	e	enum:__anon98	file:
BW_WEIGHTS_NO_ERROR	src/or/dirvote.c	/^ BW_WEIGHTS_NO_ERROR = 0,$/;"	e	enum:__anon98	file:
BW_WEIGHTS_RANGE_ERROR	src/or/dirvote.c	/^ BW_WEIGHTS_RANGE_ERROR = 1,$/;"	e	enum:__anon98	file:
BW_WEIGHTS_SUMD_ERROR	src/or/dirvote.c	/^ BW_WEIGHTS_SUMD_ERROR = 4,$/;"	e	enum:__anon98	file:
BW_WEIGHTS_SUME_ERROR	src/or/dirvote.c	/^ BW_WEIGHTS_SUME_ERROR = 3,$/;"	e	enum:__anon98	file:
BW_WEIGHTS_SUMG_ERROR	src/or/dirvote.c	/^ BW_WEIGHTS_SUMG_ERROR = 2,$/;"	e	enum:__anon98	file:
BW_WEIGHT_SCALE	src/or/or.h	/^#define BW_WEIGHT_SCALE /;"	d
BandwidthBurst	src/or/or.h	/^  uint64_t BandwidthBurst; \/**< How much bandwidth, at maximum, are we willing$/;"	m	struct:__anon55
BandwidthRate	src/or/or.h	/^  uint64_t BandwidthRate; \/**< How much bandwidth, on average, are we willing$/;"	m	struct:__anon55
Bi	src/ext/ed25519/ref10/ge_double_scalarmult.c	/^static ge_precomp Bi[8] = {$/;"	v	file:
BridgeAuthoritativeDir	src/or/or.h	/^  int BridgeAuthoritativeDir; \/**< Boolean: is this an authoritative directory$/;"	m	struct:__anon55
BridgePassword	src/or/or.h	/^  char *BridgePassword;$/;"	m	struct:__anon55
BridgePassword_AuthDigest_	src/or/or.h	/^  char *BridgePassword_AuthDigest_;$/;"	m	struct:__anon55
BridgeRecordUsageByCountry	src/or/or.h	/^  int BridgeRecordUsageByCountry;$/;"	m	struct:__anon55
BridgeRelay	src/or/or.h	/^  int BridgeRelay; \/**< Boolean: are we acting as a bridge relay? We make$/;"	m	struct:__anon55
Bridges	src/or/or.h	/^  config_line_t *Bridges; \/**< List of bootstrap bridge addresses. *\/$/;"	m	struct:__anon55
BuildtimeHistogram	src/or/or.h	/^  config_line_t * BuildtimeHistogram;$/;"	m	struct:__anon61
CACHED_RESOLVE_MAGIC	src/or/dns_structs.h	/^#define CACHED_RESOLVE_MAGIC /;"	d
CACHE_GENERATED_KEYS	src/test/testing_common.c	/^#undef CACHE_GENERATED_KEYS$/;"	d	file:
CACHE_STATE_CACHED	src/or/dns_structs.h	/^#define CACHE_STATE_CACHED /;"	d
CACHE_STATE_DONE	src/or/dns_structs.h	/^#define CACHE_STATE_DONE /;"	d
CACHE_STATE_PENDING	src/or/dns_structs.h	/^#define CACHE_STATE_PENDING /;"	d
CALLED	src/test/test.h	/^#define CALLED(/;"	d
CAN_CHECK_CLOEXEC	src/test/test_util.c	/^#define CAN_CHECK_CLOEXEC$/;"	d	file:
CAN_CHECK_NONBLOCK	src/test/test_util.c	/^#define CAN_CHECK_NONBLOCK$/;"	d	file:
CASE	src/common/tortls.c	/^#define CASE(/;"	d	file:
CASE	src/common/tortls.c	/^#undef CASE$/;"	d	file:
CASE_ANY_LISTENER_TYPE	src/or/connection.c	/^#define CASE_ANY_LISTENER_TYPE /;"	d	file:
CASE_TOR_TLS_ERROR_ANY	src/common/tortls.h	/^#define CASE_TOR_TLS_ERROR_ANY /;"	d
CASE_TOR_TLS_ERROR_ANY_NONIO	src/common/tortls.h	/^#define CASE_TOR_TLS_ERROR_ANY_NONIO /;"	d
CATCH_SYSCALL	src/common/tortls.c	/^#define CATCH_SYSCALL /;"	d	file:
CATCH_ZERO	src/common/tortls.c	/^#define CATCH_ZERO /;"	d	file:
CBT_BIN_TO_MS	src/or/circuitstats.c	/^#define CBT_BIN_TO_MS(/;"	d	file:
CBT_BIN_WIDTH	src/or/or.h	/^#define CBT_BIN_WIDTH /;"	d
CBT_BUILD_ABANDONED	src/or/or.h	/^#define CBT_BUILD_ABANDONED /;"	d
CBT_BUILD_TIME_MAX	src/or/or.h	/^#define CBT_BUILD_TIME_MAX /;"	d
CBT_DEFAULT_CLOSE_QUANTILE	src/or/or.h	/^#define CBT_DEFAULT_CLOSE_QUANTILE /;"	d
CBT_DEFAULT_MAX_RECENT_TIMEOUT_COUNT	src/or/or.h	/^#define CBT_DEFAULT_MAX_RECENT_TIMEOUT_COUNT /;"	d
CBT_DEFAULT_MIN_CIRCUITS_TO_OBSERVE	src/or/or.h	/^#define CBT_DEFAULT_MIN_CIRCUITS_TO_OBSERVE /;"	d
CBT_DEFAULT_NUM_XM_MODES	src/or/or.h	/^#define CBT_DEFAULT_NUM_XM_MODES /;"	d
CBT_DEFAULT_QUANTILE_CUTOFF	src/or/or.h	/^#define CBT_DEFAULT_QUANTILE_CUTOFF /;"	d
CBT_DEFAULT_RECENT_CIRCUITS	src/or/or.h	/^#define CBT_DEFAULT_RECENT_CIRCUITS /;"	d
CBT_DEFAULT_TEST_FREQUENCY	src/or/or.h	/^#define CBT_DEFAULT_TEST_FREQUENCY /;"	d
CBT_DEFAULT_TIMEOUT_INITIAL_VALUE	src/or/or.h	/^#define CBT_DEFAULT_TIMEOUT_INITIAL_VALUE /;"	d
CBT_DEFAULT_TIMEOUT_MIN_VALUE	src/or/or.h	/^#define CBT_DEFAULT_TIMEOUT_MIN_VALUE /;"	d
CBT_MAX_CLOSE_QUANTILE	src/or/or.h	/^#define CBT_MAX_CLOSE_QUANTILE /;"	d
CBT_MAX_MAX_RECENT_TIMEOUT_COUNT	src/or/or.h	/^#define CBT_MAX_MAX_RECENT_TIMEOUT_COUNT /;"	d
CBT_MAX_MIN_CIRCUITS_TO_OBSERVE	src/or/or.h	/^#define CBT_MAX_MIN_CIRCUITS_TO_OBSERVE /;"	d
CBT_MAX_NUM_XM_MODES	src/or/or.h	/^#define CBT_MAX_NUM_XM_MODES /;"	d
CBT_MAX_QUANTILE_CUTOFF	src/or/or.h	/^#define CBT_MAX_QUANTILE_CUTOFF /;"	d
CBT_MAX_RECENT_CIRCUITS	src/or/or.h	/^#define CBT_MAX_RECENT_CIRCUITS /;"	d
CBT_MAX_TEST_FREQUENCY	src/or/or.h	/^#define CBT_MAX_TEST_FREQUENCY /;"	d
CBT_MAX_TIMEOUT_INITIAL_VALUE	src/or/or.h	/^#define CBT_MAX_TIMEOUT_INITIAL_VALUE /;"	d
CBT_MAX_TIMEOUT_MIN_VALUE	src/or/or.h	/^#define CBT_MAX_TIMEOUT_MIN_VALUE /;"	d
CBT_MIN_CLOSE_QUANTILE	src/or/or.h	/^#define CBT_MIN_CLOSE_QUANTILE /;"	d
CBT_MIN_MAX_RECENT_TIMEOUT_COUNT	src/or/or.h	/^#define CBT_MIN_MAX_RECENT_TIMEOUT_COUNT /;"	d
CBT_MIN_MIN_CIRCUITS_TO_OBSERVE	src/or/or.h	/^#define CBT_MIN_MIN_CIRCUITS_TO_OBSERVE /;"	d
CBT_MIN_NUM_XM_MODES	src/or/or.h	/^#define CBT_MIN_NUM_XM_MODES /;"	d
CBT_MIN_QUANTILE_CUTOFF	src/or/or.h	/^#define CBT_MIN_QUANTILE_CUTOFF /;"	d
CBT_MIN_RECENT_CIRCUITS	src/or/or.h	/^#define CBT_MIN_RECENT_CIRCUITS /;"	d
CBT_MIN_TEST_FREQUENCY	src/or/or.h	/^#define CBT_MIN_TEST_FREQUENCY /;"	d
CBT_MIN_TIMEOUT_INITIAL_VALUE	src/or/or.h	/^#define CBT_MIN_TIMEOUT_INITIAL_VALUE /;"	d
CBT_MIN_TIMEOUT_MIN_VALUE	src/or/or.h	/^#define CBT_MIN_TIMEOUT_MIN_VALUE /;"	d
CBT_NCIRCUITS_TO_OBSERVE	src/or/or.h	/^#define CBT_NCIRCUITS_TO_OBSERVE /;"	d
CBT_SAVE_STATE_EVERY	src/or/or.h	/^#define CBT_SAVE_STATE_EVERY /;"	d
CEIL_DIV	src/common/util.h	/^#define CEIL_DIV(/;"	d
CELL_AUTHENTICATE	src/or/or.h	/^#define CELL_AUTHENTICATE /;"	d
CELL_AUTHORIZE	src/or/or.h	/^#define CELL_AUTHORIZE /;"	d
CELL_AUTH_CHALLENGE	src/or/or.h	/^#define CELL_AUTH_CHALLENGE /;"	d
CELL_CERTS	src/or/or.h	/^#define CELL_CERTS /;"	d
CELL_COMMAND_MAX_	src/or/or.h	/^#define CELL_COMMAND_MAX_ /;"	d
CELL_CREATE	src/or/or.h	/^#define CELL_CREATE /;"	d
CELL_CREATE2	src/or/or.h	/^#define CELL_CREATE2 /;"	d
CELL_CREATED	src/or/or.h	/^#define CELL_CREATED /;"	d
CELL_CREATED2	src/or/or.h	/^#define CELL_CREATED2 /;"	d
CELL_CREATED_FAST	src/or/or.h	/^#define CELL_CREATED_FAST /;"	d
CELL_CREATE_FAST	src/or/or.h	/^#define CELL_CREATE_FAST /;"	d
CELL_DESTROY	src/or/or.h	/^#define CELL_DESTROY /;"	d
CELL_DIRECTION_IN	src/or/or.h	/^  CELL_DIRECTION_IN=1, \/**< The cell is moving towards the origin. *\/$/;"	e	enum:__anon37
CELL_DIRECTION_OUT	src/or/or.h	/^  CELL_DIRECTION_OUT=2, \/**< The cell is moving away from the origin. *\/$/;"	e	enum:__anon37
CELL_MAX_NETWORK_SIZE	src/or/or.h	/^#define CELL_MAX_NETWORK_SIZE /;"	d
CELL_NETINFO	src/or/or.h	/^#define CELL_NETINFO /;"	d
CELL_PADDING	src/or/or.h	/^#define CELL_PADDING /;"	d
CELL_PAYLOAD_SIZE	src/or/or.h	/^#define CELL_PAYLOAD_SIZE /;"	d
CELL_QUEUE_FIXED	src/or/channel.h	/^    CELL_QUEUE_FIXED,$/;"	e	enum:cell_queue_entry_s::__anon91
CELL_QUEUE_HIGHWATER_SIZE	src/or/relay.c	/^#define CELL_QUEUE_HIGHWATER_SIZE /;"	d	file:
CELL_QUEUE_LOWWATER_SIZE	src/or/relay.c	/^#define CELL_QUEUE_LOWWATER_SIZE /;"	d	file:
CELL_QUEUE_PACKED	src/or/channel.h	/^    CELL_QUEUE_PACKED$/;"	e	enum:cell_queue_entry_s::__anon91
CELL_QUEUE_VAR	src/or/channel.h	/^    CELL_QUEUE_VAR,$/;"	e	enum:cell_queue_entry_s::__anon91
CELL_RELAY	src/or/or.h	/^#define CELL_RELAY /;"	d
CELL_RELAY_EARLY	src/or/or.h	/^#define CELL_RELAY_EARLY /;"	d
CELL_VERSIONS	src/or/or.h	/^#define CELL_VERSIONS /;"	d
CELL_VPADDING	src/or/or.h	/^#define CELL_VPADDING /;"	d
CERTEXT_FLAG_AFFECTS_VALIDATION	src/trunnel/ed25519_cert.h	/^#define CERTEXT_FLAG_AFFECTS_VALIDATION /;"	d
CERTEXT_SIGNED_WITH_KEY	src/trunnel/ed25519_cert.h	/^#define CERTEXT_SIGNED_WITH_KEY /;"	d
CERTIFICATE_MEMBERS	src/or/routerparse.c	/^#define CERTIFICATE_MEMBERS /;"	d	file:
CERTS_FAIL	src/test/test_link_handshake.c	/^#define CERTS_FAIL(/;"	d	file:
CERTTYPE_ED_ID_SIGN	src/trunnel/link_handshake.h	/^#define CERTTYPE_ED_ID_SIGN /;"	d
CERTTYPE_ED_SIGN_AUTH	src/trunnel/link_handshake.h	/^#define CERTTYPE_ED_SIGN_AUTH /;"	d
CERTTYPE_ED_SIGN_LINK	src/trunnel/link_handshake.h	/^#define CERTTYPE_ED_SIGN_LINK /;"	d
CERTTYPE_RSA1024_ID_AUTH	src/trunnel/link_handshake.h	/^#define CERTTYPE_RSA1024_ID_AUTH /;"	d
CERTTYPE_RSA1024_ID_EDID	src/trunnel/link_handshake.h	/^#define CERTTYPE_RSA1024_ID_EDID /;"	d
CERTTYPE_RSA1024_ID_ID	src/trunnel/link_handshake.h	/^#define CERTTYPE_RSA1024_ID_ID /;"	d
CERTTYPE_RSA1024_ID_LINK	src/trunnel/link_handshake.h	/^#define CERTTYPE_RSA1024_ID_LINK /;"	d
CERT_FLAG_INCLUDE_SIGNING_KEY	src/or/torcert.h	/^#define CERT_FLAG_INCLUDE_SIGNING_KEY /;"	d
CERT_PKEY_local	src/test/test_tortls.c	/^} CERT_PKEY_local;$/;"	t	typeref:struct:cert_pkey_st_local	file:
CERT_TYPE_ID_SIGNING	src/or/torcert.h	/^#define CERT_TYPE_ID_SIGNING /;"	d
CERT_TYPE_ONION_ID	src/or/torcert.h	/^#define CERT_TYPE_ONION_ID /;"	d
CERT_TYPE_SIGNING_AUTH	src/or/torcert.h	/^#define CERT_TYPE_SIGNING_AUTH /;"	d
CERT_TYPE_SIGNING_LINK	src/or/torcert.h	/^#define CERT_TYPE_SIGNING_LINK /;"	d
CFG_AUTO_PORT	src/or/or.h	/^#define CFG_AUTO_PORT /;"	d
CHANNELTLS_PRIVATE	src/or/channeltls.c	/^#define CHANNELTLS_PRIVATE$/;"	d	file:
CHANNELTLS_PRIVATE	src/test/test_link_handshake.c	/^#define CHANNELTLS_PRIVATE$/;"	d	file:
CHANNEL_CAN_HANDLE_CELLS	src/or/channel.h	/^#define CHANNEL_CAN_HANDLE_CELLS(/;"	d
CHANNEL_CLOSE_FOR_ERROR	src/or/channel.h	/^    CHANNEL_CLOSE_FOR_ERROR$/;"	e	enum:channel_s::__anon88
CHANNEL_CLOSE_FROM_BELOW	src/or/channel.h	/^    CHANNEL_CLOSE_FROM_BELOW,$/;"	e	enum:channel_s::__anon88
CHANNEL_CLOSE_REQUESTED	src/or/channel.h	/^    CHANNEL_CLOSE_REQUESTED,$/;"	e	enum:channel_s::__anon88
CHANNEL_CONDEMNED	src/or/channel.h	/^#define CHANNEL_CONDEMNED(/;"	d
CHANNEL_FINISHED	src/or/channel.h	/^#define CHANNEL_FINISHED(/;"	d
CHANNEL_IS_CLOSED	src/or/channel.h	/^#define CHANNEL_IS_CLOSED(/;"	d
CHANNEL_IS_CLOSING	src/or/channel.h	/^#define CHANNEL_IS_CLOSING(/;"	d
CHANNEL_IS_ERROR	src/or/channel.h	/^#define CHANNEL_IS_ERROR(/;"	d
CHANNEL_IS_MAINT	src/or/channel.h	/^#define CHANNEL_IS_MAINT(/;"	d
CHANNEL_IS_OPEN	src/or/channel.h	/^#define CHANNEL_IS_OPEN(/;"	d
CHANNEL_IS_OPENING	src/or/channel.h	/^#define CHANNEL_IS_OPENING(/;"	d
CHANNEL_LISTENER_CLOSE_FOR_ERROR	src/or/channel.h	/^    CHANNEL_LISTENER_CLOSE_FOR_ERROR$/;"	e	enum:channel_listener_s::__anon90
CHANNEL_LISTENER_CLOSE_FROM_BELOW	src/or/channel.h	/^    CHANNEL_LISTENER_CLOSE_FROM_BELOW,$/;"	e	enum:channel_listener_s::__anon90
CHANNEL_LISTENER_CLOSE_REQUESTED	src/or/channel.h	/^    CHANNEL_LISTENER_CLOSE_REQUESTED,$/;"	e	enum:channel_listener_s::__anon90
CHANNEL_LISTENER_NOT_CLOSING	src/or/channel.h	/^    CHANNEL_LISTENER_NOT_CLOSING = 0,$/;"	e	enum:channel_listener_s::__anon90
CHANNEL_LISTENER_STATE_CLOSED	src/or/or.h	/^  CHANNEL_LISTENER_STATE_CLOSED = 0,$/;"	e	enum:__anon39
CHANNEL_LISTENER_STATE_CLOSING	src/or/or.h	/^  CHANNEL_LISTENER_STATE_CLOSING,$/;"	e	enum:__anon39
CHANNEL_LISTENER_STATE_ERROR	src/or/or.h	/^  CHANNEL_LISTENER_STATE_ERROR,$/;"	e	enum:__anon39
CHANNEL_LISTENER_STATE_LAST	src/or/or.h	/^  CHANNEL_LISTENER_STATE_LAST$/;"	e	enum:__anon39
CHANNEL_LISTENER_STATE_LISTENING	src/or/or.h	/^  CHANNEL_LISTENER_STATE_LISTENING,$/;"	e	enum:__anon39
CHANNEL_NOT_CLOSING	src/or/channel.h	/^    CHANNEL_NOT_CLOSING = 0,$/;"	e	enum:channel_s::__anon88
CHANNEL_PRIVATE_	src/or/channel.c	/^#define CHANNEL_PRIVATE_$/;"	d	file:
CHANNEL_PRIVATE_	src/test/test_channel.c	/^#define CHANNEL_PRIVATE_$/;"	d	file:
CHANNEL_PRIVATE_	src/test/test_scheduler.c	/^#define CHANNEL_PRIVATE_$/;"	d	file:
CHANNEL_STATE_CLOSED	src/or/or.h	/^  CHANNEL_STATE_CLOSED = 0,$/;"	e	enum:__anon38
CHANNEL_STATE_CLOSING	src/or/or.h	/^  CHANNEL_STATE_CLOSING,$/;"	e	enum:__anon38
CHANNEL_STATE_ERROR	src/or/or.h	/^  CHANNEL_STATE_ERROR,$/;"	e	enum:__anon38
CHANNEL_STATE_LAST	src/or/or.h	/^  CHANNEL_STATE_LAST$/;"	e	enum:__anon38
CHANNEL_STATE_MAINT	src/or/or.h	/^  CHANNEL_STATE_MAINT,$/;"	e	enum:__anon38
CHANNEL_STATE_OPEN	src/or/or.h	/^  CHANNEL_STATE_OPEN,$/;"	e	enum:__anon38
CHANNEL_STATE_OPENING	src/or/or.h	/^  CHANNEL_STATE_OPENING,$/;"	e	enum:__anon38
CHECK	src/test/test_addr.c	/^#define CHECK(/;"	d	file:
CHECK	src/test/test_addr.c	/^#undef CHECK$/;"	d	file:
CHECKDIR	src/test/test_checkdir.c	/^#define CHECKDIR(/;"	d	file:
CHECK_COUNTRY	src/test/test.c	/^#define CHECK_COUNTRY(/;"	d	file:
CHECK_COUNTRY	src/test/test.c	/^#undef CHECK_COUNTRY$/;"	d	file:
CHECK_DEFAULT	src/or/config.c	/^#define CHECK_DEFAULT(/;"	d	file:
CHECK_DEFAULT	src/or/config.c	/^#undef CHECK_DEFAULT$/;"	d	file:
CHECK_DESCRIPTOR_INTERVAL	src/or/main.c	/^#define CHECK_DESCRIPTOR_INTERVAL /;"	d	file:
CHECK_EQ	src/or/dirvote.c	/^#define CHECK_EQ(/;"	d	file:
CHECK_EXPIRED_NS_INTERVAL	src/or/main.c	/^#define CHECK_EXPIRED_NS_INTERVAL /;"	d	file:
CHECK_FAIL	src/test/test_dir.c	/^#define CHECK_FAIL(/;"	d	file:
CHECK_FAIL	src/test/test_dir.c	/^#undef CHECK_FAIL$/;"	d	file:
CHECK_FOR_COMPRESSION_BOMB_AFTER	src/common/torgzip.c	/^#define CHECK_FOR_COMPRESSION_BOMB_AFTER /;"	d	file:
CHECK_LENGTH	src/or/routerparse.c	/^#define CHECK_LENGTH(/;"	d	file:
CHECK_LENGTH	src/or/routerparse.c	/^#undef CHECK_LENGTH$/;"	d	file:
CHECK_OK	src/test/test_dir.c	/^#define CHECK_OK(/;"	d	file:
CHECK_OK	src/test/test_dir.c	/^#undef CHECK_OK$/;"	d	file:
CHECK_PRINTF	src/common/compat.h	/^#define CHECK_PRINTF(/;"	d
CHECK_REMAINING	src/trunnel/ed25519_cert.c	/^#define CHECK_REMAINING(/;"	d	file:
CHECK_REMAINING	src/trunnel/link_handshake.c	/^#define CHECK_REMAINING(/;"	d	file:
CHECK_REMAINING	src/trunnel/pwbox.c	/^#define CHECK_REMAINING(/;"	d	file:
CHECK_SCANF	src/common/compat.h	/^#define CHECK_SCANF(/;"	d
CHECK_SENTINEL	src/common/memarea.c	/^#define CHECK_SENTINEL(/;"	d	file:
CHECK_STRTOX_RESULT	src/common/util.c	/^#define CHECK_STRTOX_RESULT(/;"	d	file:
CHECK_V3_CERTIFICATE_INTERVAL	src/or/main.c	/^#define CHECK_V3_CERTIFICATE_INTERVAL /;"	d	file:
CHECK_WRITE_STATS_INTERVAL	src/or/main.c	/^#define CHECK_WRITE_STATS_INTERVAL /;"	d	file:
CHILD_STATE_CLOSEFD	src/common/util.c	/^#define CHILD_STATE_CLOSEFD /;"	d	file:
CHILD_STATE_DUPERR	src/common/util.c	/^#define CHILD_STATE_DUPERR /;"	d	file:
CHILD_STATE_DUPIN	src/common/util.c	/^#define CHILD_STATE_DUPIN /;"	d	file:
CHILD_STATE_DUPOUT	src/common/util.c	/^#define CHILD_STATE_DUPOUT /;"	d	file:
CHILD_STATE_EXEC	src/common/util.c	/^#define CHILD_STATE_EXEC /;"	d	file:
CHILD_STATE_FAILEXEC	src/common/util.c	/^#define CHILD_STATE_FAILEXEC /;"	d	file:
CHILD_STATE_FORK	src/common/util.c	/^#define CHILD_STATE_FORK /;"	d	file:
CHILD_STATE_INIT	src/common/util.c	/^#define CHILD_STATE_INIT /;"	d	file:
CHILD_STATE_MAXFD	src/common/util.c	/^#define CHILD_STATE_MAXFD /;"	d	file:
CHILD_STATE_PIPE	src/common/util.c	/^#define CHILD_STATE_PIPE /;"	d	file:
CHOSEN_ON_DATE_SLOP	src/or/entrynodes.c	/^#define CHOSEN_ON_DATE_SLOP /;"	d	file:
CHUNK_ALLOC_SIZE	src/or/buffers.c	/^#define CHUNK_ALLOC_SIZE(/;"	d	file:
CHUNK_HEADER_LEN	src/or/buffers.c	/^#define CHUNK_HEADER_LEN /;"	d	file:
CHUNK_HEADER_SIZE	src/common/memarea.c	/^#define CHUNK_HEADER_SIZE /;"	d	file:
CHUNK_REMAINING_CAPACITY	src/or/buffers.c	/^CHUNK_REMAINING_CAPACITY(const chunk_t *chunk)$/;"	f	file:
CHUNK_SIZE	src/common/memarea.c	/^#define CHUNK_SIZE /;"	d	file:
CHUNK_SIZE_WITH_ALLOC	src/or/buffers.c	/^#define CHUNK_SIZE_WITH_ALLOC(/;"	d	file:
CHUNK_WRITE_PTR	src/or/buffers.c	/^CHUNK_WRITE_PTR(chunk_t *chunk)$/;"	f	file:
CIPHER	src/common/tortls.c	/^#define CIPHER(/;"	d	file:
CIPHER	src/common/tortls.c	/^#undef CIPHER$/;"	d	file:
CIPHERS_ERR	src/common/tortls.c	/^#define CIPHERS_ERR /;"	d	file:
CIPHERS_UNRESTRICTED	src/common/tortls.c	/^#define CIPHERS_UNRESTRICTED /;"	d	file:
CIPHERS_V1	src/common/tortls.c	/^#define CIPHERS_V1 /;"	d	file:
CIPHERS_V2	src/common/tortls.c	/^#define CIPHERS_V2 /;"	d	file:
CIPHER_IV_LEN	src/common/crypto.h	/^#define CIPHER_IV_LEN /;"	d
CIPHER_KEY_LEN	src/common/crypto.h	/^#define CIPHER_KEY_LEN /;"	d
CIRCLAUNCH_IS_INTERNAL	src/or/circuituse.h	/^#define CIRCLAUNCH_IS_INTERNAL /;"	d
CIRCLAUNCH_NEED_CAPACITY	src/or/circuituse.h	/^#define CIRCLAUNCH_NEED_CAPACITY /;"	d
CIRCLAUNCH_NEED_UPTIME	src/or/circuituse.h	/^#define CIRCLAUNCH_NEED_UPTIME /;"	d
CIRCLAUNCH_ONEHOP_TUNNEL	src/or/circuituse.h	/^#define CIRCLAUNCH_ONEHOP_TUNNEL /;"	d
CIRCUITBUILD_PRIVATE	src/or/circuitbuild.c	/^#define CIRCUITBUILD_PRIVATE$/;"	d	file:
CIRCUITBUILD_PRIVATE	src/test/test_circuitlist.c	/^#define CIRCUITBUILD_PRIVATE$/;"	d	file:
CIRCUITBUILD_PRIVATE	src/test/test_hs.c	/^#define CIRCUITBUILD_PRIVATE$/;"	d	file:
CIRCUITBUILD_PRIVATE	src/test/test_relay.c	/^#define CIRCUITBUILD_PRIVATE$/;"	d	file:
CIRCUITLIST_PRIVATE	src/or/circuitlist.c	/^#define CIRCUITLIST_PRIVATE$/;"	d	file:
CIRCUITLIST_PRIVATE	src/test/test.c	/^#define CIRCUITLIST_PRIVATE$/;"	d	file:
CIRCUITLIST_PRIVATE	src/test/test_cell_queue.c	/^#define CIRCUITLIST_PRIVATE$/;"	d	file:
CIRCUITLIST_PRIVATE	src/test/test_circuitlist.c	/^#define CIRCUITLIST_PRIVATE$/;"	d	file:
CIRCUITLIST_PRIVATE	src/test/test_oom.c	/^#define CIRCUITLIST_PRIVATE$/;"	d	file:
CIRCUITMUX_PRIVATE	src/test/test_circuitmux.c	/^#define CIRCUITMUX_PRIVATE$/;"	d	file:
CIRCUITSTATS_PRIVATE	src/or/circuitstats.c	/^#define CIRCUITSTATS_PRIVATE$/;"	d	file:
CIRCUITSTATS_PRIVATE	src/test/test.c	/^#define CIRCUITSTATS_PRIVATE$/;"	d	file:
CIRCUIT_IS_ORCIRC	src/or/or.h	/^#define CIRCUIT_IS_ORCIRC(/;"	d
CIRCUIT_IS_ORIGIN	src/or/or.h	/^#define CIRCUIT_IS_ORIGIN(/;"	d
CIRCUIT_PURPOSE_CONTROLLER	src/or/or.h	/^#define CIRCUIT_PURPOSE_CONTROLLER /;"	d
CIRCUIT_PURPOSE_C_ESTABLISH_REND	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_ESTABLISH_REND /;"	d
CIRCUIT_PURPOSE_C_GENERAL	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_GENERAL /;"	d
CIRCUIT_PURPOSE_C_INTRODUCE_ACKED	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_INTRODUCE_ACKED /;"	d
CIRCUIT_PURPOSE_C_INTRODUCE_ACK_WAIT	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_INTRODUCE_ACK_WAIT /;"	d
CIRCUIT_PURPOSE_C_INTRODUCING	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_INTRODUCING /;"	d
CIRCUIT_PURPOSE_C_MAX_	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_MAX_ /;"	d
CIRCUIT_PURPOSE_C_MEASURE_TIMEOUT	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_MEASURE_TIMEOUT /;"	d
CIRCUIT_PURPOSE_C_REND_JOINED	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_REND_JOINED /;"	d
CIRCUIT_PURPOSE_C_REND_READY	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_REND_READY /;"	d
CIRCUIT_PURPOSE_C_REND_READY_INTRO_ACKED	src/or/or.h	/^#define CIRCUIT_PURPOSE_C_REND_READY_INTRO_ACKED /;"	d
CIRCUIT_PURPOSE_INTRO_POINT	src/or/or.h	/^#define CIRCUIT_PURPOSE_INTRO_POINT /;"	d
CIRCUIT_PURPOSE_IS_CLIENT	src/or/or.h	/^#define CIRCUIT_PURPOSE_IS_CLIENT(/;"	d
CIRCUIT_PURPOSE_IS_ESTABLISHED_REND	src/or/or.h	/^#define CIRCUIT_PURPOSE_IS_ESTABLISHED_REND(/;"	d
CIRCUIT_PURPOSE_IS_ORIGIN	src/or/or.h	/^#define CIRCUIT_PURPOSE_IS_ORIGIN(/;"	d
CIRCUIT_PURPOSE_MAX_	src/or/or.h	/^#define CIRCUIT_PURPOSE_MAX_ /;"	d
CIRCUIT_PURPOSE_MIN_	src/or/or.h	/^#define CIRCUIT_PURPOSE_MIN_ /;"	d
CIRCUIT_PURPOSE_OR	src/or/or.h	/^#define CIRCUIT_PURPOSE_OR /;"	d
CIRCUIT_PURPOSE_OR_MAX_	src/or/or.h	/^#define CIRCUIT_PURPOSE_OR_MAX_ /;"	d
CIRCUIT_PURPOSE_OR_MIN_	src/or/or.h	/^#define CIRCUIT_PURPOSE_OR_MIN_ /;"	d
CIRCUIT_PURPOSE_PATH_BIAS_TESTING	src/or/or.h	/^#define CIRCUIT_PURPOSE_PATH_BIAS_TESTING /;"	d
CIRCUIT_PURPOSE_REND_ESTABLISHED	src/or/or.h	/^#define CIRCUIT_PURPOSE_REND_ESTABLISHED /;"	d
CIRCUIT_PURPOSE_REND_POINT_WAITING	src/or/or.h	/^#define CIRCUIT_PURPOSE_REND_POINT_WAITING /;"	d
CIRCUIT_PURPOSE_S_CONNECT_REND	src/or/or.h	/^#define CIRCUIT_PURPOSE_S_CONNECT_REND /;"	d
CIRCUIT_PURPOSE_S_ESTABLISH_INTRO	src/or/or.h	/^#define CIRCUIT_PURPOSE_S_ESTABLISH_INTRO /;"	d
CIRCUIT_PURPOSE_S_INTRO	src/or/or.h	/^#define CIRCUIT_PURPOSE_S_INTRO /;"	d
CIRCUIT_PURPOSE_S_REND_JOINED	src/or/or.h	/^#define CIRCUIT_PURPOSE_S_REND_JOINED /;"	d
CIRCUIT_PURPOSE_TESTING	src/or/or.h	/^#define CIRCUIT_PURPOSE_TESTING /;"	d
CIRCUIT_PURPOSE_UNKNOWN	src/or/or.h	/^#define CIRCUIT_PURPOSE_UNKNOWN /;"	d
CIRCUIT_STATE_BUILDING	src/or/or.h	/^#define CIRCUIT_STATE_BUILDING /;"	d
CIRCUIT_STATE_CHAN_WAIT	src/or/or.h	/^#define CIRCUIT_STATE_CHAN_WAIT /;"	d
CIRCUIT_STATE_ONIONSKIN_PENDING	src/or/or.h	/^#define CIRCUIT_STATE_ONIONSKIN_PENDING /;"	d
CIRCUIT_STATE_OPEN	src/or/or.h	/^#define CIRCUIT_STATE_OPEN /;"	d
CIRCUIT_TIMEOUT_BEFORE_RECHECK_IP	src/or/circuitstats.c	/^#define CIRCUIT_TIMEOUT_BEFORE_RECHECK_IP /;"	d	file:
CIRCWINDOW_INCREMENT	src/or/or.h	/^#define CIRCWINDOW_INCREMENT /;"	d
CIRCWINDOW_START	src/or/or.h	/^#define CIRCWINDOW_START /;"	d
CIRCWINDOW_START_MAX	src/or/or.h	/^#define CIRCWINDOW_START_MAX /;"	d
CIRCWINDOW_START_MIN	src/or/or.h	/^#define CIRCWINDOW_START_MIN /;"	d
CIRC_ATTEMPT_NOTICE_INTERVAL	src/or/circpathbias.c	/^#define CIRC_ATTEMPT_NOTICE_INTERVAL /;"	d	file:
CIRC_EVENT_BUILT	src/or/or.h	/^  CIRC_EVENT_BUILT    = 1,$/;"	e	enum:circuit_status_event_t
CIRC_EVENT_CLOSED	src/or/or.h	/^  CIRC_EVENT_CLOSED   = 4,$/;"	e	enum:circuit_status_event_t
CIRC_EVENT_EXTENDED	src/or/or.h	/^  CIRC_EVENT_EXTENDED = 2,$/;"	e	enum:circuit_status_event_t
CIRC_EVENT_FAILED	src/or/or.h	/^  CIRC_EVENT_FAILED   = 3,$/;"	e	enum:circuit_status_event_t
CIRC_EVENT_LAUNCHED	src/or/or.h	/^  CIRC_EVENT_LAUNCHED = 0,$/;"	e	enum:circuit_status_event_t
CIRC_ID_TYPE_HIGHER	src/or/or.h	/^  CIRC_ID_TYPE_HIGHER=1, \/**< Pick from 1<<15..1<<16-1. *\/$/;"	e	enum:__anon36
CIRC_ID_TYPE_LOWER	src/or/or.h	/^  CIRC_ID_TYPE_LOWER=0, \/**< Pick from 0..1<<15-1. *\/$/;"	e	enum:__anon36
CIRC_ID_TYPE_NEITHER	src/or/or.h	/^  CIRC_ID_TYPE_NEITHER=2$/;"	e	enum:__anon36
CIRC_MINOR_EVENT_CANNIBALIZED	src/or/or.h	/^  CIRC_MINOR_EVENT_CANNIBALIZED,$/;"	e	enum:circuit_status_minor_event_t
CIRC_MINOR_EVENT_PURPOSE_CHANGED	src/or/or.h	/^  CIRC_MINOR_EVENT_PURPOSE_CHANGED,$/;"	e	enum:circuit_status_minor_event_t
CLAMP	src/common/util.h	/^#define CLAMP(/;"	d
CLEAN_CACHES_INTERVAL	src/or/main.c	/^#define CLEAN_CACHES_INTERVAL /;"	d	file:
CLEAR_ADDRS	src/test/test_cell_formats.c	/^#define CLEAR_ADDRS(/;"	d	file:
CLEAR_ADDRS	src/test/test_cell_formats.c	/^#undef CLEAR_ADDRS$/;"	d	file:
CLEAR_CELL	src/test/test_cell_formats.c	/^#define CLEAR_CELL(/;"	d	file:
CLEAR_CELL	src/test/test_cell_formats.c	/^#undef CLEAR_CELL$/;"	d	file:
CLIENT_CIPHER_LIST	src/common/tortls.c	/^static const char CLIENT_CIPHER_LIST[] =$/;"	v	file:
CLIENT_IDLE_TIME_FOR_PRIORITY	src/or/connection.c	/^#define CLIENT_IDLE_TIME_FOR_PRIORITY /;"	d	file:
CL_PORT_ALLOW_EXTRA_LISTENADDR	src/or/config.c	/^#define CL_PORT_ALLOW_EXTRA_LISTENADDR /;"	d	file:
CL_PORT_DFLT_GROUP_WRITABLE	src/or/config.c	/^#define CL_PORT_DFLT_GROUP_WRITABLE /;"	d	file:
CL_PORT_FORBID_NONLOCAL	src/or/config.c	/^#define CL_PORT_FORBID_NONLOCAL /;"	d	file:
CL_PORT_IS_UNIXSOCKET	src/or/config.c	/^#define CL_PORT_IS_UNIXSOCKET /;"	d	file:
CL_PORT_NO_STREAM_OPTIONS	src/or/config.c	/^#define CL_PORT_NO_STREAM_OPTIONS /;"	d	file:
CL_PORT_SERVER_OPTIONS	src/or/config.c	/^#define CL_PORT_SERVER_OPTIONS /;"	d	file:
CL_PORT_TAKES_HOSTNAMES	src/or/config.c	/^#define CL_PORT_TAKES_HOSTNAMES /;"	d	file:
CL_PORT_WARN_NONLOCAL	src/or/config.c	/^#define CL_PORT_WARN_NONLOCAL /;"	d	file:
CMDLINE_ONLY_OPTIONS	src/or/config.c	/^} CMDLINE_ONLY_OPTIONS[] = {$/;"	v	typeref:struct:__anon7	file:
CMD_DUMP_CONFIG	src/or/or.h	/^    CMD_VERIFY_CONFIG, CMD_RUN_UNITTESTS, CMD_DUMP_CONFIG,$/;"	e	enum:__anon55::__anon56
CMD_HASH_PASSWORD	src/or/or.h	/^    CMD_RUN_TOR=0, CMD_LIST_FINGERPRINT, CMD_HASH_PASSWORD,$/;"	e	enum:__anon55::__anon56
CMD_KEYGEN	src/or/or.h	/^    CMD_KEYGEN$/;"	e	enum:__anon55::__anon56
CMD_LIST_FINGERPRINT	src/or/or.h	/^    CMD_RUN_TOR=0, CMD_LIST_FINGERPRINT, CMD_HASH_PASSWORD,$/;"	e	enum:__anon55::__anon56
CMD_RUN_TOR	src/or/or.h	/^    CMD_RUN_TOR=0, CMD_LIST_FINGERPRINT, CMD_HASH_PASSWORD,$/;"	e	enum:__anon55::__anon56
CMD_RUN_UNITTESTS	src/or/or.h	/^    CMD_VERIFY_CONFIG, CMD_RUN_UNITTESTS, CMD_DUMP_CONFIG,$/;"	e	enum:__anon55::__anon56
CMD_VERIFY_CONFIG	src/or/or.h	/^    CMD_VERIFY_CONFIG, CMD_RUN_UNITTESTS, CMD_DUMP_CONFIG,$/;"	e	enum:__anon55::__anon56
CMP_EXACT	src/common/address.h	/^  CMP_EXACT,$/;"	e	enum:__anon2
CMP_SEMANTIC	src/common/address.h	/^  CMP_SEMANTIC,$/;"	e	enum:__anon2
COMPAT_LIBEVENT_PRIVATE	src/common/compat_libevent.c	/^#define COMPAT_LIBEVENT_PRIVATE$/;"	d	file:
COMPAT_LIBEVENT_PRIVATE	src/test/test_compat_libevent.c	/^#define COMPAT_LIBEVENT_PRIVATE$/;"	d	file:
COMPAT_PRIVATE	src/common/compat.c	/^#define COMPAT_PRIVATE$/;"	d	file:
COMPAT_PRIVATE	src/test/test_util.c	/^#define COMPAT_PRIVATE$/;"	d	file:
COMPILER_CLANG	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define COMPILER_CLANG /;"	d
COMPILER_GCC	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^		#define COMPILER_GCC /;"	d
COMPILER_INTEL	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define COMPILER_INTEL$/;"	d
COMPILER_MSVC	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define COMPILER_MSVC$/;"	d
COMPILER_PATHCC	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define COMPILER_PATHCC$/;"	d
COMPLAIN	src/or/config.c	/^#define COMPLAIN(/;"	d	file:
COMPLAIN	src/or/config.c	/^#undef COMPLAIN$/;"	d	file:
CONCAT_ARGS	src/or/routerparse.c	/^#define CONCAT_ARGS /;"	d	file:
CONDITIONAL_CONSENSUS_FPR_LEN	src/or/directory.c	/^#define CONDITIONAL_CONSENSUS_FPR_LEN /;"	d	file:
CONFIG_CHECK	src/or/confparse.h	/^#define CONFIG_CHECK(/;"	d
CONFIG_LINE_APPEND	src/or/or.h	/^#define CONFIG_LINE_APPEND /;"	d
CONFIG_LINE_CLEAR	src/or/or.h	/^#define CONFIG_LINE_CLEAR /;"	d
CONFIG_LINE_NORMAL	src/or/or.h	/^#define CONFIG_LINE_NORMAL /;"	d
CONFIG_PRIVATE	src/or/config.c	/^#define CONFIG_PRIVATE$/;"	d	file:
CONFIG_PRIVATE	src/test/test_config.c	/^#define CONFIG_PRIVATE$/;"	d	file:
CONFIG_PRIVATE	src/test/test_options.c	/^#define CONFIG_PRIVATE$/;"	d	file:
CONFIG_TEST	src/test/test_config.c	/^#define CONFIG_TEST(/;"	d	file:
CONFIG_TYPE_AUTOBOOL	src/or/confparse.h	/^  CONFIG_TYPE_AUTOBOOL,     \/**< A boolean+auto value, expressed 0 for false,$/;"	e	enum:config_type_t
CONFIG_TYPE_BOOL	src/or/confparse.h	/^  CONFIG_TYPE_BOOL,         \/**< A boolean value, expressed as 0 or 1. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_CSV	src/or/confparse.h	/^  CONFIG_TYPE_CSV,          \/**< A list of strings, separated by commas and$/;"	e	enum:config_type_t
CONFIG_TYPE_CSV_INTERVAL	src/or/confparse.h	/^  CONFIG_TYPE_CSV_INTERVAL, \/**< A list of strings, separated by commas and$/;"	e	enum:config_type_t
CONFIG_TYPE_DOUBLE	src/or/confparse.h	/^  CONFIG_TYPE_DOUBLE,       \/**< A floating-point value *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_FILENAME	src/or/confparse.h	/^  CONFIG_TYPE_FILENAME,     \/**< A filename: some prefixes get expanded. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_INT	src/or/confparse.h	/^  CONFIG_TYPE_INT,          \/**< Any integer. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_INTERVAL	src/or/confparse.h	/^  CONFIG_TYPE_INTERVAL,     \/**< A number of seconds, with optional units*\/$/;"	e	enum:config_type_t
CONFIG_TYPE_ISOTIME	src/or/confparse.h	/^  CONFIG_TYPE_ISOTIME,      \/**< An ISO-formatted time relative to UTC. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_LINELIST	src/or/confparse.h	/^  CONFIG_TYPE_LINELIST,     \/**< Uninterpreted config lines *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_LINELIST_S	src/or/confparse.h	/^  CONFIG_TYPE_LINELIST_S,   \/**< Uninterpreted, context-sensitive config lines,$/;"	e	enum:config_type_t
CONFIG_TYPE_LINELIST_V	src/or/confparse.h	/^  CONFIG_TYPE_LINELIST_V,   \/**< Catch-all "virtual" option to summarize$/;"	e	enum:config_type_t
CONFIG_TYPE_MEMUNIT	src/or/confparse.h	/^  CONFIG_TYPE_MEMUNIT,      \/**< A number of bytes, with optional units*\/$/;"	e	enum:config_type_t
CONFIG_TYPE_MSEC_INTERVAL	src/or/confparse.h	/^  CONFIG_TYPE_MSEC_INTERVAL,\/**< A number of milliseconds, with optional$/;"	e	enum:config_type_t
CONFIG_TYPE_OBSOLETE	src/or/confparse.h	/^  CONFIG_TYPE_OBSOLETE,     \/**< Obsolete (ignored) option. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_PORT	src/or/confparse.h	/^  CONFIG_TYPE_PORT,         \/**< A port from 1...65535, 0 for "not set", or$/;"	e	enum:config_type_t
CONFIG_TYPE_ROUTERSET	src/or/confparse.h	/^  CONFIG_TYPE_ROUTERSET,    \/**< A list of router names, addrs, and fps,$/;"	e	enum:config_type_t
CONFIG_TYPE_STRING	src/or/confparse.h	/^  CONFIG_TYPE_STRING = 0,   \/**< An arbitrary string. *\/$/;"	e	enum:config_type_t
CONFIG_TYPE_UINT	src/or/confparse.h	/^  CONFIG_TYPE_UINT,         \/**< A non-negative integer less than MAX_INT *\/$/;"	e	enum:config_type_t
CONNECTION_EDGE_PRIVATE	src/or/connection_edge.c	/^#define CONNECTION_EDGE_PRIVATE$/;"	d	file:
CONNECTION_EDGE_PRIVATE	src/test/test_cell_formats.c	/^#define CONNECTION_EDGE_PRIVATE$/;"	d	file:
CONNECTION_EDGE_PRIVATE	src/test/test_connection_edge_ap_handshake.c	/^#define CONNECTION_EDGE_PRIVATE$/;"	d	file:
CONNECTION_EDGE_PRIVATE	src/test/test_entryconn.c	/^#define CONNECTION_EDGE_PRIVATE$/;"	d	file:
CONNECTION_PRIVATE	src/or/connection.c	/^#define CONNECTION_PRIVATE$/;"	d	file:
CONNECTION_PRIVATE	src/test/test_connection_edge_ap_handshake.c	/^#define CONNECTION_PRIVATE$/;"	d	file:
CONNECTION_PRIVATE	src/test/test_controller_events.c	/^#define CONNECTION_PRIVATE$/;"	d	file:
CONNECTION_PRIVATE	src/test/test_entryconn.c	/^#define CONNECTION_PRIVATE$/;"	d	file:
CONNECTION_PRIVATE	src/test/test_extorport.c	/^#define CONNECTION_PRIVATE$/;"	d	file:
CONNECTION_PRIVATE	src/test/test_link_handshake.c	/^#define CONNECTION_PRIVATE$/;"	d	file:
CONNECTION_PRIVATE	src/test/test_oom.c	/^#define CONNECTION_PRIVATE$/;"	d	file:
CONN_EDGE_AP_HANDSHAKE	src/test/test_connection_edge_ap_handshake.c	/^#define CONN_EDGE_AP_HANDSHAKE(/;"	d	file:
CONN_IS_CLOSED	src/or/connection.c	/^#define CONN_IS_CLOSED(/;"	d	file:
CONN_IS_EDGE	src/or/or.h	/^#define CONN_IS_EDGE(/;"	d
CONN_LOG_PROTECT	src/or/or.h	/^#define CONN_LOG_PROTECT(/;"	d
CONN_TYPE_AP	src/or/or.h	/^#define CONN_TYPE_AP /;"	d
CONN_TYPE_AP_DNS_LISTENER	src/or/or.h	/^#define CONN_TYPE_AP_DNS_LISTENER /;"	d
CONN_TYPE_AP_LISTENER	src/or/or.h	/^#define CONN_TYPE_AP_LISTENER /;"	d
CONN_TYPE_AP_NATD_LISTENER	src/or/or.h	/^#define CONN_TYPE_AP_NATD_LISTENER /;"	d
CONN_TYPE_AP_TRANS_LISTENER	src/or/or.h	/^#define CONN_TYPE_AP_TRANS_LISTENER /;"	d
CONN_TYPE_CONTROL	src/or/or.h	/^#define CONN_TYPE_CONTROL /;"	d
CONN_TYPE_CONTROL_LISTENER	src/or/or.h	/^#define CONN_TYPE_CONTROL_LISTENER /;"	d
CONN_TYPE_DIR	src/or/or.h	/^#define CONN_TYPE_DIR /;"	d
CONN_TYPE_DIR_LISTENER	src/or/or.h	/^#define CONN_TYPE_DIR_LISTENER /;"	d
CONN_TYPE_EXIT	src/or/or.h	/^#define CONN_TYPE_EXIT /;"	d
CONN_TYPE_EXT_OR	src/or/or.h	/^#define CONN_TYPE_EXT_OR /;"	d
CONN_TYPE_EXT_OR_LISTENER	src/or/or.h	/^#define CONN_TYPE_EXT_OR_LISTENER /;"	d
CONN_TYPE_MAX_	src/or/or.h	/^#define CONN_TYPE_MAX_ /;"	d
CONN_TYPE_MIN_	src/or/or.h	/^#define CONN_TYPE_MIN_ /;"	d
CONN_TYPE_OR	src/or/or.h	/^#define CONN_TYPE_OR /;"	d
CONN_TYPE_OR_LISTENER	src/or/or.h	/^#define CONN_TYPE_OR_LISTENER /;"	d
CONSENSUS_FLAVORED_PREFIX	src/or/directory.c	/^      #define CONSENSUS_FLAVORED_PREFIX /;"	d	file:
CONSENSUS_MIN_SECONDS_BEFORE_CACHING	src/or/networkstatus.c	/^#define CONSENSUS_MIN_SECONDS_BEFORE_CACHING /;"	d	file:
CONSENSUS_PATH_EXIT	src/or/nodelist.h	/^  CONSENSUS_PATH_EXIT = 1$/;"	e	enum:__anon26
CONSENSUS_PATH_INTERNAL	src/or/nodelist.h	/^  CONSENSUS_PATH_INTERNAL = 0,$/;"	e	enum:__anon26
CONSENSUS_PATH_UNKNOWN	src/or/nodelist.h	/^  CONSENSUS_PATH_UNKNOWN = -1,$/;"	e	enum:__anon26
CONSENSUS_URL_PREFIX	src/or/directory.c	/^      #define CONSENSUS_URL_PREFIX /;"	d	file:
CONST_TO_ORIGIN_CIRCUIT	src/or/or.h	/^static INLINE const origin_circuit_t *CONST_TO_ORIGIN_CIRCUIT($/;"	f
CONST_TO_OR_CIRCUIT	src/or/or.h	/^static INLINE const or_circuit_t *CONST_TO_OR_CIRCUIT(const circuit_t *x)$/;"	f
CONTAINER	src/test/test_containers.c	/^#define CONTAINER(/;"	d	file:
CONTAINER_LEGACY	src/test/test_containers.c	/^#define CONTAINER_LEGACY(/;"	d	file:
CONTAINS	src/test/test_extorport.c	/^#define CONTAINS(/;"	d	file:
CONTAINS	src/test/test_extorport.c	/^#undef CONTAINS$/;"	d	file:
CONTENT_LENGTH	src/or/buffers.c	/^#define CONTENT_LENGTH /;"	d	file:
CONTROL_CONNECTION_MAGIC	src/or/or.h	/^#define CONTROL_CONNECTION_MAGIC /;"	d
CONTROL_CONN_STATE_MAX_	src/or/or.h	/^#define CONTROL_CONN_STATE_MAX_ /;"	d
CONTROL_CONN_STATE_MIN_	src/or/or.h	/^#define CONTROL_CONN_STATE_MIN_ /;"	d
CONTROL_CONN_STATE_NEEDAUTH	src/or/or.h	/^#define CONTROL_CONN_STATE_NEEDAUTH /;"	d
CONTROL_CONN_STATE_OPEN	src/or/or.h	/^#define CONTROL_CONN_STATE_OPEN /;"	d
CONTROL_EVENT_STATUS_BODY	src/or/control.c	/^#define CONTROL_EVENT_STATUS_BODY(/;"	d	file:
CONTROL_PRIVATE	src/or/control.c	/^#define CONTROL_PRIVATE$/;"	d	file:
CONTROL_PRIVATE	src/test/test_controller.c	/^#define CONTROL_PRIVATE$/;"	d	file:
CONTROL_PRIVATE	src/test/test_controller_events.c	/^#define CONTROL_PRIVATE$/;"	d	file:
CONTROL_PRIVATE	src/test/test_hs.c	/^#define CONTROL_PRIVATE$/;"	d	file:
CONTROL_PRIVATE	src/test/test_pt.c	/^#define CONTROL_PRIVATE$/;"	d	file:
CONTROL_PRIVATE	src/test/test_util.c	/^#define CONTROL_PRIVATE$/;"	d	file:
COUNTER	src/common/aes.c	/^#define COUNTER(/;"	d	file:
COUNT_DISTINCT_DIGESTS	src/or/routerparse.c	/^#undef COUNT_DISTINCT_DIGESTS$/;"	d	file:
CPATH_KEY_MATERIAL_LEN	src/or/or.h	/^#define CPATH_KEY_MATERIAL_LEN /;"	d
CPATH_STATE_AWAITING_KEYS	src/or/or.h	/^#define CPATH_STATE_AWAITING_KEYS /;"	d
CPATH_STATE_CLOSED	src/or/or.h	/^#define CPATH_STATE_CLOSED /;"	d
CPATH_STATE_OPEN	src/or/or.h	/^#define CPATH_STATE_OPEN /;"	d
CPD_CHECK	src/common/util.h	/^#define CPD_CHECK /;"	d
CPD_CHECK_MODE_ONLY	src/common/util.h	/^#define CPD_CHECK_MODE_ONLY /;"	d
CPD_CREATE	src/common/util.h	/^#define CPD_CREATE /;"	d
CPD_GROUP_OK	src/common/util.h	/^#define CPD_GROUP_OK /;"	d
CPD_GROUP_READ	src/common/util.h	/^#define CPD_GROUP_READ /;"	d
CPD_NONE	src/common/util.h	/^#define CPD_NONE /;"	d
CPUWORKER_REPLY_MAGIC	src/or/cpuworker.c	/^#define CPUWORKER_REPLY_MAGIC /;"	d	file:
CPUWORKER_REQUEST_MAGIC	src/or/cpuworker.c	/^#define CPUWORKER_REQUEST_MAGIC /;"	d	file:
CPU_64BITS	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define CPU_64BITS$/;"	d
CPU_ALPHA	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define CPU_ALPHA$/;"	d
CPU_HPPA	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define CPU_HPPA$/;"	d
CPU_IA64	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define CPU_IA64$/;"	d
CPU_POWER7	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^		#define CPU_POWER7$/;"	d
CPU_PPC	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define CPU_PPC$/;"	d
CPU_PPC32	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^		#define CPU_PPC32$/;"	d
CPU_PPC64	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^		#define CPU_PPC64$/;"	d
CPU_SPARC	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define CPU_SPARC$/;"	d
CPU_SPARC64	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^		#define CPU_SPARC64$/;"	d
CPU_X86	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define CPU_X86 /;"	d
CPU_X86_64	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define CPU_X86_64$/;"	d
CREATED_FAST_LEN	src/or/onion_fast.h	/^#define CREATED_FAST_LEN /;"	d
CREATE_FAST_LEN	src/or/onion_fast.h	/^#define CREATE_FAST_LEN /;"	d
CREDENTIAL_LOG_LEVEL	src/common/compat.c	/^#define CREDENTIAL_LOG_LEVEL /;"	d	file:
CRN_ALLOW_INVALID	src/or/or.h	/^  CRN_ALLOW_INVALID = 1<<3,$/;"	e	enum:__anon73
CRN_NEED_CAPACITY	src/or/or.h	/^  CRN_NEED_CAPACITY = 1<<1,$/;"	e	enum:__anon73
CRN_NEED_DESC	src/or/or.h	/^  CRN_NEED_DESC = 1<<6$/;"	e	enum:__anon73
CRN_NEED_GUARD	src/or/or.h	/^  CRN_NEED_GUARD = 1<<2,$/;"	e	enum:__anon73
CRN_NEED_UPTIME	src/or/or.h	/^  CRN_NEED_UPTIME = 1<<0,$/;"	e	enum:__anon73
CRN_WEIGHT_AS_EXIT	src/or/or.h	/^  CRN_WEIGHT_AS_EXIT = 1<<5,$/;"	e	enum:__anon73
CRYPTO_BYTES	src/ext/ed25519/ref10/api.h	/^#define CRYPTO_BYTES /;"	d
CRYPTO_CURVE25519_PRIVATE	src/common/crypto_curve25519.c	/^#define CRYPTO_CURVE25519_PRIVATE$/;"	d	file:
CRYPTO_CURVE25519_PRIVATE	src/test/test_crypto.c	/^#define CRYPTO_CURVE25519_PRIVATE$/;"	d	file:
CRYPTO_DETERMINISTIC	src/ext/ed25519/ref10/api.h	/^#define CRYPTO_DETERMINISTIC /;"	d
CRYPTO_INT32_H	src/ext/ed25519/ref10/crypto_int32.h	/^#define CRYPTO_INT32_H$/;"	d
CRYPTO_INT64_H	src/ext/ed25519/ref10/crypto_int64.h	/^#define CRYPTO_INT64_H$/;"	d
CRYPTO_LEGACY	src/test/test_crypto.c	/^#define CRYPTO_LEGACY(/;"	d	file:
CRYPTO_LEGACY	src/test/test_crypto_slow.c	/^#define CRYPTO_LEGACY(/;"	d	file:
CRYPTO_PRIVATE	src/common/crypto.c	/^#define CRYPTO_PRIVATE$/;"	d	file:
CRYPTO_PUBLICKEYBYTES	src/ext/ed25519/ref10/api.h	/^#define CRYPTO_PUBLICKEYBYTES /;"	d
CRYPTO_PWBOX_H_INCLUDED_	src/common/crypto_pwbox.h	/^#define CRYPTO_PWBOX_H_INCLUDED_$/;"	d
CRYPTO_S2K_PRIVATE	src/common/crypto_s2k.c	/^#define CRYPTO_S2K_PRIVATE$/;"	d	file:
CRYPTO_S2K_PRIVATE	src/test/test_crypto_slow.c	/^#define CRYPTO_S2K_PRIVATE$/;"	d	file:
CRYPTO_SECRETKEYBYTES	src/ext/ed25519/ref10/api.h	/^#define CRYPTO_SECRETKEYBYTES /;"	d
CRYPTO_dynlock_value	src/common/crypto.c	/^struct CRYPTO_dynlock_value {$/;"	s	file:
CRYPT_PATH_MAGIC	src/or/or.h	/^#define CRYPT_PATH_MAGIC /;"	d
CST_CHECK_AUTHORITY	src/or/routerparse.c	/^#define CST_CHECK_AUTHORITY /;"	d	file:
CST_NO_CHECK_OBJTYPE	src/or/routerparse.c	/^#define CST_NO_CHECK_OBJTYPE /;"	d	file:
CURVE25519_BASE64_PADDED_LEN	src/common/crypto_curve25519.h	/^#define CURVE25519_BASE64_PADDED_LEN /;"	d
CURVE25519_OUTPUT_LEN	src/common/crypto_curve25519.h	/^#define CURVE25519_OUTPUT_LEN /;"	d
CURVE25519_PUBKEY_LEN	src/common/crypto_curve25519.h	/^#define CURVE25519_PUBKEY_LEN /;"	d
CURVE25519_SECKEY_LEN	src/common/crypto_curve25519.h	/^#define CURVE25519_SECKEY_LEN /;"	d
C_CLIENT_KEY	src/or/routerparse.c	/^  C_CLIENT_KEY,$/;"	e	enum:__anon96	file:
C_CLIENT_NAME	src/or/routerparse.c	/^  C_CLIENT_NAME,$/;"	e	enum:__anon96	file:
C_DESCRIPTOR_COOKIE	src/or/routerparse.c	/^  C_DESCRIPTOR_COOKIE,$/;"	e	enum:__anon96	file:
CellStatistics	src/or/or.h	/^  int CellStatistics;$/;"	m	struct:__anon55
Ch	src/ext/ed25519/donna/ed25519-hash.h	/^#define Ch(/;"	d
CircuitBuildAbandonedCount	src/or/or.h	/^  unsigned int CircuitBuildAbandonedCount;$/;"	m	struct:__anon61
CircuitBuildTimeout	src/or/or.h	/^  int CircuitBuildTimeout; \/**< Cull non-open circuits that were born at$/;"	m	struct:__anon55
CircuitIdleTimeout	src/or/or.h	/^  int CircuitIdleTimeout; \/**< Cull open clean circuits that were born$/;"	m	struct:__anon55
CircuitPriorityHalflife	src/or/or.h	/^  double CircuitPriorityHalflife;$/;"	m	struct:__anon55
CircuitStreamTimeout	src/or/or.h	/^  int CircuitStreamTimeout; \/**< If non-zero, detach streams from circuits$/;"	m	struct:__anon55
ClientDNSRejectInternalAddresses	src/or/or.h	/^  int ClientDNSRejectInternalAddresses;$/;"	m	struct:__anon55
ClientOnly	src/or/or.h	/^  int ClientOnly; \/**< Boolean: should we never evolve into a server role? *\/$/;"	m	struct:__anon55
ClientPreferIPv6ORPort	src/or/or.h	/^  int ClientPreferIPv6ORPort;$/;"	m	struct:__anon55
ClientRejectInternalAddresses	src/or/or.h	/^  int ClientRejectInternalAddresses;$/;"	m	struct:__anon55
ClientTransportPlugin	src/or/or.h	/^  config_line_t *ClientTransportPlugin; \/**< List of client$/;"	m	struct:__anon55
ClientUseIPv6	src/or/or.h	/^  int ClientUseIPv6;$/;"	m	struct:__anon55
CloseHSClientCircuitsImmediatelyOnTimeout	src/or/or.h	/^  int CloseHSClientCircuitsImmediatelyOnTimeout;$/;"	m	struct:__anon55
CloseHSServiceRendCircuitsImmediatelyOnTimeout	src/or/or.h	/^  int CloseHSServiceRendCircuitsImmediatelyOnTimeout;$/;"	m	struct:__anon55
ConnDirectionStatistics	src/or/or.h	/^  int ConnDirectionStatistics;$/;"	m	struct:__anon55
ConnLimit	src/or/or.h	/^  int ConnLimit; \/**< Demanded minimum number of simultaneous connections. *\/$/;"	m	struct:__anon55
ConnLimit_	src/or/or.h	/^  int ConnLimit_; \/**< Maximum allowed number of simultaneous connections. *\/$/;"	m	struct:__anon55
ConsensusParams	src/or/or.h	/^  char *ConsensusParams;$/;"	m	struct:__anon55
ConstrainedSockSize	src/or/or.h	/^  uint64_t ConstrainedSockSize; \/**< Size of constrained buffers. *\/$/;"	m	struct:__anon55
ConstrainedSockets	src/or/or.h	/^  int ConstrainedSockets; \/**< Shrink xmit and recv socket buffers. *\/$/;"	m	struct:__anon55
ContactInfo	src/or/or.h	/^  char *ContactInfo; \/**< Contact info to be published in the directory. *\/$/;"	m	struct:__anon55
ControlListenAddress	src/or/or.h	/^  config_line_t *ControlListenAddress;$/;"	m	struct:__anon55
ControlPortFileGroupReadable	src/or/or.h	/^  int ControlPortFileGroupReadable;$/;"	m	struct:__anon55
ControlPortWriteToFile	src/or/or.h	/^  char *ControlPortWriteToFile;$/;"	m	struct:__anon55
ControlPort_lines	src/or/or.h	/^  config_line_t *ControlPort_lines; \/**< Ports to listen on for control$/;"	m	struct:__anon55
ControlPort_set	src/or/or.h	/^  unsigned int ControlPort_set : 1;$/;"	m	struct:__anon55
ControlSocket	src/or/or.h	/^  config_line_t *ControlSocket; \/**< List of Unix Domain Sockets to listen on$/;"	m	struct:__anon55
ControlSocketsGroupWritable	src/or/or.h	/^  int ControlSocketsGroupWritable; \/**< Boolean: Are control sockets g+rw? *\/$/;"	m	struct:__anon55
CookieAuthFile	src/or/or.h	/^  char *CookieAuthFile; \/**< Filesystem location of a ControlPort$/;"	m	struct:__anon55
CookieAuthFileGroupReadable	src/or/or.h	/^  int CookieAuthFileGroupReadable; \/**< Boolean: Is the CookieAuthFile g+r? *\/$/;"	m	struct:__anon55
CookieAuthentication	src/or/or.h	/^  int CookieAuthentication; \/**< Boolean: do we enable cookie-based auth for$/;"	m	struct:__anon55
CountPrivateBandwidth	src/or/or.h	/^  int CountPrivateBandwidth;$/;"	m	struct:__anon55
DBG_alloc	src/or/buffers.h	/^  size_t DBG_alloc;$/;"	m	struct:chunk_t
DBL_TO_U64	src/common/compat.h	/^#define DBL_TO_U64(/;"	d
DBUF_SIZE	src/test/test_util.c	/^#define DBUF_SIZE /;"	d	file:
DBUF_SIZE	src/test/test_util.c	/^#undef DBUF_SIZE$/;"	d	file:
DEAD_CERT_LIFETIME	src/or/routerlist.c	/^#define DEAD_CERT_LIFETIME /;"	d	file:
DEAD_CERT_LIFETIME	src/or/routerlist.c	/^#undef DEAD_CERT_LIFETIME$/;"	d	file:
DEAD_CIRCUIT_MAGIC	src/or/or.h	/^#define DEAD_CIRCUIT_MAGIC /;"	d
DEBUGGING_CLOSE	src/common/sandbox.c	/^#define DEBUGGING_CLOSE$/;"	d	file:
DEBUG_AREA_ALLOC	src/or/routerparse.c	/^#undef DEBUG_AREA_ALLOC$/;"	d	file:
DEBUG_CHUNK_ALLOC	src/or/buffers.h	/^#define DEBUG_CHUNK_ALLOC$/;"	d
DEBUG_ROUTER_DUMP_ROUTER_TO_STRING	src/or/router.c	/^#define DEBUG_ROUTER_DUMP_ROUTER_TO_STRING$/;"	d	file:
DEBUG_SOCKET_COUNTING	src/common/compat.c	/^#undef DEBUG_SOCKET_COUNTING$/;"	d	file:
DECLARE_CTYPE_FN	src/common/compat.h	/^#define DECLARE_CTYPE_FN(/;"	d
DECLARE_MAP_FNS	src/common/container.h	/^#define DECLARE_MAP_FNS(/;"	d
DECLARE_MAP_FNS	src/common/container.h	/^#undef DECLARE_MAP_FNS$/;"	d
DECLARE_MAP_FNS	src/or/fp_pair.h	/^#undef DECLARE_MAP_FNS$/;"	d
DECLARE_TYPED_DIGESTMAP_FNS	src/common/container.h	/^#define DECLARE_TYPED_DIGESTMAP_FNS(/;"	d
DECODE	src/test/test_crypto.c	/^#define DECODE(/;"	d	file:
DECODE	src/test/test_crypto.c	/^#undef DECODE$/;"	d	file:
DECRYPT_ONLY	src/test/test_introduce.c	/^#define DECRYPT_ONLY /;"	d	file:
DEC_ONIONSKIN	src/or/or.h	/^  ENC_ONIONSKIN, DEC_ONIONSKIN,$/;"	e	enum:__anon72
DEFAULT_CLIENT_NICKNAME	src/or/or.h	/^#define DEFAULT_CLIENT_NICKNAME /;"	d
DEFAULT_DNS_TTL	src/or/or.h	/^#define DEFAULT_DNS_TTL /;"	d
DEFAULT_EXIT_POLICY	src/or/policies.c	/^#define DEFAULT_EXIT_POLICY /;"	d	file:
DEFAULT_IF_MODIFIED_SINCE_DELAY	src/or/directory.c	/^#define DEFAULT_IF_MODIFIED_SINCE_DELAY /;"	d	file:
DEFAULT_LIFETIME	src/tools/tor-gencert.c	/^#define DEFAULT_LIFETIME /;"	d	file:
DEFAULT_MAX_BELIEVABLE_BANDWIDTH	src/or/routerlist.c	/^#define DEFAULT_MAX_BELIEVABLE_BANDWIDTH /;"	d	file:
DEFAULT_MAX_FD	src/common/util.c	/^#define DEFAULT_MAX_FD /;"	d	file:
DEFAULT_MAX_UNMEASURED_BW_KB	src/or/dirvote.h	/^#define DEFAULT_MAX_UNMEASURED_BW_KB /;"	d
DEFAULT_NUM_NTORS_PER_TAP	src/or/onion.c	/^#define DEFAULT_NUM_NTORS_PER_TAP /;"	d	file:
DEFAULT_ROUTE_LEN	src/or/or.h	/^#define DEFAULT_ROUTE_LEN /;"	d
DEFINE_MAP_STRUCTS	src/common/container.c	/^#define DEFINE_MAP_STRUCTS(/;"	d	file:
DELAY_WHILE_FETCHING_CERTS	src/or/networkstatus.c	/^#define DELAY_WHILE_FETCHING_CERTS /;"	d	file:
DESCRIPTOR_FAILURE_RESET_INTERVAL	src/or/main.c	/^#define DESCRIPTOR_FAILURE_RESET_INTERVAL /;"	d	file:
DFLT_GUARD_LIFETIME	src/or/entrynodes.c	/^#define DFLT_GUARD_LIFETIME /;"	d	file:
DFLT_PATH_BIAS_DROP_GUARDS	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_DROP_GUARDS /;"	d	file:
DFLT_PATH_BIAS_EXTREME_PCT	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_EXTREME_PCT /;"	d	file:
DFLT_PATH_BIAS_EXTREME_USE_PCT	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_EXTREME_USE_PCT /;"	d	file:
DFLT_PATH_BIAS_MIN_CIRC	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_MIN_CIRC /;"	d	file:
DFLT_PATH_BIAS_MIN_USE	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_MIN_USE /;"	d	file:
DFLT_PATH_BIAS_NOTICE_PCT	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_NOTICE_PCT /;"	d	file:
DFLT_PATH_BIAS_NOTICE_USE_PCT	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_NOTICE_USE_PCT /;"	d	file:
DFLT_PATH_BIAS_SCALE_THRESHOLD	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_SCALE_THRESHOLD /;"	d	file:
DFLT_PATH_BIAS_SCALE_USE_THRESHOLD	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_SCALE_USE_THRESHOLD /;"	d	file:
DFLT_PATH_BIAS_WARN_PCT	src/or/circpathbias.c	/^#define DFLT_PATH_BIAS_WARN_PCT /;"	d	file:
DFLT_PCT_USABLE_NEEDED	src/or/nodelist.c	/^#define DFLT_PCT_USABLE_NEEDED /;"	d	file:
DGV_BY_ID	src/or/dirvote.h	/^#define DGV_BY_ID /;"	d
DGV_INCLUDE_PENDING	src/or/dirvote.h	/^#define DGV_INCLUDE_PENDING /;"	d
DGV_INCLUDE_PREVIOUS	src/or/dirvote.h	/^#define DGV_INCLUDE_PREVIOUS /;"	d
DH_BYTES	src/common/crypto.h	/^#define DH_BYTES /;"	d
DH_GENERATOR	src/common/crypto.c	/^#define DH_GENERATOR /;"	d	file:
DH_KEY_LEN	src/or/or.h	/^#define DH_KEY_LEN /;"	d
DH_PRIVATE_KEY_BITS	src/common/crypto.c	/^#define DH_PRIVATE_KEY_BITS /;"	d	file:
DH_TYPE_CIRCUIT	src/common/crypto.h	/^#define DH_TYPE_CIRCUIT /;"	d
DH_TYPE_REND	src/common/crypto.h	/^#define DH_TYPE_REND /;"	d
DH_TYPE_TLS	src/common/crypto.h	/^#define DH_TYPE_TLS /;"	d
DIGEST256MAP_FOREACH	src/common/container.h	/^#define DIGEST256MAP_FOREACH(/;"	d
DIGEST256MAP_FOREACH_END	src/common/container.h	/^#define DIGEST256MAP_FOREACH_END /;"	d
DIGEST256MAP_FOREACH_MODIFY	src/common/container.h	/^#define DIGEST256MAP_FOREACH_MODIFY(/;"	d
DIGEST256_LEN	src/common/crypto.h	/^#define DIGEST256_LEN /;"	d
DIGESTMAP_FOREACH	src/common/container.h	/^#define DIGESTMAP_FOREACH(/;"	d
DIGESTMAP_FOREACH_END	src/common/container.h	/^#define DIGESTMAP_FOREACH_END /;"	d
DIGESTMAP_FOREACH_MODIFY	src/common/container.h	/^#define DIGESTMAP_FOREACH_MODIFY(/;"	d
DIGEST_LEN	src/common/crypto.h	/^#define DIGEST_LEN /;"	d
DIGEST_SHA1	src/common/crypto.h	/^  DIGEST_SHA1 = 0,$/;"	e	enum:__anon22
DIGEST_SHA256	src/common/crypto.h	/^  DIGEST_SHA256 = 1,$/;"	e	enum:__anon22
DIR	src/test/test_dir.c	/^#define DIR(/;"	d	file:
DIRCOLLATE_PRIVATE	src/or/dircollate.c	/^#define DIRCOLLATE_PRIVATE$/;"	d	file:
DIRIND_ANONYMOUS	src/or/directory.h	/^  DIRIND_ANONYMOUS=1,$/;"	e	enum:__anon35
DIRIND_ANON_DIRPORT	src/or/directory.h	/^  DIRIND_ANON_DIRPORT,$/;"	e	enum:__anon35
DIRIND_DIRECT_CONN	src/or/directory.h	/^  DIRIND_DIRECT_CONN,$/;"	e	enum:__anon35
DIRIND_ONEHOP	src/or/directory.h	/^  DIRIND_ONEHOP=0,$/;"	e	enum:__anon35
DIROBJ_MAX_SIG_LEN	src/or/routerparse.h	/^#define DIROBJ_MAX_SIG_LEN /;"	d
DIRPORTFRONTPAGE_CACHE_LIFETIME	src/or/directory.c	/^#define DIRPORTFRONTPAGE_CACHE_LIFETIME /;"	d	file:
DIRREQ_CHANNEL_BUFFER_FLUSHED	src/or/or.h	/^  DIRREQ_CHANNEL_BUFFER_FLUSHED = 4$/;"	e	enum:__anon70
DIRREQ_CIRC_QUEUE_FLUSHED	src/or/or.h	/^  DIRREQ_CIRC_QUEUE_FLUSHED = 3,$/;"	e	enum:__anon70
DIRREQ_DIRECT	src/or/or.h	/^  DIRREQ_DIRECT = 0,$/;"	e	enum:__anon69
DIRREQ_END_CELL_SENT	src/or/or.h	/^  DIRREQ_END_CELL_SENT = 2,$/;"	e	enum:__anon70
DIRREQ_FLUSHING_DIR_CONN_FINISHED	src/or/or.h	/^  DIRREQ_FLUSHING_DIR_CONN_FINISHED = 1,$/;"	e	enum:__anon70
DIRREQ_IS_FOR_NETWORK_STATUS	src/or/or.h	/^  DIRREQ_IS_FOR_NETWORK_STATUS = 0,$/;"	e	enum:__anon70
DIRREQ_TIMEOUT	src/or/geoip.c	/^#define DIRREQ_TIMEOUT /;"	d	file:
DIRREQ_TUNNELED	src/or/or.h	/^  DIRREQ_TUNNELED = 1,$/;"	e	enum:__anon69
DIRSERV_BUFFER_MIN	src/or/dirserv.c	/^#define DIRSERV_BUFFER_MIN /;"	d	file:
DIRSERV_PRIVATE	src/or/dirserv.c	/^#define DIRSERV_PRIVATE$/;"	d	file:
DIRSERV_PRIVATE	src/test/test_dir.c	/^#define DIRSERV_PRIVATE$/;"	d	file:
DIRSERV_PRIVATE	src/test/test_guardfraction.c	/^#define DIRSERV_PRIVATE$/;"	d	file:
DIRVOTE_PRIVATE	src/or/dirvote.c	/^#define DIRVOTE_PRIVATE$/;"	d	file:
DIRVOTE_PRIVATE	src/test/test_dir.c	/^#define DIRVOTE_PRIVATE$/;"	d	file:
DIR_503_TIMEOUT	src/or/routerlist.c	/^#define DIR_503_TIMEOUT /;"	d	file:
DIR_CONNECTION_MAGIC	src/or/or.h	/^#define DIR_CONNECTION_MAGIC /;"	d
DIR_CONN_IS_SERVER	src/or/or.h	/^#define DIR_CONN_IS_SERVER(/;"	d
DIR_CONN_STATE_CLIENT_FINISHED	src/or/or.h	/^#define DIR_CONN_STATE_CLIENT_FINISHED /;"	d
DIR_CONN_STATE_CLIENT_READING	src/or/or.h	/^#define DIR_CONN_STATE_CLIENT_READING /;"	d
DIR_CONN_STATE_CLIENT_SENDING	src/or/or.h	/^#define DIR_CONN_STATE_CLIENT_SENDING /;"	d
DIR_CONN_STATE_CONNECTING	src/or/or.h	/^#define DIR_CONN_STATE_CONNECTING /;"	d
DIR_CONN_STATE_MAX_	src/or/or.h	/^#define DIR_CONN_STATE_MAX_ /;"	d
DIR_CONN_STATE_MIN_	src/or/or.h	/^#define DIR_CONN_STATE_MIN_ /;"	d
DIR_CONN_STATE_SERVER_COMMAND_WAIT	src/or/or.h	/^#define DIR_CONN_STATE_SERVER_COMMAND_WAIT /;"	d
DIR_CONN_STATE_SERVER_WRITING	src/or/or.h	/^#define DIR_CONN_STATE_SERVER_WRITING /;"	d
DIR_HANDLE_CMD	src/test/test_dir_handle_get.c	/^#define DIR_HANDLE_CMD(/;"	d	file:
DIR_LEGACY	src/test/test_dir.c	/^#define DIR_LEGACY(/;"	d	file:
DIR_PURPOSE_FETCH_CERTIFICATE	src/or/or.h	/^#define DIR_PURPOSE_FETCH_CERTIFICATE /;"	d
DIR_PURPOSE_FETCH_CONSENSUS	src/or/or.h	/^#define DIR_PURPOSE_FETCH_CONSENSUS /;"	d
DIR_PURPOSE_FETCH_DETACHED_SIGNATURES	src/or/or.h	/^#define DIR_PURPOSE_FETCH_DETACHED_SIGNATURES /;"	d
DIR_PURPOSE_FETCH_EXTRAINFO	src/or/or.h	/^#define DIR_PURPOSE_FETCH_EXTRAINFO /;"	d
DIR_PURPOSE_FETCH_MICRODESC	src/or/or.h	/^#define DIR_PURPOSE_FETCH_MICRODESC /;"	d
DIR_PURPOSE_FETCH_RENDDESC_V2	src/or/or.h	/^#define DIR_PURPOSE_FETCH_RENDDESC_V2 /;"	d
DIR_PURPOSE_FETCH_SERVERDESC	src/or/or.h	/^#define DIR_PURPOSE_FETCH_SERVERDESC /;"	d
DIR_PURPOSE_FETCH_STATUS_VOTE	src/or/or.h	/^#define DIR_PURPOSE_FETCH_STATUS_VOTE /;"	d
DIR_PURPOSE_HAS_FETCHED_RENDDESC_V2	src/or/or.h	/^#define DIR_PURPOSE_HAS_FETCHED_RENDDESC_V2 /;"	d
DIR_PURPOSE_IS_UPLOAD	src/or/or.h	/^#define DIR_PURPOSE_IS_UPLOAD(/;"	d
DIR_PURPOSE_MAX_	src/or/or.h	/^#define DIR_PURPOSE_MAX_ /;"	d
DIR_PURPOSE_MIN_	src/or/or.h	/^#define DIR_PURPOSE_MIN_ /;"	d
DIR_PURPOSE_SERVER	src/or/or.h	/^#define DIR_PURPOSE_SERVER /;"	d
DIR_PURPOSE_UPLOAD_DIR	src/or/or.h	/^#define DIR_PURPOSE_UPLOAD_DIR /;"	d
DIR_PURPOSE_UPLOAD_RENDDESC_V2	src/or/or.h	/^#define DIR_PURPOSE_UPLOAD_RENDDESC_V2 /;"	d
DIR_PURPOSE_UPLOAD_SIGNATURES	src/or/or.h	/^#define DIR_PURPOSE_UPLOAD_SIGNATURES /;"	d
DIR_PURPOSE_UPLOAD_VOTE	src/or/or.h	/^#define DIR_PURPOSE_UPLOAD_VOTE /;"	d
DIR_REGEN_SLACK_TIME	src/or/dirserv.c	/^#define DIR_REGEN_SLACK_TIME /;"	d	file:
DIR_REQ_GRANULARITY	src/or/geoip.c	/^#define DIR_REQ_GRANULARITY /;"	d	file:
DIR_SPOOL_CACHED_DIR	src/or/or.h	/^    DIR_SPOOL_CACHED_DIR, DIR_SPOOL_NETWORKSTATUS,$/;"	e	enum:__anon41
DIR_SPOOL_EXTRA_BY_DIGEST	src/or/or.h	/^    DIR_SPOOL_EXTRA_BY_DIGEST, DIR_SPOOL_EXTRA_BY_FP,$/;"	e	enum:__anon41
DIR_SPOOL_EXTRA_BY_FP	src/or/or.h	/^    DIR_SPOOL_EXTRA_BY_DIGEST, DIR_SPOOL_EXTRA_BY_FP,$/;"	e	enum:__anon41
DIR_SPOOL_MICRODESC	src/or/or.h	/^    DIR_SPOOL_MICRODESC, \/* NOTE: if we add another entry, add another bit. *\/$/;"	e	enum:__anon41
DIR_SPOOL_NETWORKSTATUS	src/or/or.h	/^    DIR_SPOOL_CACHED_DIR, DIR_SPOOL_NETWORKSTATUS,$/;"	e	enum:__anon41
DIR_SPOOL_NONE	src/or/or.h	/^    DIR_SPOOL_NONE=0, DIR_SPOOL_SERVER_BY_DIGEST, DIR_SPOOL_SERVER_BY_FP,$/;"	e	enum:__anon41
DIR_SPOOL_SERVER_BY_DIGEST	src/or/or.h	/^    DIR_SPOOL_NONE=0, DIR_SPOOL_SERVER_BY_DIGEST, DIR_SPOOL_SERVER_BY_FP,$/;"	e	enum:__anon41
DIR_SPOOL_SERVER_BY_FP	src/or/or.h	/^    DIR_SPOOL_NONE=0, DIR_SPOOL_SERVER_BY_DIGEST, DIR_SPOOL_SERVER_BY_FP,$/;"	e	enum:__anon41
DISABLE_DISABLING_ED25519	src/or/dirserv.c	/^#undef DISABLE_DISABLING_ED25519$/;"	d	file:
DISABLE_ENGINES	src/common/aes.c	/^#define DISABLE_ENGINES$/;"	d	file:
DISABLE_ENGINES	src/common/crypto.c	/^#define DISABLE_ENGINES$/;"	d	file:
DISABLE_SSL3_HANDSHAKE	src/common/tortls.c	/^#define DISABLE_SSL3_HANDSHAKE$/;"	d	file:
DL_SCHED_BRIDGE	src/or/or.h	/^  DL_SCHED_BRIDGE = 2,$/;"	e	enum:__anon44
DL_SCHED_CONSENSUS	src/or/or.h	/^  DL_SCHED_CONSENSUS = 1,$/;"	e	enum:__anon44
DL_SCHED_GENERIC	src/or/or.h	/^  DL_SCHED_GENERIC = 0,$/;"	e	enum:__anon44
DMALLOC_ARGS	src/common/util.h	/^#define DMALLOC_ARGS /;"	d
DMALLOC_ARGS	src/common/util.h	/^#define DMALLOC_ARGS$/;"	d
DMALLOC_FN_ARGS	src/common/util.c	/^ #define DMALLOC_FN_ARGS /;"	d	file:
DMALLOC_FN_ARGS	src/common/util.c	/^ #define DMALLOC_FN_ARGS$/;"	d	file:
DMALLOC_PARAMS	src/common/util.h	/^#define DMALLOC_PARAMS /;"	d
DMALLOC_PARAMS	src/common/util.h	/^#define DMALLOC_PARAMS$/;"	d
DNSListenAddress	src/or/or.h	/^  config_line_t *DNSListenAddress;$/;"	m	struct:__anon55
DNSPort_lines	src/or/or.h	/^  config_line_t *DNSPort_lines; \/**< Ports to listen on for DNS requests. *\/$/;"	m	struct:__anon55
DNSPort_set	src/or/or.h	/^  unsigned int DNSPort_set : 1;$/;"	m	struct:__anon55
DNS_ERR_FORMAT	src/ext/eventdns.h	/^#define DNS_ERR_FORMAT /;"	d
DNS_ERR_NONE	src/ext/eventdns.h	/^#define DNS_ERR_NONE /;"	d
DNS_ERR_NOTEXIST	src/ext/eventdns.h	/^#define DNS_ERR_NOTEXIST /;"	d
DNS_ERR_NOTIMPL	src/ext/eventdns.h	/^#define DNS_ERR_NOTIMPL /;"	d
DNS_ERR_REFUSED	src/ext/eventdns.h	/^#define DNS_ERR_REFUSED /;"	d
DNS_ERR_SERVERFAILED	src/ext/eventdns.h	/^#define DNS_ERR_SERVERFAILED /;"	d
DNS_ERR_SHUTDOWN	src/ext/eventdns.h	/^#define DNS_ERR_SHUTDOWN /;"	d
DNS_ERR_TIMEOUT	src/ext/eventdns.h	/^#define DNS_ERR_TIMEOUT /;"	d
DNS_ERR_TRUNCATED	src/ext/eventdns.h	/^#define DNS_ERR_TRUNCATED /;"	d
DNS_ERR_UNKNOWN	src/ext/eventdns.h	/^#define DNS_ERR_UNKNOWN /;"	d
DNS_IPv4_A	src/ext/eventdns.h	/^#define DNS_IPv4_A /;"	d
DNS_IPv6_AAAA	src/ext/eventdns.h	/^#define DNS_IPv6_AAAA /;"	d
DNS_NO_SEARCH	src/ext/eventdns.h	/^#define DNS_NO_SEARCH /;"	d
DNS_OPTIONS_ALL	src/ext/eventdns.h	/^#define DNS_OPTIONS_ALL /;"	d
DNS_OPTION_MISC	src/ext/eventdns.h	/^#define DNS_OPTION_MISC /;"	d
DNS_OPTION_NAMESERVERS	src/ext/eventdns.h	/^#define DNS_OPTION_NAMESERVERS /;"	d
DNS_OPTION_SEARCH	src/ext/eventdns.h	/^#define DNS_OPTION_SEARCH /;"	d
DNS_PRIVATE	src/or/dns.c	/^#define DNS_PRIVATE$/;"	d	file:
DNS_PRIVATE	src/test/test_dns.c	/^#define DNS_PRIVATE$/;"	d	file:
DNS_PTR	src/ext/eventdns.h	/^#define DNS_PTR /;"	d
DNS_QUERY_NO_SEARCH	src/ext/eventdns.h	/^#define DNS_QUERY_NO_SEARCH /;"	d
DNS_USE_OPENSSL_FOR_ID	src/or/eventdns_tor.h	/^#define DNS_USE_OPENSSL_FOR_ID$/;"	d
DOC	src/or/control.c	/^#define DOC(/;"	d	file:
DONNA_INLINE	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#define DONNA_INLINE /;"	d
DONNA_NOINLINE	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#define DONNA_NOINLINE /;"	d
DOT	src/or/routerparse.c	/^#define DOT(/;"	d	file:
DOT	src/or/routerparse.c	/^#undef DOT$/;"	d	file:
DOUBLE_ROUND	src/ext/csiphash.c	/^#define DOUBLE_ROUND(/;"	d	file:
DOWNCAST	src/or/or.h	/^#define DOWNCAST(/;"	d
DSMAP_FOREACH	src/or/routerlist.c	/^#define DSMAP_FOREACH(/;"	d	file:
DSR_BASE64	src/or/directory.h	/^#define DSR_BASE64 /;"	d
DSR_DIGEST256	src/or/directory.h	/^#define DSR_DIGEST256 /;"	d
DSR_HEX	src/or/directory.h	/^#define DSR_HEX /;"	d
DSR_SORT_UNIQ	src/or/directory.h	/^#define DSR_SORT_UNIQ /;"	d
DUMMY_DOWNLOAD_INTERVAL	src/or/routerlist.c	/^#define DUMMY_DOWNLOAD_INTERVAL /;"	d	file:
DUMP_AREA	src/or/routerparse.c	/^#define DUMP_AREA(/;"	d	file:
DataDirectory	src/or/or.h	/^  char *DataDirectory; \/**< OR only: where to store long-term data. *\/$/;"	m	struct:__anon55
DebugLogFile	src/or/or.h	/^  char *DebugLogFile; \/**< Where to send verbose log messages. *\/$/;"	m	struct:__anon55
DirAllowPrivateAddresses	src/or/or.h	/^  int DirAllowPrivateAddresses;$/;"	m	struct:__anon55
DirAuthorities	src/or/or.h	/^  config_line_t *DirAuthorities;$/;"	m	struct:__anon55
DirAuthorityFallbackRate	src/or/or.h	/^  double DirAuthorityFallbackRate;$/;"	m	struct:__anon55
DirListenAddress	src/or/or.h	/^  config_line_t *DirListenAddress;$/;"	m	struct:__anon55
DirPolicy	src/or/or.h	/^  config_line_t *DirPolicy; \/**< Lists of dir policy components *\/$/;"	m	struct:__anon55
DirPortFrontPage	src/or/or.h	/^  char *DirPortFrontPage; \/**< This is a full path to a file with an html$/;"	m	struct:__anon55
DirPort_lines	src/or/or.h	/^  config_line_t *DirPort_lines;$/;"	m	struct:__anon55
DirPort_set	src/or/or.h	/^  unsigned int DirPort_set : 1;$/;"	m	struct:__anon55
DirReqStatistics	src/or/or.h	/^  int DirReqStatistics;$/;"	m	struct:__anon55
DirReqStatistics_option	src/or/or.h	/^  int DirReqStatistics_option;$/;"	m	struct:__anon55
DisableAllSwap	src/or/or.h	/^  int DisableAllSwap; \/**< Boolean: Attempt to call mlockall() on our$/;"	m	struct:__anon55
DisableDebuggerAttachment	src/or/or.h	/^  int DisableDebuggerAttachment; \/**< Currently Linux only specific attempt to$/;"	m	struct:__anon55
DisableIOCP	src/or/or.h	/^  int DisableIOCP;$/;"	m	struct:__anon55
DisableNetwork	src/or/or.h	/^  int DisableNetwork;$/;"	m	struct:__anon55
DisablePredictedCircuits	src/or/or.h	/^  int DisablePredictedCircuits; \/**< Boolean: does Tor preemptively$/;"	m	struct:__anon55
DownloadExtraInfo	src/or/or.h	/^  int DownloadExtraInfo;$/;"	m	struct:__anon55
E	src/common/compat.c	/^#define E(/;"	d	file:
EARLY_CONSENSUS_NOTICE_SKEW	src/or/networkstatus.c	/^#define EARLY_CONSENSUS_NOTICE_SKEW /;"	d	file:
EARLY_PARSE_ONLY	src/test/test_introduce.c	/^#define EARLY_PARSE_ONLY /;"	d	file:
EARLY_WARNING_INTERVAL	src/or/relay.c	/^#define EARLY_WARNING_INTERVAL /;"	d	file:
ED25519_32BIT	src/ext/ed25519/donna/ed25519-donna.h	/^		#define ED25519_32BIT$/;"	d
ED25519_64BIT	src/ext/ed25519/donna/ed25519-donna.h	/^		#define ED25519_64BIT$/;"	d
ED25519_64BIT_TABLES	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^#define ED25519_64BIT_TABLES$/;"	d
ED25519_BASE64_LEN	src/common/crypto_format.h	/^#define ED25519_BASE64_LEN /;"	d
ED25519_FN	src/ext/ed25519/donna/ed25519_tor.c	/^#define ED25519_FN(/;"	d	file:
ED25519_FN2	src/ext/ed25519/donna/ed25519_tor.c	/^#define ED25519_FN2(/;"	d	file:
ED25519_FN3	src/ext/ed25519/donna/ed25519_tor.c	/^#define ED25519_FN3(/;"	d	file:
ED25519_GCC_32BIT_SSE_CHOOSE	src/ext/ed25519/donna/ed25519-donna.h	/^			#define ED25519_GCC_32BIT_SSE_CHOOSE$/;"	d
ED25519_GCC_64BIT_32BIT_CHOOSE	src/ext/ed25519/donna/ed25519-donna.h	/^					#define ED25519_GCC_64BIT_32BIT_CHOOSE$/;"	d
ED25519_GCC_64BIT_SSE_CHOOSE	src/ext/ed25519/donna/ed25519-donna.h	/^			#define ED25519_GCC_64BIT_SSE_CHOOSE$/;"	d
ED25519_GCC_64BIT_X86_CHOOSE	src/ext/ed25519/donna/ed25519-donna.h	/^					#define ED25519_GCC_64BIT_X86_CHOOSE$/;"	d
ED25519_H	src/ext/ed25519/donna/ed25519.h	/^#define ED25519_H$/;"	d
ED25519_NO_INLINE_ASM	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define ED25519_NO_INLINE_ASM$/;"	d
ED25519_PUBKEY_LEN	src/common/crypto_ed25519.h	/^#define ED25519_PUBKEY_LEN /;"	d
ED25519_SECKEY_LEN	src/common/crypto_ed25519.h	/^#define ED25519_SECKEY_LEN /;"	d
ED25519_SECKEY_SEED_LEN	src/common/crypto_ed25519.h	/^#define ED25519_SECKEY_SEED_LEN /;"	d
ED25519_SIG_BASE64_LEN	src/common/crypto_format.h	/^#define ED25519_SIG_BASE64_LEN /;"	d
ED25519_SIG_LEN	src/common/crypto_ed25519.h	/^#define ED25519_SIG_LEN /;"	d
ED25519_SSE2	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#define ED25519_SSE2$/;"	d
ED25519_SSE2	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#undef ED25519_SSE2$/;"	d
ED25519_SUFFIX	src/ext/ed25519/donna/ed25519_tor.c	/^#define ED25519_SUFFIX$/;"	d	file:
EDGE_CONNECTION_MAGIC	src/or/or.h	/^#define EDGE_CONNECTION_MAGIC /;"	d
EDGE_TO_ENTRY_CONN	src/or/or.h	/^static INLINE entry_connection_t *EDGE_TO_ENTRY_CONN(edge_connection_t *c)$/;"	f
ED_DESC_SIGNATURE_PREFIX	src/or/routerparse.h	/^#define ED_DESC_SIGNATURE_PREFIX /;"	d
ED_GCC_VERSION	src/ext/ed25519/donna/curve25519-donna-helpers.h	/^#define ED_GCC_VERSION /;"	d
EIMAP_FOREACH	src/or/routerlist.c	/^#define EIMAP_FOREACH(/;"	d	file:
ELSE_IF_NO_BUFFEREVENT	src/or/or.h	/^#define ELSE_IF_NO_BUFFEREVENT /;"	d
ENCODE_CHAR	src/common/util_format.c	/^#define ENCODE_CHAR(/;"	d	file:
ENCODE_CHAR	src/common/util_format.c	/^#undef ENCODE_CHAR$/;"	d	file:
ENCODE_N	src/common/util_format.c	/^#define ENCODE_N(/;"	d	file:
ENCODE_N	src/common/util_format.c	/^#undef ENCODE_N$/;"	d	file:
ENCODE_PAD	src/common/util_format.c	/^#define ENCODE_PAD(/;"	d	file:
ENCODE_PAD	src/common/util_format.c	/^#undef ENCODE_PAD$/;"	d	file:
ENC_KEY_HEADER	src/or/routerkeys.c	/^#define ENC_KEY_HEADER /;"	d	file:
ENC_KEY_TAG	src/or/routerkeys.c	/^#define ENC_KEY_TAG /;"	d	file:
ENC_ONIONSKIN	src/or/or.h	/^  ENC_ONIONSKIN, DEC_ONIONSKIN,$/;"	e	enum:__anon72
END_CIRC_AT_ORIGIN	src/or/or.h	/^#define END_CIRC_AT_ORIGIN /;"	d
END_CIRC_REASON_CHANNEL_CLOSED	src/or/or.h	/^#define END_CIRC_REASON_CHANNEL_CLOSED /;"	d
END_CIRC_REASON_CONNECTFAILED	src/or/or.h	/^#define END_CIRC_REASON_CONNECTFAILED /;"	d
END_CIRC_REASON_DESTROYED	src/or/or.h	/^#define END_CIRC_REASON_DESTROYED /;"	d
END_CIRC_REASON_FINISHED	src/or/or.h	/^#define END_CIRC_REASON_FINISHED /;"	d
END_CIRC_REASON_FLAG_REMOTE	src/or/or.h	/^#define END_CIRC_REASON_FLAG_REMOTE /;"	d
END_CIRC_REASON_HIBERNATING	src/or/or.h	/^#define END_CIRC_REASON_HIBERNATING /;"	d
END_CIRC_REASON_INTERNAL	src/or/or.h	/^#define END_CIRC_REASON_INTERNAL /;"	d
END_CIRC_REASON_IP_NOW_REDUNDANT	src/or/or.h	/^#define END_CIRC_REASON_IP_NOW_REDUNDANT /;"	d
END_CIRC_REASON_MAX_	src/or/or.h	/^#define END_CIRC_REASON_MAX_ /;"	d
END_CIRC_REASON_MEASUREMENT_EXPIRED	src/or/or.h	/^#define END_CIRC_REASON_MEASUREMENT_EXPIRED /;"	d
END_CIRC_REASON_MIN_	src/or/or.h	/^#define END_CIRC_REASON_MIN_ /;"	d
END_CIRC_REASON_NONE	src/or/or.h	/^#define END_CIRC_REASON_NONE /;"	d
END_CIRC_REASON_NOPATH	src/or/or.h	/^#define END_CIRC_REASON_NOPATH /;"	d
END_CIRC_REASON_NOSUCHSERVICE	src/or/or.h	/^#define END_CIRC_REASON_NOSUCHSERVICE /;"	d
END_CIRC_REASON_OR_IDENTITY	src/or/or.h	/^#define END_CIRC_REASON_OR_IDENTITY /;"	d
END_CIRC_REASON_REQUESTED	src/or/or.h	/^#define END_CIRC_REASON_REQUESTED /;"	d
END_CIRC_REASON_RESOURCELIMIT	src/or/or.h	/^#define END_CIRC_REASON_RESOURCELIMIT /;"	d
END_CIRC_REASON_TIMEOUT	src/or/or.h	/^#define END_CIRC_REASON_TIMEOUT /;"	d
END_CIRC_REASON_TORPROTOCOL	src/or/or.h	/^#define END_CIRC_REASON_TORPROTOCOL /;"	d
END_OF_ALIASES	src/ext/tinytest.h	/^#define END_OF_ALIASES /;"	d
END_OF_GROUPS	src/ext/tinytest.h	/^#define END_OF_GROUPS /;"	d
END_OF_TABLE	src/or/routerparse.c	/^#define END_OF_TABLE /;"	d	file:
END_OF_TESTCASES	src/ext/tinytest.h	/^#define END_OF_TESTCASES /;"	d
END_OR_CONN_REASON_CONNRESET	src/or/or.h	/^#define END_OR_CONN_REASON_CONNRESET /;"	d
END_OR_CONN_REASON_DONE	src/or/or.h	/^#define END_OR_CONN_REASON_DONE /;"	d
END_OR_CONN_REASON_IO_ERROR	src/or/or.h	/^#define END_OR_CONN_REASON_IO_ERROR /;"	d
END_OR_CONN_REASON_MISC	src/or/or.h	/^#define END_OR_CONN_REASON_MISC /;"	d
END_OR_CONN_REASON_NO_ROUTE	src/or/or.h	/^#define END_OR_CONN_REASON_NO_ROUTE /;"	d
END_OR_CONN_REASON_OR_IDENTITY	src/or/or.h	/^#define END_OR_CONN_REASON_OR_IDENTITY /;"	d
END_OR_CONN_REASON_PT_MISSING	src/or/or.h	/^#define END_OR_CONN_REASON_PT_MISSING /;"	d
END_OR_CONN_REASON_REFUSED	src/or/or.h	/^#define END_OR_CONN_REASON_REFUSED /;"	d
END_OR_CONN_REASON_RESOURCE_LIMIT	src/or/or.h	/^#define END_OR_CONN_REASON_RESOURCE_LIMIT /;"	d
END_OR_CONN_REASON_TIMEOUT	src/or/or.h	/^#define END_OR_CONN_REASON_TIMEOUT /;"	d
END_STREAM_REASON_CANT_ATTACH	src/or/or.h	/^#define END_STREAM_REASON_CANT_ATTACH /;"	d
END_STREAM_REASON_CANT_FETCH_ORIG_DEST	src/or/or.h	/^#define END_STREAM_REASON_CANT_FETCH_ORIG_DEST /;"	d
END_STREAM_REASON_CONNECTREFUSED	src/or/or.h	/^#define END_STREAM_REASON_CONNECTREFUSED /;"	d
END_STREAM_REASON_CONNRESET	src/or/or.h	/^#define END_STREAM_REASON_CONNRESET /;"	d
END_STREAM_REASON_DESTROY	src/or/or.h	/^#define END_STREAM_REASON_DESTROY /;"	d
END_STREAM_REASON_DONE	src/or/or.h	/^#define END_STREAM_REASON_DONE /;"	d
END_STREAM_REASON_ENTRYPOLICY	src/or/or.h	/^#define END_STREAM_REASON_ENTRYPOLICY /;"	d
END_STREAM_REASON_EXITPOLICY	src/or/or.h	/^#define END_STREAM_REASON_EXITPOLICY /;"	d
END_STREAM_REASON_FLAG_ALREADY_SENT_CLOSED	src/or/or.h	/^#define END_STREAM_REASON_FLAG_ALREADY_SENT_CLOSED /;"	d
END_STREAM_REASON_FLAG_ALREADY_SOCKS_REPLIED	src/or/or.h	/^#define END_STREAM_REASON_FLAG_ALREADY_SOCKS_REPLIED /;"	d
END_STREAM_REASON_FLAG_REMOTE	src/or/or.h	/^#define END_STREAM_REASON_FLAG_REMOTE /;"	d
END_STREAM_REASON_HIBERNATING	src/or/or.h	/^#define END_STREAM_REASON_HIBERNATING /;"	d
END_STREAM_REASON_INTERNAL	src/or/or.h	/^#define END_STREAM_REASON_INTERNAL /;"	d
END_STREAM_REASON_INVALID_NATD_DEST	src/or/or.h	/^#define END_STREAM_REASON_INVALID_NATD_DEST /;"	d
END_STREAM_REASON_MASK	src/or/or.h	/^#define END_STREAM_REASON_MASK /;"	d
END_STREAM_REASON_MISC	src/or/or.h	/^#define END_STREAM_REASON_MISC /;"	d
END_STREAM_REASON_NET_UNREACHABLE	src/or/or.h	/^#define END_STREAM_REASON_NET_UNREACHABLE /;"	d
END_STREAM_REASON_NOROUTE	src/or/or.h	/^#define END_STREAM_REASON_NOROUTE /;"	d
END_STREAM_REASON_NOTDIRECTORY	src/or/or.h	/^#define END_STREAM_REASON_NOTDIRECTORY /;"	d
END_STREAM_REASON_PRIVATE_ADDR	src/or/or.h	/^#define END_STREAM_REASON_PRIVATE_ADDR /;"	d
END_STREAM_REASON_RESOLVEFAILED	src/or/or.h	/^#define END_STREAM_REASON_RESOLVEFAILED /;"	d
END_STREAM_REASON_RESOURCELIMIT	src/or/or.h	/^#define END_STREAM_REASON_RESOURCELIMIT /;"	d
END_STREAM_REASON_SOCKSPROTOCOL	src/or/or.h	/^#define END_STREAM_REASON_SOCKSPROTOCOL /;"	d
END_STREAM_REASON_TIMEOUT	src/or/or.h	/^#define END_STREAM_REASON_TIMEOUT /;"	d
END_STREAM_REASON_TORPROTOCOL	src/or/or.h	/^#define END_STREAM_REASON_TORPROTOCOL /;"	d
ENSURE_BANDWIDTH_PARAM	src/test/test_options.c	/^#define ENSURE_BANDWIDTH_PARAM(/;"	d	file:
ENSURE_DEFAULT	src/test/test_options.c	/^#define ENSURE_DEFAULT(/;"	d	file:
ENT	src/test/bench.c	/^#define ENT(/;"	d	file:
ENT	src/test/test.c	/^#define ENT(/;"	d	file:
ENTROPY_INTERVAL	src/or/main.c	/^#define ENTROPY_INTERVAL /;"	d	file:
ENTRY	src/test/test_containers.c	/^#define ENTRY(/;"	d	file:
ENTRYNODES_PRIVATE	src/or/entrynodes.c	/^#define ENTRYNODES_PRIVATE$/;"	d	file:
ENTRYNODES_PRIVATE	src/test/test_entrynodes.c	/^#define ENTRYNODES_PRIVATE$/;"	d	file:
ENTRY_ASSUME_REACHABLE	src/or/entrynodes.h	/^  ENTRY_ASSUME_REACHABLE = 1<<2,$/;"	e	enum:__anon33
ENTRY_CONNECTION_MAGIC	src/or/or.h	/^#define ENTRY_CONNECTION_MAGIC /;"	d
ENTRY_GUARD_REMOVE_AFTER	src/or/entrynodes.c	/^#define ENTRY_GUARD_REMOVE_AFTER /;"	d	file:
ENTRY_NEED_CAPACITY	src/or/entrynodes.h	/^  ENTRY_NEED_CAPACITY = 1<<1,$/;"	e	enum:__anon33
ENTRY_NEED_DESCRIPTOR	src/or/entrynodes.h	/^  ENTRY_NEED_DESCRIPTOR = 1<<3,$/;"	e	enum:__anon33
ENTRY_NEED_UPTIME	src/or/entrynodes.h	/^  ENTRY_NEED_UPTIME = 1<<0,$/;"	e	enum:__anon33
ENTRY_TO_CONN	src/or/or.h	/^#define ENTRY_TO_CONN(/;"	d
ENTRY_TO_EDGE_CONN	src/or/or.h	/^#define ENTRY_TO_EDGE_CONN(/;"	d
ENUM_BF	src/common/compat.h	/^#define ENUM_BF(/;"	d
EOF_	src/or/routerparse.c	/^  EOF_,$/;"	e	enum:__anon96	file:
EOL	src/test/test_util_slow.c	/^#define EOL /;"	d	file:
EOL	src/test/test_util_slow.c	/^#undef EOL$/;"	d	file:
EPOCH_BIAS	src/common/compat.c	/^#define EPOCH_BIAS /;"	d	file:
EPSILON	src/or/circuitmux_ewma.c	/^#define EPSILON /;"	d	file:
EQ	src/or/routerparse.c	/^#define EQ(/;"	d	file:
EQ	src/test/test_crypto.c	/^#define EQ(/;"	d	file:
EQ	src/test/test_crypto.c	/^#undef EQ$/;"	d	file:
EQ	src/test/test_util.c	/^#define EQ /;"	d	file:
EQ_SHOULD_SAY	src/test/test_containers.c	/^#define EQ_SHOULD_SAY(/;"	d	file:
ERR	src/or/channeltls.c	/^#define ERR(/;"	d	file:
ERR	src/or/channeltls.c	/^#undef ERR$/;"	d	file:
ERRNO_IS_ACCEPT_EAGAIN	src/common/compat.h	/^#define ERRNO_IS_ACCEPT_EAGAIN(/;"	d
ERRNO_IS_CONN_EINPROGRESS	src/common/compat.h	/^#define ERRNO_IS_CONN_EINPROGRESS(/;"	d
ERRNO_IS_EADDRINUSE	src/common/compat.h	/^#define ERRNO_IS_EADDRINUSE(/;"	d
ERRNO_IS_EAGAIN	src/common/compat.h	/^#define ERRNO_IS_EAGAIN(/;"	d
ERRNO_IS_EINPROGRESS	src/common/compat.h	/^#define ERRNO_IS_EINPROGRESS(/;"	d
ERRNO_IS_EINTR	src/common/compat.h	/^#define ERRNO_IS_EINTR(/;"	d
ERRNO_IS_RESOURCE_LIMIT	src/common/compat.h	/^#define ERRNO_IS_RESOURCE_LIMIT(/;"	d
ERR_	src/or/routerparse.c	/^  ERR_,$/;"	e	enum:__anon96	file:
EVDNS_ADDITIONAL_SECTION	src/ext/eventdns.h	/^#define EVDNS_ADDITIONAL_SECTION /;"	d
EVDNS_ANSWER_SECTION	src/ext/eventdns.h	/^#define EVDNS_ANSWER_SECTION /;"	d
EVDNS_AUTHORITY_SECTION	src/ext/eventdns.h	/^#define EVDNS_AUTHORITY_SECTION /;"	d
EVDNS_CLASS_INET	src/ext/eventdns.h	/^#define EVDNS_CLASS_INET /;"	d
EVDNS_QTYPE_ALL	src/ext/eventdns.h	/^#define EVDNS_QTYPE_ALL	/;"	d
EVDNS_QTYPE_AXFR	src/ext/eventdns.h	/^#define EVDNS_QTYPE_AXFR /;"	d
EVDNS_TYPE_A	src/ext/eventdns.h	/^#define EVDNS_TYPE_A	/;"	d
EVDNS_TYPE_AAAA	src/ext/eventdns.h	/^#define EVDNS_TYPE_AAAA	/;"	d
EVDNS_TYPE_CNAME	src/ext/eventdns.h	/^#define EVDNS_TYPE_CNAME /;"	d
EVDNS_TYPE_MX	src/ext/eventdns.h	/^#define EVDNS_TYPE_MX	/;"	d
EVDNS_TYPE_NS	src/ext/eventdns.h	/^#define EVDNS_TYPE_NS	/;"	d
EVDNS_TYPE_PTR	src/ext/eventdns.h	/^#define EVDNS_TYPE_PTR	/;"	d
EVDNS_TYPE_SOA	src/ext/eventdns.h	/^#define EVDNS_TYPE_SOA	/;"	d
EVDNS_TYPE_TXT	src/ext/eventdns.h	/^#define EVDNS_TYPE_TXT	/;"	d
EVENT_ADDRMAP	src/or/control.h	/^#define EVENT_ADDRMAP /;"	d
EVENT_AUTHDIR_NEWDESCS	src/or/control.h	/^#define EVENT_AUTHDIR_NEWDESCS /;"	d
EVENT_BANDWIDTH_USED	src/or/control.h	/^#define EVENT_BANDWIDTH_USED /;"	d
EVENT_BUILDTIMEOUT_SET	src/or/control.h	/^#define EVENT_BUILDTIMEOUT_SET /;"	d
EVENT_CAPACITY_	src/or/control.h	/^#define EVENT_CAPACITY_ /;"	d
EVENT_CELL_STATS	src/or/control.h	/^#define EVENT_CELL_STATS /;"	d
EVENT_CIRCUIT_STATUS	src/or/control.h	/^#define EVENT_CIRCUIT_STATUS /;"	d
EVENT_CIRCUIT_STATUS_MINOR	src/or/control.h	/^#define EVENT_CIRCUIT_STATUS_MINOR /;"	d
EVENT_CIRC_BANDWIDTH_USED	src/or/control.h	/^#define EVENT_CIRC_BANDWIDTH_USED /;"	d
EVENT_CLIENTS_SEEN	src/or/control.h	/^#define EVENT_CLIENTS_SEEN /;"	d
EVENT_CONF_CHANGED	src/or/control.h	/^#define EVENT_CONF_CHANGED /;"	d
EVENT_CONN_BW	src/or/control.h	/^#define EVENT_CONN_BW /;"	d
EVENT_DEBUG_MSG	src/or/control.h	/^#define EVENT_DEBUG_MSG /;"	d
EVENT_DESCCHANGED	src/or/control.h	/^#define EVENT_DESCCHANGED /;"	d
EVENT_ERR_MSG	src/or/control.h	/^#define EVENT_ERR_MSG /;"	d
EVENT_GOT_SIGNAL	src/or/control.h	/^#define EVENT_GOT_SIGNAL /;"	d
EVENT_GUARD	src/or/control.h	/^#define EVENT_GUARD /;"	d
EVENT_HS_DESC	src/or/control.h	/^#define EVENT_HS_DESC /;"	d
EVENT_HS_DESC_CONTENT	src/or/control.h	/^#define EVENT_HS_DESC_CONTENT /;"	d
EVENT_INFO_MSG	src/or/control.h	/^#define EVENT_INFO_MSG /;"	d
EVENT_IS_INTERESTING	src/or/control.c	/^#define EVENT_IS_INTERESTING(/;"	d	file:
EVENT_MASK_	src/or/control.h	/^#define EVENT_MASK_(/;"	d
EVENT_MASK_ABOVE_MIN_	src/or/control.h	/^#define EVENT_MASK_ABOVE_MIN_ /;"	d
EVENT_MASK_ALL_	src/or/control.h	/^#define EVENT_MASK_ALL_ /;"	d
EVENT_MASK_BELOW_MAX_	src/or/control.h	/^#define EVENT_MASK_BELOW_MAX_ /;"	d
EVENT_MASK_NONE_	src/or/control.h	/^#define EVENT_MASK_NONE_ /;"	d
EVENT_MAX_	src/or/control.h	/^#define EVENT_MAX_ /;"	d
EVENT_MIN_	src/or/control.h	/^#define EVENT_MIN_ /;"	d
EVENT_NETWORK_LIVENESS	src/or/control.h	/^#define EVENT_NETWORK_LIVENESS /;"	d
EVENT_NEWCONSENSUS	src/or/control.h	/^#define EVENT_NEWCONSENSUS /;"	d
EVENT_NEW_DESC	src/or/control.h	/^#define EVENT_NEW_DESC /;"	d
EVENT_NOTICE_MSG	src/or/control.h	/^#define EVENT_NOTICE_MSG /;"	d
EVENT_NS	src/or/control.h	/^#define EVENT_NS /;"	d
EVENT_OR_CONN_STATUS	src/or/control.h	/^#define EVENT_OR_CONN_STATUS /;"	d
EVENT_STATUS_CLIENT	src/or/control.h	/^#define EVENT_STATUS_CLIENT /;"	d
EVENT_STATUS_GENERAL	src/or/control.h	/^#define EVENT_STATUS_GENERAL /;"	d
EVENT_STATUS_SERVER	src/or/control.h	/^#define EVENT_STATUS_SERVER /;"	d
EVENT_STREAM_BANDWIDTH_USED	src/or/control.h	/^#define EVENT_STREAM_BANDWIDTH_USED /;"	d
EVENT_STREAM_STATUS	src/or/control.h	/^#define EVENT_STREAM_STATUS /;"	d
EVENT_TB_EMPTY	src/or/control.h	/^#define EVENT_TB_EMPTY /;"	d
EVENT_TRANSPORT_LAUNCHED	src/or/control.h	/^#define EVENT_TRANSPORT_LAUNCHED /;"	d
EVENT_WARN_MSG	src/or/control.h	/^#define EVENT_WARN_MSG /;"	d
EVUTIL_SOCKET_DEFINED	src/common/compat_libevent.h	/^#define EVUTIL_SOCKET_DEFINED$/;"	d
EWMA_DEFAULT_HALFLIFE	src/or/circuitmux_ewma.c	/^#define EWMA_DEFAULT_HALFLIFE /;"	d	file:
EWMA_POL_CIRC_DATA_MAGIC	src/or/circuitmux_ewma.c	/^#define EWMA_POL_CIRC_DATA_MAGIC /;"	d	file:
EWMA_POL_DATA_MAGIC	src/or/circuitmux_ewma.c	/^#define EWMA_POL_DATA_MAGIC /;"	d	file:
EWMA_TICK_LEN	src/or/circuitmux_ewma.c	/^#define EWMA_TICK_LEN /;"	d	file:
EXIT_CONN_STATE_CONNECTING	src/or/or.h	/^#define EXIT_CONN_STATE_CONNECTING /;"	d
EXIT_CONN_STATE_MAX_	src/or/or.h	/^#define EXIT_CONN_STATE_MAX_ /;"	d
EXIT_CONN_STATE_MIN_	src/or/or.h	/^#define EXIT_CONN_STATE_MIN_ /;"	d
EXIT_CONN_STATE_OPEN	src/or/or.h	/^#define EXIT_CONN_STATE_OPEN /;"	d
EXIT_CONN_STATE_RESOLVEFAILED	src/or/or.h	/^#define EXIT_CONN_STATE_RESOLVEFAILED /;"	d
EXIT_CONN_STATE_RESOLVING	src/or/or.h	/^#define EXIT_CONN_STATE_RESOLVING /;"	d
EXIT_HOSTNAME	src/or/connection_edge.h	/^  NORMAL_HOSTNAME, ONION_HOSTNAME, EXIT_HOSTNAME, BAD_HOSTNAME$/;"	e	enum:hostname_type_t
EXIT_POLICY_ADD_DEFAULT	src/or/policies.h	/^#define EXIT_POLICY_ADD_DEFAULT /;"	d
EXIT_POLICY_IPV6_ENABLED	src/or/policies.h	/^#define EXIT_POLICY_IPV6_ENABLED /;"	d
EXIT_POLICY_REJECT_PRIVATE	src/or/policies.h	/^#define EXIT_POLICY_REJECT_PRIVATE /;"	d
EXIT_PURPOSE_CONNECT	src/or/or.h	/^#define EXIT_PURPOSE_CONNECT /;"	d
EXIT_PURPOSE_MAX_	src/or/or.h	/^#define EXIT_PURPOSE_MAX_ /;"	d
EXIT_PURPOSE_MIN_	src/or/or.h	/^#define EXIT_PURPOSE_MIN_ /;"	d
EXIT_PURPOSE_RESOLVE	src/or/or.h	/^#define EXIT_PURPOSE_RESOLVE /;"	d
EXIT_STATS_NUM_PORTS	src/or/rephist.c	/^#define EXIT_STATS_NUM_PORTS /;"	d	file:
EXIT_STATS_ROUND_UP_BYTES	src/or/rephist.c	/^#define EXIT_STATS_ROUND_UP_BYTES /;"	d	file:
EXIT_STATS_ROUND_UP_STREAMS	src/or/rephist.c	/^#define EXIT_STATS_ROUND_UP_STREAMS /;"	d	file:
EXIT_STATS_TOP_N_PORTS	src/or/rephist.c	/^#define EXIT_STATS_TOP_N_PORTS /;"	d	file:
EXPAND	src/test/test_crypto.c	/^#define EXPAND(/;"	d	file:
EXPAND	src/test/test_crypto.c	/^#undef EXPAND$/;"	d	file:
EXPBIAS	src/common/crypto_s2k.c	/^#define EXPBIAS /;"	d	file:
EXPBIAS	src/common/crypto_s2k.c	/^#undef EXPBIAS$/;"	d	file:
EXPECT_CONN_PURPOSE	src/test/test_dir.c	/^#define EXPECT_CONN_PURPOSE(/;"	d	file:
EXPIRES_SOON	src/or/routerkeys.c	/^#define EXPIRES_SOON(/;"	d	file:
EXPIRES_SOON	src/or/routerkeys.c	/^#undef EXPIRES_SOON$/;"	d	file:
EXPOSE_CLEAN_BACKTRACE	src/common/backtrace.c	/^#define EXPOSE_CLEAN_BACKTRACE$/;"	d	file:
EXPOSE_CLEAN_BACKTRACE	src/common/sandbox.c	/^#define EXPOSE_CLEAN_BACKTRACE$/;"	d	file:
EXTRAINFO_DIRINFO	src/or/or.h	/^  EXTRAINFO_DIRINFO=1 << 5,$/;"	e	enum:__anon49
EXTRAINFO_STORE	src/or/or.h	/^  EXTRAINFO_STORE = 1$/;"	e	enum:store_type_t
EXT_ORPORT_H	src/or/ext_orport.h	/^#define EXT_ORPORT_H$/;"	d
EXT_ORPORT_PRIVATE	src/or/ext_orport.c	/^#define EXT_ORPORT_PRIVATE$/;"	d	file:
EXT_ORPORT_PRIVATE	src/test/test_extorport.c	/^#define EXT_ORPORT_PRIVATE$/;"	d	file:
EXT_OR_AUTHTYPE_SAFECOOKIE	src/or/ext_orport.c	/^#define EXT_OR_AUTHTYPE_SAFECOOKIE /;"	d	file:
EXT_OR_CMD_BT_CONTROL	src/or/ext_orport.c	/^#define EXT_OR_CMD_BT_CONTROL /;"	d	file:
EXT_OR_CMD_BT_DENY	src/or/ext_orport.c	/^#define EXT_OR_CMD_BT_DENY /;"	d	file:
EXT_OR_CMD_BT_OKAY	src/or/ext_orport.c	/^#define EXT_OR_CMD_BT_OKAY /;"	d	file:
EXT_OR_CMD_HEADER_SIZE	src/or/buffers.c	/^#define EXT_OR_CMD_HEADER_SIZE /;"	d	file:
EXT_OR_CMD_TB_DONE	src/or/ext_orport.c	/^#define EXT_OR_CMD_TB_DONE /;"	d	file:
EXT_OR_CMD_TB_TRANSPORT	src/or/ext_orport.c	/^#define EXT_OR_CMD_TB_TRANSPORT /;"	d	file:
EXT_OR_CMD_TB_USERADDR	src/or/ext_orport.c	/^#define EXT_OR_CMD_TB_USERADDR /;"	d	file:
EXT_OR_CONN_ID_LEN	src/or/or.h	/^#define EXT_OR_CONN_ID_LEN /;"	d
EXT_OR_CONN_STATE_AUTH_MAX	src/or/or.h	/^#define EXT_OR_CONN_STATE_AUTH_MAX /;"	d
EXT_OR_CONN_STATE_AUTH_WAIT_AUTH_TYPE	src/or/or.h	/^#define EXT_OR_CONN_STATE_AUTH_WAIT_AUTH_TYPE /;"	d
EXT_OR_CONN_STATE_AUTH_WAIT_CLIENT_HASH	src/or/or.h	/^#define EXT_OR_CONN_STATE_AUTH_WAIT_CLIENT_HASH /;"	d
EXT_OR_CONN_STATE_AUTH_WAIT_CLIENT_NONCE	src/or/or.h	/^#define EXT_OR_CONN_STATE_AUTH_WAIT_CLIENT_NONCE /;"	d
EXT_OR_CONN_STATE_FLUSHING	src/or/or.h	/^#define EXT_OR_CONN_STATE_FLUSHING /;"	d
EXT_OR_CONN_STATE_IS_AUTHENTICATING	src/or/ext_orport.c	/^#define EXT_OR_CONN_STATE_IS_AUTHENTICATING(/;"	d	file:
EXT_OR_CONN_STATE_MAX_	src/or/or.h	/^#define EXT_OR_CONN_STATE_MAX_ /;"	d
EXT_OR_CONN_STATE_MIN_	src/or/or.h	/^#define EXT_OR_CONN_STATE_MIN_ /;"	d
EXT_OR_CONN_STATE_OPEN	src/or/or.h	/^#define EXT_OR_CONN_STATE_OPEN /;"	d
EXT_OR_PORT_AUTH_CLIENT_TO_SERVER_CONST	src/or/ext_orport.c	/^#define EXT_OR_PORT_AUTH_CLIENT_TO_SERVER_CONST /;"	d	file:
EXT_OR_PORT_AUTH_COOKIE_HEADER	src/or/ext_orport.c	/^#define EXT_OR_PORT_AUTH_COOKIE_HEADER /;"	d	file:
EXT_OR_PORT_AUTH_COOKIE_HEADER_LEN	src/or/ext_orport.c	/^#define EXT_OR_PORT_AUTH_COOKIE_HEADER_LEN /;"	d	file:
EXT_OR_PORT_AUTH_COOKIE_LEN	src/or/ext_orport.c	/^#define EXT_OR_PORT_AUTH_COOKIE_LEN /;"	d	file:
EXT_OR_PORT_AUTH_HASH_LEN	src/or/ext_orport.c	/^#define EXT_OR_PORT_AUTH_HASH_LEN /;"	d	file:
EXT_OR_PORT_AUTH_NONCE_LEN	src/or/ext_orport.c	/^#define EXT_OR_PORT_AUTH_NONCE_LEN /;"	d	file:
EXT_OR_PORT_AUTH_SERVER_TO_CLIENT_CONST	src/or/ext_orport.c	/^#define EXT_OR_PORT_AUTH_SERVER_TO_CLIENT_CONST /;"	d	file:
E_CASE	src/or/reasons.c	/^#define E_CASE(/;"	d	file:
EnforceDistinctSubnets	src/or/or.h	/^  int EnforceDistinctSubnets; \/**< If true, don't allow multiple routers in the$/;"	m	struct:__anon55
EntryGuards	src/or/or.h	/^  config_line_t *EntryGuards;$/;"	m	struct:__anon61
EntryNodes	src/or/or.h	/^  routerset_t *EntryNodes;\/**< Structure containing nicknames, digests,$/;"	m	struct:__anon55
EntryStatistics	src/or/or.h	/^  int EntryStatistics;$/;"	m	struct:__anon55
ExcludeExitNodes	src/or/or.h	/^  routerset_t *ExcludeExitNodes;\/**< Structure containing nicknames, digests,$/;"	m	struct:__anon55
ExcludeExitNodesUnion_	src/or/or.h	/^  routerset_t *ExcludeExitNodesUnion_;$/;"	m	struct:__anon55
ExcludeNodes	src/or/or.h	/^  routerset_t *ExcludeNodes;\/**< Structure containing nicknames, digests,$/;"	m	struct:__anon55
ExcludeSingleHopRelays	src/or/or.h	/^  int ExcludeSingleHopRelays;$/;"	m	struct:__anon55
ExitNodes	src/or/or.h	/^  routerset_t *ExitNodes; \/**< Structure containing nicknames, digests,$/;"	m	struct:__anon55
ExitPolicy	src/or/or.h	/^  config_line_t *ExitPolicy; \/**< Lists of exit policy components. *\/$/;"	m	struct:__anon55
ExitPolicyRejectPrivate	src/or/or.h	/^  int ExitPolicyRejectPrivate; \/**< Should we not exit to local addresses? *\/$/;"	m	struct:__anon55
ExitPortStatistics	src/or/or.h	/^  int ExitPortStatistics;$/;"	m	struct:__anon55
ExitRelay	src/or/or.h	/^  int ExitRelay;$/;"	m	struct:__anon55
ExtORPortCookieAuthFile	src/or/or.h	/^  char *ExtORPortCookieAuthFile; \/**< Filesystem location of Extended$/;"	m	struct:__anon55
ExtORPortCookieAuthFileGroupReadable	src/or/or.h	/^  int ExtORPortCookieAuthFileGroupReadable; \/**< Boolean: Is the$/;"	m	struct:__anon55
ExtORPort_lines	src/or/or.h	/^  config_line_t *ExtORPort_lines;$/;"	m	struct:__anon55
ExtORPort_set	src/or/or.h	/^  unsigned int ExtORPort_set : 1;$/;"	m	struct:__anon55
ExtendAllowPrivateAddresses	src/or/or.h	/^  int ExtendAllowPrivateAddresses;$/;"	m	struct:__anon55
ExtraInfoStatistics	src/or/or.h	/^  int ExtraInfoStatistics;$/;"	m	struct:__anon55
ExtraLines	src/or/or.h	/^  config_line_t *ExtraLines;$/;"	m	struct:__anon61
F	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^		#define F(/;"	d
F	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^		#undef F$/;"	d
F	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^	#define F(/;"	d
F	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^	#undef F$/;"	d
F	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^		#define F(/;"	d
F	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	#define F(/;"	d
F	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	#undef F$/;"	d
FAIL	src/ext/tinytest.c	/^enum outcome { SKIP=2, OK=1, FAIL=0 };$/;"	e	enum:outcome	file:
FAIL	src/or/routerkeys.c	/^#define FAIL(/;"	d	file:
FAIL	src/or/routerkeys.c	/^#undef FAIL$/;"	d	file:
FAKE_SOCKET_FD	src/test/test_address.c	/^#define FAKE_SOCKET_FD /;"	d	file:
FAST_GUARD_STATE_FLUSH_TIME	src/or/entrynodes.c	/^#define FAST_GUARD_STATE_FLUSH_TIME /;"	d	file:
FAST_RETRY_DESCRIPTOR_INTERVAL	src/or/router.c	/^#define FAST_RETRY_DESCRIPTOR_INTERVAL /;"	d	file:
FE_H	src/ext/ed25519/ref10/fe.h	/^#define FE_H$/;"	d
FIFO_READ_MAX	src/common/util.c	/^#define FIFO_READ_MAX /;"	d	file:
FILL_BUFFER_IMPL	src/test/test-memwipe.c	/^#define FILL_BUFFER_IMPL(/;"	d	file:
FINGERPRINT_LEN	src/common/crypto.h	/^#define FINGERPRINT_LEN /;"	d
FLAGS	src/common/address.c	/^#define FLAGS /;"	d	file:
FLAV_MICRODESC	src/or/or.h	/^  FLAV_MICRODESC = 1,$/;"	e	enum:__anon47
FLAV_NS	src/or/or.h	/^  FLAV_NS = 0,$/;"	e	enum:__anon47
FN_DIR	src/common/util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon114
FN_EMPTY	src/common/util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon114
FN_ERROR	src/common/util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon114
FN_FILE	src/common/util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon114
FN_NOENT	src/common/util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	e	enum:__anon114
FORCE_PASSPHRASE_AUTO	src/or/or.h	/^    FORCE_PASSPHRASE_AUTO=0,$/;"	e	enum:__anon55::__anon60
FORCE_PASSPHRASE_OFF	src/or/or.h	/^    FORCE_PASSPHRASE_OFF$/;"	e	enum:__anon55::__anon60
FORCE_PASSPHRASE_ON	src/or/or.h	/^    FORCE_PASSPHRASE_ON,$/;"	e	enum:__anon55::__anon60
FORCE_REGENERATE_DESCRIPTOR_INTERVAL	src/or/router.c	/^#define FORCE_REGENERATE_DESCRIPTOR_INTERVAL /;"	d	file:
FORK	src/test/test.c	/^#define FORK(/;"	d	file:
FORK_BREAKS_GCOV	src/ext/tinytest.c	/^#define FORK_BREAKS_GCOV$/;"	d	file:
FP_BADEXIT	src/or/dirserv.c	/^#define FP_BADEXIT /;"	d	file:
FP_INVALID	src/or/dirserv.c	/^#define FP_INVALID /;"	d	file:
FP_REJECT	src/or/dirserv.c	/^#define FP_REJECT /;"	d	file:
FRACTION_OF_DATA_TO_RETAIN_ON_OOM	src/or/circuitlist.c	/^#define FRACTION_OF_DATA_TO_RETAIN_ON_OOM /;"	d	file:
FULLNESS_PCT_THRESHOLD	src/or/status.c	/^#define FULLNESS_PCT_THRESHOLD /;"	d	file:
FULL_DIR_CACHE_LIFETIME	src/or/directory.c	/^#define FULL_DIR_CACHE_LIFETIME /;"	d	file:
FallbackDir	src/or/or.h	/^  config_line_t *FallbackDir;$/;"	m	struct:__anon55
FascistFirewall	src/or/or.h	/^  int FascistFirewall; \/**< Whether to prefer ORs reachable on open ports. *\/$/;"	m	struct:__anon55
FastFirstHopPK	src/or/or.h	/^  int FastFirstHopPK; \/**< If Tor believes it is safe, should we save a third$/;"	m	struct:__anon55
FetchDirInfoEarly	src/or/or.h	/^  int FetchDirInfoEarly;$/;"	m	struct:__anon55
FetchDirInfoExtraEarly	src/or/or.h	/^  int FetchDirInfoExtraEarly;$/;"	m	struct:__anon55
FetchHidServDescriptors	src/or/or.h	/^  int FetchHidServDescriptors; \/**< and hidden service descriptors? *\/$/;"	m	struct:__anon55
FetchServerDescriptors	src/or/or.h	/^  int FetchServerDescriptors; \/**< Do we fetch server descriptors as normal? *\/$/;"	m	struct:__anon55
FetchUselessDescriptors	src/or/or.h	/^  int FetchUselessDescriptors; \/**< Do we fetch non-running descriptors too? *\/$/;"	m	struct:__anon55
FirewallPorts	src/or/or.h	/^  smartlist_t *FirewallPorts; \/**< Which ports our firewall allows$/;"	m	struct:__anon55
G0	src/ext/ed25519/donna/ed25519-hash.h	/^#define G0(/;"	d
G1	src/ext/ed25519/donna/ed25519-hash.h	/^#define G1(/;"	d
GCC_VERSION	src/common/tortls.c	/^#define GCC_VERSION /;"	d	file:
GE	src/or/routerparse.c	/^#define GE(/;"	d	file:
GENERATED_FILE_COMMENT	src/or/config.c	/^#define GENERATED_FILE_COMMENT /;"	d	file:
GENERATED_FILE_PREFIX	src/or/config.c	/^#define GENERATED_FILE_PREFIX /;"	d	file:
GEOIP_CLIENT_CONNECT	src/or/or.h	/^  GEOIP_CLIENT_CONNECT = 0,$/;"	e	enum:__anon67
GEOIP_CLIENT_NETWORKSTATUS	src/or/or.h	/^  GEOIP_CLIENT_NETWORKSTATUS = 1,$/;"	e	enum:__anon67
GEOIP_NS_RESPONSE_NUM	src/or/or.h	/^#define GEOIP_NS_RESPONSE_NUM /;"	d
GEOIP_PRIVATE	src/or/geoip.c	/^#define GEOIP_PRIVATE$/;"	d	file:
GEOIP_PRIVATE	src/test/test.c	/^#define GEOIP_PRIVATE$/;"	d	file:
GEOIP_PRIVATE	src/test/test_dir_handle_get.c	/^#define GEOIP_PRIVATE$/;"	d	file:
GEOIP_REJECT_BUSY	src/or/or.h	/^  GEOIP_REJECT_BUSY = 5,$/;"	e	enum:__anon68
GEOIP_REJECT_NOT_ENOUGH_SIGS	src/or/or.h	/^  GEOIP_REJECT_NOT_ENOUGH_SIGS = 1,$/;"	e	enum:__anon68
GEOIP_REJECT_NOT_FOUND	src/or/or.h	/^  GEOIP_REJECT_NOT_FOUND = 3,$/;"	e	enum:__anon68
GEOIP_REJECT_NOT_MODIFIED	src/or/or.h	/^  GEOIP_REJECT_NOT_MODIFIED = 4,$/;"	e	enum:__anon68
GEOIP_REJECT_UNAVAILABLE	src/or/or.h	/^  GEOIP_REJECT_UNAVAILABLE = 2,$/;"	e	enum:__anon68
GEOIP_SUCCESS	src/or/or.h	/^  GEOIP_SUCCESS = 0,$/;"	e	enum:__anon68
GET	src/test/test_dir_handle_get.c	/^#define GET(/;"	d	file:
GE_H	src/ext/ed25519/ref10/ge.h	/^#define GE_H$/;"	d
GOOD	src/test/test_dir.c	/^#define GOOD(/;"	d	file:
GOOD	src/test/test_dir.c	/^#undef GOOD$/;"	d	file:
GOT_CMUX_ATTACH	src/test/test_circuitlist.c	/^#define GOT_CMUX_ATTACH(/;"	d	file:
GOT_CMUX_DETACH	src/test/test_circuitlist.c	/^#define GOT_CMUX_DETACH(/;"	d	file:
GRD_FLAG_ADDR_ONLY	src/or/channel.h	/^#define GRD_FLAG_ADDR_ONLY /;"	d
GRD_FLAG_ORIGINAL	src/or/channel.h	/^#define GRD_FLAG_ORIGINAL /;"	d
GREEDY_DESCRIPTOR_RETRY_INTERVAL	src/or/main.c	/^#define GREEDY_DESCRIPTOR_RETRY_INTERVAL /;"	d	file:
GT	src/test/test_util.c	/^#define GT /;"	d	file:
GUARDFRACTION_DATE_STR	src/or/dirserv.c	/^#define GUARDFRACTION_DATE_STR /;"	d	file:
GUARDFRACTION_GUARD	src/or/dirserv.c	/^#define GUARDFRACTION_GUARD /;"	d	file:
GUARDFRACTION_INPUTS	src/or/dirserv.c	/^#define GUARDFRACTION_INPUTS /;"	d	file:
GUARDFRACTION_VERSION	src/or/dirserv.c	/^#define GUARDFRACTION_VERSION /;"	d	file:
GZIP_METHOD	src/common/torgzip.h	/^  NO_METHOD=0, GZIP_METHOD=1, ZLIB_METHOD=2, UNKNOWN_METHOD=3$/;"	e	enum:__anon80
GeoIPExcludeUnknown	src/or/or.h	/^  int GeoIPExcludeUnknown;$/;"	m	struct:__anon55
GeoIPFile	src/or/or.h	/^  char *GeoIPFile;$/;"	m	struct:__anon55
GeoIPv6File	src/or/or.h	/^  char *GeoIPv6File;$/;"	m	struct:__anon55
GetAdaptersAddresses_fn_t	src/common/address.c	/^typedef ULONG (WINAPI *GetAdaptersAddresses_fn_t)($/;"	t	file:
Group	src/or/or.h	/^  char *Group; \/**< Name of group to run Tor as. *\/$/;"	m	struct:__anon55
GuardLifetime	src/or/or.h	/^  int GuardLifetime;$/;"	m	struct:__anon55
GuardfractionFile	src/or/or.h	/^  char *GuardfractionFile;$/;"	m	struct:__anon55
H	src/ext/ed25519/donna/ed25519-hash.h	/^	uint64_t H[8];$/;"	m	struct:sha512_state_t
HALF_ROUND	src/ext/csiphash.c	/^#define HALF_ROUND(/;"	d	file:
HASH_BLOCK_SIZE	src/ext/ed25519/donna/ed25519-hash.h	/^#define HASH_BLOCK_SIZE /;"	d
HASH_DIGEST_SIZE	src/ext/ed25519/donna/ed25519-hash.h	/^#define HASH_DIGEST_SIZE /;"	d
HAS_BUFFEREVENT	src/or/or.h	/^#define HAS_BUFFEREVENT(/;"	d
HAVE_EVDNS_SET_DEFAULT_OUTGOING_BIND_ADDRESS	src/or/dns.c	/^#define HAVE_EVDNS_SET_DEFAULT_OUTGOING_BIND_ADDRESS$/;"	d	file:
HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS	src/ext/ed25519/donna/ed25519-donna-32bit-sse2.h	/^#define HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS$/;"	d
HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS	src/ext/ed25519/donna/ed25519-donna-64bit-sse2.h	/^#define HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS$/;"	d
HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS	src/ext/ed25519/donna/ed25519-donna-64bit-x86-32bit.h	/^#define HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS$/;"	d
HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS	src/ext/ed25519/donna/ed25519-donna-64bit-x86.h	/^#define HAVE_GE25519_SCALARMULT_BASE_CHOOSE_NIELS$/;"	d
HAVE_IFADDRS_TO_SMARTLIST	src/common/address.h	/^#define HAVE_IFADDRS_TO_SMARTLIST$/;"	d
HAVE_IFCONF_TO_SMARTLIST	src/common/address.h	/^#define HAVE_IFCONF_TO_SMARTLIST$/;"	d
HAVE_INT16_T	src/common/torint.h	/^#define HAVE_INT16_T$/;"	d
HAVE_INT32_T	src/common/torint.h	/^#define HAVE_INT32_T$/;"	d
HAVE_INT64_T	src/common/torint.h	/^#define HAVE_INT64_T$/;"	d
HAVE_INT8_T	src/common/torint.h	/^#define HAVE_INT8_T$/;"	d
HAVE_INTPTR_T	src/common/torint.h	/^#define HAVE_INTPTR_T$/;"	d
HAVE_IP_ADAPTER_TO_SMARTLIST	src/common/address.h	/^#define HAVE_IP_ADAPTER_TO_SMARTLIST$/;"	d
HAVE_NATIVE_UINT128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define HAVE_NATIVE_UINT128$/;"	d
HAVE_NATIVE_UINT128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define HAVE_NATIVE_UINT128$/;"	d
HAVE_PERIODIC	src/common/compat_libevent.c	/^#define HAVE_PERIODIC$/;"	d	file:
HAVE_READPASSPHRASE	src/ext/tor_readpassphrase.h	/^#define HAVE_READPASSPHRASE$/;"	d
HAVE_SCRYPT	src/common/crypto_s2k.c	/^#define HAVE_SCRYPT$/;"	d	file:
HAVE_UINT128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define HAVE_UINT128$/;"	d
HAVE_UINT128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define HAVE_UINT128$/;"	d
HAVE_UINT16_T	src/common/torint.h	/^#define HAVE_UINT16_T$/;"	d
HAVE_UINT32_T	src/common/torint.h	/^#define HAVE_UINT32_T$/;"	d
HAVE_UINT64_T	src/common/torint.h	/^#define HAVE_UINT64_T$/;"	d
HAVE_UINT8_T	src/common/torint.h	/^#define HAVE_UINT8_T$/;"	d
HAVE_UINTPTR_T	src/common/torint.h	/^#define HAVE_UINTPTR_T$/;"	d
HEADER_VERSION	src/common/compat_libevent.c	/^#define HEADER_VERSION /;"	d	file:
HEADER_VERSION	src/test/test_compat_libevent.c	/^#define HEADER_VERSION /;"	d	file:
HELPER_NUMBER_OF_DESCRIPTORS	src/test/test_helpers.h	/^#define HELPER_NUMBER_OF_DESCRIPTORS /;"	d
HEX1	src/test/test_dir.c	/^#define HEX1 /;"	d	file:
HEX1	src/test/test_dir_handle_get.c	/^  #define HEX1 /;"	d	file:
HEX1	src/test/test_dir_handle_get.c	/^#define HEX1 /;"	d	file:
HEX2	src/test/test_dir.c	/^#define HEX2 /;"	d	file:
HEX2	src/test/test_dir_handle_get.c	/^  #define HEX2 /;"	d	file:
HEX2	src/test/test_dir_handle_get.c	/^#define HEX2 /;"	d	file:
HEX256_1	src/test/test_dir.c	/^#define HEX256_1 /;"	d	file:
HEX256_2	src/test/test_dir.c	/^#define HEX256_2 /;"	d	file:
HEX256_3	src/test/test_dir.c	/^#define HEX256_3 /;"	d	file:
HEX3	src/test/test_dir.c	/^#define HEX3 /;"	d	file:
HEX_CHARACTERS	src/common/util.h	/^#define HEX_CHARACTERS /;"	d
HEX_DIGEST256_LEN	src/common/crypto.h	/^#define HEX_DIGEST256_LEN /;"	d
HEX_DIGEST_LEN	src/common/crypto.h	/^#define HEX_DIGEST_LEN /;"	d
HEX_ERRNO_SIZE	src/common/util.h	/^#define HEX_ERRNO_SIZE /;"	d
HIBERNATE_PRIVATE	src/or/hibernate.c	/^#define HIBERNATE_PRIVATE$/;"	d	file:
HIBERNATE_PRIVATE	src/test/test_accounting.c	/^#define HIBERNATE_PRIVATE$/;"	d	file:
HIBERNATE_PRIVATE	src/test/test_dir.c	/^#define HIBERNATE_PRIVATE$/;"	d	file:
HIBERNATE_PRIVATE	src/test/test_status.c	/^#define HIBERNATE_PRIVATE$/;"	d	file:
HIBERNATE_STATE_DORMANT	src/or/hibernate.h	/^  HIBERNATE_STATE_DORMANT=4,$/;"	e	enum:__anon31
HIBERNATE_STATE_EXITING	src/or/hibernate.h	/^  HIBERNATE_STATE_EXITING=2,$/;"	e	enum:__anon31
HIBERNATE_STATE_INITIAL	src/or/hibernate.h	/^  HIBERNATE_STATE_INITIAL=5$/;"	e	enum:__anon31
HIBERNATE_STATE_LIVE	src/or/hibernate.h	/^  HIBERNATE_STATE_LIVE=1,$/;"	e	enum:__anon31
HIBERNATE_STATE_LOWBANDWIDTH	src/or/hibernate.h	/^  HIBERNATE_STATE_LOWBANDWIDTH=3,$/;"	e	enum:__anon31
HIBERNATION_PUBLICATION_SKEW	src/or/dirserv.c	/^#define HIBERNATION_PUBLICATION_SKEW /;"	d	file:
HIGH_COMPRESSION	src/common/torgzip.h	/^  HIGH_COMPRESSION, MEDIUM_COMPRESSION, LOW_COMPRESSION$/;"	e	enum:__anon81
HSDIR_EXIST_ID	src/test/test_hs.c	/^#define HSDIR_EXIST_ID /;"	d	file:
HSDIR_NONE_EXIST_ID	src/test/test_hs.c	/^#define HSDIR_NONE_EXIST_ID /;"	d	file:
HTTPProxy	src/or/or.h	/^  char *HTTPProxy; \/**< hostname[:port] to use as http proxy, if any. *\/$/;"	m	struct:__anon55
HTTPProxyAddr	src/or/or.h	/^  tor_addr_t HTTPProxyAddr; \/**< Parsed IPv4 addr for http proxy, if any. *\/$/;"	m	struct:__anon55
HTTPProxyAuthenticator	src/or/or.h	/^  char *HTTPProxyAuthenticator; \/**< username:password string, if any. *\/$/;"	m	struct:__anon55
HTTPProxyPort	src/or/or.h	/^  uint16_t HTTPProxyPort; \/**< Parsed port for http proxy, if any. *\/$/;"	m	struct:__anon55
HTTPSProxy	src/or/or.h	/^  char *HTTPSProxy; \/**< hostname[:port] to use as https proxy, if any. *\/$/;"	m	struct:__anon55
HTTPSProxyAddr	src/or/or.h	/^  tor_addr_t HTTPSProxyAddr; \/**< Parsed addr for https proxy, if any. *\/$/;"	m	struct:__anon55
HTTPSProxyAuthenticator	src/or/or.h	/^  char *HTTPSProxyAuthenticator; \/**< username:password string, if any. *\/$/;"	m	struct:__anon55
HTTPSProxyPort	src/or/or.h	/^  uint16_t HTTPSProxyPort; \/**< Parsed port for https proxy, if any. *\/$/;"	m	struct:__anon55
HT_ASSERT_	src/ext/ht.h	/^#define HT_ASSERT_(/;"	d
HT_BUCKET_	src/ext/ht.h	/^#define HT_BUCKET_(/;"	d
HT_BUCKET_NUM_	src/ext/ht.h	/^#define HT_BUCKET_NUM_(/;"	d
HT_CLEAR	src/ext/ht.h	/^#define HT_CLEAR(/;"	d
HT_ELT_HASH_	src/ext/ht.h	/^#define HT_ELT_HASH_(/;"	d
HT_EMPTY	src/ext/ht.h	/^#define HT_EMPTY(/;"	d
HT_ENTRY	src/ext/ht.h	/^#define HT_ENTRY(/;"	d
HT_FIND	src/ext/ht.h	/^#define HT_FIND(/;"	d
HT_FIND_OR_INSERT_	src/ext/ht.h	/^#define HT_FIND_OR_INSERT_(/;"	d
HT_FOI_INSERT_	src/ext/ht.h	/^#define HT_FOI_INSERT_(/;"	d
HT_FOREACH	src/ext/ht.h	/^#define HT_FOREACH(/;"	d
HT_GENERATE	src/ext/ht.h	/^#define HT_GENERATE(/;"	d
HT_GENERATE2	src/ext/ht.h	/^#define HT_GENERATE2(/;"	d
HT_HEAD	src/ext/ht.h	/^#define HT_HEAD(/;"	d
HT_H_INCLUDED_	src/ext/ht.h	/^#define HT_H_INCLUDED_$/;"	d
HT_INIT	src/ext/ht.h	/^#define HT_INIT(/;"	d
HT_INITIALIZER	src/ext/ht.h	/^#define HT_INITIALIZER(/;"	d
HT_INSERT	src/ext/ht.h	/^#define HT_INSERT(/;"	d
HT_MEM_USAGE	src/ext/ht.h	/^#define HT_MEM_USAGE(/;"	d
HT_NEXT	src/ext/ht.h	/^#define HT_NEXT(/;"	d
HT_NEXT_RMV	src/ext/ht.h	/^#define HT_NEXT_RMV(/;"	d
HT_PROTOTYPE	src/ext/ht.h	/^#define HT_PROTOTYPE(/;"	d
HT_PROTOTYPE	src/or/fp_pair.c	/^HT_PROTOTYPE(fp_pair_map_impl, fp_pair_map_entry_s, node,$/;"	f
HT_PROTOTYPE	src/or/policies.c	/^HT_PROTOTYPE(policy_map, policy_map_ent_t, node, policy_hash,$/;"	f
HT_REMOVE	src/ext/ht.h	/^#define HT_REMOVE(/;"	d
HT_REPLACE	src/ext/ht.h	/^#define HT_REPLACE(/;"	d
HT_REP_IS_BAD_	src/ext/ht.h	/^#define HT_REP_IS_BAD_(/;"	d
HT_SET_HASHVAL_	src/ext/ht.h	/^#define HT_SET_HASHVAL_(/;"	d
HT_SET_HASH_	src/ext/ht.h	/^#define HT_SET_HASH_(/;"	d
HT_SIZE	src/ext/ht.h	/^#define HT_SIZE(/;"	d
HT_START	src/ext/ht.h	/^#define HT_START(/;"	d
HardwareAccel	src/or/or.h	/^  int HardwareAccel; \/**< Boolean: Should we enable OpenSSL hardware$/;"	m	struct:__anon55
HashedControlPassword	src/or/or.h	/^  config_line_t *HashedControlPassword;$/;"	m	struct:__anon55
HashedControlSessionPassword	src/or/or.h	/^  config_line_t *HashedControlSessionPassword;$/;"	m	struct:__anon55
HeartbeatPeriod	src/or/or.h	/^  int HeartbeatPeriod; \/**< Log heartbeat messages after this many seconds$/;"	m	struct:__anon55
HidServAuth	src/or/or.h	/^  config_line_t *HidServAuth; \/**< List of configuration lines for client-side$/;"	m	struct:__anon55
HiddenServiceStatistics	src/or/or.h	/^  int HiddenServiceStatistics;$/;"	m	struct:__anon55
I64_FORMAT	src/common/compat.h	/^#define I64_FORMAT /;"	d
I64_LITERAL	src/common/compat.h	/^#define I64_LITERAL(/;"	d
I64_PRINTF_ARG	src/common/compat.h	/^#define I64_PRINTF_ARG(/;"	d
I64_PRINTF_TYPE	src/test/test.h	/^#define I64_PRINTF_TYPE /;"	d
I64_SCANF_ARG	src/common/compat.h	/^#define I64_SCANF_ARG(/;"	d
IDENTITY_CERT_LIFETIME	src/common/tortls.c	/^#define IDENTITY_CERT_LIFETIME /;"	d	file:
IDENTITY_KEY_BITS	src/tools/tor-gencert.c	/^#define IDENTITY_KEY_BITS /;"	d	file:
IDLE_ONE_HOP_CIRC_TIMEOUT	src/or/circuituse.c	/^#define IDLE_ONE_HOP_CIRC_TIMEOUT /;"	d	file:
IDLE_OR_CONN_TIMEOUT_CANONICAL	src/or/connection_or.c	/^#define IDLE_OR_CONN_TIMEOUT_CANONICAL /;"	d	file:
IDLE_OR_CONN_TIMEOUT_NONCANONICAL	src/or/connection_or.c	/^#define IDLE_OR_CONN_TIMEOUT_NONCANONICAL /;"	d	file:
IDLE_TIMEOUT_WHILE_LEARNING	src/or/circuituse.c	/^#define IDLE_TIMEOUT_WHILE_LEARNING /;"	d	file:
IDXP	src/common/container.c	/^#define IDXP(/;"	d	file:
IDX_OF_ITEM	src/common/container.c	/^#define IDX_OF_ITEM(/;"	d	file:
IFREQ_SIZE	src/common/address.c	/^#define IFREQ_SIZE /;"	d	file:
IF_HAS_BUFFEREVENT	src/or/or.h	/^#define IF_HAS_BUFFEREVENT(/;"	d
IF_HAS_NO_BUFFEREVENT	src/or/or.h	/^#define IF_HAS_NO_BUFFEREVENT(/;"	d
IMPLEMENT_MAP_FNS	src/common/container.c	/^#define IMPLEMENT_MAP_FNS(/;"	d	file:
IMPLEMENT_ORDER_FUNC	src/common/container.c	/^#define IMPLEMENT_ORDER_FUNC(/;"	d	file:
IMPLEMENT_ORDER_FUNC	src/common/container.c	/^IMPLEMENT_ORDER_FUNC(find_nth_time, time_t)$/;"	f
IMPOSSIBLE_TO_DOWNLOAD	src/or/or.h	/^#define IMPOSSIBLE_TO_DOWNLOAD /;"	d
INET_NTOA_BUF_LEN	src/common/address.h	/^#define INET_NTOA_BUF_LEN /;"	d
INIT_ED_KEY_CREATE	src/or/routerkeys.h	/^#define INIT_ED_KEY_CREATE /;"	d
INIT_ED_KEY_EXTRA_STRONG	src/or/routerkeys.h	/^#define INIT_ED_KEY_EXTRA_STRONG /;"	d
INIT_ED_KEY_INCLUDE_SIGNING_KEY_IN_CERT	src/or/routerkeys.h	/^#define INIT_ED_KEY_INCLUDE_SIGNING_KEY_IN_CERT /;"	d
INIT_ED_KEY_MISSING_SECRET_OK	src/or/routerkeys.h	/^#define INIT_ED_KEY_MISSING_SECRET_OK /;"	d
INIT_ED_KEY_NEEDCERT	src/or/routerkeys.h	/^#define INIT_ED_KEY_NEEDCERT /;"	d
INIT_ED_KEY_NO_REPAIR	src/or/routerkeys.h	/^#define INIT_ED_KEY_NO_REPAIR /;"	d
INIT_ED_KEY_OMIT_SECRET	src/or/routerkeys.h	/^#define INIT_ED_KEY_OMIT_SECRET /;"	d
INIT_ED_KEY_REPLACE	src/or/routerkeys.h	/^#define INIT_ED_KEY_REPLACE /;"	d
INIT_ED_KEY_SPLIT	src/or/routerkeys.h	/^#define INIT_ED_KEY_SPLIT /;"	d
INIT_ED_KEY_SUGGEST_KEYGEN	src/or/routerkeys.h	/^#define INIT_ED_KEY_SUGGEST_KEYGEN /;"	d
INIT_ED_KEY_TRY_ENCRYPTED	src/or/routerkeys.h	/^#define INIT_ED_KEY_TRY_ENCRYPTED /;"	d
INLINE	src/common/compat.h	/^#define INLINE /;"	d
INSTRUMENT_DOWNLOADS	src/or/or.h	/^#define INSTRUMENT_DOWNLOADS /;"	d
INT	src/test/test_ntor_cl.c	/^#define INT(/;"	d	file:
INT16_MAX	src/common/torint.h	/^#define INT16_MAX /;"	d
INT16_MIN	src/common/torint.h	/^#define INT16_MIN /;"	d
INT32_MAX	src/common/torint.h	/^#define INT32_MAX /;"	d
INT32_MIN	src/common/torint.h	/^#define INT32_MIN /;"	d
INT64_HW_MEM	src/common/compat.c	/^#define INT64_HW_MEM /;"	d	file:
INT64_MAX	src/common/torint.h	/^#define INT64_MAX /;"	d
INT64_MIN	src/common/torint.h	/^#define INT64_MIN /;"	d
INTPTR_PRINTF_ARG	src/common/compat.h	/^#define INTPTR_PRINTF_ARG(/;"	d
INTPTR_T_FORMAT	src/common/compat.h	/^#define INTPTR_T_FORMAT /;"	d
INTRODUCE_LEGACY	src/test/test_introduce.c	/^#define INTRODUCE_LEGACY(/;"	d	file:
INTRO_CIRC_RETRY_PERIOD	src/or/rendservice.c	/^#define INTRO_CIRC_RETRY_PERIOD /;"	d	file:
INTRO_POINT_FAILURE_GENERIC	src/or/rendcommon.h	/^  INTRO_POINT_FAILURE_GENERIC     = 0,$/;"	e	enum:rend_intro_point_failure_t
INTRO_POINT_FAILURE_TIMEOUT	src/or/rendcommon.h	/^  INTRO_POINT_FAILURE_TIMEOUT     = 1,$/;"	e	enum:rend_intro_point_failure_t
INTRO_POINT_FAILURE_UNREACHABLE	src/or/rendcommon.h	/^  INTRO_POINT_FAILURE_UNREACHABLE = 2,$/;"	e	enum:rend_intro_point_failure_t
INTRO_POINT_LIFETIME_MAX_SECONDS	src/or/or.h	/^#define INTRO_POINT_LIFETIME_MAX_SECONDS /;"	d
INTRO_POINT_LIFETIME_MIN_SECONDS	src/or/or.h	/^#define INTRO_POINT_LIFETIME_MIN_SECONDS /;"	d
INTRO_POINT_MAX_LIFETIME_INTRODUCTIONS	src/or/or.h	/^#define INTRO_POINT_MAX_LIFETIME_INTRODUCTIONS /;"	d
INTRO_POINT_MIN_LIFETIME_INTRODUCTIONS	src/or/or.h	/^#define INTRO_POINT_MIN_LIFETIME_INTRODUCTIONS /;"	d
INT_MAX	src/common/torint.h	/^#define INT_MAX /;"	d
IO_STREAM_CLOSED	src/common/util.h	/^  IO_STREAM_CLOSED$/;"	e	enum:stream_status
IO_STREAM_EAGAIN	src/common/util.h	/^  IO_STREAM_EAGAIN,$/;"	e	enum:stream_status
IO_STREAM_OKAY	src/common/util.h	/^  IO_STREAM_OKAY,$/;"	e	enum:stream_status
IO_STREAM_TERM	src/common/util.h	/^  IO_STREAM_TERM,$/;"	e	enum:stream_status
IP_GRANULARITY	src/or/geoip.c	/^#define IP_GRANULARITY /;"	d	file:
IPv6Exit	src/or/or.h	/^  int IPv6Exit; \/**< Do we support exiting to IPv6 addresses? *\/$/;"	m	struct:__anon55
ISO_CLIENTADDR	src/or/or.h	/^#define ISO_CLIENTADDR /;"	d
ISO_CLIENTPROTO	src/or/or.h	/^#define ISO_CLIENTPROTO /;"	d
ISO_DEFAULT	src/or/or.h	/^#define ISO_DEFAULT /;"	d
ISO_DESTADDR	src/or/or.h	/^#define ISO_DESTADDR /;"	d
ISO_DESTPORT	src/or/or.h	/^#define ISO_DESTPORT /;"	d
ISO_NYM_EPOCH	src/or/or.h	/^#define ISO_NYM_EPOCH /;"	d
ISO_SESSIONGRP	src/or/or.h	/^#define ISO_SESSIONGRP /;"	d
ISO_SOCKSAUTH	src/or/or.h	/^#define ISO_SOCKSAUTH /;"	d
ISO_STREAM	src/or/or.h	/^#define ISO_STREAM /;"	d
ISO_TIME_LEN	src/common/util.h	/^#define ISO_TIME_LEN /;"	d
ISO_TIME_USEC_LEN	src/common/util.h	/^#define ISO_TIME_USEC_LEN /;"	d
IS_LEAPYEAR	src/common/util.c	/^#define IS_LEAPYEAR(/;"	d	file:
IS_LITTLE_ENDIAN	src/ext/trunnel/trunnel.c	/^#    define IS_LITTLE_ENDIAN$/;"	d	file:
IS_LITTLE_ENDIAN	src/ext/trunnel/trunnel.c	/^#  define IS_LITTLE_ENDIAN /;"	d	file:
IS_RUNNING_OR_NOTRUNNING	src/test/test_util_slow.c	/^#define IS_RUNNING_OR_NOTRUNNING(/;"	d	file:
IS_RUNNING_OR_NOTRUNNING	src/test/test_util_slow.c	/^#undef IS_RUNNING_OR_NOTRUNNING$/;"	d	file:
ITEM	src/or/control.c	/^#define ITEM(/;"	d	file:
JOURNAL_LINE_LEN	src/or/keypin.c	/^#define JOURNAL_LINE_LEN /;"	d	file:
KEYPIN_ADDED	src/or/keypin.h	/^#define KEYPIN_ADDED /;"	d
KEYPIN_FOUND	src/or/keypin.h	/^#define KEYPIN_FOUND /;"	d
KEYPIN_MISMATCH	src/or/keypin.h	/^#define KEYPIN_MISMATCH /;"	d
KEYPIN_NOT_FOUND	src/or/keypin.h	/^#define KEYPIN_NOT_FOUND /;"	d
KEYPIN_PRIVATE	src/or/keypin.c	/^#define KEYPIN_PRIVATE$/;"	d	file:
KEYPIN_PRIVATE	src/test/test_keypin.c	/^#define KEYPIN_PRIVATE$/;"	d	file:
K_A	src/or/routerparse.c	/^  K_A,$/;"	e	enum:__anon96	file:
K_ACCEPT	src/or/routerparse.c	/^  K_ACCEPT = 0,$/;"	e	enum:__anon96	file:
K_ACCEPT6	src/or/routerparse.c	/^  K_ACCEPT6,$/;"	e	enum:__anon96	file:
K_ADDITIONAL_DIGEST	src/or/routerparse.c	/^  K_ADDITIONAL_DIGEST,$/;"	e	enum:__anon96	file:
K_ADDITIONAL_SIGNATURE	src/or/routerparse.c	/^  K_ADDITIONAL_SIGNATURE,$/;"	e	enum:__anon96	file:
K_ALLOW_SINGLE_HOP_EXITS	src/or/routerparse.c	/^  K_ALLOW_SINGLE_HOP_EXITS,$/;"	e	enum:__anon96	file:
K_BANDWIDTH	src/or/routerparse.c	/^  K_BANDWIDTH,$/;"	e	enum:__anon96	file:
K_BW_WEIGHTS	src/or/routerparse.c	/^  K_BW_WEIGHTS,$/;"	e	enum:__anon96	file:
K_CACHES_EXTRA_INFO	src/or/routerparse.c	/^  K_CACHES_EXTRA_INFO,$/;"	e	enum:__anon96	file:
K_CELL_CIRCS	src/or/routerparse.c	/^  K_CELL_CIRCS,$/;"	e	enum:__anon96	file:
K_CELL_END	src/or/routerparse.c	/^  K_CELL_END,$/;"	e	enum:__anon96	file:
K_CELL_PROCESSED	src/or/routerparse.c	/^  K_CELL_PROCESSED,$/;"	e	enum:__anon96	file:
K_CELL_QUEUED	src/or/routerparse.c	/^  K_CELL_QUEUED,$/;"	e	enum:__anon96	file:
K_CELL_TIME	src/or/routerparse.c	/^  K_CELL_TIME,$/;"	e	enum:__anon96	file:
K_CLIENT_VERSIONS	src/or/routerparse.c	/^  K_CLIENT_VERSIONS,$/;"	e	enum:__anon96	file:
K_CONSENSUS_DIGEST	src/or/routerparse.c	/^  K_CONSENSUS_DIGEST,$/;"	e	enum:__anon96	file:
K_CONSENSUS_METHOD	src/or/routerparse.c	/^  K_CONSENSUS_METHOD,$/;"	e	enum:__anon96	file:
K_CONSENSUS_METHODS	src/or/routerparse.c	/^  K_CONSENSUS_METHODS,$/;"	e	enum:__anon96	file:
K_CONTACT	src/or/routerparse.c	/^  K_CONTACT,$/;"	e	enum:__anon96	file:
K_DIRECTORY_FOOTER	src/or/routerparse.c	/^  K_DIRECTORY_FOOTER,$/;"	e	enum:__anon96	file:
K_DIRECTORY_SIGNATURE	src/or/routerparse.c	/^  K_DIRECTORY_SIGNATURE,$/;"	e	enum:__anon96	file:
K_DIRREQ_END	src/or/routerparse.c	/^  K_DIRREQ_END,$/;"	e	enum:__anon96	file:
K_DIRREQ_V2_DIR	src/or/routerparse.c	/^  K_DIRREQ_V2_DIR,$/;"	e	enum:__anon96	file:
K_DIRREQ_V2_IPS	src/or/routerparse.c	/^  K_DIRREQ_V2_IPS,$/;"	e	enum:__anon96	file:
K_DIRREQ_V2_REQS	src/or/routerparse.c	/^  K_DIRREQ_V2_REQS,$/;"	e	enum:__anon96	file:
K_DIRREQ_V2_RESP	src/or/routerparse.c	/^  K_DIRREQ_V2_RESP,$/;"	e	enum:__anon96	file:
K_DIRREQ_V2_SHARE	src/or/routerparse.c	/^  K_DIRREQ_V2_SHARE,$/;"	e	enum:__anon96	file:
K_DIRREQ_V2_TUN	src/or/routerparse.c	/^  K_DIRREQ_V2_TUN,$/;"	e	enum:__anon96	file:
K_DIRREQ_V3_DIR	src/or/routerparse.c	/^  K_DIRREQ_V3_DIR,$/;"	e	enum:__anon96	file:
K_DIRREQ_V3_IPS	src/or/routerparse.c	/^  K_DIRREQ_V3_IPS,$/;"	e	enum:__anon96	file:
K_DIRREQ_V3_REQS	src/or/routerparse.c	/^  K_DIRREQ_V3_REQS,$/;"	e	enum:__anon96	file:
K_DIRREQ_V3_RESP	src/or/routerparse.c	/^  K_DIRREQ_V3_RESP,$/;"	e	enum:__anon96	file:
K_DIRREQ_V3_SHARE	src/or/routerparse.c	/^  K_DIRREQ_V3_SHARE,$/;"	e	enum:__anon96	file:
K_DIRREQ_V3_TUN	src/or/routerparse.c	/^  K_DIRREQ_V3_TUN,$/;"	e	enum:__anon96	file:
K_DIR_ADDRESS	src/or/routerparse.c	/^  K_DIR_ADDRESS,$/;"	e	enum:__anon96	file:
K_DIR_IDENTITY_KEY	src/or/routerparse.c	/^  K_DIR_IDENTITY_KEY,$/;"	e	enum:__anon96	file:
K_DIR_KEY_CERTIFICATE_VERSION	src/or/routerparse.c	/^  K_DIR_KEY_CERTIFICATE_VERSION,$/;"	e	enum:__anon96	file:
K_DIR_KEY_CERTIFICATION	src/or/routerparse.c	/^  K_DIR_KEY_CERTIFICATION,$/;"	e	enum:__anon96	file:
K_DIR_KEY_CROSSCERT	src/or/routerparse.c	/^  K_DIR_KEY_CROSSCERT,$/;"	e	enum:__anon96	file:
K_DIR_KEY_EXPIRES	src/or/routerparse.c	/^  K_DIR_KEY_EXPIRES,$/;"	e	enum:__anon96	file:
K_DIR_KEY_PUBLISHED	src/or/routerparse.c	/^  K_DIR_KEY_PUBLISHED,$/;"	e	enum:__anon96	file:
K_DIR_OPTIONS	src/or/routerparse.c	/^  K_DIR_OPTIONS,$/;"	e	enum:__anon96	file:
K_DIR_SIGNING_KEY	src/or/routerparse.c	/^  K_DIR_SIGNING_KEY,$/;"	e	enum:__anon96	file:
K_DIR_SOURCE	src/or/routerparse.c	/^  K_DIR_SOURCE,$/;"	e	enum:__anon96	file:
K_ENTRY_END	src/or/routerparse.c	/^  K_ENTRY_END,$/;"	e	enum:__anon96	file:
K_ENTRY_IPS	src/or/routerparse.c	/^  K_ENTRY_IPS,$/;"	e	enum:__anon96	file:
K_EXIT_END	src/or/routerparse.c	/^  K_EXIT_END,$/;"	e	enum:__anon96	file:
K_EXIT_OPENED	src/or/routerparse.c	/^  K_EXIT_OPENED,$/;"	e	enum:__anon96	file:
K_EXIT_READ	src/or/routerparse.c	/^  K_EXIT_READ,$/;"	e	enum:__anon96	file:
K_EXIT_WRITTEN	src/or/routerparse.c	/^  K_EXIT_WRITTEN,$/;"	e	enum:__anon96	file:
K_EXTRA_INFO	src/or/routerparse.c	/^  K_EXTRA_INFO,$/;"	e	enum:__anon96	file:
K_EXTRA_INFO_DIGEST	src/or/routerparse.c	/^  K_EXTRA_INFO_DIGEST,$/;"	e	enum:__anon96	file:
K_FAMILY	src/or/routerparse.c	/^  K_FAMILY,$/;"	e	enum:__anon96	file:
K_FINGERPRINT	src/or/routerparse.c	/^  K_FINGERPRINT,$/;"	e	enum:__anon96	file:
K_FRESH_UNTIL	src/or/routerparse.c	/^  K_FRESH_UNTIL,$/;"	e	enum:__anon96	file:
K_HIBERNATING	src/or/routerparse.c	/^  K_HIBERNATING,$/;"	e	enum:__anon96	file:
K_HIDDEN_SERVICE_DIR	src/or/routerparse.c	/^  K_HIDDEN_SERVICE_DIR,$/;"	e	enum:__anon96	file:
K_ID	src/or/routerparse.c	/^  K_ID,$/;"	e	enum:__anon96	file:
K_IDENTITY_ED25519	src/or/routerparse.c	/^  K_IDENTITY_ED25519,$/;"	e	enum:__anon96	file:
K_IPV6_POLICY	src/or/routerparse.c	/^  K_IPV6_POLICY,$/;"	e	enum:__anon96	file:
K_KNOWN_FLAGS	src/or/routerparse.c	/^  K_KNOWN_FLAGS,$/;"	e	enum:__anon96	file:
K_LEGACY_DIR_KEY	src/or/routerparse.c	/^  K_LEGACY_DIR_KEY,$/;"	e	enum:__anon96	file:
K_M	src/or/routerparse.c	/^  K_M,$/;"	e	enum:__anon96	file:
K_MASTER_KEY_ED25519	src/or/routerparse.c	/^  K_MASTER_KEY_ED25519,$/;"	e	enum:__anon96	file:
K_NETWORK_STATUS	src/or/routerparse.c	/^  K_NETWORK_STATUS,$/;"	e	enum:__anon96	file:
K_NETWORK_STATUS_VERSION	src/or/routerparse.c	/^  K_NETWORK_STATUS_VERSION,$/;"	e	enum:__anon96	file:
K_NTOR_ONION_KEY_CROSSCERT	src/or/routerparse.c	/^  K_NTOR_ONION_KEY_CROSSCERT,$/;"	e	enum:__anon96	file:
K_ONION_KEY	src/or/routerparse.c	/^  K_ONION_KEY,$/;"	e	enum:__anon96	file:
K_ONION_KEY_CROSSCERT	src/or/routerparse.c	/^  K_ONION_KEY_CROSSCERT,$/;"	e	enum:__anon96	file:
K_ONION_KEY_NTOR	src/or/routerparse.c	/^  K_ONION_KEY_NTOR,$/;"	e	enum:__anon96	file:
K_OPT	src/or/routerparse.c	/^  K_OPT,$/;"	e	enum:__anon96	file:
K_OR_ADDRESS	src/or/routerparse.c	/^  K_OR_ADDRESS,$/;"	e	enum:__anon96	file:
K_P	src/or/routerparse.c	/^  K_P,$/;"	e	enum:__anon96	file:
K_P6	src/or/routerparse.c	/^  K_P6,$/;"	e	enum:__anon96	file:
K_PACKAGE	src/or/routerparse.c	/^  K_PACKAGE,$/;"	e	enum:__anon96	file:
K_PARAMS	src/or/routerparse.c	/^  K_PARAMS,$/;"	e	enum:__anon96	file:
K_PLATFORM	src/or/routerparse.c	/^  K_PLATFORM,$/;"	e	enum:__anon96	file:
K_PUBLISHED	src/or/routerparse.c	/^  K_PUBLISHED,$/;"	e	enum:__anon96	file:
K_R	src/or/routerparse.c	/^  K_R,$/;"	e	enum:__anon96	file:
K_READ_HISTORY	src/or/routerparse.c	/^  K_READ_HISTORY,$/;"	e	enum:__anon96	file:
K_RECOMMENDED_SOFTWARE	src/or/routerparse.c	/^  K_RECOMMENDED_SOFTWARE,$/;"	e	enum:__anon96	file:
K_REJECT	src/or/routerparse.c	/^  K_REJECT,$/;"	e	enum:__anon96	file:
K_REJECT6	src/or/routerparse.c	/^  K_REJECT6,$/;"	e	enum:__anon96	file:
K_ROUTER	src/or/routerparse.c	/^  K_ROUTER,$/;"	e	enum:__anon96	file:
K_ROUTER_SIGNATURE	src/or/routerparse.c	/^  K_ROUTER_SIGNATURE,$/;"	e	enum:__anon96	file:
K_ROUTER_SIG_ED25519	src/or/routerparse.c	/^  K_ROUTER_SIG_ED25519,$/;"	e	enum:__anon96	file:
K_ROUTER_STATUS	src/or/routerparse.c	/^  K_ROUTER_STATUS,$/;"	e	enum:__anon96	file:
K_RUNNING_ROUTERS	src/or/routerparse.c	/^  K_RUNNING_ROUTERS,$/;"	e	enum:__anon96	file:
K_S	src/or/routerparse.c	/^  K_S,$/;"	e	enum:__anon96	file:
K_SERVER_VERSIONS	src/or/routerparse.c	/^  K_SERVER_VERSIONS,$/;"	e	enum:__anon96	file:
K_SIGNED_DIRECTORY	src/or/routerparse.c	/^  K_SIGNED_DIRECTORY,$/;"	e	enum:__anon96	file:
K_SIGNING_KEY	src/or/routerparse.c	/^  K_SIGNING_KEY,$/;"	e	enum:__anon96	file:
K_UPTIME	src/or/routerparse.c	/^  K_UPTIME,$/;"	e	enum:__anon96	file:
K_V	src/or/routerparse.c	/^  K_V,$/;"	e	enum:__anon96	file:
K_VALID_AFTER	src/or/routerparse.c	/^  K_VALID_AFTER,$/;"	e	enum:__anon96	file:
K_VALID_UNTIL	src/or/routerparse.c	/^  K_VALID_UNTIL,$/;"	e	enum:__anon96	file:
K_VOTE_DIGEST	src/or/routerparse.c	/^  K_VOTE_DIGEST,$/;"	e	enum:__anon96	file:
K_VOTE_STATUS	src/or/routerparse.c	/^  K_VOTE_STATUS,$/;"	e	enum:__anon96	file:
K_VOTING_DELAY	src/or/routerparse.c	/^  K_VOTING_DELAY,$/;"	e	enum:__anon96	file:
K_W	src/or/routerparse.c	/^  K_W,$/;"	e	enum:__anon96	file:
K_WRITE_HISTORY	src/or/routerparse.c	/^  K_WRITE_HISTORY,$/;"	e	enum:__anon96	file:
KeepalivePeriod	src/or/or.h	/^  int KeepalivePeriod; \/**< How often do we send padding cells to keep$/;"	m	struct:__anon55
LABEL_SIZE	src/test/test_util.c	/^#define LABEL_SIZE /;"	d	file:
LABEL_SIZE	src/test/test_util.c	/^#undef LABEL_SIZE$/;"	d	file:
LAST_HID_SERV_REQUEST_KEY_LEN	src/or/rendclient.c	/^#define LAST_HID_SERV_REQUEST_KEY_LEN /;"	d	file:
LAZY_DESCRIPTOR_RETRY_INTERVAL	src/or/main.c	/^#define LAZY_DESCRIPTOR_RETRY_INTERVAL /;"	d	file:
LD_ACCT	src/common/torlog.h	/^#define LD_ACCT /;"	d
LD_APP	src/common/torlog.h	/^#define LD_APP /;"	d
LD_BUG	src/common/torlog.h	/^#define LD_BUG /;"	d
LD_CHANNEL	src/common/torlog.h	/^#define LD_CHANNEL /;"	d
LD_CIRC	src/common/torlog.h	/^#define LD_CIRC /;"	d
LD_CONFIG	src/common/torlog.h	/^#define LD_CONFIG /;"	d
LD_CONTROL	src/common/torlog.h	/^#define LD_CONTROL /;"	d
LD_CRYPTO	src/common/torlog.h	/^#define LD_CRYPTO /;"	d
LD_DIR	src/common/torlog.h	/^#define LD_DIR /;"	d
LD_DIRSERV	src/common/torlog.h	/^#define LD_DIRSERV /;"	d
LD_EDGE	src/common/torlog.h	/^#define LD_EDGE /;"	d
LD_EXIT	src/common/torlog.h	/^#define LD_EXIT /;"	d
LD_FS	src/common/torlog.h	/^#define LD_FS /;"	d
LD_GENERAL	src/common/torlog.h	/^#define LD_GENERAL /;"	d
LD_HANDSHAKE	src/common/torlog.h	/^#define LD_HANDSHAKE /;"	d
LD_HEARTBEAT	src/common/torlog.h	/^#define LD_HEARTBEAT /;"	d
LD_HIST	src/common/torlog.h	/^#define LD_HIST /;"	d
LD_HTTP	src/common/torlog.h	/^#define LD_HTTP /;"	d
LD_MM	src/common/torlog.h	/^#define LD_MM /;"	d
LD_NET	src/common/torlog.h	/^#define LD_NET /;"	d
LD_NOCB	src/common/torlog.h	/^#define LD_NOCB /;"	d
LD_NOFUNCNAME	src/common/torlog.h	/^#define LD_NOFUNCNAME /;"	d
LD_OR	src/common/torlog.h	/^#define LD_OR /;"	d
LD_PROTOCOL	src/common/torlog.h	/^#define LD_PROTOCOL /;"	d
LD_REND	src/common/torlog.h	/^#define LD_REND /;"	d
LD_SCHED	src/common/torlog.h	/^#define LD_SCHED /;"	d
LEFT_CHILD	src/common/container.c	/^#define LEFT_CHILD(/;"	d	file:
LEGAL_NICKNAME_CHARACTERS	src/common/tortls.c	/^#define LEGAL_NICKNAME_CHARACTERS /;"	d	file:
LEGAL_NICKNAME_CHARACTERS	src/or/or.h	/^#define LEGAL_NICKNAME_CHARACTERS /;"	d
LE_OLD	src/common/compat_libevent.h	/^#define LE_OLD /;"	d
LE_OTHER	src/common/compat_libevent.h	/^#define LE_OTHER /;"	d
LIBSECCOMP2	src/common/sandbox.h	/^  LIBSECCOMP2 = 0$/;"	e	enum:__anon75
LISTENER_CONNECTION_MAGIC	src/or/or.h	/^#define LISTENER_CONNECTION_MAGIC /;"	d
LISTENER_STATE_READY	src/or/or.h	/^#define LISTENER_STATE_READY /;"	d
LOAD	src/or/rephist.c	/^#define LOAD(/;"	d	file:
LOAD	src/or/rephist.c	/^#undef LOAD$/;"	d	file:
LOCAL_TEST_CASE	src/test/test_tortls.c	/^#define LOCAL_TEST_CASE(/;"	d	file:
LOCK_LOGS	src/common/log.c	/^#define LOCK_LOGS(/;"	d	file:
LOG_DEBUG	src/common/torlog.h	/^#define LOG_DEBUG /;"	d
LOG_ERR	src/common/torlog.h	/^#define LOG_ERR /;"	d
LOG_FN_CONN	src/or/control.h	/^#define LOG_FN_CONN(/;"	d
LOG_INFO	src/common/torlog.h	/^#define LOG_INFO /;"	d
LOG_NOTICE	src/common/torlog.h	/^#define LOG_NOTICE /;"	d
LOG_ONEHALF	src/or/circuitmux_ewma.c	/^#define LOG_ONEHALF /;"	d	file:
LOG_PRIVATE	src/common/log.c	/^#define LOG_PRIVATE$/;"	d	file:
LOG_PRIVATE	src/test/log_test_helpers.c	/^#define LOG_PRIVATE$/;"	d	file:
LOG_PRIVATE	src/test/test_relay.c	/^#define LOG_PRIVATE$/;"	d	file:
LOG_PRIVATE	src/test/test_status.c	/^#define LOG_PRIVATE$/;"	d	file:
LOG_PRIVATE	src/test/test_tortls.c	/^#define LOG_PRIVATE$/;"	d	file:
LOG_PROTOCOL_WARN	src/or/or.h	/^#define LOG_PROTOCOL_WARN /;"	d
LOG_WARN	src/common/torlog.h	/^#define LOG_WARN /;"	d
LONE_RSA	src/test/test_keypin.c	/^#define LONE_RSA(/;"	d	file:
LONE_RSA	src/test/test_keypin.c	/^#undef LONE_RSA$/;"	d	file:
LONGEST_TEST_NAME	src/ext/tinytest.c	/^#define LONGEST_TEST_NAME /;"	d	file:
LONG_MAX	src/common/torint.h	/^#define LONG_MAX /;"	d
LONG_NAME	src/test/test_cell_formats.c	/^#define LONG_NAME /;"	d	file:
LONG_NAME2	src/test/test_cell_formats.c	/^#define LONG_NAME2 /;"	d	file:
LOREMIPSUM	src/test/test_util.c	/^#define LOREMIPSUM /;"	d	file:
LOW_COMPRESSION	src/common/torgzip.h	/^  HIGH_COMPRESSION, MEDIUM_COMPRESSION, LOW_COMPRESSION$/;"	e	enum:__anon81
LT	src/test/test_util.c	/^#define LT /;"	d	file:
L_	src/test/test_util.c	/^#define L_ /;"	d	file:
L_	src/test/test_util.c	/^#undef L_$/;"	d	file:
LastRotatedOnionKey	src/or/or.h	/^  time_t LastRotatedOnionKey;$/;"	m	struct:__anon61
LastWritten	src/or/or.h	/^  time_t LastWritten;$/;"	m	struct:__anon61
LearnCircuitBuildTimeout	src/or/or.h	/^  int LearnCircuitBuildTimeout; \/**< If non-zero, we attempt to learn a value$/;"	m	struct:__anon55
LeaveStreamsUnattached	src/or/or.h	/^  int LeaveStreamsUnattached; \/**< Boolean: Does Tor attach new streams to$/;"	m	struct:__anon55
LogMessageDomains	src/or/or.h	/^  int LogMessageDomains; \/**< Boolean: Should we log the domain(s) in which$/;"	m	struct:__anon55
LogTimeGranularity	src/or/or.h	/^  int LogTimeGranularity; \/**< Log resolution in milliseconds. *\/$/;"	m	struct:__anon55
Logs	src/or/or.h	/^  config_line_t *Logs; \/**< New-style list of configuration lines$/;"	m	struct:__anon55
LongLivedPorts	src/or/or.h	/^  smartlist_t *LongLivedPorts;$/;"	m	struct:__anon55
MACOSX_KQUEUE_IS_BROKEN	src/common/compat_libevent.c	/^#define MACOSX_KQUEUE_IS_BROKEN /;"	d	file:
MAGIC_EXITCODE	src/ext/tinytest.c	/^#define MAGIC_EXITCODE /;"	d	file:
MAIN_PRIVATE	src/or/main.c	/^#define MAIN_PRIVATE$/;"	d	file:
MAIN_PRIVATE	src/test/test_extorport.c	/^#define MAIN_PRIVATE$/;"	d	file:
MAIN_PRIVATE	src/test/test_main.c	/^#define MAIN_PRIVATE$/;"	d	file:
MAIN_PRIVATE	src/test/test_relay.c	/^#define MAIN_PRIVATE$/;"	d	file:
MALLOC_MP_LIM	src/common/sandbox.c	/^#define MALLOC_MP_LIM /;"	d	file:
MALLOC_ZERO_WORKS	src/common/util.c	/^#undef MALLOC_ZERO_WORKS$/;"	d	file:
MAP_DEL_CURRENT	src/common/container.h	/^#define MAP_DEL_CURRENT(/;"	d
MAP_FOREACH	src/common/container.h	/^#define MAP_FOREACH(/;"	d
MAP_FOREACH_END	src/common/container.h	/^#define MAP_FOREACH_END /;"	d
MAP_FOREACH_MODIFY	src/common/container.h	/^#define MAP_FOREACH_MODIFY(/;"	d
MATCH_PROCESS_STATUS	src/test/test_util_slow.c	/^#define MATCH_PROCESS_STATUS(/;"	d	file:
MATCH_PROCESS_STATUS	src/test/test_util_slow.c	/^#undef MATCH_PROCESS_STATUS$/;"	d	file:
MAX	src/common/compat.h	/^#define MAX(/;"	d
MAX_ADDRESSLEN	src/or/dns_structs.h	/^#define MAX_ADDRESSLEN /;"	d
MAX_ADDRESS_LENGTH	src/common/address.c	/^#define MAX_ADDRESS_LENGTH /;"	d	file:
MAX_ANCIENT_ONEHOP_CIRCUITS_TO_LOG	src/or/circuituse.c	/^#define MAX_ANCIENT_ONEHOP_CIRCUITS_TO_LOG /;"	d	file:
MAX_ANNOTATION	src/or/routerparse.c	/^#define MAX_ANNOTATION /;"	d	file:
MAX_ARGS	src/or/routerparse.c	/^#define MAX_ARGS /;"	d	file:
MAX_ARGS	src/or/routerparse.c	/^#undef MAX_ARGS$/;"	d	file:
MAX_BANDWIDTH_CHANGE_FREQ	src/or/router.c	/^#define MAX_BANDWIDTH_CHANGE_FREQ /;"	d	file:
MAX_BELIEVABLE_ONIONSKIN_DELAY	src/or/cpuworker.c	/^#define MAX_BELIEVABLE_ONIONSKIN_DELAY /;"	d	file:
MAX_BUF_SIZE	src/or/or.h	/^#define MAX_BUF_SIZE /;"	d
MAX_CAPACITY	src/common/container.c	/^#define MAX_CAPACITY /;"	d	file:
MAX_CAPACITY	src/common/container.c	/^#undef MAX_CAPACITY$/;"	d	file:
MAX_CELLS_TO_GET_FROM_CIRCUITS_FOR_UNLIMITED	src/or/channel.c	/^#define MAX_CELLS_TO_GET_FROM_CIRCUITS_FOR_UNLIMITED /;"	d	file:
MAX_CERT_SIZE	src/or/routerparse.c	/^#define MAX_CERT_SIZE /;"	d	file:
MAX_CERT_TYPE_WANTED	src/or/channeltls.c	/^#define MAX_CERT_TYPE_WANTED /;"	d	file:
MAX_CHUNK_ALLOC	src/or/buffers.c	/^#define MAX_CHUNK_ALLOC /;"	d	file:
MAX_CIRCID_ATTEMPTS	src/or/circuitbuild.c	/^#define MAX_CIRCID_ATTEMPTS /;"	d	file:
MAX_CIRCUIT_FAILURES	src/or/circuituse.c	/^#define MAX_CIRCUIT_FAILURES /;"	d	file:
MAX_COMMAND_LINE_LENGTH	src/or/control.c	/^#define MAX_COMMAND_LINE_LENGTH /;"	d	file:
MAX_CONNECTED_CELL_PAYLOAD_LEN	src/or/connection_edge.c	/^#define MAX_CONNECTED_CELL_PAYLOAD_LEN /;"	d	file:
MAX_CONSTRAINED_TCP_BUFFER	src/or/or.h	/^#define MAX_CONSTRAINED_TCP_BUFFER /;"	d
MAX_DEFAULT_MAXMEM	src/or/config.c	/^#define MAX_DEFAULT_MAXMEM /;"	d	file:
MAX_DEPTH	src/common/backtrace.c	/^#define MAX_DEPTH /;"	d	file:
MAX_DEPTH	src/common/sandbox.c	/^#define MAX_DEPTH /;"	d	file:
MAX_DESCRIPTOR_UPLOAD_SIZE	src/or/or.h	/^#define MAX_DESCRIPTOR_UPLOAD_SIZE /;"	d
MAX_DESCR_LEN	src/or/channeltls.c	/^#define MAX_DESCR_LEN /;"	d	file:
MAX_DETECTABLE_CPUS	src/common/compat.c	/^#define MAX_DETECTABLE_CPUS /;"	d	file:
MAX_DIRECTORY_OBJECT_SIZE	src/or/directory.c	/^#define MAX_DIRECTORY_OBJECT_SIZE /;"	d	file:
MAX_DIR_DL_SIZE	src/or/or.h	/^#define MAX_DIR_DL_SIZE /;"	d
MAX_DIR_PERIOD	src/or/config.c	/^#define MAX_DIR_PERIOD /;"	d	file:
MAX_DIR_UL_SIZE	src/or/or.h	/^#define MAX_DIR_UL_SIZE /;"	d
MAX_DL_TO_DELAY	src/or/routerlist.c	/^#define MAX_DL_TO_DELAY /;"	d	file:
MAX_DNS_ENTRY_AGE	src/or/or.h	/^#define MAX_DNS_ENTRY_AGE /;"	d
MAX_DNS_LABEL_SIZE	src/common/crypto.c	/^#define MAX_DNS_LABEL_SIZE /;"	d	file:
MAX_DNS_TTL	src/or/or.h	/^#define MAX_DNS_TTL /;"	d
MAX_EXITPOLICY_SUMMARY_LEN	src/or/dirserv.h	/^#define MAX_EXITPOLICY_SUMMARY_LEN /;"	d
MAX_EXTRAINFO_UPLOAD_SIZE	src/or/or.h	/^#define MAX_EXTRAINFO_UPLOAD_SIZE /;"	d
MAX_FREELIST_LEN	src/common/memarea.c	/^#define MAX_FREELIST_LEN /;"	d	file:
MAX_GUARDFRACTION_FILE_AGE	src/or/dirserv.c	/^#define MAX_GUARDFRACTION_FILE_AGE /;"	d	file:
MAX_GUARD_LIFETIME	src/or/entrynodes.c	/^#define MAX_GUARD_LIFETIME /;"	d	file:
MAX_HEADERS_SIZE	src/or/or.h	/^#define MAX_HEADERS_SIZE /;"	d
MAX_HEX_NICKNAME_LEN	src/or/or.h	/^#define MAX_HEX_NICKNAME_LEN /;"	d
MAX_HIST_VALUE_LEN	src/or/rephist.c	/^#define MAX_HIST_VALUE_LEN /;"	d	file:
MAX_INFLIGHT	src/test/test_workqueue.c	/^#define MAX_INFLIGHT /;"	d	file:
MAX_INTRO_CIRCS_PER_PERIOD	src/or/rendservice.c	/^#define MAX_INTRO_CIRCS_PER_PERIOD /;"	d	file:
MAX_INTRO_POINTS	src/or/rendcache.h	/^#define MAX_INTRO_POINTS /;"	d
MAX_INTRO_POINT_CIRCUIT_RETRIES	src/or/or.h	/^#define MAX_INTRO_POINT_CIRCUIT_RETRIES /;"	d
MAX_INTRO_POINT_REACHABILITY_FAILURES	src/or/or.h	/^#define MAX_INTRO_POINT_REACHABILITY_FAILURES /;"	d
MAX_KNOWN_FLAGS_IN_VOTE	src/or/or.h	/^#define MAX_KNOWN_FLAGS_IN_VOTE /;"	d
MAX_LAST_SEEN_IN_MINUTES	src/or/geoip.c	/^#define MAX_LAST_SEEN_IN_MINUTES /;"	d	file:
MAX_LINE_LENGTH	src/or/routerparse.c	/^#define MAX_LINE_LENGTH /;"	d	file:
MAX_LINK_PROTO_TO_LOG	src/or/rephist.c	/^#define MAX_LINK_PROTO_TO_LOG /;"	d	file:
MAX_MAX_CIRCUIT_DIRTINESS	src/or/config.c	/^#define MAX_MAX_CIRCUIT_DIRTINESS /;"	d	file:
MAX_MAX_CLIENT_CIRCUITS_PENDING	src/or/or.h	/^#define MAX_MAX_CLIENT_CIRCUITS_PENDING /;"	d
MAX_MEASUREMENT_AGE	src/or/dirserv.h	/^#define MAX_MEASUREMENT_AGE /;"	d
MAX_NICKNAME_LEN	src/or/or.h	/^#define MAX_NICKNAME_LEN /;"	d
MAX_NUM_NTORS_PER_TAP	src/or/onion.c	/^#define MAX_NUM_NTORS_PER_TAP /;"	d	file:
MAX_ONIONSKIN_CHALLENGE_LEN	src/or/onion.h	/^#define MAX_ONIONSKIN_CHALLENGE_LEN /;"	d
MAX_ONIONSKIN_REPLY_LEN	src/or/onion.h	/^#define MAX_ONIONSKIN_REPLY_LEN /;"	d
MAX_ONION_HANDSHAKE_TYPE	src/or/or.h	/^#define MAX_ONION_HANDSHAKE_TYPE /;"	d
MAX_OR_INBUF_WHEN_NONOPEN	src/or/connection_or.c	/^#define MAX_OR_INBUF_WHEN_NONOPEN /;"	d	file:
MAX_OVERHEAD	src/common/crypto_pwbox.c	/^#define MAX_OVERHEAD /;"	d	file:
MAX_POPULATE_ATTEMPTS	src/or/circuitbuild.c	/^#define MAX_POPULATE_ATTEMPTS /;"	d	file:
MAX_PREDICTED_CIRCS_RELEVANCE	src/or/config.c	/^#define MAX_PREDICTED_CIRCS_RELEVANCE /;"	d	file:
MAX_REASONS_TO_REPORT	src/or/connection_or.c	/^#define MAX_REASONS_TO_REPORT /;"	d	file:
MAX_RELAY_EARLY_CELLS_PER_CIRCUIT	src/or/or.h	/^#define MAX_RELAY_EARLY_CELLS_PER_CIRCUIT /;"	d
MAX_REND_FAILURES	src/or/rendservice.c	/^#define MAX_REND_FAILURES /;"	d	file:
MAX_REND_TIMEOUT	src/or/rendservice.c	/^#define MAX_REND_TIMEOUT /;"	d	file:
MAX_RESOLVE_FAILURES	src/or/relay.c	/^#define MAX_RESOLVE_FAILURES /;"	d	file:
MAX_SANE_PATH_LENGTH	src/common/compat.c	/^#define MAX_SANE_PATH_LENGTH /;"	d	file:
MAX_SCANF_WIDTH	src/common/util.c	/^#define MAX_SCANF_WIDTH /;"	d	file:
MAX_SIGNEWNYM_RATE	src/or/main.c	/^#define MAX_SIGNEWNYM_RATE /;"	d	file:
MAX_SIGSAFE_FDS	src/common/log.c	/^#define MAX_SIGSAFE_FDS /;"	d	file:
MAX_SOCKS5_AUTH_FIELD_SIZE	src/or/connection.h	/^#define MAX_SOCKS5_AUTH_FIELD_SIZE /;"	d
MAX_SOCKS5_AUTH_SIZE_TOTAL	src/or/connection.h	/^#define MAX_SOCKS5_AUTH_SIZE_TOTAL /;"	d
MAX_SOCKS_ADDR_LEN	src/or/or.h	/^#define MAX_SOCKS_ADDR_LEN /;"	d
MAX_SOCKS_MESSAGE_LEN	src/or/buffers.c	/^#define MAX_SOCKS_MESSAGE_LEN /;"	d	file:
MAX_SOCKS_REPLY_LEN	src/or/or.h	/^#define MAX_SOCKS_REPLY_LEN /;"	d
MAX_SPLIT_LINE_COUNT	src/test/test_util.c	/^#define MAX_SPLIT_LINE_COUNT /;"	d	file:
MAX_SSL_KEY_LIFETIME_INTERNAL	src/or/or.h	/^#define MAX_SSL_KEY_LIFETIME_INTERNAL /;"	d
MAX_STARTUP_MSG_LEN	src/common/log.c	/^#define MAX_STARTUP_MSG_LEN /;"	d	file:
MAX_STATUS_TAG_LEN	src/or/or.h	/^#define MAX_STATUS_TAG_LEN /;"	d
MAX_STREAM_WARN_INTERVAL	src/or/rendservice.c	/^#define MAX_STREAM_WARN_INTERVAL /;"	d	file:
MAX_SUPPORTED_CONSENSUS_METHOD	src/or/dirvote.h	/^#define MAX_SUPPORTED_CONSENSUS_METHOD /;"	d
MAX_THREADS	src/common/workqueue.c	/^#define MAX_THREADS /;"	d	file:
MAX_TIMEOUT	src/or/circuitstats.c	/^#define MAX_TIMEOUT /;"	d	file:
MAX_TIMEOUT	src/or/circuitstats.c	/^#undef MAX_TIMEOUT$/;"	d	file:
MAX_UNCOMPRESSION_FACTOR	src/common/torgzip.c	/^#define MAX_UNCOMPRESSION_FACTOR /;"	d	file:
MAX_UNPARSED_OBJECT_SIZE	src/or/routerparse.c	/^#define MAX_UNPARSED_OBJECT_SIZE /;"	d	file:
MAX_UNTRUSTED_NETWORKSTATUSES	src/or/dirserv.c	/^#define MAX_UNTRUSTED_NETWORKSTATUSES /;"	d	file:
MAX_UNUSED_OPEN_CIRCUITS	src/or/circuituse.c	/^#define MAX_UNUSED_OPEN_CIRCUITS /;"	d	file:
MAX_VERBOSE_NICKNAME_LEN	src/or/or.h	/^#define MAX_VERBOSE_NICKNAME_LEN /;"	d
MAX_VOTE_DL_SIZE	src/or/directory.c	/^#define MAX_VOTE_DL_SIZE /;"	d	file:
MAX_V_LINE_LEN	src/or/dirserv.h	/^#define MAX_V_LINE_LEN /;"	d
MBWC_INIT_TIME	src/test/test_dir.c	/^#define MBWC_INIT_TIME /;"	d	file:
MD_PARSE_TEST_DATA	src/test/test_microdesc.c	/^static const char MD_PARSE_TEST_DATA[] =$/;"	v	file:
MEDIUM_COMPRESSION	src/common/torgzip.h	/^  HIGH_COMPRESSION, MEDIUM_COMPRESSION, LOW_COMPRESSION$/;"	e	enum:__anon81
MEMAREA_ALIGN	src/common/memarea.c	/^#define MEMAREA_ALIGN /;"	d	file:
MEMAREA_ALIGN_MASK	src/common/memarea.c	/^#define MEMAREA_ALIGN_MASK /;"	d	file:
MEMORY_PRESSURE_INTERVAL	src/or/relay.c	/^#define MEMORY_PRESSURE_INTERVAL /;"	d	file:
MICROCOUNT	src/test/bench.c	/^#define MICROCOUNT(/;"	d	file:
MICRODESC_CACHE_LIFETIME	src/or/directory.c	/^#define MICRODESC_CACHE_LIFETIME /;"	d	file:
MICRODESC_DIRINFO	src/or/or.h	/^  MICRODESC_DIRINFO=1 << 6,$/;"	e	enum:__anon49
MICRODESC_GET	src/test/test_dir_handle_get.c	/^#define MICRODESC_GET(/;"	d	file:
MIN	src/common/compat.h	/^#define MIN(/;"	d
MIN	src/common/crypto.c	/^#define MIN(/;"	d	file:
MIN	src/common/crypto.c	/^#undef MIN$/;"	d	file:
MIN	src/or/circuitbuild.c	/^#define MIN(/;"	d	file:
MIN	src/test/test-memwipe.c	/^#define MIN(/;"	d	file:
MIN	src/test/test-memwipe.c	/^#undef MIN$/;"	d	file:
MIN_ANNOTATION	src/or/routerparse.c	/^#define MIN_ANNOTATION /;"	d	file:
MIN_BW_TO_ADVERTISE_DIRPORT	src/or/router.c	/^#define MIN_BW_TO_ADVERTISE_DIRPORT /;"	d	file:
MIN_CHUNK_ALLOC	src/or/buffers.c	/^#define MIN_CHUNK_ALLOC /;"	d	file:
MIN_CIRCUITS_HANDLING_STREAM	src/or/or.h	/^#define MIN_CIRCUITS_HANDLING_STREAM /;"	d
MIN_CIRCUIT_STREAM_TIMEOUT	src/or/config.c	/^#define MIN_CIRCUIT_STREAM_TIMEOUT /;"	d	file:
MIN_CONSTRAINED_TCP_BUFFER	src/or/or.h	/^#define MIN_CONSTRAINED_TCP_BUFFER /;"	d
MIN_DIR_REQ_RESPONSES	src/or/geoip.c	/^#define MIN_DIR_REQ_RESPONSES /;"	d	file:
MIN_DIST_SECONDS	src/or/dirvote.h	/^#define MIN_DIST_SECONDS /;"	d
MIN_DIST_SECONDS_TESTING	src/or/dirvote.h	/^#define MIN_DIST_SECONDS_TESTING /;"	d
MIN_DL_PER_REQUEST	src/or/routerlist.c	/^#define MIN_DL_PER_REQUEST /;"	d	file:
MIN_DNS_TTL	src/or/or.h	/^#define MIN_DNS_TTL /;"	d
MIN_GUARD_LIFETIME	src/or/entrynodes.c	/^#define MIN_GUARD_LIFETIME /;"	d	file:
MIN_HEARTBEAT_PERIOD	src/or/config.c	/^#define MIN_HEARTBEAT_PERIOD /;"	d	file:
MIN_IPS_TO_NOTE_ANYTHING	src/or/geoip.c	/^#define MIN_IPS_TO_NOTE_ANYTHING /;"	d	file:
MIN_IPS_TO_NOTE_COUNTRY	src/or/geoip.c	/^#define MIN_IPS_TO_NOTE_COUNTRY /;"	d	file:
MIN_LINK_PROTO_FOR_WIDE_CIRC_IDS	src/or/connection_or.h	/^#define MIN_LINK_PROTO_FOR_WIDE_CIRC_IDS /;"	d
MIN_MAX_CIRCUIT_DIRTINESS	src/or/config.c	/^#define MIN_MAX_CIRCUIT_DIRTINESS /;"	d	file:
MIN_METHOD_FOR_A_LINES	src/or/dirvote.h	/^#define MIN_METHOD_FOR_A_LINES /;"	d
MIN_METHOD_FOR_ED25519_ID_IN_MD	src/or/dirvote.h	/^#define MIN_METHOD_FOR_ED25519_ID_IN_MD /;"	d
MIN_METHOD_FOR_ED25519_ID_VOTING	src/or/dirvote.h	/^#define MIN_METHOD_FOR_ED25519_ID_VOTING /;"	d
MIN_METHOD_FOR_GUARDFRACTION	src/or/dirvote.h	/^#define MIN_METHOD_FOR_GUARDFRACTION /;"	d
MIN_METHOD_FOR_ID_HASH_IN_MD	src/or/dirvote.h	/^#define MIN_METHOD_FOR_ID_HASH_IN_MD /;"	d
MIN_METHOD_FOR_MANDATORY_MICRODESC	src/or/dirvote.h	/^#define MIN_METHOD_FOR_MANDATORY_MICRODESC /;"	d
MIN_METHOD_FOR_NTOR_KEY	src/or/dirvote.h	/^#define MIN_METHOD_FOR_NTOR_KEY /;"	d
MIN_METHOD_FOR_P6_LINES	src/or/dirvote.h	/^#define MIN_METHOD_FOR_P6_LINES /;"	d
MIN_METHOD_FOR_PACKAGE_LINES	src/or/dirvote.h	/^#define MIN_METHOD_FOR_PACKAGE_LINES /;"	d
MIN_METHOD_TO_CLIP_UNMEASURED_BW	src/or/dirvote.h	/^#define MIN_METHOD_TO_CLIP_UNMEASURED_BW /;"	d
MIN_NUM_NTORS_PER_TAP	src/or/onion.c	/^#define MIN_NUM_NTORS_PER_TAP /;"	d	file:
MIN_ONION_KEY_LIFETIME	src/or/or.h	/^#define MIN_ONION_KEY_LIFETIME /;"	d
MIN_READ_LEN	src/or/buffers.c	/^#define MIN_READ_LEN /;"	d	file:
MIN_REND_INITIAL_POST_DELAY	src/or/rendservice.c	/^#define MIN_REND_INITIAL_POST_DELAY /;"	d	file:
MIN_REND_INITIAL_POST_DELAY_TESTING	src/or/rendservice.c	/^#define MIN_REND_INITIAL_POST_DELAY_TESTING /;"	d	file:
MIN_REND_POST_PERIOD	src/or/config.c	/^#define MIN_REND_POST_PERIOD /;"	d	file:
MIN_REND_POST_PERIOD_TESTING	src/or/config.c	/^#define MIN_REND_POST_PERIOD_TESTING /;"	d	file:
MIN_REQUESTS	src/or/routerlist.c	/^#define MIN_REQUESTS /;"	d	file:
MIN_SUPPORTED_CONSENSUS_METHOD	src/or/dirvote.h	/^#define MIN_SUPPORTED_CONSENSUS_METHOD /;"	d
MIN_TIME_FOR_MEASUREMENT	src/or/hibernate.c	/^#define MIN_TIME_FOR_MEASUREMENT /;"	d	file:
MIN_TOR_TLS_ERROR_VAL_	src/common/tortls.h	/^#define MIN_TOR_TLS_ERROR_VAL_ /;"	d
MIN_VOTES_FOR_PARAM	src/or/dirvote.c	/^#define MIN_VOTES_FOR_PARAM /;"	d	file:
MIN_VOTE_INTERVAL	src/or/dirvote.h	/^#define MIN_VOTE_INTERVAL /;"	d
MIN_VOTE_INTERVAL_TESTING	src/or/dirvote.h	/^#define MIN_VOTE_INTERVAL_TESTING /;"	d
MIN_VOTE_INTERVAL_TESTING_INITIAL	src/or/dirvote.h	/^#define MIN_VOTE_INTERVAL_TESTING_INITIAL /;"	d
MIN_VOTE_SECONDS	src/or/dirvote.h	/^#define MIN_VOTE_SECONDS /;"	d
MIN_VOTE_SECONDS_TESTING	src/or/dirvote.h	/^#define MIN_VOTE_SECONDS_TESTING /;"	d
MOCK	src/common/testsupport.h	/^#define MOCK(/;"	d
MOCK_DECL	src/common/testsupport.h	/^#define MOCK_DECL(/;"	d
MOCK_IMPL	src/common/address.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/common/compat.c	/^MOCK_IMPL(const char *, get_uname, (void))$/;"	f
MOCK_IMPL	src/common/compat.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/common/compat.c	/^MOCK_IMPL(tor_socket_t,$/;"	f
MOCK_IMPL	src/common/compat_libevent.c	/^MOCK_IMPL(struct event_base *,$/;"	f
MOCK_IMPL	src/common/container.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/common/container.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	src/common/container.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/common/crypto.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/common/log.c	/^MOCK_IMPL(STATIC void,$/;"	f
MOCK_IMPL	src/common/testsupport.h	/^#define MOCK_IMPL(/;"	d
MOCK_IMPL	src/common/tortls.c	/^MOCK_IMPL(STATIC void, try_to_extract_certs_from_tls, (int severity, tor_tls_t *tls,$/;"	f
MOCK_IMPL	src/common/tortls.c	/^MOCK_IMPL(double,$/;"	f
MOCK_IMPL	src/common/tortls.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/common/tortls.c	/^MOCK_IMPL(tor_x509_cert_t *,$/;"	f
MOCK_IMPL	src/common/util.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/common/util.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	src/common/util.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/addressmap.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/buffers.c	/^MOCK_IMPL(size_t,$/;"	f
MOCK_IMPL	src/or/channel.c	/^MOCK_IMPL(ssize_t,$/;"	f
MOCK_IMPL	src/or/channel.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/circuitbuild.c	/^MOCK_IMPL(int, circuit_finish_handshake, (origin_circuit_t *circ,$/;"	f
MOCK_IMPL	src/or/circuitbuild.c	/^MOCK_IMPL(int, circuit_send_next_onion_skin,$/;"	f
MOCK_IMPL	src/or/circuitbuild.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/circuitlist.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	src/or/circuitlist.c	/^MOCK_IMPL(void, channel_note_destroy_not_pending,$/;"	f
MOCK_IMPL	src/or/circuitlist.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/circuitmux.c	/^MOCK_IMPL(const circuitmux_policy_t *,$/;"	f
MOCK_IMPL	src/or/circuitmux.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/circuitmux.c	/^MOCK_IMPL(unsigned int,$/;"	f
MOCK_IMPL	src/or/circuitmux.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/circuitmux_ewma.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/config.c	/^MOCK_IMPL(const char*,$/;"	f
MOCK_IMPL	src/or/config.c	/^MOCK_IMPL(const or_options_t *,$/;"	f
MOCK_IMPL	src/or/config.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/config.c	/^MOCK_IMPL(or_options_t *,$/;"	f
MOCK_IMPL	src/or/config.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/connection.c	/^MOCK_IMPL(char *,$/;"	f
MOCK_IMPL	src/or/connection.c	/^MOCK_IMPL(void, connection_mark_for_close_internal_,$/;"	f
MOCK_IMPL	src/or/connection.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/connection_edge.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/connection_or.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/connection_or.c	/^MOCK_IMPL(or_connection_t *,$/;"	f
MOCK_IMPL	src/or/connection_or.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/control.c	/^MOCK_IMPL(STATIC void,$/;"	f
MOCK_IMPL	src/or/control.c	/^MOCK_IMPL(const char *,$/;"	f
MOCK_IMPL	src/or/control.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/control.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/cpuworker.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/directory.c	/^MOCK_IMPL(void, directory_get_from_dirserver, (uint8_t dir_purpose,$/;"	f
MOCK_IMPL	src/or/directory.c	/^MOCK_IMPL(void, directory_initiate_command_routerstatus,$/;"	f
MOCK_IMPL	src/or/dirvote.c	/^MOCK_IMPL(const char *,$/;"	f
MOCK_IMPL	src/or/dirvote.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/dns.c	/^MOCK_IMPL(STATIC int,$/;"	f
MOCK_IMPL	src/or/dns.c	/^MOCK_IMPL(STATIC void,$/;"	f
MOCK_IMPL	src/or/dns.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/dns.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/entrynodes.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/ext_orport.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/geoip.c	/^MOCK_IMPL(country_t,$/;"	f
MOCK_IMPL	src/or/geoip.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/geoip.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/hibernate.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/hibernate.c	/^MOCK_IMPL(time_t,$/;"	f
MOCK_IMPL	src/or/hibernate.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/keypin.c	/^MOCK_IMPL(STATIC void,$/;"	f
MOCK_IMPL	src/or/main.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/main.c	/^MOCK_IMPL(long,$/;"	f
MOCK_IMPL	src/or/main.c	/^MOCK_IMPL(uint64_t,$/;"	f
MOCK_IMPL	src/or/main.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/networkstatus.c	/^MOCK_IMPL(download_status_t *,$/;"	f
MOCK_IMPL	src/or/networkstatus.c	/^MOCK_IMPL(networkstatus_t *,$/;"	f
MOCK_IMPL	src/or/networkstatus.c	/^MOCK_IMPL(routerstatus_t *,$/;"	f
MOCK_IMPL	src/or/nodelist.c	/^MOCK_IMPL(const node_t *,$/;"	f
MOCK_IMPL	src/or/nodelist.c	/^MOCK_IMPL(smartlist_t *,$/;"	f
MOCK_IMPL	src/or/nodelist.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/policies.c	/^MOCK_IMPL(addr_policy_result_t,$/;"	f
MOCK_IMPL	src/or/policies.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/relay.c	/^MOCK_IMPL(int, relay_send_command_from_edge_,$/;"	f
MOCK_IMPL	src/or/relay.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/rendclient.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/rendservice.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/router.c	/^MOCK_IMPL(authority_cert_t *,$/;"	f
MOCK_IMPL	src/or/router.c	/^MOCK_IMPL(const routerinfo_t *,$/;"	f
MOCK_IMPL	src/or/router.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/routerlist.c	/^MOCK_IMPL(STATIC void, initiate_descriptor_downloads,$/;"	f
MOCK_IMPL	src/or/routerlist.c	/^MOCK_IMPL(STATIC was_router_added_t,$/;"	f
MOCK_IMPL	src/or/routerlist.c	/^MOCK_IMPL(int, hid_serv_responsible_for_desc_id,$/;"	f
MOCK_IMPL	src/or/routerlist.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/routerlist.c	/^MOCK_IMPL(signed_descriptor_t *,$/;"	f
MOCK_IMPL	src/or/routerparse.c	/^MOCK_IMPL(addr_policy_t *,$/;"	f
MOCK_IMPL	src/or/routerset.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/scheduler.c	/^MOCK_IMPL(STATIC int,$/;"	f
MOCK_IMPL	src/or/scheduler.c	/^MOCK_IMPL(void,$/;"	f
MOCK_IMPL	src/or/statefile.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/statefile.c	/^MOCK_IMPL(or_state_t *,$/;"	f
MOCK_IMPL	src/or/transports.c	/^MOCK_IMPL(int,$/;"	f
MOCK_IMPL	src/or/transports.c	/^MOCK_IMPL(void,$/;"	f
MOCK_RESET	src/test/test_relaycell.c	/^#define MOCK_RESET(/;"	d	file:
MOCK_TOR_ADDR	src/test/test_dir_handle_get.c	/^static tor_addr_t MOCK_TOR_ADDR;$/;"	v	file:
MOCK_TOR_ADDR	src/test/test_routerset.c	/^static tor_addr_t MOCK_TOR_ADDR;$/;"	v	file:
MOCK_TOR_ADDR_PTR	src/test/test_routerset.c	/^#define MOCK_TOR_ADDR_PTR /;"	d	file:
MONTH_NAMES	src/common/util.c	/^static const char *MONTH_NAMES[] =$/;"	v	file:
MTBF_TO_GUARANTEE_STABLE	src/or/dirserv.c	/^#define MTBF_TO_GUARANTEE_STABLE /;"	d	file:
M_SYSCALL	src/common/sandbox.c	/^#define M_SYSCALL /;"	d	file:
Maj	src/ext/ed25519/donna/ed25519-hash.h	/^#define Maj(/;"	d
MaxAdvertisedBandwidth	src/or/or.h	/^  uint64_t MaxAdvertisedBandwidth; \/**< How much bandwidth are we willing to$/;"	m	struct:__anon55
MaxCircuitDirtiness	src/or/or.h	/^  int MaxCircuitDirtiness; \/**< Never use circs that were first used more than$/;"	m	struct:__anon55
MaxClientCircuitsPending	src/or/or.h	/^  int MaxClientCircuitsPending;$/;"	m	struct:__anon55
MaxMemInQueues	src/or/or.h	/^  uint64_t MaxMemInQueues;\/**< If we have more memory than this allocated$/;"	m	struct:__anon55
MaxMemInQueues_low_threshold	src/or/or.h	/^  uint64_t MaxMemInQueues_low_threshold;$/;"	m	struct:__anon55
MaxMemInQueues_raw	src/or/or.h	/^  uint64_t MaxMemInQueues_raw;$/;"	m	struct:__anon55
MaxOnionQueueDelay	src/or/or.h	/^  int MaxOnionQueueDelay; \/**<DOCDOC*\/$/;"	m	struct:__anon55
MinMeasuredBWsForAuthToIgnoreAdvertised	src/or/or.h	/^  int MinMeasuredBWsForAuthToIgnoreAdvertised;$/;"	m	struct:__anon55
MinUptimeHidServDirectoryV2	src/or/or.h	/^  int MinUptimeHidServDirectoryV2; \/**< As directory authority, accept hidden$/;"	m	struct:__anon55
MyFamily	src/or/or.h	/^  char *MyFamily; \/**< Declared family for this OR. *\/$/;"	m	struct:__anon55
N2N_TAGGING_IS_POSSIBLE	src/or/circpathbias.c	/^#define N2N_TAGGING_IS_POSSIBLE$/;"	d	file:
NAME_TEST	src/test/test.h	/^#define NAME_TEST(/;"	d
NAME_TEST_	src/test/test.h	/^#define NAME_TEST_(/;"	d
NANOCOUNT	src/test/bench.c	/^#define NANOCOUNT(/;"	d	file:
NATDListenAddress	src/or/or.h	/^  config_line_t *NATDListenAddress;$/;"	m	struct:__anon55
NATDPort_lines	src/or/or.h	/^  config_line_t *NATDPort_lines; \/**< Ports to listen on for transparent natd$/;"	m	struct:__anon55
NATDPort_set	src/or/or.h	/^  unsigned int NATDPort_set : 1;$/;"	m	struct:__anon55
NEED_ERSATZ_SOCKETPAIR	src/common/compat.h	/^#define NEED_ERSATZ_SOCKETPAIR$/;"	d
NEED_KEY	src/or/routerparse.c	/^  NEED_KEY,      \/**< Object is required, and must be a public key. *\/$/;"	e	enum:__anon97	file:
NEED_KEY_1024	src/or/routerparse.c	/^  NEED_KEY_1024, \/**< Object is required, and must be a 1024 bit public key *\/$/;"	e	enum:__anon97	file:
NEED_OBJ	src/or/routerparse.c	/^  NEED_OBJ,      \/**< Object is required. *\/$/;"	e	enum:__anon97	file:
NEED_SKEY_1024	src/or/routerparse.c	/^  NEED_SKEY_1024,\/**< Object is required, and must be a 1024 bit private key *\/$/;"	e	enum:__anon97	file:
NETINFO_NOTICE_SKEW	src/or/channeltls.c	/^#define NETINFO_NOTICE_SKEW /;"	d	file:
NETWORKSTATUS_ALLOW_SKEW	src/or/networkstatus.c	/^#define NETWORKSTATUS_ALLOW_SKEW /;"	d	file:
NETWORKSTATUS_CACHE_LIFETIME	src/or/directory.c	/^#define NETWORKSTATUS_CACHE_LIFETIME /;"	d	file:
NETWORKSTATUS_PRIVATE	src/or/networkstatus.c	/^#define NETWORKSTATUS_PRIVATE$/;"	d	file:
NETWORKSTATUS_PRIVATE	src/test/test_dir.c	/^#define NETWORKSTATUS_PRIVATE$/;"	d	file:
NETWORKSTATUS_PRIVATE	src/test/test_guardfraction.c	/^#define NETWORKSTATUS_PRIVATE$/;"	d	file:
NETWORK_STATUS	src/test/test_dir_handle_get.c	/^  #define NETWORK_STATUS /;"	d	file:
NEW_CHAN_GRACE_PERIOD	src/or/channel.c	/^#define NEW_CHAN_GRACE_PERIOD /;"	d	file:
NEXT_LINE	src/or/routerparse.c	/^#define NEXT_LINE(/;"	d	file:
NEXT_LINE	src/or/routerparse.c	/^#undef NEXT_LINE$/;"	d	file:
NID_tor_default_ecdhe_group	src/common/tortls.c	/^#define  NID_tor_default_ecdhe_group /;"	d	file:
NIL_	src/or/routerparse.c	/^  NIL_$/;"	e	enum:__anon96	file:
NODE	src/test/test_nodelist.c	/^#define NODE(/;"	d	file:
NODE	src/test/test_routerlist.c	/^#define NODE(/;"	d	file:
NODE_DESC_BUF_LEN	src/or/router.h	/^#define NODE_DESC_BUF_LEN /;"	d
NOINLINE	src/test/test_bt_cl.c	/^#define NOINLINE /;"	d	file:
NONAUTHORITY_NS_CACHE_INTERVAL	src/or/networkstatus.c	/^#define NONAUTHORITY_NS_CACHE_INTERVAL /;"	d	file:
NON_ANONYMOUS_MODE_ENABLED	src/or/or.h	/^#define NON_ANONYMOUS_MODE_ENABLED /;"	d
NORETURN	src/test/test_bt_cl.c	/^#define NORETURN /;"	d	file:
NORMAL_HOSTNAME	src/or/connection_edge.h	/^  NORMAL_HOSTNAME, ONION_HOSTNAME, EXIT_HOSTNAME, BAD_HOSTNAME$/;"	e	enum:hostname_type_t
NOTE_BYTES	src/or/hibernate.c	/^#define NOTE_BYTES /;"	d	file:
NOTE_INTERVAL	src/or/hibernate.c	/^#define NOTE_INTERVAL /;"	d	file:
NOT_ENOUGH_CONSENSUS_SIGNATURES	src/test/test_dir_handle_get.c	/^#define NOT_ENOUGH_CONSENSUS_SIGNATURES /;"	d	file:
NOT_FOUND	src/test/test_dir_handle_get.c	/^#define NOT_FOUND /;"	d	file:
NO_ARGS	src/or/routerparse.c	/^#define NO_ARGS /;"	d	file:
NO_BACKTRACE_IMPL	src/common/backtrace.c	/^#define NO_BACKTRACE_IMPL$/;"	d	file:
NO_DIRINFO	src/or/or.h	/^  NO_DIRINFO      = 0,$/;"	e	enum:__anon49
NO_METHOD	src/common/torgzip.h	/^  NO_METHOD=0, GZIP_METHOD=1, ZLIB_METHOD=2, UNKNOWN_METHOD=3$/;"	e	enum:__anon80
NO_OBJ	src/or/routerparse.c	/^  NO_OBJ,        \/**< No object, ever. *\/$/;"	e	enum:__anon97	file:
NO_WEIGHTING	src/or/or.h	/^  NO_WEIGHTING, WEIGHT_FOR_EXIT, WEIGHT_FOR_MID, WEIGHT_FOR_GUARD,$/;"	e	enum:bandwidth_weight_rule_t
NS	src/test/test.h	/^#define NS(/;"	d
NSSET_ACCEPT_OBSOLETE	src/or/networkstatus.h	/^#define NSSET_ACCEPT_OBSOLETE /;"	d
NSSET_DONT_DOWNLOAD_CERTS	src/or/networkstatus.h	/^#define NSSET_DONT_DOWNLOAD_CERTS /;"	d
NSSET_FROM_CACHE	src/or/networkstatus.h	/^#define NSSET_FROM_CACHE /;"	d
NSSET_REQUIRE_FLAVOR	src/or/networkstatus.h	/^#define NSSET_REQUIRE_FLAVOR /;"	d
NSSET_WAS_WAITING_FOR_CERTS	src/or/networkstatus.h	/^#define NSSET_WAS_WAITING_FOR_CERTS /;"	d
NS_CONTROL_PORT	src/or/or.h	/^  NS_CONTROL_PORT,$/;"	e	enum:__anon66
NS_DECL	src/test/test.h	/^#define NS_DECL(/;"	d
NS_EXPIRY_SLOP	src/or/main.c	/^#define NS_EXPIRY_SLOP /;"	d	file:
NS_FULL	src/test/test.h	/^#define NS_FULL(/;"	d
NS_MOCK	src/test/test.h	/^#define NS_MOCK(/;"	d
NS_MODULE	src/test/test_accounting.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_aes.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_compat_libevent.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_config.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_config.c	/^#undef NS_MODULE$/;"	d	file:
NS_MODULE	src/test/test_connection_edge_ap_handshake.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_dir.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_dir_handle_get.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_options.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_procmon.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_rendcache.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_routerset.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_sandbox.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_status.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_tortls.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_util_format.c	/^#define NS_MODULE /;"	d	file:
NS_MODULE	src/test/test_util_process.c	/^#define NS_MODULE /;"	d	file:
NS_SUBMODULE	src/test/test_accounting.c	/^#define NS_SUBMODULE /;"	d	file:
NS_SUBMODULE	src/test/test_accounting.c	/^#undef NS_SUBMODULE$/;"	d	file:
NS_SUBMODULE	src/test/test_config.c	/^#define NS_SUBMODULE /;"	d	file:
NS_SUBMODULE	src/test/test_config.c	/^#undef NS_SUBMODULE$/;"	d	file:
NS_SUBMODULE	src/test/test_rendcache.c	/^#define NS_SUBMODULE /;"	d	file:
NS_SUBMODULE	src/test/test_rendcache.c	/^#undef NS_SUBMODULE$/;"	d	file:
NS_SUBMODULE	src/test/test_routerset.c	/^#define NS_SUBMODULE /;"	d	file:
NS_SUBMODULE	src/test/test_routerset.c	/^#undef NS_SUBMODULE$/;"	d	file:
NS_SUBMODULE	src/test/test_status.c	/^#define NS_SUBMODULE /;"	d	file:
NS_SUBMODULE	src/test/test_status.c	/^#undef NS_SUBMODULE$/;"	d	file:
NS_TYPE_CONSENSUS	src/or/or.h	/^  NS_TYPE_CONSENSUS,$/;"	e	enum:__anon46
NS_TYPE_OPINION	src/or/or.h	/^  NS_TYPE_OPINION,$/;"	e	enum:__anon46
NS_TYPE_VOTE	src/or/or.h	/^  NS_TYPE_VOTE,$/;"	e	enum:__anon46
NS_UNMOCK	src/test/test.h	/^#define NS_UNMOCK(/;"	d
NS_V2	src/or/or.h	/^  NS_V2,$/;"	e	enum:__anon66
NS_V3_CONSENSUS	src/or/or.h	/^  NS_V3_CONSENSUS,$/;"	e	enum:__anon66
NS_V3_CONSENSUS_MICRODESC	src/or/or.h	/^  NS_V3_CONSENSUS_MICRODESC$/;"	e	enum:__anon66
NS_V3_VOTE	src/or/or.h	/^  NS_V3_VOTE,$/;"	e	enum:__anon66
NTOR_CREATE_MAGIC	src/or/onion.c	/^#define NTOR_CREATE_MAGIC /;"	d	file:
NTOR_ONIONSKIN_LEN	src/or/onion_ntor.h	/^#define NTOR_ONIONSKIN_LEN /;"	d
NTOR_REPLY_LEN	src/or/onion_ntor.h	/^#define NTOR_REPLY_LEN /;"	d
NT_SERVICE	src/or/ntmain.h	/^#define NT_SERVICE$/;"	d
NUMBER	src/or/routerparse.c	/^#define NUMBER(/;"	d	file:
NUMBER	src/or/routerparse.c	/^#undef NUMBER$/;"	d	file:
NUM_CIRCUITS_LAUNCHED_THRESHOLD	src/or/or.h	/^#define NUM_CIRCUITS_LAUNCHED_THRESHOLD /;"	d
NUM_INTRO_POINTS_DEFAULT	src/or/rendservice.c	/^#define NUM_INTRO_POINTS_DEFAULT /;"	d	file:
NUM_INTRO_POINTS_EXTRA	src/or/rendservice.c	/^#define NUM_INTRO_POINTS_EXTRA /;"	d	file:
NUM_INTRO_POINTS_MAX	src/or/rendservice.c	/^#define NUM_INTRO_POINTS_MAX /;"	d	file:
NUM_JUMPED_SECONDS_BEFORE_WARN	src/or/main.c	/^#define NUM_JUMPED_SECONDS_BEFORE_WARN /;"	d	file:
NUM_PARALLEL_TESTING_CIRCS	src/or/circuituse.c	/^#define NUM_PARALLEL_TESTING_CIRCS /;"	d	file:
NUM_SECS_BW_SUM_INTERVAL	src/or/rephist.c	/^#define NUM_SECS_BW_SUM_INTERVAL /;"	d	file:
NUM_SECS_BW_SUM_IS_VALID	src/or/rephist.c	/^#define NUM_SECS_BW_SUM_IS_VALID /;"	d	file:
NUM_SECS_ROLLING_MEASURE	src/or/rephist.c	/^#define NUM_SECS_ROLLING_MEASURE /;"	d	file:
NUM_TOTALS	src/or/rephist.c	/^#define NUM_TOTALS /;"	d	file:
N_ARGS	src/test/test_ntor_cl.c	/^#define N_ARGS(/;"	d	file:
N_AUTH_CERT_DL_FAILURES_TO_BUG_USER	src/or/routerlist.c	/^#define N_AUTH_CERT_DL_FAILURES_TO_BUG_USER /;"	d	file:
N_BW_EVENTS_TO_CACHE	src/or/control.c	/^#define N_BW_EVENTS_TO_CACHE /;"	d	file:
N_CONSENSUS_FLAVORS	src/or/or.h	/^#define N_CONSENSUS_FLAVORS /;"	d
N_DIGEST_ALGORITHMS	src/common/crypto.h	/^#define  N_DIGEST_ALGORITHMS /;"	d
N_LOGGING_DOMAINS	src/common/torlog.h	/^#define N_LOGGING_DOMAINS /;"	d
N_PREGEN_KEYS	src/test/testing_common.c	/^#define N_PREGEN_KEYS /;"	d	file:
N_WILDCARD_CHECKS	src/or/dns.c	/^#define N_WILDCARD_CHECKS /;"	d	file:
NewCircuitPeriod	src/or/or.h	/^  int NewCircuitPeriod; \/**< How long do we use a circuit before building$/;"	m	struct:__anon55
Nickname	src/or/or.h	/^  char *Nickname; \/**< OR only: nickname of this onion router. *\/$/;"	m	struct:__anon55
NodeFamilies	src/or/or.h	/^  config_line_t *NodeFamilies; \/**< List of config lines for$/;"	m	struct:__anon55
NodeFamilySets	src/or/or.h	/^  smartlist_t *NodeFamilySets; \/**< List of parsed NodeFamilies values. *\/$/;"	m	struct:__anon55
NumCPUs	src/or/or.h	/^  int NumCPUs; \/**< How many CPUs should we try to use? *\/$/;"	m	struct:__anon55
NumDirectoryGuards	src/or/or.h	/^  int NumDirectoryGuards; \/**< How many dir guards do we try to establish?$/;"	m	struct:__anon55
NumEntryGuards	src/or/or.h	/^  int NumEntryGuards; \/**< How many entry guards do we try to establish? *\/$/;"	m	struct:__anon55
OBJ_OK	src/or/routerparse.c	/^  OBJ_OK,        \/**< Object is optional. *\/$/;"	e	enum:__anon97	file:
OBSOLETE	src/or/config.c	/^#define OBSOLETE(/;"	d	file:
OBSOLETE	src/or/config.c	/^#undef OBSOLETE$/;"	d	file:
OCSP_RESPONSE	src/common/crypto.c	/^#undef OCSP_RESPONSE$/;"	d	file:
OK	src/ext/tinytest.c	/^enum outcome { SKIP=2, OK=1, FAIL=0 };$/;"	e	enum:outcome	file:
OK	src/test/test_containers.c	/^#define OK(/;"	d	file:
OK	src/test/test_containers.c	/^#undef OK$/;"	d	file:
OK	src/test/test_options.c	/^#define OK(/;"	d	file:
OLD_CERT_LIFETIME	src/or/routerlist.c	/^#undef OLD_CERT_LIFETIME$/;"	d	file:
OLD_ROUTER_DESC_MAX_AGE	src/or/or.h	/^#define OLD_ROUTER_DESC_MAX_AGE /;"	d
ONE_GIGABYTE	src/or/config.c	/^#define ONE_GIGABYTE /;"	d	file:
ONE_MEGABYTE	src/or/config.c	/^#define ONE_MEGABYTE /;"	d	file:
ONIONQUEUE_WAIT_CUTOFF	src/or/onion.c	/^#define ONIONQUEUE_WAIT_CUTOFF /;"	d	file:
ONIONS_SEEN_BIN_SIZE	src/or/rephist.c	/^#define ONIONS_SEEN_BIN_SIZE /;"	d	file:
ONIONS_SEEN_DELTA_F	src/or/rephist.c	/^#define ONIONS_SEEN_DELTA_F /;"	d	file:
ONIONS_SEEN_EPSILON	src/or/rephist.c	/^#define ONIONS_SEEN_EPSILON /;"	d	file:
ONION_HANDSHAKE_TYPE_FAST	src/or/or.h	/^#define ONION_HANDSHAKE_TYPE_FAST /;"	d
ONION_HANDSHAKE_TYPE_NTOR	src/or/or.h	/^#define ONION_HANDSHAKE_TYPE_NTOR /;"	d
ONION_HANDSHAKE_TYPE_TAP	src/or/or.h	/^#define ONION_HANDSHAKE_TYPE_TAP /;"	d
ONION_HOSTNAME	src/or/connection_edge.h	/^  NORMAL_HOSTNAME, ONION_HOSTNAME, EXIT_HOSTNAME, BAD_HOSTNAME$/;"	e	enum:hostname_type_t
ONION_NTOR_PRIVATE	src/or/onion_ntor.c	/^#define ONION_NTOR_PRIVATE$/;"	d	file:
ONION_NTOR_PRIVATE	src/test/test_ntor_cl.c	/^#define ONION_NTOR_PRIVATE$/;"	d	file:
OPEN	src/or/main.c	/^#define OPEN(/;"	d	file:
OPENSSL_V	src/common/crypto.h	/^#define OPENSSL_V(/;"	d
OPENSSL_VER	src/common/crypto.h	/^#define OPENSSL_VER(/;"	d
OPENSSL_V_NOPATCH	src/common/crypto.h	/^#define OPENSSL_V_NOPATCH(/;"	d
OPENSSL_V_SERIES	src/common/crypto.h	/^#define OPENSSL_V_SERIES(/;"	d
OPEN_DATADIR	src/or/main.c	/^#define OPEN_DATADIR(/;"	d	file:
OPEN_DATADIR2	src/or/main.c	/^#define OPEN_DATADIR2(/;"	d	file:
OPEN_DATADIR2_SUFFIX	src/or/main.c	/^#define OPEN_DATADIR2_SUFFIX(/;"	d	file:
OPEN_DATADIR_SUFFIX	src/or/main.c	/^#define OPEN_DATADIR_SUFFIX(/;"	d	file:
OPEN_FLAGS_APPEND	src/common/util.h	/^#define OPEN_FLAGS_APPEND /;"	d
OPEN_FLAGS_DONT_REPLACE	src/common/util.h	/^#define OPEN_FLAGS_DONT_REPLACE /;"	d
OPEN_FLAGS_REPLACE	src/common/util.h	/^#define OPEN_FLAGS_REPLACE /;"	d
OPTIONS_DUMP_ALL	src/or/config.h	/^#define OPTIONS_DUMP_ALL /;"	d
OPTIONS_DUMP_DEFAULTS	src/or/config.h	/^#define OPTIONS_DUMP_DEFAULTS /;"	d
OPTIONS_DUMP_MINIMAL	src/or/config.h	/^#define OPTIONS_DUMP_MINIMAL /;"	d
OP_EQ	src/common/compat.h	/^#define OP_EQ /;"	d
OP_GE	src/common/compat.h	/^#define OP_GE /;"	d
OP_GT	src/common/compat.h	/^#define OP_GT /;"	d
OP_LE	src/common/compat.h	/^#define OP_LE /;"	d
OP_LT	src/common/compat.h	/^#define OP_LT /;"	d
OP_NE	src/common/compat.h	/^#define OP_NE /;"	d
ORCIRC_MAX_MIDDLE_CELLS	src/or/or.h	/^#define ORCIRC_MAX_MIDDLE_CELLS /;"	d
ORCIRC_MAX_MIDDLE_KILL_THRESH	src/or/or.h	/^#define ORCIRC_MAX_MIDDLE_KILL_THRESH /;"	d
ORIGIN_CIRCUIT_MAGIC	src/or/or.h	/^#define ORIGIN_CIRCUIT_MAGIC /;"	d
ORListenAddress	src/or/or.h	/^  config_line_t *ORListenAddress;$/;"	m	struct:__anon55
ORPort_lines	src/or/or.h	/^  config_line_t *ORPort_lines; \/**< Ports to listen on for OR connections. *\/$/;"	m	struct:__anon55
ORPort_set	src/or/or.h	/^  unsigned int ORPort_set : 1;$/;"	m	struct:__anon55
OR_AUTH_CHALLENGE_LEN	src/or/or.h	/^#define OR_AUTH_CHALLENGE_LEN /;"	d
OR_CERT_TYPE_AUTH_1024	src/or/or.h	/^#define OR_CERT_TYPE_AUTH_1024 /;"	d
OR_CERT_TYPE_ID_1024	src/or/or.h	/^#define OR_CERT_TYPE_ID_1024 /;"	d
OR_CERT_TYPE_RSA_ED_CROSSCERT	src/or/or.h	/^#define OR_CERT_TYPE_RSA_ED_CROSSCERT /;"	d
OR_CERT_TYPE_TLS_LINK	src/or/or.h	/^#define OR_CERT_TYPE_TLS_LINK /;"	d
OR_CIRCUIT_MAGIC	src/or/or.h	/^#define OR_CIRCUIT_MAGIC /;"	d
OR_CONNECTION_MAGIC	src/or/or.h	/^#define OR_CONNECTION_MAGIC /;"	d
OR_CONN_EVENT_CLOSED	src/or/or.h	/^  OR_CONN_EVENT_CLOSED       = 3,$/;"	e	enum:or_conn_status_event_t
OR_CONN_EVENT_CONNECTED	src/or/or.h	/^  OR_CONN_EVENT_CONNECTED    = 1,$/;"	e	enum:or_conn_status_event_t
OR_CONN_EVENT_FAILED	src/or/or.h	/^  OR_CONN_EVENT_FAILED       = 2,$/;"	e	enum:or_conn_status_event_t
OR_CONN_EVENT_LAUNCHED	src/or/or.h	/^  OR_CONN_EVENT_LAUNCHED     = 0,$/;"	e	enum:or_conn_status_event_t
OR_CONN_EVENT_NEW	src/or/or.h	/^  OR_CONN_EVENT_NEW          = 4,$/;"	e	enum:or_conn_status_event_t
OR_CONN_HIGHWATER	src/or/or.h	/^#define OR_CONN_HIGHWATER /;"	d
OR_CONN_LOWWATER	src/or/or.h	/^#define OR_CONN_LOWWATER /;"	d
OR_CONN_STATE_CONNECTING	src/or/or.h	/^#define OR_CONN_STATE_CONNECTING /;"	d
OR_CONN_STATE_MAX_	src/or/or.h	/^#define OR_CONN_STATE_MAX_ /;"	d
OR_CONN_STATE_MIN_	src/or/or.h	/^#define OR_CONN_STATE_MIN_ /;"	d
OR_CONN_STATE_OPEN	src/or/or.h	/^#define OR_CONN_STATE_OPEN /;"	d
OR_CONN_STATE_OR_HANDSHAKING_V2	src/or/or.h	/^#define OR_CONN_STATE_OR_HANDSHAKING_V2 /;"	d
OR_CONN_STATE_OR_HANDSHAKING_V3	src/or/or.h	/^#define OR_CONN_STATE_OR_HANDSHAKING_V3 /;"	d
OR_CONN_STATE_PROXY_HANDSHAKING	src/or/or.h	/^#define OR_CONN_STATE_PROXY_HANDSHAKING /;"	d
OR_CONN_STATE_TLS_CLIENT_RENEGOTIATING	src/or/or.h	/^#define OR_CONN_STATE_TLS_CLIENT_RENEGOTIATING /;"	d
OR_CONN_STATE_TLS_HANDSHAKING	src/or/or.h	/^#define OR_CONN_STATE_TLS_HANDSHAKING /;"	d
OR_CONN_STATE_TLS_SERVER_RENEGOTIATING	src/or/or.h	/^#define OR_CONN_STATE_TLS_SERVER_RENEGOTIATING /;"	d
OR_DEADCODE_DUMMY	src/trunnel/ed25519_cert.c	/^#define OR_DEADCODE_DUMMY /;"	d	file:
OR_DEADCODE_DUMMY	src/trunnel/ed25519_cert.c	/^#define OR_DEADCODE_DUMMY$/;"	d	file:
OR_DEADCODE_DUMMY	src/trunnel/link_handshake.c	/^#define OR_DEADCODE_DUMMY /;"	d	file:
OR_DEADCODE_DUMMY	src/trunnel/link_handshake.c	/^#define OR_DEADCODE_DUMMY$/;"	d	file:
OR_DEADCODE_DUMMY	src/trunnel/pwbox.c	/^#define OR_DEADCODE_DUMMY /;"	d	file:
OR_DEADCODE_DUMMY	src/trunnel/pwbox.c	/^#define OR_DEADCODE_DUMMY$/;"	d	file:
OR_OPTIONS_MAGIC	src/or/config.c	/^#define OR_OPTIONS_MAGIC /;"	d	file:
OR_STATE_MAGIC	src/or/statefile.c	/^#define OR_STATE_MAGIC /;"	d	file:
OS_BSD	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^		#define OS_BSD$/;"	d
OS_LINUX	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^		#define OS_LINUX$/;"	d
OS_MAC	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^			#define OS_MAC$/;"	d
OS_NIX	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define OS_NIX$/;"	d
OS_OPENBSD	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^			#define OS_OPENBSD$/;"	d
OS_OSX	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^			#define OS_OSX$/;"	d
OS_SOLARIS	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define OS_SOLARIS$/;"	d
OS_WINDOWS	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	#define OS_WINDOWS$/;"	d
OVERFLOW_SAFE_SIGNED_LSHIFT	src/ext/ed25519/ref10/crypto_int32.h	/^#define OVERFLOW_SAFE_SIGNED_LSHIFT(/;"	d
OVERFLOW_SAFE_SIGNED_LSHIFT	src/ext/ed25519/ref10/crypto_int64.h	/^#define OVERFLOW_SAFE_SIGNED_LSHIFT(/;"	d
O_BINARY	src/common/util.h	/^#define O_BINARY /;"	d
O_TEXT	src/common/util.h	/^#define O_TEXT /;"	d
OptimisticData	src/or/or.h	/^  int OptimisticData;$/;"	m	struct:__anon55
OutboundBindAddress	src/or/or.h	/^  config_line_t *OutboundBindAddress;$/;"	m	struct:__anon55
OutboundBindAddressIPv4_	src/or/or.h	/^  tor_addr_t OutboundBindAddressIPv4_;$/;"	m	struct:__anon55
OutboundBindAddressIPv6_	src/or/or.h	/^  tor_addr_t OutboundBindAddressIPv6_;$/;"	m	struct:__anon55
OwningControllerProcess	src/or/or.h	/^  char *OwningControllerProcess;$/;"	m	struct:__anon55
PAD	src/common/util_format.c	/^#define PAD /;"	d	file:
PAD	src/common/util_format.c	/^#undef PAD$/;"	d	file:
PARAM_NUM	src/common/sandbox.h	/^#define PARAM_NUM /;"	d
PARAM_PTR	src/common/sandbox.h	/^#define PARAM_PTR /;"	d
PARENT	src/common/container.c	/^#define PARENT(/;"	d	file:
PATHBIAS_COUNT_INTERVAL	src/or/circpathbias.c	/^#define PATHBIAS_COUNT_INTERVAL /;"	d	file:
PATHBIAS_SHOULDCOUNT_COUNTED	src/or/or.h	/^#define PATHBIAS_SHOULDCOUNT_COUNTED /;"	d
PATHBIAS_SHOULDCOUNT_IGNORED	src/or/or.h	/^#define PATHBIAS_SHOULDCOUNT_IGNORED /;"	d
PATHBIAS_SHOULDCOUNT_UNDECIDED	src/or/or.h	/^#define PATHBIAS_SHOULDCOUNT_UNDECIDED /;"	d
PATH_SEPARATOR	src/common/compat.h	/^#define PATH_SEPARATOR /;"	d
PATH_STATE_ALREADY_COUNTED	src/or/or.h	/^    PATH_STATE_ALREADY_COUNTED = 6,$/;"	e	enum:__anon54
PATH_STATE_BUILD_ATTEMPTED	src/or/or.h	/^    PATH_STATE_BUILD_ATTEMPTED = 1,$/;"	e	enum:__anon54
PATH_STATE_BUILD_SUCCEEDED	src/or/or.h	/^    PATH_STATE_BUILD_SUCCEEDED = 2,$/;"	e	enum:__anon54
PATH_STATE_NEW_CIRC	src/or/or.h	/^    PATH_STATE_NEW_CIRC = 0,$/;"	e	enum:__anon54
PATH_STATE_USE_ATTEMPTED	src/or/or.h	/^    PATH_STATE_USE_ATTEMPTED = 3,$/;"	e	enum:__anon54
PATH_STATE_USE_FAILED	src/or/or.h	/^    PATH_STATE_USE_FAILED = 5,$/;"	e	enum:__anon54
PATH_STATE_USE_SUCCEEDED	src/or/or.h	/^    PATH_STATE_USE_SUCCEEDED = 4,$/;"	e	enum:__anon54
PBKDF2_KEY_LEN	src/common/crypto_s2k.c	/^#define PBKDF2_KEY_LEN /;"	d	file:
PBKDF2_SPEC_LEN	src/common/crypto_s2k.c	/^#define PBKDF2_SPEC_LEN /;"	d	file:
PDS_ALLOW_SELF	src/or/or.h	/^#define PDS_ALLOW_SELF /;"	d
PDS_FOR_GUARD	src/or/or.h	/^#define PDS_FOR_GUARD /;"	d
PDS_IGNORE_FASCISTFIREWALL	src/or/or.h	/^#define PDS_IGNORE_FASCISTFIREWALL /;"	d
PDS_NO_EXISTING_MICRODESC_FETCH	src/or/or.h	/^#define PDS_NO_EXISTING_MICRODESC_FETCH /;"	d
PDS_NO_EXISTING_SERVERDESC_FETCH	src/or/or.h	/^#define PDS_NO_EXISTING_SERVERDESC_FETCH /;"	d
PDS_RETRY_IF_NO_SERVERS	src/or/or.h	/^#define PDS_RETRY_IF_NO_SERVERS /;"	d
PERIODIC_FLAGS	src/common/compat_libevent.c	/^#define PERIODIC_FLAGS /;"	d	file:
PERIODIC_TIMER_FLAGS	src/common/procmon.c	/^#define PERIODIC_TIMER_FLAGS /;"	d	file:
PID_T_FORMAT	src/common/procmon.c	/^#define PID_T_FORMAT /;"	d	file:
PKCS1_OAEP_PADDING_OVERHEAD	src/common/crypto.h	/^#define PKCS1_OAEP_PADDING_OVERHEAD /;"	d
PK_BYTES	src/common/crypto.h	/^#define PK_BYTES /;"	d
PK_PKCS1_OAEP_PADDING	src/common/crypto.h	/^#define PK_PKCS1_OAEP_PADDING /;"	d
PLURAL	src/or/confparse.h	/^#define PLURAL(/;"	d
POLICY_BUF_LEN	src/or/policies.h	/^#define POLICY_BUF_LEN /;"	d
PORT_FORWARDING_CHECK_INTERVAL	src/or/main.c	/^#define PORT_FORWARDING_CHECK_INTERVAL /;"	d	file:
PREDICT_LIKELY	src/common/compat.h	/^#define PREDICT_LIKELY(/;"	d
PREDICT_UNLIKELY	src/common/compat.h	/^#define PREDICT_UNLIKELY(/;"	d
PREFIX	src/or/control.c	/^#define PREFIX(/;"	d	file:
PRETTY_FUNCTION	src/test/test.h	/^#define PRETTY_FUNCTION /;"	d
PRINTF	src/or/rephist.c	/^#define PRINTF(/;"	d	file:
PRINTF	src/or/rephist.c	/^#undef PRINTF$/;"	d	file:
PRIVATE_KEY_OK	src/common/crypto.c	/^#define PRIVATE_KEY_OK(/;"	d	file:
PROCESS_CELL	src/or/channeltls.c	/^#define PROCESS_CELL(/;"	d	file:
PROCESS_CELL	src/or/command.c	/^#define PROCESS_CELL(/;"	d	file:
PROCESS_EXIT_ERROR	src/common/util.h	/^#define PROCESS_EXIT_ERROR /;"	d
PROCESS_EXIT_EXITED	src/common/util.h	/^#define PROCESS_EXIT_EXITED /;"	d
PROCESS_EXIT_RUNNING	src/common/util.h	/^#define PROCESS_EXIT_RUNNING /;"	d
PROCESS_STATUS_ERROR	src/common/util.h	/^#define PROCESS_STATUS_ERROR /;"	d
PROCESS_STATUS_NOTRUNNING	src/common/util.h	/^#define PROCESS_STATUS_NOTRUNNING /;"	d
PROCESS_STATUS_RUNNING	src/common/util.h	/^#define PROCESS_STATUS_RUNNING /;"	d
PROCESS_STATUS_RUNNING_OR_NOTRUNNING	src/test/test_util_slow.c	/^#define PROCESS_STATUS_RUNNING_OR_NOTRUNNING /;"	d	file:
PROCESS_STATUS_RUNNING_OR_NOTRUNNING	src/test/test_util_slow.c	/^#undef PROCESS_STATUS_RUNNING_OR_NOTRUNNING$/;"	d	file:
PROCMON_POLLS	src/common/procmon.c	/^#define PROCMON_POLLS /;"	d	file:
PROCMON_PRIVATE	src/test/test_procmon.c	/^#define PROCMON_PRIVATE$/;"	d	file:
PROTOID	src/or/onion_ntor.c	/^#define PROTOID /;"	d	file:
PROTOID_LEN	src/or/onion_ntor.c	/^#define PROTOID_LEN /;"	d	file:
PROTO_CMETHOD	src/or/transports.c	/^#define PROTO_CMETHOD /;"	d	file:
PROTO_CMETHODS_DONE	src/or/transports.c	/^#define PROTO_CMETHODS_DONE /;"	d	file:
PROTO_CMETHOD_ERROR	src/or/transports.c	/^#define PROTO_CMETHOD_ERROR /;"	d	file:
PROTO_ENV_ERROR	src/or/transports.c	/^#define PROTO_ENV_ERROR /;"	d	file:
PROTO_NEG_FAIL	src/or/transports.c	/^#define PROTO_NEG_FAIL /;"	d	file:
PROTO_NEG_SUCCESS	src/or/transports.c	/^#define PROTO_NEG_SUCCESS /;"	d	file:
PROTO_PROXY_DONE	src/or/transports.c	/^#define PROTO_PROXY_DONE /;"	d	file:
PROTO_PROXY_ERROR	src/or/transports.c	/^#define PROTO_PROXY_ERROR /;"	d	file:
PROTO_SMETHOD	src/or/transports.c	/^#define PROTO_SMETHOD /;"	d	file:
PROTO_SMETHODS_DONE	src/or/transports.c	/^#define PROTO_SMETHODS_DONE /;"	d	file:
PROTO_SMETHOD_ERROR	src/or/transports.c	/^#define PROTO_SMETHOD_ERROR /;"	d	file:
PROTO_VERSION_ONE	src/or/transports.c	/^#define PROTO_VERSION_ONE /;"	d	file:
PROXY_CONNECT	src/or/or.h	/^#define PROXY_CONNECT /;"	d
PROXY_CONNECTED	src/or/or.h	/^#define PROXY_CONNECTED /;"	d
PROXY_HTTPS_WANT_CONNECT_OK	src/or/or.h	/^#define PROXY_HTTPS_WANT_CONNECT_OK /;"	d
PROXY_INFANT	src/or/or.h	/^#define PROXY_INFANT /;"	d
PROXY_NONE	src/or/or.h	/^#define PROXY_NONE /;"	d
PROXY_PLUGGABLE	src/or/or.h	/^#define PROXY_PLUGGABLE /;"	d
PROXY_SOCKS4	src/or/or.h	/^#define PROXY_SOCKS4 /;"	d
PROXY_SOCKS4_WANT_CONNECT_OK	src/or/or.h	/^#define PROXY_SOCKS4_WANT_CONNECT_OK /;"	d
PROXY_SOCKS5	src/or/or.h	/^#define PROXY_SOCKS5 /;"	d
PROXY_SOCKS5_WANT_AUTH_METHOD_NONE	src/or/or.h	/^#define PROXY_SOCKS5_WANT_AUTH_METHOD_NONE /;"	d
PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929	src/or/or.h	/^#define PROXY_SOCKS5_WANT_AUTH_METHOD_RFC1929 /;"	d
PROXY_SOCKS5_WANT_AUTH_RFC1929_OK	src/or/or.h	/^#define PROXY_SOCKS5_WANT_AUTH_RFC1929_OK /;"	d
PROXY_SOCKS5_WANT_CONNECT_OK	src/or/or.h	/^#define PROXY_SOCKS5_WANT_CONNECT_OK /;"	d
PTHREAD_CREATE_DETACHED	src/common/compat_pthreads.c	/^#define PTHREAD_CREATE_DETACHED /;"	d	file:
PT_LEGACY	src/test/test_pt.c	/^#define PT_LEGACY(/;"	d	file:
PT_PRIVATE	src/or/transports.c	/^#define PT_PRIVATE$/;"	d	file:
PT_PRIVATE	src/test/test_config.c	/^#define PT_PRIVATE$/;"	d	file:
PT_PRIVATE	src/test/test_pt.c	/^#define PT_PRIVATE$/;"	d	file:
PT_PROTO_ACCEPTING_METHODS	src/or/transports.h	/^  PT_PROTO_ACCEPTING_METHODS, \/* accepting methods *\/$/;"	e	enum:pt_proto_state
PT_PROTO_BROKEN	src/or/transports.h	/^  PT_PROTO_BROKEN, \/* broke during the protocol *\/$/;"	e	enum:pt_proto_state
PT_PROTO_COMPLETED	src/or/transports.h	/^  PT_PROTO_COMPLETED, \/* configure and registered its transports *\/$/;"	e	enum:pt_proto_state
PT_PROTO_CONFIGURED	src/or/transports.h	/^  PT_PROTO_CONFIGURED, \/* configured successfully *\/$/;"	e	enum:pt_proto_state
PT_PROTO_FAILED_LAUNCH	src/or/transports.h	/^  PT_PROTO_FAILED_LAUNCH \/* failed while launching *\/$/;"	e	enum:pt_proto_state
PT_PROTO_INFANT	src/or/transports.h	/^  PT_PROTO_INFANT, \/* was just born *\/$/;"	e	enum:pt_proto_state
PT_PROTO_LAUNCHED	src/or/transports.h	/^  PT_PROTO_LAUNCHED, \/* was just launched *\/$/;"	e	enum:pt_proto_state
PUBLIC_KEY_OK	src/common/crypto.c	/^#define PUBLIC_KEY_OK(/;"	d	file:
PUT	src/or/rephist.c	/^#define PUT(/;"	d	file:
PUT	src/or/rephist.c	/^#undef PUT$/;"	d	file:
PWBOX0_CONST0	src/trunnel/pwbox.h	/^#define PWBOX0_CONST0 /;"	d
PWBOX0_CONST1	src/trunnel/pwbox.h	/^#define PWBOX0_CONST1 /;"	d
PathBiasCircThreshold	src/or/or.h	/^  int PathBiasCircThreshold;$/;"	m	struct:__anon55
PathBiasDropGuards	src/or/or.h	/^  int PathBiasDropGuards;$/;"	m	struct:__anon55
PathBiasExtremeRate	src/or/or.h	/^  double PathBiasExtremeRate;$/;"	m	struct:__anon55
PathBiasExtremeUseRate	src/or/or.h	/^  double PathBiasExtremeUseRate;$/;"	m	struct:__anon55
PathBiasNoticeRate	src/or/or.h	/^  double PathBiasNoticeRate;$/;"	m	struct:__anon55
PathBiasNoticeUseRate	src/or/or.h	/^  double PathBiasNoticeUseRate;$/;"	m	struct:__anon55
PathBiasScaleThreshold	src/or/or.h	/^  int PathBiasScaleThreshold;$/;"	m	struct:__anon55
PathBiasScaleUseThreshold	src/or/or.h	/^  int PathBiasScaleUseThreshold;$/;"	m	struct:__anon55
PathBiasUseThreshold	src/or/or.h	/^  int PathBiasUseThreshold;$/;"	m	struct:__anon55
PathBiasWarnRate	src/or/or.h	/^  double PathBiasWarnRate;$/;"	m	struct:__anon55
PathsNeededToBuildCircuits	src/or/or.h	/^  double PathsNeededToBuildCircuits;$/;"	m	struct:__anon55
PerConnBWBurst	src/or/or.h	/^  uint64_t PerConnBWBurst; \/**< Allowed burst on a single TLS conn, if set. *\/$/;"	m	struct:__anon55
PerConnBWRate	src/or/or.h	/^  uint64_t PerConnBWRate; \/**< Long-term bw on a single TLS conn, if set. *\/$/;"	m	struct:__anon55
PidFile	src/or/or.h	/^  char *PidFile; \/**< Where to store PID of Tor process. *\/$/;"	m	struct:__anon55
PortForwarding	src/or/or.h	/^  int PortForwarding; \/**< If true, use NAT-PMP or UPnP to automatically$/;"	m	struct:__anon55
PortForwardingHelper	src/or/or.h	/^  char *PortForwardingHelper; \/** < Filename or full path of the port$/;"	m	struct:__anon55
PredictedPortsRelevanceTime	src/or/or.h	/^  int PredictedPortsRelevanceTime; \/** How long after we've requested a$/;"	m	struct:__anon55
ProtocolWarnings	src/or/or.h	/^  int ProtocolWarnings; \/**< Boolean: when other parties screw up the Tor$/;"	m	struct:__anon55
PublishHidServDescriptors	src/or/or.h	/^  int PublishHidServDescriptors;$/;"	m	struct:__anon55
PublishServerDescriptor	src/or/or.h	/^  smartlist_t *PublishServerDescriptor;$/;"	m	struct:__anon55
PublishServerDescriptor_	src/or/or.h	/^  dirinfo_type_t PublishServerDescriptor_;$/;"	m	struct:__anon55
RAND_PATH_BYTES	src/test/testing_common.c	/^#define RAND_PATH_BYTES /;"	d	file:
RANGE_CHECK	src/or/dirvote.c	/^#define RANGE_CHECK(/;"	d	file:
RATELIM_INIT	src/common/util.h	/^#define RATELIM_INIT(/;"	d
RCS_BADDESC	src/or/rendcache.h	/^  RCS_BADDESC = -1, \/**< This descriptor is no good. *\/$/;"	e	enum:__anon9
RCS_NOTDIR	src/or/rendcache.h	/^  RCS_NOTDIR = -2, \/**< We're not a directory *\/$/;"	e	enum:__anon9
RCS_OKAY	src/or/rendcache.h	/^  RCS_OKAY = 0 \/**< All worked as expected *\/$/;"	e	enum:__anon9
REACHABILITY_MODULO_PER_TEST	src/or/dirserv.h	/^#define REACHABILITY_MODULO_PER_TEST /;"	d
REACHABILITY_TEST_CYCLE_PERIOD	src/or/dirserv.h	/^#define REACHABILITY_TEST_CYCLE_PERIOD /;"	d
REACHABILITY_TEST_INTERVAL	src/or/dirserv.h	/^#define REACHABILITY_TEST_INTERVAL /;"	d
REACHABLE_TIMEOUT	src/or/dirserv.c	/^#define REACHABLE_TIMEOUT /;"	d	file:
READ_EVENT	src/or/main.h	/^  READ_EVENT=0x02, \/**< We want to know when a connection is readable *\/$/;"	e	enum:watchable_events
REASONABLY_LIVE_TIME	src/or/networkstatus.c	/^#define REASONABLY_LIVE_TIME /;"	d	file:
RECENT_TIME	src/test/test_dir_handle_get.c	/^  #define RECENT_TIME /;"	d	file:
RECENT_TIME	src/test/test_rendcache.c	/^static const int RECENT_TIME = -10;$/;"	v	file:
RECOMMENDED_MIN_CIRCUIT_BUILD_TIMEOUT	src/or/config.c	/^#define RECOMMENDED_MIN_CIRCUIT_BUILD_TIMEOUT /;"	d	file:
REENCODE	src/test/test_link_handshake.c	/^#define REENCODE(/;"	d	file:
REG_SYSCALL	src/common/sandbox.c	/^#define REG_SYSCALL /;"	d	file:
REJECT	src/or/config.c	/^#define REJECT(/;"	d	file:
REJECT	src/or/config.c	/^#undef REJECT$/;"	d	file:
REJECT	src/or/policies.c	/^#define REJECT(/;"	d	file:
REJECT	src/or/policies.c	/^#undef REJECT$/;"	d	file:
REJECT_CUTOFF_COUNT	src/or/policies.c	/^#define REJECT_CUTOFF_COUNT /;"	d	file:
RELAY_BRIDGE_STATS_DELAY	src/or/config.c	/^#define RELAY_BRIDGE_STATS_DELAY /;"	d	file:
RELAY_COMMAND_BEGIN	src/or/or.h	/^#define RELAY_COMMAND_BEGIN /;"	d
RELAY_COMMAND_BEGIN_DIR	src/or/or.h	/^#define RELAY_COMMAND_BEGIN_DIR /;"	d
RELAY_COMMAND_CONNECTED	src/or/or.h	/^#define RELAY_COMMAND_CONNECTED /;"	d
RELAY_COMMAND_DATA	src/or/or.h	/^#define RELAY_COMMAND_DATA /;"	d
RELAY_COMMAND_DROP	src/or/or.h	/^#define RELAY_COMMAND_DROP /;"	d
RELAY_COMMAND_END	src/or/or.h	/^#define RELAY_COMMAND_END /;"	d
RELAY_COMMAND_ESTABLISH_INTRO	src/or/or.h	/^#define RELAY_COMMAND_ESTABLISH_INTRO /;"	d
RELAY_COMMAND_ESTABLISH_RENDEZVOUS	src/or/or.h	/^#define RELAY_COMMAND_ESTABLISH_RENDEZVOUS /;"	d
RELAY_COMMAND_EXTEND	src/or/or.h	/^#define RELAY_COMMAND_EXTEND /;"	d
RELAY_COMMAND_EXTEND2	src/or/or.h	/^#define RELAY_COMMAND_EXTEND2 /;"	d
RELAY_COMMAND_EXTENDED	src/or/or.h	/^#define RELAY_COMMAND_EXTENDED /;"	d
RELAY_COMMAND_EXTENDED2	src/or/or.h	/^#define RELAY_COMMAND_EXTENDED2 /;"	d
RELAY_COMMAND_INTRODUCE1	src/or/or.h	/^#define RELAY_COMMAND_INTRODUCE1 /;"	d
RELAY_COMMAND_INTRODUCE2	src/or/or.h	/^#define RELAY_COMMAND_INTRODUCE2 /;"	d
RELAY_COMMAND_INTRODUCE_ACK	src/or/or.h	/^#define RELAY_COMMAND_INTRODUCE_ACK /;"	d
RELAY_COMMAND_INTRO_ESTABLISHED	src/or/or.h	/^#define RELAY_COMMAND_INTRO_ESTABLISHED /;"	d
RELAY_COMMAND_RENDEZVOUS1	src/or/or.h	/^#define RELAY_COMMAND_RENDEZVOUS1 /;"	d
RELAY_COMMAND_RENDEZVOUS2	src/or/or.h	/^#define RELAY_COMMAND_RENDEZVOUS2 /;"	d
RELAY_COMMAND_RENDEZVOUS_ESTABLISHED	src/or/or.h	/^#define RELAY_COMMAND_RENDEZVOUS_ESTABLISHED /;"	d
RELAY_COMMAND_RESOLVE	src/or/or.h	/^#define RELAY_COMMAND_RESOLVE /;"	d
RELAY_COMMAND_RESOLVED	src/or/or.h	/^#define RELAY_COMMAND_RESOLVED /;"	d
RELAY_COMMAND_SENDME	src/or/or.h	/^#define RELAY_COMMAND_SENDME /;"	d
RELAY_COMMAND_TEST	src/test/test_relay.c	/^#define RELAY_COMMAND_TEST(/;"	d	file:
RELAY_COMMAND_TRUNCATE	src/or/or.h	/^#define RELAY_COMMAND_TRUNCATE /;"	d
RELAY_COMMAND_TRUNCATED	src/or/or.h	/^#define RELAY_COMMAND_TRUNCATED /;"	d
RELAY_HEADER_SIZE	src/or/or.h	/^#define RELAY_HEADER_SIZE /;"	d
RELAY_PAYLOAD_SIZE	src/or/or.h	/^#define RELAY_PAYLOAD_SIZE /;"	d
RELAY_PRIVATE	src/or/relay.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_PRIVATE	src/test/test_cell_formats.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_PRIVATE	src/test/test_cell_queue.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_PRIVATE	src/test/test_channel.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_PRIVATE	src/test/test_circuitmux.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_PRIVATE	src/test/test_dir.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_PRIVATE	src/test/test_oom.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_PRIVATE	src/test/test_relay.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_PRIVATE	src/test/test_relaycell.c	/^#define RELAY_PRIVATE$/;"	d	file:
RELAY_REQUIRED_MIN_BANDWIDTH	src/or/or.h	/^#define RELAY_REQUIRED_MIN_BANDWIDTH /;"	d
RELAY_TEST	src/test/test_relay.c	/^#define RELAY_TEST(/;"	d	file:
REMAP_STREAM_SOURCE_CACHE	src/or/or.h	/^#define REMAP_STREAM_SOURCE_CACHE /;"	d
REMAP_STREAM_SOURCE_EXIT	src/or/or.h	/^#define REMAP_STREAM_SOURCE_EXIT /;"	d
RENAME_SUFFIX	src/or/main.c	/^#define RENAME_SUFFIX(/;"	d	file:
RENAME_SUFFIX2	src/or/main.c	/^#define RENAME_SUFFIX2(/;"	d	file:
RENDCACHE_PRIVATE	src/or/rendcache.c	/^#define RENDCACHE_PRIVATE$/;"	d	file:
RENDCACHE_PRIVATE	src/test/test_rendcache.c	/^#define RENDCACHE_PRIVATE$/;"	d	file:
RENDCOMMON_PRIVATE	src/test/test_dir_handle_get.c	/^#define RENDCOMMON_PRIVATE$/;"	d	file:
RENDEZVOUS2_GET	src/test/test_dir_handle_get.c	/^#define RENDEZVOUS2_GET(/;"	d	file:
RENDSERVICE_PRIVATE	src/or/rendservice.c	/^#define RENDSERVICE_PRIVATE$/;"	d	file:
RENDSERVICE_PRIVATE	src/test/test_introduce.c	/^#define RENDSERVICE_PRIVATE$/;"	d	file:
REND_BASIC_AUTH	src/or/or.h	/^  REND_BASIC_AUTH   = 1,$/;"	e	enum:rend_auth_type_t
REND_BASIC_AUTH_CLIENT_ENTRY_LEN	src/or/or.h	/^#define REND_BASIC_AUTH_CLIENT_ENTRY_LEN /;"	d
REND_BASIC_AUTH_CLIENT_ID_LEN	src/or/or.h	/^#define REND_BASIC_AUTH_CLIENT_ID_LEN /;"	d
REND_BASIC_AUTH_CLIENT_MULTIPLE	src/or/or.h	/^#define REND_BASIC_AUTH_CLIENT_MULTIPLE /;"	d
REND_CACHE_FAILURE_MAX_AGE	src/or/rendcache.h	/^#define REND_CACHE_FAILURE_MAX_AGE /;"	d
REND_CACHE_MAX_AGE	src/or/rendcache.h	/^#define REND_CACHE_MAX_AGE /;"	d
REND_CACHE_MAX_SKEW	src/or/rendcache.h	/^#define REND_CACHE_MAX_SKEW /;"	d
REND_CELLS_BIN_SIZE	src/or/rephist.c	/^#define REND_CELLS_BIN_SIZE /;"	d	file:
REND_CELLS_DELTA_F	src/or/rephist.c	/^#define REND_CELLS_DELTA_F /;"	d	file:
REND_CELLS_EPSILON	src/or/rephist.c	/^#define REND_CELLS_EPSILON /;"	d	file:
REND_CLIENT	src/or/or.h	/^  REND_CLIENT, REND_MID, REND_SERVER,$/;"	e	enum:__anon72
REND_CLIENTNAME_MAX_LEN	src/or/or.h	/^#define REND_CLIENTNAME_MAX_LEN /;"	d
REND_COOKIE_LEN	src/or/or.h	/^#define REND_COOKIE_LEN /;"	d
REND_DESC_COOKIE_LEN	src/or/or.h	/^#define REND_DESC_COOKIE_LEN /;"	d
REND_DESC_COOKIE_LEN	src/or/rendcommon.c	/^#define REND_DESC_COOKIE_LEN /;"	d	file:
REND_DESC_COOKIE_LEN_BASE64	src/or/or.h	/^#define REND_DESC_COOKIE_LEN_BASE64 /;"	d
REND_DESC_ID_V2_LEN_BASE32	src/or/or.h	/^#define REND_DESC_ID_V2_LEN_BASE32 /;"	d
REND_DESC_MAX_SIZE	src/or/or.h	/^#define REND_DESC_MAX_SIZE /;"	d
REND_HID_SERV_DIR_REQUERY_PERIOD	src/or/rendclient.c	/^#define REND_HID_SERV_DIR_REQUERY_PERIOD /;"	d	file:
REND_INTRO_POINT_ID_LEN_BASE32	src/or/or.h	/^#define REND_INTRO_POINT_ID_LEN_BASE32 /;"	d
REND_LEGAL_CLIENTNAME_CHARACTERS	src/or/or.h	/^#define REND_LEGAL_CLIENTNAME_CHARACTERS /;"	d
REND_MID	src/or/or.h	/^  REND_CLIENT, REND_MID, REND_SERVER,$/;"	e	enum:__anon72
REND_NO_AUTH	src/or/or.h	/^  REND_NO_AUTH      = 0,$/;"	e	enum:rend_auth_type_t
REND_NUMBER_OF_CONSECUTIVE_REPLICAS	src/or/or.h	/^#define REND_NUMBER_OF_CONSECUTIVE_REPLICAS /;"	d
REND_NUMBER_OF_NON_CONSECUTIVE_REPLICAS	src/or/or.h	/^#define REND_NUMBER_OF_NON_CONSECUTIVE_REPLICAS /;"	d
REND_PROTOCOL_VERSION_BITMASK_WIDTH	src/or/or.h	/^#define REND_PROTOCOL_VERSION_BITMASK_WIDTH /;"	d
REND_REPLAY_TIME_INTERVAL	src/or/or.h	/^#define REND_REPLAY_TIME_INTERVAL /;"	d
REND_REPLICA_LEN	src/or/rendcommon.c	/^#define REND_REPLICA_LEN /;"	d	file:
REND_SECRET_ID_PART_LEN_BASE32	src/or/or.h	/^#define REND_SECRET_ID_PART_LEN_BASE32 /;"	d
REND_SERVER	src/or/or.h	/^  REND_CLIENT, REND_MID, REND_SERVER,$/;"	e	enum:__anon72
REND_SERVICE_ADDRESS_LEN	src/or/or.h	/^#define REND_SERVICE_ADDRESS_LEN /;"	d
REND_SERVICE_ID_LEN	src/or/or.h	/^#define REND_SERVICE_ID_LEN /;"	d
REND_SERVICE_ID_LEN_BASE32	src/or/or.h	/^#define REND_SERVICE_ID_LEN_BASE32 /;"	d
REND_STEALTH_AUTH	src/or/or.h	/^  REND_STEALTH_AUTH = 2,$/;"	e	enum:rend_auth_type_t
REND_TIME_PERIOD_OVERLAPPING_V2_DESCS	src/or/or.h	/^#define REND_TIME_PERIOD_OVERLAPPING_V2_DESCS /;"	d
REND_TIME_PERIOD_V2_DESC_VALIDITY	src/or/or.h	/^#define REND_TIME_PERIOD_V2_DESC_VALIDITY /;"	d
REND_TOKEN_LEN	src/or/or.h	/^#define REND_TOKEN_LEN /;"	d
REPHIST_PRIVATE	src/test/test_status.c	/^#define REPHIST_PRIVATE$/;"	d	file:
REPLAYCACHE_LEGACY	src/test/test_replay.c	/^#define REPLAYCACHE_LEGACY(/;"	d	file:
REPLAYCACHE_PRIVATE	src/or/replaycache.c	/^#define REPLAYCACHE_PRIVATE$/;"	d	file:
REPLAYCACHE_PRIVATE	src/test/test_replay.c	/^#define REPLAYCACHE_PRIVATE$/;"	d	file:
RESOLVED_TYPE_AUTO	src/or/dns.c	/^#define RESOLVED_TYPE_AUTO /;"	d	file:
RESOLVED_TYPE_ERROR	src/or/or.h	/^#define RESOLVED_TYPE_ERROR /;"	d
RESOLVED_TYPE_ERROR_TRANSIENT	src/or/or.h	/^#define RESOLVED_TYPE_ERROR_TRANSIENT /;"	d
RESOLVED_TYPE_HOSTNAME	src/or/or.h	/^#define RESOLVED_TYPE_HOSTNAME /;"	d
RESOLVED_TYPE_IPV4	src/or/or.h	/^#define RESOLVED_TYPE_IPV4 /;"	d
RESOLVED_TYPE_IPV6	src/or/or.h	/^#define RESOLVED_TYPE_IPV6 /;"	d
RESOLVE_MAX_TIMEOUT	src/or/dns.c	/^#define RESOLVE_MAX_TIMEOUT /;"	d	file:
RESPONSE_GRANULARITY	src/or/geoip.c	/^#define RESPONSE_GRANULARITY /;"	d	file:
RESPONSE_GRANULARITY	src/or/geoip.c	/^#undef RESPONSE_GRANULARITY$/;"	d	file:
RESPONSE_LEN_4	src/tools/tor-resolve.c	/^#define RESPONSE_LEN_4 /;"	d	file:
RES_STATUS_DONE_ERR	src/or/dns_structs.h	/^#define RES_STATUS_DONE_ERR /;"	d
RES_STATUS_DONE_OK	src/or/dns_structs.h	/^#define RES_STATUS_DONE_OK /;"	d
RES_STATUS_INFLIGHT	src/or/dns_structs.h	/^#define RES_STATUS_INFLIGHT /;"	d
RETRY_DNS_INTERVAL	src/or/main.c	/^#define RETRY_DNS_INTERVAL /;"	d	file:
RET_ERR	src/or/routerparse.c	/^#define RET_ERR(/;"	d	file:
RET_ERR	src/or/routerparse.c	/^#undef RET_ERR$/;"	d	file:
REVERSE_LOOKUP_NAME_BUF_LEN	src/common/address.h	/^#define REVERSE_LOOKUP_NAME_BUF_LEN /;"	d
REWRITE	src/test/test_entryconn.c	/^#define REWRITE(/;"	d	file:
RFC1123_TIME_LEN	src/common/util.h	/^#define RFC1123_TIME_LEN /;"	d
RFTS_BIN	src/common/util.h	/^#define RFTS_BIN /;"	d
RFTS_IGNORE_MISSING	src/common/util.h	/^#define RFTS_IGNORE_MISSING /;"	d
RIGHT_CHILD	src/common/container.c	/^#define RIGHT_CHILD(/;"	d	file:
RIMAP_FOREACH	src/or/routerlist.c	/^#define RIMAP_FOREACH(/;"	d	file:
ROBOTS_CACHE_LIFETIME	src/or/directory.c	/^#define ROBOTS_CACHE_LIFETIME /;"	d	file:
ROTATE	src/ext/csiphash.c	/^#define ROTATE(/;"	d	file:
ROTL32	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#define ROTL32(/;"	d
ROTR32	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#define ROTR32(/;"	d
ROUND_UP	src/or/hibernate.c	/^#define ROUND_UP(/;"	d	file:
ROUND_UP	src/or/hibernate.c	/^#undef ROUND_UP$/;"	d	file:
ROUTERDESC_BY_DIGEST_CACHE_LIFETIME	src/or/directory.c	/^#define ROUTERDESC_BY_DIGEST_CACHE_LIFETIME /;"	d	file:
ROUTERDESC_CACHE_LIFETIME	src/or/directory.c	/^#define ROUTERDESC_CACHE_LIFETIME /;"	d	file:
ROUTERLIST_PRIVATE	src/or/routerlist.c	/^#define ROUTERLIST_PRIVATE$/;"	d	file:
ROUTERLIST_PRIVATE	src/test/test_dir.c	/^#define ROUTERLIST_PRIVATE$/;"	d	file:
ROUTERLIST_PRIVATE	src/test/test_entrynodes.c	/^#define ROUTERLIST_PRIVATE$/;"	d	file:
ROUTERLIST_PRIVATE	src/test/test_helpers.c	/^#define ROUTERLIST_PRIVATE$/;"	d	file:
ROUTERLIST_PRIVATE	src/test/test_routerlist.c	/^#define ROUTERLIST_PRIVATE$/;"	d	file:
ROUTERPARSE_PRIVATE	src/or/routerparse.c	/^#define ROUTERPARSE_PRIVATE$/;"	d	file:
ROUTERPARSE_PRIVATE	src/test/test_guardfraction.c	/^#define ROUTERPARSE_PRIVATE$/;"	d	file:
ROUTERSET_ALL_STR	src/test/test_dir.c	/^#define ROUTERSET_ALL_STR /;"	d	file:
ROUTERSET_A_STR	src/test/test_dir.c	/^#define ROUTERSET_A_STR /;"	d	file:
ROUTERSET_NONE_STR	src/test/test_dir.c	/^#define ROUTERSET_NONE_STR /;"	d	file:
ROUTERSET_PRIVATE	src/or/routerset.c	/^#define ROUTERSET_PRIVATE$/;"	d	file:
ROUTERSET_PRIVATE	src/test/test_config.c	/^#define ROUTERSET_PRIVATE$/;"	d	file:
ROUTERSET_PRIVATE	src/test/test_options.c	/^#define ROUTERSET_PRIVATE$/;"	d	file:
ROUTERSET_PRIVATE	src/test/test_routerset.c	/^#define ROUTERSET_PRIVATE$/;"	d	file:
ROUTER_ADDED_NOTIFY_GENERATOR	src/or/or.h	/^  ROUTER_ADDED_NOTIFY_GENERATOR = 0,$/;"	e	enum:was_router_added_t
ROUTER_ADDED_SUCCESSFULLY	src/or/or.h	/^  ROUTER_ADDED_SUCCESSFULLY = 1,$/;"	e	enum:was_router_added_t
ROUTER_ALLOW_SKEW	src/or/dirserv.c	/^#define ROUTER_ALLOW_SKEW /;"	d	file:
ROUTER_ALLOW_UPTIME_DRIFT	src/or/routerlist.c	/^#define ROUTER_ALLOW_UPTIME_DRIFT /;"	d	file:
ROUTER_ANNOTATION_BUF_LEN	src/or/or.h	/^#define ROUTER_ANNOTATION_BUF_LEN /;"	d
ROUTER_AUTHDIR_REJECTS	src/or/or.h	/^  ROUTER_AUTHDIR_REJECTS = -5,$/;"	e	enum:was_router_added_t
ROUTER_A_ID_STR	src/test/test_dir.c	/^#define ROUTER_A_ID_STR /;"	d	file:
ROUTER_A_IPV4	src/test/test_dir.c	/^#define ROUTER_A_IPV4 /;"	d	file:
ROUTER_BAD_EI	src/or/or.h	/^  ROUTER_BAD_EI = -1,$/;"	e	enum:was_router_added_t
ROUTER_B_ID_STR	src/test/test_dir.c	/^#define ROUTER_B_ID_STR /;"	d	file:
ROUTER_B_IPV4	src/test/test_dir.c	/^#define ROUTER_B_IPV4 /;"	d	file:
ROUTER_CERTS_EXPIRED	src/or/or.h	/^  ROUTER_CERTS_EXPIRED = -8$/;"	e	enum:was_router_added_t
ROUTER_IS_ALREADY_KNOWN	src/or/or.h	/^  ROUTER_IS_ALREADY_KNOWN = -2,$/;"	e	enum:was_router_added_t
ROUTER_MAX_AGE	src/or/or.h	/^#define ROUTER_MAX_AGE /;"	d
ROUTER_MAX_AGE_TO_PUBLISH	src/or/or.h	/^#define ROUTER_MAX_AGE_TO_PUBLISH /;"	d
ROUTER_MAX_COSMETIC_TIME_DIFFERENCE	src/or/routerlist.c	/^#define ROUTER_MAX_COSMETIC_TIME_DIFFERENCE /;"	d	file:
ROUTER_MAX_DECLARED_BANDWIDTH	src/or/or.h	/^#define ROUTER_MAX_DECLARED_BANDWIDTH /;"	d
ROUTER_NOT_IN_CONSENSUS	src/or/or.h	/^  ROUTER_NOT_IN_CONSENSUS = -3,$/;"	e	enum:was_router_added_t
ROUTER_NOT_IN_CONSENSUS_OR_NETWORKSTATUS	src/or/or.h	/^  ROUTER_NOT_IN_CONSENSUS_OR_NETWORKSTATUS = -4,$/;"	e	enum:was_router_added_t
ROUTER_PRIVATE	src/or/router.c	/^#define ROUTER_PRIVATE$/;"	d	file:
ROUTER_PRIVATE	src/test/test.c	/^#define ROUTER_PRIVATE$/;"	d	file:
ROUTER_PRIVATE	src/test/test_dir.c	/^#define ROUTER_PRIVATE$/;"	d	file:
ROUTER_PRIVATE	src/test/test_routerkeys.c	/^#define ROUTER_PRIVATE$/;"	d	file:
ROUTER_PURPOSE_BRIDGE	src/or/or.h	/^#define ROUTER_PURPOSE_BRIDGE /;"	d
ROUTER_PURPOSE_CONTROLLER	src/or/or.h	/^#define ROUTER_PURPOSE_CONTROLLER /;"	d
ROUTER_PURPOSE_GENERAL	src/or/or.h	/^#define ROUTER_PURPOSE_GENERAL /;"	d
ROUTER_PURPOSE_UNKNOWN	src/or/or.h	/^#define ROUTER_PURPOSE_UNKNOWN /;"	d
ROUTER_STORE	src/or/or.h	/^  ROUTER_STORE = 0,$/;"	e	enum:store_type_t
ROUTER_WAS_NOT_WANTED	src/or/or.h	/^  ROUTER_WAS_NOT_WANTED = -6,$/;"	e	enum:was_router_added_t
ROUTER_WAS_TOO_OLD	src/or/or.h	/^  ROUTER_WAS_TOO_OLD = -7, \/* note contrast with 'NOT_NEW' *\/$/;"	e	enum:was_router_added_t
RPP_ECHO_OFF	src/ext/tor_readpassphrase.h	/^#define RPP_ECHO_OFF /;"	d
RPP_ECHO_ON	src/ext/tor_readpassphrase.h	/^#define RPP_ECHO_ON /;"	d
RPP_FORCELOWER	src/ext/tor_readpassphrase.h	/^#define RPP_FORCELOWER /;"	d
RPP_FORCEUPPER	src/ext/tor_readpassphrase.h	/^#define RPP_FORCEUPPER /;"	d
RPP_REQUIRE_TTY	src/ext/tor_readpassphrase.h	/^#define RPP_REQUIRE_TTY /;"	d
RPP_SEVENBIT	src/ext/tor_readpassphrase.h	/^#define RPP_SEVENBIT /;"	d
RPP_STDIN	src/ext/tor_readpassphrase.h	/^#define RPP_STDIN /;"	d
RRS_DONT_REMOVE_OLD	src/or/routerlist.c	/^#define RRS_DONT_REMOVE_OLD /;"	d	file:
RRS_FORCE	src/or/routerlist.c	/^#define RRS_FORCE /;"	d	file:
RSAE_ADDREXISTS	src/or/rendservice.h	/^  RSAE_ADDREXISTS = -3, \/**< Onion address collision *\/$/;"	e	enum:__anon112
RSAE_BADPRIVKEY	src/or/rendservice.h	/^  RSAE_BADPRIVKEY = -2, \/**< Invalid public key *\/$/;"	e	enum:__anon112
RSAE_BADVIRTPORT	src/or/rendservice.h	/^  RSAE_BADVIRTPORT = -4, \/**< Invalid VIRTPORT\/TARGET(s) *\/$/;"	e	enum:__anon112
RSAE_INTERNAL	src/or/rendservice.h	/^  RSAE_INTERNAL = -1, \/**< Internal error *\/$/;"	e	enum:__anon112
RSAE_OKAY	src/or/rendservice.h	/^  RSAE_OKAY = 0 \/**< Service added as expected *\/$/;"	e	enum:__anon112
RUNNINGROUTERS_CACHE_LIFETIME	src/or/directory.c	/^#define RUNNINGROUTERS_CACHE_LIFETIME /;"	d	file:
RUN_SCHEDULED_EVENTS	src/test/test_main.c	/^#define RUN_SCHEDULED_EVENTS(/;"	d	file:
R_INTRODUCTION_POINTS	src/or/routerparse.c	/^  R_INTRODUCTION_POINTS,$/;"	e	enum:__anon96	file:
R_IPO_IDENTIFIER	src/or/routerparse.c	/^  R_IPO_IDENTIFIER,$/;"	e	enum:__anon96	file:
R_IPO_IP_ADDRESS	src/or/routerparse.c	/^  R_IPO_IP_ADDRESS,$/;"	e	enum:__anon96	file:
R_IPO_ONION_KEY	src/or/routerparse.c	/^  R_IPO_ONION_KEY,$/;"	e	enum:__anon96	file:
R_IPO_ONION_PORT	src/or/routerparse.c	/^  R_IPO_ONION_PORT,$/;"	e	enum:__anon96	file:
R_IPO_SERVICE_KEY	src/or/routerparse.c	/^  R_IPO_SERVICE_KEY,$/;"	e	enum:__anon96	file:
R_PERMANENT_KEY	src/or/routerparse.c	/^  R_PERMANENT_KEY,$/;"	e	enum:__anon96	file:
R_PROTOCOL_VERSIONS	src/or/routerparse.c	/^  R_PROTOCOL_VERSIONS,$/;"	e	enum:__anon96	file:
R_PUBLICATION_TIME	src/or/routerparse.c	/^  R_PUBLICATION_TIME,$/;"	e	enum:__anon96	file:
R_RENDEZVOUS_SERVICE_DESCRIPTOR	src/or/routerparse.c	/^  R_RENDEZVOUS_SERVICE_DESCRIPTOR,$/;"	e	enum:__anon96	file:
R_SECRET_ID_PART	src/or/routerparse.c	/^  R_SECRET_ID_PART,$/;"	e	enum:__anon96	file:
R_SIGNATURE	src/or/routerparse.c	/^  R_SIGNATURE,$/;"	e	enum:__anon96	file:
R_VERSION	src/or/routerparse.c	/^  R_VERSION,$/;"	e	enum:__anon96	file:
ReachableAddresses	src/or/or.h	/^  config_line_t *ReachableAddresses; \/**< IP:ports our firewall allows. *\/$/;"	m	struct:__anon55
ReachableDirAddresses	src/or/or.h	/^  config_line_t *ReachableDirAddresses; \/**< IP:ports for Dir conns. *\/$/;"	m	struct:__anon55
ReachableORAddresses	src/or/or.h	/^  config_line_t *ReachableORAddresses; \/**< IP:ports for OR conns. *\/$/;"	m	struct:__anon55
RecommendedClientVersions	src/or/or.h	/^  config_line_t *RecommendedClientVersions;$/;"	m	struct:__anon55
RecommendedPackages	src/or/or.h	/^  config_line_t *RecommendedPackages;$/;"	m	struct:__anon55
RecommendedServerVersions	src/or/or.h	/^  config_line_t *RecommendedServerVersions;$/;"	m	struct:__anon55
RecommendedVersions	src/or/or.h	/^  config_line_t *RecommendedVersions;$/;"	m	struct:__anon55
RefuseUnknownExits	src/or/or.h	/^  int RefuseUnknownExits;$/;"	m	struct:__anon55
RejectPlaintextPorts	src/or/or.h	/^  smartlist_t *RejectPlaintextPorts;$/;"	m	struct:__anon55
RelayBandwidthBurst	src/or/or.h	/^  uint64_t RelayBandwidthBurst; \/**< How much bandwidth, at maximum, will we$/;"	m	struct:__anon55
RelayBandwidthRate	src/or/or.h	/^  uint64_t RelayBandwidthRate; \/**< How much bandwidth, on average, are we$/;"	m	struct:__anon55
ReloadTorrcOnSIGHUP	src/or/or.h	/^  int ReloadTorrcOnSIGHUP;$/;"	m	struct:__anon55
RendConfigLines	src/or/or.h	/^  config_line_t *RendConfigLines; \/**< List of configuration lines$/;"	m	struct:__anon55
RendPostPeriod	src/or/or.h	/^  int RendPostPeriod; \/**< How often do we post each rendezvous service$/;"	m	struct:__anon55
RephistTrackTime	src/or/or.h	/^  int RephistTrackTime; \/**< How many seconds do we keep rephist info? *\/$/;"	m	struct:__anon55
RunAsDaemon	src/or/or.h	/^  int RunAsDaemon; \/**< If true, run in the background. (Unix only) *\/$/;"	m	struct:__anon55
S0	src/ext/ed25519/donna/ed25519-hash.h	/^#define S0(/;"	d
S1	src/ext/ed25519/donna/ed25519-hash.h	/^#define S1(/;"	d
S1	src/test/test_util.c	/^#define S1(/;"	d	file:
S1_SWINDOWSIZE	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^#define S1_SWINDOWSIZE /;"	d
S1_SWINDOWSIZE	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^#define S1_SWINDOWSIZE /;"	d
S1_TABLE_SIZE	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^#define S1_TABLE_SIZE /;"	d
S1_TABLE_SIZE	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^#define S1_TABLE_SIZE /;"	d
S2	src/test/test_util.c	/^#define S2(/;"	d	file:
S2K_BAD_ALGORITHM	src/common/crypto_s2k.h	/^#define S2K_BAD_ALGORITHM /;"	d
S2K_BAD_LEN	src/common/crypto_s2k.h	/^#define S2K_BAD_LEN /;"	d
S2K_BAD_PARAMS	src/common/crypto_s2k.h	/^#define S2K_BAD_PARAMS /;"	d
S2K_BAD_SECRET	src/common/crypto_s2k.h	/^#define S2K_BAD_SECRET /;"	d
S2K_FAILED	src/common/crypto_s2k.h	/^#define S2K_FAILED /;"	d
S2K_FLAG_LOW_MEM	src/common/crypto_s2k.h	/^#define S2K_FLAG_LOW_MEM /;"	d
S2K_FLAG_NO_SCRYPT	src/common/crypto_s2k.h	/^#define S2K_FLAG_NO_SCRYPT /;"	d
S2K_FLAG_USE_PBKDF2	src/common/crypto_s2k.h	/^#define S2K_FLAG_USE_PBKDF2 /;"	d
S2K_MAXLEN	src/common/crypto_s2k.h	/^#define S2K_MAXLEN /;"	d
S2K_NO_SCRYPT_SUPPORT	src/common/crypto_s2k.h	/^#define S2K_NO_SCRYPT_SUPPORT /;"	d
S2K_OKAY	src/common/crypto_s2k.h	/^#define S2K_OKAY /;"	d
S2K_RFC2440_SPECIFIER_LEN	src/common/crypto_s2k.h	/^#define S2K_RFC2440_SPECIFIER_LEN /;"	d
S2K_TRUNCATED	src/common/crypto_s2k.h	/^#define S2K_TRUNCATED /;"	d
S2K_TYPE_PBKDF2	src/common/crypto_s2k.c	/^#define S2K_TYPE_PBKDF2 /;"	d	file:
S2K_TYPE_RFC2440	src/common/crypto_s2k.c	/^#define S2K_TYPE_RFC2440 /;"	d	file:
S2K_TYPE_SCRYPT	src/common/crypto_s2k.c	/^#define S2K_TYPE_SCRYPT /;"	d	file:
S2_SWINDOWSIZE	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^#define S2_SWINDOWSIZE /;"	d
S2_SWINDOWSIZE	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^#define S2_SWINDOWSIZE /;"	d
S2_TABLE_SIZE	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^#define S2_TABLE_SIZE /;"	d
S2_TABLE_SIZE	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^#define S2_TABLE_SIZE /;"	d
S6_ADDR16	src/common/compat.h	/^#define S6_ADDR16(/;"	d
S6_ADDR32	src/common/compat.h	/^#define S6_ADDR32(/;"	d
SAFECOOKIE_CONTROLLER_TO_SERVER_CONSTANT	src/or/control.c	/^#define SAFECOOKIE_CONTROLLER_TO_SERVER_CONSTANT /;"	d	file:
SAFECOOKIE_SERVER_NONCE_LEN	src/or/control.c	/^#define SAFECOOKIE_SERVER_NONCE_LEN /;"	d	file:
SAFECOOKIE_SERVER_TO_CONTROLLER_CONSTANT	src/or/control.c	/^#define SAFECOOKIE_SERVER_TO_CONTROLLER_CONSTANT /;"	d	file:
SAFELOG_SCRUB_ALL	src/or/or.h	/^    SAFELOG_SCRUB_ALL, SAFELOG_SCRUB_RELAY, SAFELOG_SCRUB_NONE$/;"	e	enum:__anon55::__anon59
SAFELOG_SCRUB_NONE	src/or/or.h	/^    SAFELOG_SCRUB_ALL, SAFELOG_SCRUB_RELAY, SAFELOG_SCRUB_NONE$/;"	e	enum:__anon55::__anon59
SAFELOG_SCRUB_RELAY	src/or/or.h	/^    SAFELOG_SCRUB_ALL, SAFELOG_SCRUB_RELAY, SAFELOG_SCRUB_NONE$/;"	e	enum:__anon55::__anon59
SANDBOX_H_	src/common/sandbox.h	/^#define SANDBOX_H_$/;"	d
SANDBOX_PRIVATE	src/test/test_sandbox.c	/^#define SANDBOX_PRIVATE$/;"	d	file:
SAVED_IN_CACHE	src/or/or.h	/^  SAVED_IN_CACHE,$/;"	e	enum:__anon43
SAVED_IN_JOURNAL	src/or/or.h	/^  SAVED_IN_JOURNAL$/;"	e	enum:__anon43
SAVED_NOWHERE	src/or/or.h	/^  SAVED_NOWHERE=0,$/;"	e	enum:__anon43
SAVE_STABILITY_INTERVAL	src/or/main.c	/^#define SAVE_STABILITY_INTERVAL /;"	d	file:
SB_IMPL	src/common/sandbox.h	/^} SB_IMPL;$/;"	t	typeref:enum:__anon75
SB_NOCHANGE_STR	src/or/config.c	/^#define SB_NOCHANGE_STR(/;"	d	file:
SB_NOCHANGE_STR	src/or/config.c	/^#undef SB_NOCHANGE_STR$/;"	d	file:
SCALE_TO_U64_MAX	src/or/routerlist.c	/^#define SCALE_TO_U64_MAX /;"	d	file:
SCALE_TO_U64_MAX	src/or/routerlist.c	/^#undef SCALE_TO_U64_MAX$/;"	d	file:
SCHEDULER_PRIVATE_	src/or/scheduler.c	/^#define SCHEDULER_PRIVATE_$/;"	d	file:
SCHEDULER_PRIVATE_	src/test/test_scheduler.c	/^#define SCHEDULER_PRIVATE_$/;"	d	file:
SCHED_CHAN_IDLE	src/or/channel.h	/^    SCHED_CHAN_IDLE = 0,$/;"	e	enum:channel_s::__anon89
SCHED_CHAN_PENDING	src/or/channel.h	/^    SCHED_CHAN_PENDING$/;"	e	enum:channel_s::__anon89
SCHED_CHAN_WAITING_FOR_CELLS	src/or/channel.h	/^    SCHED_CHAN_WAITING_FOR_CELLS,$/;"	e	enum:channel_s::__anon89
SCHED_CHAN_WAITING_TO_WRITE	src/or/channel.h	/^    SCHED_CHAN_WAITING_TO_WRITE,$/;"	e	enum:channel_s::__anon89
SCMP_CMP	src/common/sandbox.c	/^#define SCMP_CMP(/;"	d	file:
SCMP_CMP	src/common/sandbox.c	/^#undef SCMP_CMP$/;"	d	file:
SCMP_CMP4	src/common/sandbox.c	/^#define SCMP_CMP4(/;"	d	file:
SCMP_CMP_MASKED	src/common/sandbox.c	/^#define SCMP_CMP_MASKED(/;"	d	file:
SCMP_CMP_STR	src/common/sandbox.c	/^#define SCMP_CMP_STR(/;"	d	file:
SCMP_stat	src/common/sandbox.c	/^#define SCMP_stat /;"	d	file:
SCRYPT_KEY_LEN	src/common/crypto_s2k.c	/^#define SCRYPT_KEY_LEN /;"	d	file:
SCRYPT_SPEC_LEN	src/common/crypto_s2k.c	/^#define SCRYPT_SPEC_LEN /;"	d	file:
SC_H	src/ext/ed25519/ref10/sc.h	/^#define SC_H$/;"	d
SDMAP_FOREACH	src/or/routerlist.c	/^#define SDMAP_FOREACH(/;"	d	file:
SECRET_INPUT_LEN	src/or/onion_ntor.c	/^#define SECRET_INPUT_LEN /;"	d	file:
SEEK_CUR	src/common/compat.c	/^#define SEEK_CUR /;"	d	file:
SEEK_END	src/common/compat.c	/^#define SEEK_END /;"	d	file:
SEEK_SET	src/common/compat.c	/^#define SEEK_SET /;"	d	file:
SELF_EXCLUDED_WARN_INTERVAL	src/or/router.c	/^#define SELF_EXCLUDED_WARN_INTERVAL /;"	d	file:
SEND_HS_DESC_FAILED_CONTENT	src/or/directory.c	/^    #define SEND_HS_DESC_FAILED_CONTENT(/;"	d	file:
SEND_HS_DESC_FAILED_EVENT	src/or/directory.c	/^    #define SEND_HS_DESC_FAILED_EVENT(/;"	d	file:
SEND_HS_DESC_UPLOAD_FAILED_EVENT	src/or/directory.c	/^    #define SEND_HS_DESC_UPLOAD_FAILED_EVENT(/;"	d	file:
SENTINEL_LEN	src/common/memarea.c	/^#define SENTINEL_LEN /;"	d	file:
SENTINEL_VAL	src/common/memarea.c	/^#define SENTINEL_VAL /;"	d	file:
SERIAL_NUMBER_SIZE	src/common/tortls.c	/^#define SERIAL_NUMBER_SIZE /;"	d	file:
SERIAL_NUMBER_SIZE	src/common/tortls.c	/^#undef SERIAL_NUMBER_SIZE$/;"	d	file:
SERVER_BUSY	src/test/test_dir_handle_get.c	/^#define SERVER_BUSY /;"	d	file:
SERVER_CIPHER_LIST	src/common/tortls.c	/^#define SERVER_CIPHER_LIST /;"	d	file:
SERVER_DESC_GET	src/test/test_dir_handle_get.c	/^#define SERVER_DESC_GET(/;"	d	file:
SERVER_STR	src/or/onion_ntor.c	/^#define SERVER_STR /;"	d	file:
SERVER_STR_LEN	src/or/onion_ntor.c	/^#define SERVER_STR_LEN /;"	d	file:
SESSION_GROUP_CONTROL_RESOLVE	src/or/or.h	/^#define SESSION_GROUP_CONTROL_RESOLVE /;"	d
SESSION_GROUP_DIRCONN	src/or/or.h	/^#define SESSION_GROUP_DIRCONN /;"	d
SESSION_GROUP_FIRST_AUTO	src/or/or.h	/^#define SESSION_GROUP_FIRST_AUTO /;"	d
SESSION_GROUP_UNSET	src/or/or.h	/^#define SESSION_GROUP_UNSET /;"	d
SESS_CERT_local	src/test/test_tortls.c	/^} SESS_CERT_local;$/;"	t	typeref:struct:sess_cert_st_local	file:
SET	src/or/dns.c	/^#define SET(/;"	d	file:
SET	src/or/dns.c	/^#undef SET$/;"	d	file:
SETOPT_ERR_MISC	src/or/or.h	/^  SETOPT_ERR_MISC = -1,$/;"	e	enum:setopt_err_t
SETOPT_ERR_PARSE	src/or/or.h	/^  SETOPT_ERR_PARSE = -2,$/;"	e	enum:setopt_err_t
SETOPT_ERR_SETTING	src/or/or.h	/^  SETOPT_ERR_SETTING = -4,$/;"	e	enum:setopt_err_t
SETOPT_ERR_TRANSITION	src/or/or.h	/^  SETOPT_ERR_TRANSITION = -3,$/;"	e	enum:setopt_err_t
SETOPT_OK	src/or/or.h	/^  SETOPT_OK = 0,$/;"	e	enum:setopt_err_t
SET_CELL	src/test/test_cell_formats.c	/^#define SET_CELL(/;"	d	file:
SET_CELL	src/test/test_relaycell.c	/^#define SET_CELL(/;"	d	file:
SET_CERT	src/or/routerkeys.c	/^#define SET_CERT(/;"	d	file:
SET_CERT	src/or/routerkeys.c	/^#undef SET_CERT$/;"	d	file:
SET_CUTOFF	src/or/circuituse.c	/^#define SET_CUTOFF(/;"	d	file:
SET_KEY	src/or/routerkeys.c	/^#define SET_KEY(/;"	d	file:
SET_KEY	src/or/routerkeys.c	/^#undef SET_KEY$/;"	d	file:
SET_SENTINEL	src/common/memarea.c	/^#define SET_SENTINEL(/;"	d	file:
SET_SOCKS_ADDRESS	src/test/test_connection_edge_ap_handshake.c	/^#define SET_SOCKS_ADDRESS(/;"	d	file:
SET_TEST_ADDRESS	src/test/test.c	/^#define SET_TEST_ADDRESS(/;"	d	file:
SET_TEST_ADDRESS	src/test/test.c	/^#undef SET_TEST_ADDRESS$/;"	d	file:
SET_TEST_IPV6	src/test/test.c	/^#define SET_TEST_IPV6(/;"	d	file:
SET_TEST_IPV6	src/test/test.c	/^#undef SET_TEST_IPV6$/;"	d	file:
SEVERITY_MASK_IDX	src/common/log.c	/^#define SEVERITY_MASK_IDX(/;"	d	file:
SHARES	src/or/rephist.c	/^#define SHARES /;"	d	file:
SHARES	src/or/rephist.c	/^#undef SHARES$/;"	d	file:
SHL32	src/ext/ed25519/ref10/crypto_int32.h	/^#define SHL32(/;"	d
SHL64	src/ext/ed25519/ref10/crypto_int64.h	/^#define SHL64(/;"	d
SHL8	src/ext/ed25519/ref10/crypto_int32.h	/^#define SHL8(/;"	d
SHORT_FILE__	src/common/compat.h	/^#define SHORT_FILE__ /;"	d
SHORT_MAX	src/common/torint.h	/^#define SHORT_MAX /;"	d
SIGCLEARDNSCACHE	src/or/or.h	/^#define SIGCLEARDNSCACHE /;"	d
SIGHEARTBEAT	src/or/or.h	/^#define SIGHEARTBEAT /;"	d
SIGHUP	src/or/or.h	/^#define SIGHUP /;"	d
SIGINT	src/or/or.h	/^#define SIGINT /;"	d
SIGNED_KEY_TYPE_ED25519	src/or/torcert.h	/^#define SIGNED_KEY_TYPE_ED25519 /;"	d
SIGNEWNYM	src/or/or.h	/^#define SIGNEWNYM /;"	d
SIGNING_KEY_BITS	src/tools/tor-gencert.c	/^#define SIGNING_KEY_BITS /;"	d	file:
SIGN_DIR	src/or/or.h	/^  SIGN_DIR, SIGN_RTR,$/;"	e	enum:__anon72
SIGN_RTR	src/or/or.h	/^  SIGN_DIR, SIGN_RTR,$/;"	e	enum:__anon72
SIGTERM	src/or/or.h	/^#define SIGTERM /;"	d
SIGUSR1	src/or/or.h	/^#define SIGUSR1 /;"	d
SIGUSR2	src/or/or.h	/^#define SIGUSR2 /;"	d
SIPHASH_H	src/ext/siphash.h	/^#define SIPHASH_H$/;"	d
SIZEOF_INTPTR_T	src/common/torint.h	/^#define SIZEOF_INTPTR_T /;"	d
SIZEOF_UINTPTR_T	src/common/torint.h	/^#define SIZEOF_UINTPTR_T /;"	d
SIZE_MAX	src/common/torint.h	/^#define SIZE_MAX /;"	d
SIZE_T_CEILING	src/common/torint.h	/^#define SIZE_T_CEILING /;"	d
SKIP	src/ext/tinytest.c	/^enum outcome { SKIP=2, OK=1, FAIL=0 };$/;"	e	enum:outcome	file:
SLEEP	src/test/test-child.c	/^#define SLEEP(/;"	d	file:
SLOW_GUARD_STATE_FLUSH_TIME	src/or/entrynodes.c	/^#define SLOW_GUARD_STATE_FLUSH_TIME /;"	d	file:
SMARTLIST_DEFAULT_CAPACITY	src/common/container.c	/^#define SMARTLIST_DEFAULT_CAPACITY /;"	d	file:
SMARTLIST_DEL_CURRENT	src/common/container.h	/^#define SMARTLIST_DEL_CURRENT(/;"	d
SMARTLIST_DEL_CURRENT_KEEPORDER	src/common/container.h	/^#define SMARTLIST_DEL_CURRENT_KEEPORDER(/;"	d
SMARTLIST_FOREACH	src/common/container.h	/^#define SMARTLIST_FOREACH(/;"	d
SMARTLIST_FOREACH_BEGIN	src/common/container.h	/^#define SMARTLIST_FOREACH_BEGIN(/;"	d
SMARTLIST_FOREACH_END	src/common/container.h	/^#define SMARTLIST_FOREACH_END(/;"	d
SMARTLIST_FOREACH_JOIN	src/common/container.h	/^#define SMARTLIST_FOREACH_JOIN(/;"	d
SMARTLIST_FOREACH_JOIN_END	src/common/container.h	/^#define SMARTLIST_FOREACH_JOIN_END(/;"	d
SMARTLIST_REPLACE_CURRENT	src/common/container.h	/^#define SMARTLIST_REPLACE_CURRENT(/;"	d
SOCKET_OK	src/common/compat.h	/^#define SOCKET_OK(/;"	d
SOCKS4_GRANTED	src/or/connection_edge.c	/^#define SOCKS4_GRANTED /;"	d	file:
SOCKS4_NETWORK_LEN	src/or/or.h	/^#define SOCKS4_NETWORK_LEN /;"	d
SOCKS4_REJECT	src/or/connection_edge.c	/^#define SOCKS4_REJECT /;"	d	file:
SOCKS4_STANDARD_BUFFER_SIZE	src/or/connection.c	/^#define SOCKS4_STANDARD_BUFFER_SIZE /;"	d	file:
SOCKS5_ADDRESS_TYPE_NOT_SUPPORTED	src/common/compat.h	/^  SOCKS5_ADDRESS_TYPE_NOT_SUPPORTED = 0x08,$/;"	e	enum:__anon28
SOCKS5_COMMAND_NOT_SUPPORTED	src/common/compat.h	/^  SOCKS5_COMMAND_NOT_SUPPORTED      = 0x07,$/;"	e	enum:__anon28
SOCKS5_CONNECTION_REFUSED	src/common/compat.h	/^  SOCKS5_CONNECTION_REFUSED         = 0x05,$/;"	e	enum:__anon28
SOCKS5_GENERAL_ERROR	src/common/compat.h	/^  SOCKS5_GENERAL_ERROR              = 0x01,$/;"	e	enum:__anon28
SOCKS5_HOST_UNREACHABLE	src/common/compat.h	/^  SOCKS5_HOST_UNREACHABLE           = 0x04,$/;"	e	enum:__anon28
SOCKS5_NET_UNREACHABLE	src/common/compat.h	/^  SOCKS5_NET_UNREACHABLE            = 0x03,$/;"	e	enum:__anon28
SOCKS5_NOT_ALLOWED	src/common/compat.h	/^  SOCKS5_NOT_ALLOWED                = 0x02,$/;"	e	enum:__anon28
SOCKS5_SUCCEEDED	src/common/compat.h	/^  SOCKS5_SUCCEEDED                  = 0x00,$/;"	e	enum:__anon28
SOCKS5_TTL_EXPIRED	src/common/compat.h	/^  SOCKS5_TTL_EXPIRED                = 0x06,$/;"	e	enum:__anon28
SOCKSENT	src/test/test_socks.c	/^#define SOCKSENT(/;"	d	file:
SOCKS_COMMAND_CONNECT	src/or/or.h	/^#define SOCKS_COMMAND_CONNECT /;"	d
SOCKS_COMMAND_IS_CONNECT	src/or/or.h	/^#define SOCKS_COMMAND_IS_CONNECT(/;"	d
SOCKS_COMMAND_IS_RESOLVE	src/or/or.h	/^#define SOCKS_COMMAND_IS_RESOLVE(/;"	d
SOCKS_COMMAND_RESOLVE	src/or/or.h	/^#define SOCKS_COMMAND_RESOLVE /;"	d
SOCKS_COMMAND_RESOLVE_PTR	src/or/or.h	/^#define SOCKS_COMMAND_RESOLVE_PTR /;"	d
SOCKS_NO_AUTH	src/or/or.h	/^#define SOCKS_NO_AUTH /;"	d
SOCKS_TEST_INIT	src/test/test_socks.c	/^#define SOCKS_TEST_INIT(/;"	d	file:
SOCKS_USER_PASS	src/or/or.h	/^#define SOCKS_USER_PASS /;"	d
SOCKS_WARN_INTERVAL	src/or/buffers.c	/^#define SOCKS_WARN_INTERVAL /;"	d	file:
SOCK_ERRNO	src/common/compat.h	/^#define SOCK_ERRNO(/;"	d
SOFT_LIM_BYTES	src/or/hibernate.c	/^#define SOFT_LIM_BYTES /;"	d	file:
SOFT_LIM_MINUTES	src/or/hibernate.c	/^#define SOFT_LIM_MINUTES /;"	d	file:
SOFT_LIM_PCT	src/or/hibernate.c	/^#define SOFT_LIM_PCT /;"	d	file:
SP	src/common/util_format.c	/^#define SP /;"	d	file:
SP	src/common/util_format.c	/^#undef SP$/;"	d	file:
SPAWN_ERROR_MESSAGE	src/common/util.h	/^#define SPAWN_ERROR_MESSAGE /;"	d
SPECTYPE_IPV4	src/or/onion.c	/^#define SPECTYPE_IPV4 /;"	d	file:
SPECTYPE_IPV6	src/or/onion.c	/^#define SPECTYPE_IPV6 /;"	d	file:
SPECTYPE_LEGACY_ID	src/or/onion.c	/^#define SPECTYPE_LEGACY_ID /;"	d	file:
SPIN	src/test/test_threads.c	/^#define SPIN(/;"	d	file:
SPLIT_IGNORE_BLANK	src/common/container.h	/^#define SPLIT_IGNORE_BLANK /;"	d
SPLIT_SKIP_SPACE	src/common/container.h	/^#define SPLIT_SKIP_SPACE /;"	d
SPLIT_STRIP_SPACE	src/common/container.h	/^#define SPLIT_STRIP_SPACE /;"	d
SQRT_SIZE_MAX_P1	src/common/util.c	/^#define SQRT_SIZE_MAX_P1 /;"	d	file:
SRC_EXT_ED25519_DONNA_H_INCLUDED_	src/ext/ed25519/donna/ed25519_donna_tor.h	/^#define SRC_EXT_ED25519_DONNA_H_INCLUDED_$/;"	d
SRC_EXT_ED25519_REF10_H_INCLUDED_	src/ext/ed25519/ref10/ed25519_ref10.h	/^#define SRC_EXT_ED25519_REF10_H_INCLUDED_$/;"	d
SSIZE_MAX	src/common/torint.h	/^#define SSIZE_MAX /;"	d
SSIZE_T_CEILING	src/common/torint.h	/^#define SSIZE_T_CEILING /;"	d
SSL3_FLAGS_ALLOW_UNSAFE_LEGACY_RENEGOTIATION	src/common/tortls.c	/^#define SSL3_FLAGS_ALLOW_UNSAFE_LEGACY_RENEGOTIATION /;"	d	file:
SSLKeyLifetime	src/or/or.h	/^  int SSLKeyLifetime;$/;"	m	struct:__anon55
SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION	src/common/tortls.c	/^#define SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION /;"	d	file:
SSL_SESSION_get_master_key	src/common/tortls.c	/^SSL_SESSION_get_master_key(SSL_SESSION *s, uint8_t *out, size_t len)$/;"	f
SSL_get_client_random	src/common/tortls.c	/^SSL_get_client_random(SSL *s, uint8_t *out, size_t len)$/;"	f	file:
SSL_get_server_random	src/common/tortls.c	/^SSL_get_server_random(SSL *s, uint8_t *out, size_t len)$/;"	f	file:
STABILITY_ALPHA	src/or/rephist.c	/^#define STABILITY_ALPHA /;"	d	file:
STABILITY_EPSILON	src/or/rephist.c	/^#define STABILITY_EPSILON /;"	d	file:
STABILITY_INTERVAL	src/or/rephist.c	/^#define STABILITY_INTERVAL /;"	d	file:
START_PATH_LENGTH	src/common/compat.c	/^#define START_PATH_LENGTH /;"	d	file:
STATEFILE_PRIVATE	src/or/statefile.c	/^#define STATEFILE_PRIVATE$/;"	d	file:
STATEFILE_PRIVATE	src/test/test.c	/^#define STATEFILE_PRIVATE$/;"	d	file:
STATEFILE_PRIVATE	src/test/test_accounting.c	/^#define STATEFILE_PRIVATE$/;"	d	file:
STATEFILE_PRIVATE	src/test/test_entrynodes.c	/^#define STATEFILE_PRIVATE$/;"	d	file:
STATEFILE_PRIVATE	src/test/test_pt.c	/^#define STATEFILE_PRIVATE$/;"	d	file:
STATE_IS_OPEN	src/or/control.c	/^#define STATE_IS_OPEN(/;"	d	file:
STATE_RELAY_CHECKPOINT_INTERVAL	src/or/statefile.c	/^#define STATE_RELAY_CHECKPOINT_INTERVAL /;"	d	file:
STATE_WRITE_RETRY_INTERVAL	src/or/statefile.c	/^#define STATE_WRITE_RETRY_INTERVAL /;"	d	file:
STATIC	src/common/testsupport.h	/^#define STATIC /;"	d
STATIC	src/common/testsupport.h	/^#define STATIC$/;"	d
STATUS_PRIVATE	src/or/status.c	/^#define STATUS_PRIVATE$/;"	d	file:
STATUS_PRIVATE	src/test/test_status.c	/^#define STATUS_PRIVATE$/;"	d	file:
STAT_DATADIR	src/or/main.c	/^#define STAT_DATADIR(/;"	d	file:
STAT_DATADIR2	src/or/main.c	/^#define STAT_DATADIR2(/;"	d	file:
STDIN_HANDLE	src/test/test_pt.c	/^#define STDIN_HANDLE /;"	d	file:
STEP	src/ext/ed25519/donna/ed25519-hash.h	/^#define STEP(/;"	d
STMT_BEGIN	src/common/compat.h	/^#define STMT_BEGIN /;"	d
STMT_END	src/common/compat.h	/^#define STMT_END /;"	d
STMT_NIL	src/common/compat.h	/^#define STMT_NIL /;"	d
STMT_VOID	src/common/compat.h	/^#define STMT_VOID(/;"	d
STRDUP	src/or/routerparse.c	/^#define STRDUP(/;"	d	file:
STRDUP	src/or/routerparse.c	/^#undef STRDUP$/;"	d	file:
STREAMWINDOW_INCREMENT	src/or/or.h	/^#define STREAMWINDOW_INCREMENT /;"	d
STREAMWINDOW_START	src/or/or.h	/^#define STREAMWINDOW_START /;"	d
STREAM_EVENT_CLOSED	src/or/or.h	/^  STREAM_EVENT_CLOSED       = 4,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_FAILED	src/or/or.h	/^  STREAM_EVENT_FAILED       = 3,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_FAILED_RETRIABLE	src/or/or.h	/^  STREAM_EVENT_FAILED_RETRIABLE = 7,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_NEW	src/or/or.h	/^  STREAM_EVENT_NEW          = 5,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_NEW_RESOLVE	src/or/or.h	/^  STREAM_EVENT_NEW_RESOLVE  = 6,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_REMAP	src/or/or.h	/^  STREAM_EVENT_REMAP        = 8$/;"	e	enum:stream_status_event_t
STREAM_EVENT_SENT_CONNECT	src/or/or.h	/^  STREAM_EVENT_SENT_CONNECT = 0,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_SENT_RESOLVE	src/or/or.h	/^  STREAM_EVENT_SENT_RESOLVE = 1,$/;"	e	enum:stream_status_event_t
STREAM_EVENT_SUCCEEDED	src/or/or.h	/^  STREAM_EVENT_SUCCEEDED    = 2,$/;"	e	enum:stream_status_event_t
STRMAP_FOREACH	src/common/container.h	/^#define STRMAP_FOREACH(/;"	d
STRMAP_FOREACH_END	src/common/container.h	/^#define STRMAP_FOREACH_END /;"	d
STRMAP_FOREACH_MODIFY	src/common/container.h	/^#define STRMAP_FOREACH_MODIFY(/;"	d
STRNDUP	src/or/routerparse.c	/^#define STRNDUP(/;"	d	file:
STRNDUP	src/or/routerparse.c	/^#undef STRNDUP$/;"	d	file:
STRUCT_OFFSET	src/common/util.h	/^ #define STRUCT_OFFSET(/;"	d
STRUCT_OFFSET	src/common/util.h	/^#define STRUCT_OFFSET(/;"	d
STRUCT_VAR_P	src/common/util.h	/^#define STRUCT_VAR_P(/;"	d
STR_DESC_ID_BASE32	src/test/test_hs.c	/^  #define STR_DESC_ID_BASE32 /;"	d	file:
STR_HSDIR_EXIST_LONGNAME	src/test/test_hs.c	/^#define STR_HSDIR_EXIST_LONGNAME /;"	d	file:
STR_HSDIR_NONE_EXIST_LONGNAME	src/test/test_hs.c	/^#define STR_HSDIR_NONE_EXIST_LONGNAME /;"	d	file:
STR_HS_ADDR	src/test/test_hs.c	/^  #define STR_HS_ADDR /;"	d	file:
STR_HS_CONTENT_DESC_ID	src/test/test_hs.c	/^  #define STR_HS_CONTENT_DESC_ID /;"	d	file:
SUBTRACT_CLAMPED	src/or/rephist.c	/^#define SUBTRACT_CLAMPED(/;"	d	file:
SUBTYPE_P	src/common/util.h	/^#define SUBTYPE_P(/;"	d
SUCCESS_NOTICE_INTERVAL	src/or/circpathbias.c	/^#define SUCCESS_NOTICE_INTERVAL /;"	d	file:
SUPERSEDED_CERT_LIFETIME	src/or/routerlist.c	/^#define SUPERSEDED_CERT_LIFETIME /;"	d	file:
SYS_SECCOMP	src/common/sandbox.h	/^#define SYS_SECCOMP /;"	d
S_CASE	src/or/reasons.c	/^#define S_CASE(/;"	d	file:
SafeLogging	src/or/or.h	/^  char *SafeLogging; \/**< Contains "relay", "1", "0" (meaning no scrubbing). *\/$/;"	m	struct:__anon55
SafeLogging_	src/or/or.h	/^  } SafeLogging_;$/;"	m	struct:__anon55	typeref:enum:__anon55::__anon59
SafeSocks	src/or/or.h	/^  int SafeSocks; \/**< Boolean: should we outright refuse application$/;"	m	struct:__anon55
Sandbox	src/or/or.h	/^  int Sandbox; \/**< Boolean: should sandboxing be enabled? *\/$/;"	m	struct:__anon55
SchedulerHighWaterMark__	src/or/or.h	/^  uint64_t SchedulerHighWaterMark__;$/;"	m	struct:__anon55
SchedulerLowWaterMark__	src/or/or.h	/^  uint64_t SchedulerLowWaterMark__;$/;"	m	struct:__anon55
SchedulerMaxFlushCells__	src/or/or.h	/^  int SchedulerMaxFlushCells__;$/;"	m	struct:__anon55
SecureZeroMemory	src/common/compat.c	/^SecureZeroMemory(PVOID ptr, SIZE_T cnt)$/;"	f	file:
ServerDNSAllowBrokenConfig	src/or/or.h	/^  int ServerDNSAllowBrokenConfig;$/;"	m	struct:__anon55
ServerDNSAllowNonRFC953Hostnames	src/or/or.h	/^  int ServerDNSAllowNonRFC953Hostnames;$/;"	m	struct:__anon55
ServerDNSDetectHijacking	src/or/or.h	/^  int ServerDNSDetectHijacking; \/**< Boolean: If true, check for DNS failure$/;"	m	struct:__anon55
ServerDNSRandomizeCase	src/or/or.h	/^  int ServerDNSRandomizeCase; \/**< Boolean: Use the 0x20-hack to prevent$/;"	m	struct:__anon55
ServerDNSResolvConfFile	src/or/or.h	/^  char *ServerDNSResolvConfFile; \/**< If provided, we configure our internal$/;"	m	struct:__anon55
ServerDNSSearchDomains	src/or/or.h	/^  int ServerDNSSearchDomains; \/**< Boolean: If set, we don't force exit$/;"	m	struct:__anon55
ServerDNSTestAddresses	src/or/or.h	/^  smartlist_t *ServerDNSTestAddresses; \/**< A list of addresses that definitely$/;"	m	struct:__anon55
ServerTransportListenAddr	src/or/or.h	/^  config_line_t *ServerTransportListenAddr;$/;"	m	struct:__anon55
ServerTransportOptions	src/or/or.h	/^  config_line_t *ServerTransportOptions;$/;"	m	struct:__anon55
ServerTransportPlugin	src/or/or.h	/^  config_line_t *ServerTransportPlugin; \/**< List of client$/;"	m	struct:__anon55
ShutdownWaitLength	src/or/or.h	/^  int ShutdownWaitLength; \/**< When we get a SIGINT and we're a server, how$/;"	m	struct:__anon55
SigningKeyLifetime	src/or/or.h	/^  int SigningKeyLifetime;$/;"	m	struct:__anon55
Socks4Proxy	src/or/or.h	/^  char *Socks4Proxy; \/**< hostname:port to use as a SOCKS4 proxy, if any. *\/$/;"	m	struct:__anon55
Socks4ProxyAddr	src/or/or.h	/^  tor_addr_t Socks4ProxyAddr; \/**< Derived from Socks4Proxy. *\/$/;"	m	struct:__anon55
Socks4ProxyPort	src/or/or.h	/^  uint16_t Socks4ProxyPort; \/**< Derived from Socks4Proxy. *\/$/;"	m	struct:__anon55
Socks5Proxy	src/or/or.h	/^  char *Socks5Proxy; \/**< hostname:port to use as a SOCKS5 proxy, if any. *\/$/;"	m	struct:__anon55
Socks5ProxyAddr	src/or/or.h	/^  tor_addr_t Socks5ProxyAddr; \/**< Derived from Sock5Proxy. *\/$/;"	m	struct:__anon55
Socks5ProxyPassword	src/or/or.h	/^  char *Socks5ProxyPassword; \/**< Password for SOCKS5 authentication, if any *\/$/;"	m	struct:__anon55
Socks5ProxyPort	src/or/or.h	/^  uint16_t Socks5ProxyPort; \/**< Derived from Socks5Proxy. *\/$/;"	m	struct:__anon55
Socks5ProxyUsername	src/or/or.h	/^  char *Socks5ProxyUsername; \/**< Username for SOCKS5 authentication, if any *\/$/;"	m	struct:__anon55
SocksListenAddress	src/or/or.h	/^  config_line_t *SocksListenAddress;$/;"	m	struct:__anon55
SocksPolicy	src/or/or.h	/^  config_line_t *SocksPolicy; \/**< Lists of socks policy components *\/$/;"	m	struct:__anon55
SocksPort_lines	src/or/or.h	/^  config_line_t *SocksPort_lines;$/;"	m	struct:__anon55
SocksPort_set	src/or/or.h	/^  unsigned int SocksPort_set : 1;$/;"	m	struct:__anon55
SocksSocketsGroupWritable	src/or/or.h	/^  int SocksSocketsGroupWritable; \/**< Boolean: Are SOCKS sockets g+rw? *\/$/;"	m	struct:__anon55
SocksTimeout	src/or/or.h	/^  int SocksTimeout; \/**< How long do we let a socks connection wait$/;"	m	struct:__anon55
StrictNodes	src/or/or.h	/^  int StrictNodes; \/**< Boolean: When none of our EntryNodes or ExitNodes$/;"	m	struct:__anon55
T	src/ext/ed25519/donna/ed25519-hash.h	/^	uint64_t T[2];$/;"	m	struct:sha512_state_t
T	src/ext/ed25519/ref10/ge.h	/^  fe T;$/;"	m	struct:__anon102
T	src/ext/ed25519/ref10/ge.h	/^  fe T;$/;"	m	struct:__anon103
T	src/or/routerparse.c	/^#define T(/;"	d	file:
T	src/or/routerparse.c	/^#undef T$/;"	d	file:
T	src/test/test_util.c	/^#define T(/;"	d	file:
T	src/test/test_util.c	/^#undef T$/;"	d	file:
T01	src/or/routerparse.c	/^#define T01(/;"	d	file:
T0N	src/or/routerparse.c	/^#define T0N(/;"	d	file:
T1	src/or/routerparse.c	/^#define T1(/;"	d	file:
T1N	src/or/routerparse.c	/^#define T1N(/;"	d	file:
T1_END	src/or/routerparse.c	/^#define T1_END(/;"	d	file:
T1_START	src/or/routerparse.c	/^#define T1_START(/;"	d	file:
T2d	src/ext/ed25519/ref10/ge.h	/^  fe T2d;$/;"	m	struct:__anon105
TAKES_NO_ARGUMENT	src/or/config.c	/^  TAKES_NO_ARGUMENT = 0,$/;"	e	enum:__anon6	file:
TAPMP_EXTENDED_STAR	src/common/address.h	/^#define TAPMP_EXTENDED_STAR /;"	d
TAP_ONIONSKIN_CHALLENGE_LEN	src/or/onion_tap.h	/^#define TAP_ONIONSKIN_CHALLENGE_LEN /;"	d
TAP_ONIONSKIN_REPLY_LEN	src/or/onion_tap.h	/^#define TAP_ONIONSKIN_REPLY_LEN /;"	d
TEST	src/test/test_cell_formats.c	/^#define TEST(/;"	d	file:
TEST	src/test/test_controller_events.c	/^#define TEST(/;"	d	file:
TEST	src/test/test_keypin.c	/^#define TEST(/;"	d	file:
TEST	src/test/test_link_handshake.c	/^#define TEST(/;"	d	file:
TEST	src/test/test_routerkeys.c	/^#define TEST(/;"	d	file:
TESTING_CIRCUIT_INTERVAL	src/or/circuituse.c	/^#define TESTING_CIRCUIT_INTERVAL /;"	d	file:
TEST_AUTHENTICATE	src/test/test_link_handshake.c	/^#define TEST_AUTHENTICATE(/;"	d	file:
TEST_CASE	src/test/test.h	/^#define TEST_CASE(/;"	d
TEST_CASE_ASPECT	src/test/test.h	/^#define TEST_CASE_ASPECT(/;"	d
TEST_CERTIFICATE	src/test/test_dir_handle_get.c	/^#define TEST_CERTIFICATE /;"	d	file:
TEST_CERT_IDENT_KEY	src/test/test_dir_handle_get.c	/^static const char TEST_CERT_IDENT_KEY[] =$/;"	v	file:
TEST_CHILD	src/test/test_util_slow.c	/^#define TEST_CHILD /;"	d	file:
TEST_CHILD	src/test/test_util_slow.c	/^#undef TEST_CHILD$/;"	d	file:
TEST_DESCRIPTOR	src/test/test_dir_handle_get.c	/^TEST_DESCRIPTOR[] =$/;"	v	file:
TEST_FAST_HANDSHAKE	src/test/test_fast_handshake.c	/^#define TEST_FAST_HANDSHAKE(/;"	d	file:
TEST_OPTIONS_DEFAULT_VALUES	src/test/test_options.c	/^#define TEST_OPTIONS_DEFAULT_VALUES /;"	d	file:
TEST_OPTIONS_OLD_VALUES	src/test/test_options.c	/^#define TEST_OPTIONS_OLD_VALUES /;"	d	file:
TEST_RCV_AUTHCHALLENGE	src/test/test_link_handshake.c	/^#define TEST_RCV_AUTHCHALLENGE(/;"	d	file:
TEST_RCV_CERTS	src/test/test_link_handshake.c	/^#define TEST_RCV_CERTS(/;"	d	file:
TEST_SIGNING_KEY	src/test/test_dir_handle_get.c	/^#define TEST_SIGNING_KEY /;"	d	file:
TEST_TESTING_OPTION	src/test/test_options.c	/^#define TEST_TESTING_OPTION(/;"	d	file:
THREAD_TEST	src/test/test_threads.c	/^#define THREAD_TEST(/;"	d	file:
TIMEOUT_UNTIL_UNREACHABILITY_COMPLAINT	src/or/or.h	/^#define TIMEOUT_UNTIL_UNREACHABILITY_COMPLAINT /;"	d
TIME_BEFORE_OR_CONN_IS_TOO_OLD	src/or/connection_or.c	/^#define TIME_BEFORE_OR_CONN_IS_TOO_OLD /;"	d	file:
TIME_FNS_NEED_LOCKS	src/common/compat.c	/^#define TIME_FNS_NEED_LOCKS$/;"	d	file:
TIME_IN_THE_FUTURE	src/test/test_rendcache.c	/^static const int TIME_IN_THE_FUTURE = REND_CACHE_MAX_SKEW + 10;$/;"	v	file:
TIME_IN_THE_PAST	src/test/test_rendcache.c	/^static const int TIME_IN_THE_PAST = -(REND_CACHE_MAX_AGE + REND_CACHE_MAX_SKEW + 10);$/;"	v	file:
TIME_KNOWN_TO_GUARANTEE_FAMILIAR	src/or/dirserv.c	/^#define TIME_KNOWN_TO_GUARANTEE_FAMILIAR /;"	d	file:
TIME_MAX	src/common/torint.h	/^#define TIME_MAX /;"	d
TIME_TO_EXEC_FWHELPER_FAIL	src/common/util.c	/^#define TIME_TO_EXEC_FWHELPER_FAIL /;"	d	file:
TIME_TO_EXEC_FWHELPER_SUCCESS	src/common/util.c	/^#define TIME_TO_EXEC_FWHELPER_SUCCESS /;"	d	file:
TINYTEST_H_INCLUDED_	src/ext/tinytest.h	/^#define TINYTEST_H_INCLUDED_$/;"	d
TINYTEST_MACROS_H_INCLUDED_	src/ext/tinytest_macros.h	/^#define TINYTEST_MACROS_H_INCLUDED_$/;"	d
TLSECGroup	src/or/or.h	/^  char *TLSECGroup; \/**< One of "P256", "P224", or nil for auto *\/$/;"	m	struct:__anon55
TLSSECRET_MAGIC	src/common/tortls.c	/^#define TLSSECRET_MAGIC /;"	d	file:
TLS_CHAN_MAGIC	src/or/channeltls.h	/^#define TLS_CHAN_MAGIC /;"	d
TLS_CHAN_TO_BASE	src/or/channeltls.h	/^#define TLS_CHAN_TO_BASE(/;"	d
TLS_HANDSHAKE_C	src/or/or.h	/^  TLS_HANDSHAKE_C, TLS_HANDSHAKE_S,$/;"	e	enum:__anon72
TLS_HANDSHAKE_S	src/or/or.h	/^  TLS_HANDSHAKE_C, TLS_HANDSHAKE_S,$/;"	e	enum:__anon72
TLS_OVERHEAD_THRESHOLD	src/or/status.c	/^#define TLS_OVERHEAD_THRESHOLD /;"	d	file:
TL_	src/test/test_util.c	/^#define TL_ /;"	d	file:
TL_	src/test/test_util.c	/^#undef TL_$/;"	d	file:
TM_EQUAL	src/test/test_util.c	/^#define TM_EQUAL(/;"	d	file:
TOLERATE_MICRODESC_AGE	src/or/microdesc.c	/^#define TOLERATE_MICRODESC_AGE /;"	d	file:
TOOBIG	src/test/test_util.c	/^#define TOOBIG /;"	d	file:
TORCERT_H_INCLUDED	src/or/torcert.h	/^#define TORCERT_H_INCLUDED$/;"	d
TORTLS_PRIVATE	src/common/tortls.c	/^#define TORTLS_PRIVATE$/;"	d	file:
TORTLS_PRIVATE	src/test/test_tortls.c	/^#define TORTLS_PRIVATE$/;"	d	file:
TOR_ADDRESSMAP_H	src/or/addressmap.h	/^#define TOR_ADDRESSMAP_H$/;"	d
TOR_ADDRESS_H	src/common/address.h	/^#define TOR_ADDRESS_H$/;"	d
TOR_ADDR_BUF_LEN	src/common/address.h	/^#define TOR_ADDR_BUF_LEN /;"	d
TOR_ADDR_NULL	src/common/address.h	/^#define TOR_ADDR_NULL /;"	d
TOR_AES_H	src/common/aes.h	/^#define TOR_AES_H$/;"	d
TOR_BACKTRACE_H	src/common/backtrace.h	/^#define TOR_BACKTRACE_H$/;"	d
TOR_BUFFERS_H	src/or/buffers.h	/^#define TOR_BUFFERS_H$/;"	d
TOR_CHANNELTLS_H	src/or/channeltls.h	/^#define TOR_CHANNELTLS_H$/;"	d
TOR_CHANNEL_H	src/or/channel.h	/^#define TOR_CHANNEL_H$/;"	d
TOR_CHANNEL_INTERNAL_	src/or/channel.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/or/channeltls.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/or/connection.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/or/connection_or.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/or/scheduler.c	/^#define TOR_CHANNEL_INTERNAL_ /;"	d	file:
TOR_CHANNEL_INTERNAL_	src/test/test_channel.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/test/test_channeltls.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/test/test_circuitlist.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/test/test_circuitmux.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/test/test_controller_events.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/test/test_link_handshake.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/test/test_relay.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CHANNEL_INTERNAL_	src/test/test_scheduler.c	/^#define TOR_CHANNEL_INTERNAL_$/;"	d	file:
TOR_CIRCLEQ_EMPTY	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_EMPTY(/;"	d
TOR_CIRCLEQ_END	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_END(/;"	d
TOR_CIRCLEQ_ENTRY	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_ENTRY(/;"	d
TOR_CIRCLEQ_FIRST	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_FIRST(/;"	d
TOR_CIRCLEQ_FOREACH	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_FOREACH(/;"	d
TOR_CIRCLEQ_FOREACH_REVERSE	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_FOREACH_REVERSE(/;"	d
TOR_CIRCLEQ_FOREACH_REVERSE_SAFE	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_FOREACH_REVERSE_SAFE(/;"	d
TOR_CIRCLEQ_FOREACH_SAFE	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_FOREACH_SAFE(/;"	d
TOR_CIRCLEQ_HEAD	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_HEAD(/;"	d
TOR_CIRCLEQ_HEAD_INITIALIZER	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_HEAD_INITIALIZER(/;"	d
TOR_CIRCLEQ_INIT	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_INIT(/;"	d
TOR_CIRCLEQ_INSERT_AFTER	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_INSERT_AFTER(/;"	d
TOR_CIRCLEQ_INSERT_BEFORE	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_INSERT_BEFORE(/;"	d
TOR_CIRCLEQ_INSERT_HEAD	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_INSERT_HEAD(/;"	d
TOR_CIRCLEQ_INSERT_TAIL	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_INSERT_TAIL(/;"	d
TOR_CIRCLEQ_LAST	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_LAST(/;"	d
TOR_CIRCLEQ_NEXT	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_NEXT(/;"	d
TOR_CIRCLEQ_PREV	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_PREV(/;"	d
TOR_CIRCLEQ_REMOVE	src/ext/tor_queue.h	/^#define	TOR_CIRCLEQ_REMOVE(/;"	d
TOR_CIRCLEQ_REPLACE	src/ext/tor_queue.h	/^#define TOR_CIRCLEQ_REPLACE(/;"	d
TOR_CIRCPATHBIAS_H	src/or/circpathbias.h	/^#define TOR_CIRCPATHBIAS_H$/;"	d
TOR_CIRCUITBUILD_H	src/or/circuitbuild.h	/^#define TOR_CIRCUITBUILD_H$/;"	d
TOR_CIRCUITLIST_H	src/or/circuitlist.h	/^#define TOR_CIRCUITLIST_H$/;"	d
TOR_CIRCUITMUX_EWMA_C_	src/or/circuitmux_ewma.c	/^#define TOR_CIRCUITMUX_EWMA_C_$/;"	d	file:
TOR_CIRCUITMUX_EWMA_H	src/or/circuitmux_ewma.h	/^#define TOR_CIRCUITMUX_EWMA_H$/;"	d
TOR_CIRCUITMUX_H	src/or/circuitmux.h	/^#define TOR_CIRCUITMUX_H$/;"	d
TOR_CIRCUITSTATS_H	src/or/circuitstats.h	/^#define TOR_CIRCUITSTATS_H$/;"	d
TOR_CIRCUITUSE_H	src/or/circuituse.h	/^#define TOR_CIRCUITUSE_H$/;"	d
TOR_COMMAND_H	src/or/command.h	/^#define TOR_COMMAND_H$/;"	d
TOR_COMPAT_H	src/common/compat.h	/^#define TOR_COMPAT_H$/;"	d
TOR_COMPAT_LIBEVENT_H	src/common/compat_libevent.h	/^#define TOR_COMPAT_LIBEVENT_H$/;"	d
TOR_COMPAT_THREADS_H	src/common/compat_threads.h	/^#define TOR_COMPAT_THREADS_H$/;"	d
TOR_CONFIG_H	src/or/config.h	/^#define TOR_CONFIG_H$/;"	d
TOR_CONFPARSE_H	src/or/confparse.h	/^#define TOR_CONFPARSE_H$/;"	d
TOR_CONNECTION_EDGE_H	src/or/connection_edge.h	/^#define TOR_CONNECTION_EDGE_H$/;"	d
TOR_CONNECTION_H	src/or/connection.h	/^#define TOR_CONNECTION_H$/;"	d
TOR_CONNECTION_OR_H	src/or/connection_or.h	/^#define TOR_CONNECTION_OR_H$/;"	d
TOR_CONTAINER_H	src/common/container.h	/^#define TOR_CONTAINER_H$/;"	d
TOR_CONTROL_H	src/or/control.h	/^#define TOR_CONTROL_H$/;"	d
TOR_COVERAGE	src/test/test_bt_cl.c	/^#undef TOR_COVERAGE$/;"	d	file:
TOR_CPUWORKER_H	src/or/cpuworker.h	/^#define TOR_CPUWORKER_H$/;"	d
TOR_CRYPTO_CURVE25519_H	src/common/crypto_curve25519.h	/^#define TOR_CRYPTO_CURVE25519_H$/;"	d
TOR_CRYPTO_ED25519_H	src/common/crypto_ed25519.h	/^#define TOR_CRYPTO_ED25519_H$/;"	d
TOR_CRYPTO_FORMAT_H	src/common/crypto_format.h	/^#define TOR_CRYPTO_FORMAT_H$/;"	d
TOR_CRYPTO_H	src/common/crypto.h	/^#define TOR_CRYPTO_H$/;"	d
TOR_CRYPTO_S2K_H_INCLUDED	src/common/crypto_s2k.h	/^#define TOR_CRYPTO_S2K_H_INCLUDED$/;"	d
TOR_DIRCOLLATE_H	src/or/dircollate.h	/^#define TOR_DIRCOLLATE_H$/;"	d
TOR_DIRECTORY_H	src/or/directory.h	/^#define TOR_DIRECTORY_H$/;"	d
TOR_DIRSERV_H	src/or/dirserv.h	/^#define TOR_DIRSERV_H$/;"	d
TOR_DIRVOTE_H	src/or/dirvote.h	/^#define TOR_DIRVOTE_H$/;"	d
TOR_DI_OPS_H	src/common/di_ops.h	/^#define TOR_DI_OPS_H$/;"	d
TOR_DNSSERV_H	src/or/dnsserv.h	/^#define TOR_DNSSERV_H$/;"	d
TOR_DNS_H	src/or/dns.h	/^#define TOR_DNS_H$/;"	d
TOR_DNS_STRUCTS_H	src/or/dns_structs.h	/^#define TOR_DNS_STRUCTS_H$/;"	d
TOR_ENTRYNODES_H	src/or/entrynodes.h	/^#define TOR_ENTRYNODES_H$/;"	d
TOR_EVENTDNS_H	src/ext/eventdns.h	/^#define TOR_EVENTDNS_H$/;"	d
TOR_EVENTDNS_TOR_H	src/or/eventdns_tor.h	/^#define TOR_EVENTDNS_TOR_H$/;"	d
TOR_FAKECHANS_H	src/test/fakechans.h	/^#define TOR_FAKECHANS_H$/;"	d
TOR_GEOIP_H	src/or/geoip.h	/^#define TOR_GEOIP_H$/;"	d
TOR_HIBERNATE_H	src/or/hibernate.h	/^#define TOR_HIBERNATE_H$/;"	d
TOR_INVALID_SOCKET	src/common/compat.h	/^#define TOR_INVALID_SOCKET /;"	d
TOR_ISALNUM_TABLE	src/common/compat.c	/^const uint32_t TOR_ISALNUM_TABLE[8] =$/;"	v
TOR_ISALPHA_TABLE	src/common/compat.c	/^const uint32_t TOR_ISALPHA_TABLE[8] =$/;"	v
TOR_ISDIGIT_TABLE	src/common/compat.c	/^const uint32_t TOR_ISDIGIT_TABLE[8] = { 0, 0x3ff0000, 0, 0, 0, 0, 0, 0 };$/;"	v
TOR_ISLOWER_TABLE	src/common/compat.c	/^const uint32_t TOR_ISLOWER_TABLE[8] = { 0, 0, 0, 0x7fffffe, 0, 0, 0, 0 };$/;"	v
TOR_ISODIGIT	src/common/util.c	/^#define TOR_ISODIGIT(/;"	d	file:
TOR_ISPRINT_TABLE	src/common/compat.c	/^const uint32_t TOR_ISPRINT_TABLE[8] =$/;"	v
TOR_ISSPACE_TABLE	src/common/compat.c	/^const uint32_t TOR_ISSPACE_TABLE[8] = { 0x3e00, 0x1, 0, 0, 0, 0, 0, 0 };$/;"	v
TOR_ISUPPER_TABLE	src/common/compat.c	/^const uint32_t TOR_ISUPPER_TABLE[8] = { 0, 0, 0x7fffffe, 0, 0, 0, 0, 0 };$/;"	v
TOR_ISXDIGIT_TABLE	src/common/compat.c	/^const uint32_t TOR_ISXDIGIT_TABLE[8] =$/;"	v
TOR_KEYPIN_H	src/or/keypin.h	/^#define TOR_KEYPIN_H$/;"	d
TOR_LIST_EMPTY	src/ext/tor_queue.h	/^#define	TOR_LIST_EMPTY(/;"	d
TOR_LIST_END	src/ext/tor_queue.h	/^#define	TOR_LIST_END(/;"	d
TOR_LIST_ENTRY	src/ext/tor_queue.h	/^#define TOR_LIST_ENTRY(/;"	d
TOR_LIST_FIRST	src/ext/tor_queue.h	/^#define	TOR_LIST_FIRST(/;"	d
TOR_LIST_FOREACH	src/ext/tor_queue.h	/^#define TOR_LIST_FOREACH(/;"	d
TOR_LIST_FOREACH_SAFE	src/ext/tor_queue.h	/^#define	TOR_LIST_FOREACH_SAFE(/;"	d
TOR_LIST_HEAD	src/ext/tor_queue.h	/^#define TOR_LIST_HEAD(/;"	d
TOR_LIST_HEAD_INITIALIZER	src/ext/tor_queue.h	/^#define TOR_LIST_HEAD_INITIALIZER(/;"	d
TOR_LIST_INIT	src/ext/tor_queue.h	/^#define	TOR_LIST_INIT(/;"	d
TOR_LIST_INSERT_AFTER	src/ext/tor_queue.h	/^#define TOR_LIST_INSERT_AFTER(/;"	d
TOR_LIST_INSERT_BEFORE	src/ext/tor_queue.h	/^#define	TOR_LIST_INSERT_BEFORE(/;"	d
TOR_LIST_INSERT_HEAD	src/ext/tor_queue.h	/^#define TOR_LIST_INSERT_HEAD(/;"	d
TOR_LIST_NEXT	src/ext/tor_queue.h	/^#define	TOR_LIST_NEXT(/;"	d
TOR_LIST_REMOVE	src/ext/tor_queue.h	/^#define TOR_LIST_REMOVE(/;"	d
TOR_LIST_REPLACE	src/ext/tor_queue.h	/^#define TOR_LIST_REPLACE(/;"	d
TOR_MAIN_H	src/or/main.h	/^#define TOR_MAIN_H$/;"	d
TOR_MEMAREA_H	src/common/memarea.h	/^#define TOR_MEMAREA_H$/;"	d
TOR_MICRODESC_H	src/or/microdesc.h	/^#define TOR_MICRODESC_H$/;"	d
TOR_NETWORKSTATUS_H	src/or/networkstatus.h	/^#define TOR_NETWORKSTATUS_H$/;"	d
TOR_NODELIST_H	src/or/nodelist.h	/^#define TOR_NODELIST_H$/;"	d
TOR_NTMAIN_H	src/or/ntmain.h	/^#define TOR_NTMAIN_H$/;"	d
TOR_ONION_FAST_H	src/or/onion_fast.h	/^#define TOR_ONION_FAST_H$/;"	d
TOR_ONION_H	src/or/onion.h	/^#define TOR_ONION_H$/;"	d
TOR_ONION_NTOR_H	src/or/onion_ntor.h	/^#define TOR_ONION_NTOR_H$/;"	d
TOR_ONION_TAP_H	src/or/onion_tap.h	/^#define TOR_ONION_TAP_H$/;"	d
TOR_OR_H	src/or/or.h	/^#define TOR_OR_H$/;"	d
TOR_POLICIES_H	src/or/policies.h	/^#define TOR_POLICIES_H$/;"	d
TOR_PROCMON_H	src/common/procmon.h	/^#define TOR_PROCMON_H$/;"	d
TOR_QUEUE_H_	src/ext/tor_queue.h	/^#define	TOR_QUEUE_H_$/;"	d
TOR_Q_INVALIDATE_	src/ext/tor_queue.h	/^#define TOR_Q_INVALIDATE_(/;"	d
TOR_REASONS_H	src/or/reasons.h	/^#define TOR_REASONS_H$/;"	d
TOR_RELAY_H	src/or/relay.h	/^#define TOR_RELAY_H$/;"	d
TOR_RENDCACHE_H	src/or/rendcache.h	/^#define TOR_RENDCACHE_H$/;"	d
TOR_RENDCLIENT_H	src/or/rendclient.h	/^#define TOR_RENDCLIENT_H$/;"	d
TOR_RENDCOMMON_H	src/or/rendcommon.h	/^#define TOR_RENDCOMMON_H$/;"	d
TOR_RENDMID_H	src/or/rendmid.h	/^#define TOR_RENDMID_H$/;"	d
TOR_RENDSERVICE_H	src/or/rendservice.h	/^#define TOR_RENDSERVICE_H$/;"	d
TOR_REPHIST_H	src/or/rephist.h	/^#define TOR_REPHIST_H$/;"	d
TOR_REPLAYCACHE_H	src/or/replaycache.h	/^#define TOR_REPLAYCACHE_H$/;"	d
TOR_ROUTERKEYS_H	src/or/routerkeys.h	/^#define TOR_ROUTERKEYS_H$/;"	d
TOR_ROUTERLIST_H	src/or/routerlist.h	/^#define TOR_ROUTERLIST_H$/;"	d
TOR_ROUTERPARSE_H	src/or/routerparse.h	/^#define TOR_ROUTERPARSE_H$/;"	d
TOR_ROUTERSET_H	src/or/routerset.h	/^#define TOR_ROUTERSET_H$/;"	d
TOR_ROUTER_H	src/or/router.h	/^#define TOR_ROUTER_H$/;"	d
TOR_SCHEDULER_H	src/or/scheduler.h	/^#define TOR_SCHEDULER_H$/;"	d
TOR_SIMPLEQ_EMPTY	src/ext/tor_queue.h	/^#define	TOR_SIMPLEQ_EMPTY(/;"	d
TOR_SIMPLEQ_END	src/ext/tor_queue.h	/^#define	TOR_SIMPLEQ_END(/;"	d
TOR_SIMPLEQ_ENTRY	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_ENTRY(/;"	d
TOR_SIMPLEQ_FIRST	src/ext/tor_queue.h	/^#define	TOR_SIMPLEQ_FIRST(/;"	d
TOR_SIMPLEQ_FOREACH	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_FOREACH(/;"	d
TOR_SIMPLEQ_FOREACH_SAFE	src/ext/tor_queue.h	/^#define	TOR_SIMPLEQ_FOREACH_SAFE(/;"	d
TOR_SIMPLEQ_HEAD	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_HEAD(/;"	d
TOR_SIMPLEQ_HEAD_INITIALIZER	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_HEAD_INITIALIZER(/;"	d
TOR_SIMPLEQ_INIT	src/ext/tor_queue.h	/^#define	TOR_SIMPLEQ_INIT(/;"	d
TOR_SIMPLEQ_INSERT_AFTER	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_INSERT_AFTER(/;"	d
TOR_SIMPLEQ_INSERT_HEAD	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_INSERT_HEAD(/;"	d
TOR_SIMPLEQ_INSERT_TAIL	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_INSERT_TAIL(/;"	d
TOR_SIMPLEQ_NEXT	src/ext/tor_queue.h	/^#define	TOR_SIMPLEQ_NEXT(/;"	d
TOR_SIMPLEQ_REMOVE_AFTER	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_REMOVE_AFTER(/;"	d
TOR_SIMPLEQ_REMOVE_HEAD	src/ext/tor_queue.h	/^#define TOR_SIMPLEQ_REMOVE_HEAD(/;"	d
TOR_SLIST_EMPTY	src/ext/tor_queue.h	/^#define	TOR_SLIST_EMPTY(/;"	d
TOR_SLIST_END	src/ext/tor_queue.h	/^#define	TOR_SLIST_END(/;"	d
TOR_SLIST_ENTRY	src/ext/tor_queue.h	/^#define TOR_SLIST_ENTRY(/;"	d
TOR_SLIST_FIRST	src/ext/tor_queue.h	/^#define	TOR_SLIST_FIRST(/;"	d
TOR_SLIST_FOREACH	src/ext/tor_queue.h	/^#define	TOR_SLIST_FOREACH(/;"	d
TOR_SLIST_FOREACH_SAFE	src/ext/tor_queue.h	/^#define	TOR_SLIST_FOREACH_SAFE(/;"	d
TOR_SLIST_HEAD	src/ext/tor_queue.h	/^#define TOR_SLIST_HEAD(/;"	d
TOR_SLIST_HEAD_INITIALIZER	src/ext/tor_queue.h	/^#define	TOR_SLIST_HEAD_INITIALIZER(/;"	d
TOR_SLIST_INIT	src/ext/tor_queue.h	/^#define	TOR_SLIST_INIT(/;"	d
TOR_SLIST_INSERT_AFTER	src/ext/tor_queue.h	/^#define	TOR_SLIST_INSERT_AFTER(/;"	d
TOR_SLIST_INSERT_HEAD	src/ext/tor_queue.h	/^#define	TOR_SLIST_INSERT_HEAD(/;"	d
TOR_SLIST_NEXT	src/ext/tor_queue.h	/^#define	TOR_SLIST_NEXT(/;"	d
TOR_SLIST_REMOVE	src/ext/tor_queue.h	/^#define TOR_SLIST_REMOVE(/;"	d
TOR_SLIST_REMOVE_AFTER	src/ext/tor_queue.h	/^#define	TOR_SLIST_REMOVE_AFTER(/;"	d
TOR_SLIST_REMOVE_HEAD	src/ext/tor_queue.h	/^#define	TOR_SLIST_REMOVE_HEAD(/;"	d
TOR_SOCKET_T_FORMAT	src/common/compat.h	/^#define TOR_SOCKET_T_FORMAT /;"	d
TOR_STATEFILE_H	src/or/statefile.h	/^#define TOR_STATEFILE_H$/;"	d
TOR_STATUS_H	src/or/status.h	/^#define TOR_STATUS_H$/;"	d
TOR_TAILQ_EMPTY	src/ext/tor_queue.h	/^#define	TOR_TAILQ_EMPTY(/;"	d
TOR_TAILQ_END	src/ext/tor_queue.h	/^#define	TOR_TAILQ_END(/;"	d
TOR_TAILQ_ENTRY	src/ext/tor_queue.h	/^#define TOR_TAILQ_ENTRY(/;"	d
TOR_TAILQ_FIRST	src/ext/tor_queue.h	/^#define	TOR_TAILQ_FIRST(/;"	d
TOR_TAILQ_FOREACH	src/ext/tor_queue.h	/^#define TOR_TAILQ_FOREACH(/;"	d
TOR_TAILQ_FOREACH_REVERSE	src/ext/tor_queue.h	/^#define TOR_TAILQ_FOREACH_REVERSE(/;"	d
TOR_TAILQ_FOREACH_REVERSE_SAFE	src/ext/tor_queue.h	/^#define	TOR_TAILQ_FOREACH_REVERSE_SAFE(/;"	d
TOR_TAILQ_FOREACH_SAFE	src/ext/tor_queue.h	/^#define	TOR_TAILQ_FOREACH_SAFE(/;"	d
TOR_TAILQ_HEAD	src/ext/tor_queue.h	/^#define TOR_TAILQ_HEAD(/;"	d
TOR_TAILQ_HEAD_INITIALIZER	src/ext/tor_queue.h	/^#define TOR_TAILQ_HEAD_INITIALIZER(/;"	d
TOR_TAILQ_INIT	src/ext/tor_queue.h	/^#define	TOR_TAILQ_INIT(/;"	d
TOR_TAILQ_INSERT_AFTER	src/ext/tor_queue.h	/^#define TOR_TAILQ_INSERT_AFTER(/;"	d
TOR_TAILQ_INSERT_BEFORE	src/ext/tor_queue.h	/^#define	TOR_TAILQ_INSERT_BEFORE(/;"	d
TOR_TAILQ_INSERT_HEAD	src/ext/tor_queue.h	/^#define TOR_TAILQ_INSERT_HEAD(/;"	d
TOR_TAILQ_INSERT_TAIL	src/ext/tor_queue.h	/^#define TOR_TAILQ_INSERT_TAIL(/;"	d
TOR_TAILQ_LAST	src/ext/tor_queue.h	/^#define TOR_TAILQ_LAST(/;"	d
TOR_TAILQ_NEXT	src/ext/tor_queue.h	/^#define	TOR_TAILQ_NEXT(/;"	d
TOR_TAILQ_PREV	src/ext/tor_queue.h	/^#define TOR_TAILQ_PREV(/;"	d
TOR_TAILQ_REMOVE	src/ext/tor_queue.h	/^#define TOR_TAILQ_REMOVE(/;"	d
TOR_TAILQ_REPLACE	src/ext/tor_queue.h	/^#define TOR_TAILQ_REPLACE(/;"	d
TOR_TESTSUPPORT_H	src/common/testsupport.h	/^#define TOR_TESTSUPPORT_H$/;"	d
TOR_TEST_H	src/test/test.h	/^#define TOR_TEST_H$/;"	d
TOR_TEST_HELPERS_H	src/test/test_helpers.h	/^#define TOR_TEST_HELPERS_H$/;"	d
TOR_TLS_CLOSE	src/common/tortls.h	/^#define TOR_TLS_CLOSE /;"	d
TOR_TLS_CTX_IS_PUBLIC_SERVER	src/common/tortls.h	/^#define TOR_TLS_CTX_IS_PUBLIC_SERVER /;"	d
TOR_TLS_CTX_USE_ECDHE_P224	src/common/tortls.h	/^#define TOR_TLS_CTX_USE_ECDHE_P224 /;"	d
TOR_TLS_CTX_USE_ECDHE_P256	src/common/tortls.h	/^#define TOR_TLS_CTX_USE_ECDHE_P256 /;"	d
TOR_TLS_DONE	src/common/tortls.h	/^#define TOR_TLS_DONE /;"	d
TOR_TLS_ERROR_CONNREFUSED	src/common/tortls.h	/^#define TOR_TLS_ERROR_CONNREFUSED /;"	d
TOR_TLS_ERROR_CONNRESET	src/common/tortls.h	/^#define TOR_TLS_ERROR_CONNRESET /;"	d
TOR_TLS_ERROR_IO	src/common/tortls.h	/^#define TOR_TLS_ERROR_IO /;"	d
TOR_TLS_ERROR_MISC	src/common/tortls.h	/^#define TOR_TLS_ERROR_MISC /;"	d
TOR_TLS_ERROR_NO_ROUTE	src/common/tortls.h	/^#define TOR_TLS_ERROR_NO_ROUTE /;"	d
TOR_TLS_ERROR_TIMEOUT	src/common/tortls.h	/^#define TOR_TLS_ERROR_TIMEOUT /;"	d
TOR_TLS_IS_ERROR	src/common/tortls.h	/^#define TOR_TLS_IS_ERROR(/;"	d
TOR_TLS_MAGIC	src/common/tortls.h	/^#define TOR_TLS_MAGIC /;"	d
TOR_TLS_ST_BUFFEREVENT	src/common/tortls.h	/^    TOR_TLS_ST_BUFFEREVENT$/;"	e	enum:__anon30
TOR_TLS_ST_CLOSED	src/common/tortls.h	/^    TOR_TLS_ST_SENTCLOSE, TOR_TLS_ST_CLOSED, TOR_TLS_ST_RENEGOTIATE,$/;"	e	enum:__anon30
TOR_TLS_ST_GOTCLOSE	src/common/tortls.h	/^    TOR_TLS_ST_HANDSHAKE, TOR_TLS_ST_OPEN, TOR_TLS_ST_GOTCLOSE,$/;"	e	enum:__anon30
TOR_TLS_ST_HANDSHAKE	src/common/tortls.h	/^    TOR_TLS_ST_HANDSHAKE, TOR_TLS_ST_OPEN, TOR_TLS_ST_GOTCLOSE,$/;"	e	enum:__anon30
TOR_TLS_ST_OPEN	src/common/tortls.h	/^    TOR_TLS_ST_HANDSHAKE, TOR_TLS_ST_OPEN, TOR_TLS_ST_GOTCLOSE,$/;"	e	enum:__anon30
TOR_TLS_ST_RENEGOTIATE	src/common/tortls.h	/^    TOR_TLS_ST_SENTCLOSE, TOR_TLS_ST_CLOSED, TOR_TLS_ST_RENEGOTIATE,$/;"	e	enum:__anon30
TOR_TLS_ST_SENTCLOSE	src/common/tortls.h	/^    TOR_TLS_ST_SENTCLOSE, TOR_TLS_ST_CLOSED, TOR_TLS_ST_RENEGOTIATE,$/;"	e	enum:__anon30
TOR_TLS_SYSCALL_	src/common/tortls.c	/^#define TOR_TLS_SYSCALL_ /;"	d	file:
TOR_TLS_WANTREAD	src/common/tortls.h	/^#define TOR_TLS_WANTREAD /;"	d
TOR_TLS_WANTWRITE	src/common/tortls.h	/^#define TOR_TLS_WANTWRITE /;"	d
TOR_TLS_ZERORETURN_	src/common/tortls.c	/^#define TOR_TLS_ZERORETURN_ /;"	d	file:
TOR_TOLOWER	src/common/compat.h	/^#define TOR_TOLOWER(/;"	d
TOR_TOLOWER_TABLE	src/common/compat.c	/^const char TOR_TOLOWER_TABLE[256] = {$/;"	v
TOR_TORGZIP_H	src/common/torgzip.h	/^#define TOR_TORGZIP_H$/;"	d
TOR_TORINT_H	src/common/torint.h	/^#define TOR_TORINT_H$/;"	d
TOR_TORLOG_H	src/common/torlog.h	/^# define TOR_TORLOG_H$/;"	d
TOR_TORTLS_H	src/common/tortls.h	/^#define TOR_TORTLS_H$/;"	d
TOR_TOUPPER	src/common/compat.h	/^#define TOR_TOUPPER(/;"	d
TOR_TOUPPER_TABLE	src/common/compat.c	/^const char TOR_TOUPPER_TABLE[256] = {$/;"	v
TOR_TRANSPORTS_H	src/or/transports.h	/^#define TOR_TRANSPORTS_H$/;"	d
TOR_UTIL_FORMAT_H	src/common/util_format.h	/^#define TOR_UTIL_FORMAT_H$/;"	d
TOR_UTIL_H	src/common/util.h	/^#define TOR_UTIL_H$/;"	d
TOR_UTIL_PROCESS_H	src/common/util_process.h	/^#define TOR_UTIL_PROCESS_H$/;"	d
TOR_WEAK_RANDOM_MAX	src/common/util.h	/^#define TOR_WEAK_RANDOM_MAX /;"	d
TOR_WEAK_RNG_INIT	src/common/util.h	/^#define TOR_WEAK_RNG_INIT /;"	d
TOR_WORKQUEUE_H	src/common/workqueue.h	/^#define TOR_WORKQUEUE_H$/;"	d
TOR_ZLIB_BUF_FULL	src/common/torgzip.h	/^  TOR_ZLIB_OK, TOR_ZLIB_DONE, TOR_ZLIB_BUF_FULL, TOR_ZLIB_ERR$/;"	e	enum:__anon82
TOR_ZLIB_DONE	src/common/torgzip.h	/^  TOR_ZLIB_OK, TOR_ZLIB_DONE, TOR_ZLIB_BUF_FULL, TOR_ZLIB_ERR$/;"	e	enum:__anon82
TOR_ZLIB_ERR	src/common/torgzip.h	/^  TOR_ZLIB_OK, TOR_ZLIB_DONE, TOR_ZLIB_BUF_FULL, TOR_ZLIB_ERR$/;"	e	enum:__anon82
TOR_ZLIB_OK	src/common/torgzip.h	/^  TOR_ZLIB_OK, TOR_ZLIB_DONE, TOR_ZLIB_BUF_FULL, TOR_ZLIB_ERR$/;"	e	enum:__anon82
TO_CIRCUIT	src/or/or.h	/^#define TO_CIRCUIT(/;"	d
TO_CMUX_POL_CIRC_DATA	src/or/circuitmux.h	/^#define TO_CMUX_POL_CIRC_DATA(/;"	d
TO_CMUX_POL_DATA	src/or/circuitmux.h	/^#define TO_CMUX_POL_DATA(/;"	d
TO_CONN	src/or/or.h	/^#define TO_CONN(/;"	d
TO_CONTROL_CONN	src/or/or.h	/^static INLINE control_connection_t *TO_CONTROL_CONN(connection_t *c)$/;"	f
TO_DIR_CONN	src/or/or.h	/^static INLINE dir_connection_t *TO_DIR_CONN(connection_t *c)$/;"	f
TO_EDGE_CONN	src/or/or.h	/^static INLINE edge_connection_t *TO_EDGE_CONN(connection_t *c)$/;"	f
TO_ENTRY_CONN	src/or/or.h	/^static INLINE entry_connection_t *TO_ENTRY_CONN(connection_t *c)$/;"	f
TO_EWMA_POL_CIRC_DATA	src/or/circuitmux_ewma.c	/^TO_EWMA_POL_CIRC_DATA(circuitmux_policy_circ_data_t *pol)$/;"	f	file:
TO_EWMA_POL_DATA	src/or/circuitmux_ewma.c	/^TO_EWMA_POL_DATA(circuitmux_policy_data_t *pol)$/;"	f	file:
TO_LISTENER_CONN	src/or/or.h	/^static INLINE listener_connection_t *TO_LISTENER_CONN(connection_t *c)$/;"	f
TO_ORIGIN_CIRCUIT	src/or/or.h	/^static INLINE origin_circuit_t *TO_ORIGIN_CIRCUIT(circuit_t *x)$/;"	f
TO_OR_CIRCUIT	src/or/or.h	/^static INLINE or_circuit_t *TO_OR_CIRCUIT(circuit_t *x)$/;"	f
TO_OR_CONN	src/or/or.h	/^static INLINE or_connection_t *TO_OR_CONN(connection_t *c)$/;"	f
TPT_DEFAULT	src/or/or.h	/^    TPT_DEFAULT,$/;"	e	enum:__anon55::__anon57
TPT_IPFW	src/or/or.h	/^    TPT_IPFW,$/;"	e	enum:__anon55::__anon57
TPT_PF_DIVERT	src/or/or.h	/^    TPT_PF_DIVERT,$/;"	e	enum:__anon55::__anon57
TPT_TPROXY	src/or/or.h	/^    TPT_TPROXY,$/;"	e	enum:__anon55::__anon57
TRACKHOSTEXITS_RETRIES	src/or/connection_edge.c	/^#define TRACKHOSTEXITS_RETRIES /;"	d	file:
TRANS_NETFILTER	src/or/connection_edge.c	/^#define TRANS_NETFILTER$/;"	d	file:
TRANS_NETFILTER_IPV4	src/or/connection_edge.c	/^#define TRANS_NETFILTER_IPV4$/;"	d	file:
TRANS_NETFILTER_IPV6	src/or/connection_edge.c	/^#define TRANS_NETFILTER_IPV6$/;"	d	file:
TRANS_PF	src/or/connection_edge.c	/^#define TRANS_PF$/;"	d	file:
TRANS_TPROXY	src/or/connection_edge.c	/^#define TRANS_TPROXY$/;"	d	file:
TRISTATE	src/common/address.c	/^#define TRISTATE(/;"	d	file:
TRUNCATED_STR	src/common/log.c	/^#define TRUNCATED_STR /;"	d	file:
TRUNCATED_STR_LEN	src/common/log.c	/^#define TRUNCATED_STR_LEN /;"	d	file:
TRUNNEL_DYNARRAY_ADD	src/ext/trunnel/trunnel-impl.h	/^#define TRUNNEL_DYNARRAY_ADD(/;"	d
TRUNNEL_DYNARRAY_CLEAR	src/ext/trunnel/trunnel-impl.h	/^#define TRUNNEL_DYNARRAY_CLEAR(/;"	d
TRUNNEL_DYNARRAY_EXPAND	src/ext/trunnel/trunnel-impl.h	/^#define TRUNNEL_DYNARRAY_EXPAND(/;"	d
TRUNNEL_DYNARRAY_GET	src/ext/trunnel/trunnel-impl.h	/^#define TRUNNEL_DYNARRAY_GET(/;"	d
TRUNNEL_DYNARRAY_HEAD	src/ext/trunnel/trunnel.h	/^#define TRUNNEL_DYNARRAY_HEAD(/;"	d
TRUNNEL_DYNARRAY_INIT	src/ext/trunnel/trunnel.h	/^#define TRUNNEL_DYNARRAY_INIT(/;"	d
TRUNNEL_DYNARRAY_LEN	src/ext/trunnel/trunnel-impl.h	/^#define TRUNNEL_DYNARRAY_LEN(/;"	d
TRUNNEL_DYNARRAY_SET	src/ext/trunnel/trunnel-impl.h	/^#define TRUNNEL_DYNARRAY_SET(/;"	d
TRUNNEL_DYNARRAY_WIPE	src/ext/trunnel/trunnel-impl.h	/^#define TRUNNEL_DYNARRAY_WIPE(/;"	d
TRUNNEL_ED25519_CERT_H	src/trunnel/ed25519_cert.h	/^#define TRUNNEL_ED25519_CERT_H$/;"	d
TRUNNEL_H_INCLUDED_	src/ext/trunnel/trunnel.h	/^#define TRUNNEL_H_INCLUDED_$/;"	d
TRUNNEL_IMPL_H_INCLUDED_	src/ext/trunnel/trunnel-impl.h	/^#define TRUNNEL_IMPL_H_INCLUDED_$/;"	d
TRUNNEL_LINK_HANDSHAKE_H	src/trunnel/link_handshake.h	/^#define TRUNNEL_LINK_HANDSHAKE_H$/;"	d
TRUNNEL_LOCAL_H_INCLUDED	src/trunnel/trunnel-local.h	/^#define TRUNNEL_LOCAL_H_INCLUDED$/;"	d
TRUNNEL_PWBOX_H	src/trunnel/pwbox.h	/^#define TRUNNEL_PWBOX_H$/;"	d
TRUNNEL_SET_ERROR_CODE	src/trunnel/ed25519_cert.c	/^#define TRUNNEL_SET_ERROR_CODE(/;"	d	file:
TRUNNEL_SET_ERROR_CODE	src/trunnel/link_handshake.c	/^#define TRUNNEL_SET_ERROR_CODE(/;"	d	file:
TRUNNEL_SET_ERROR_CODE	src/trunnel/pwbox.c	/^#define TRUNNEL_SET_ERROR_CODE(/;"	d	file:
TRUSTED_DIRS_CERTS_SRC_DL_BY_ID_DIGEST	src/or/routerlist.h	/^#define TRUSTED_DIRS_CERTS_SRC_DL_BY_ID_DIGEST /;"	d
TRUSTED_DIRS_CERTS_SRC_DL_BY_ID_SK_DIGEST	src/or/routerlist.h	/^#define TRUSTED_DIRS_CERTS_SRC_DL_BY_ID_SK_DIGEST /;"	d
TRUSTED_DIRS_CERTS_SRC_FROM_STORE	src/or/routerlist.h	/^#define TRUSTED_DIRS_CERTS_SRC_FROM_STORE /;"	d
TRUSTED_DIRS_CERTS_SRC_FROM_VOTE	src/or/routerlist.h	/^#define TRUSTED_DIRS_CERTS_SRC_FROM_VOTE /;"	d
TRUSTED_DIRS_CERTS_SRC_SELF	src/or/routerlist.h	/^#define TRUSTED_DIRS_CERTS_SRC_SELF /;"	d
TS_ANNOTATIONS_OK	src/or/routerparse.c	/^#define TS_ANNOTATIONS_OK /;"	d	file:
TS_NOCHECK	src/or/routerparse.c	/^#define TS_NOCHECK /;"	d	file:
TS_NO_NEW_ANNOTATIONS	src/or/routerparse.c	/^#define TS_NO_NEW_ANNOTATIONS /;"	d	file:
TT_BAD_SHORT_POLICY	src/test/test_policy.c	/^#define TT_BAD_SHORT_POLICY(/;"	d	file:
TT_BLATHER	src/ext/tinytest_macros.h	/^#define TT_BLATHER(/;"	d
TT_DECLARE	src/ext/tinytest_macros.h	/^#define TT_DECLARE(/;"	d
TT_DIE	src/ext/tinytest_macros.h	/^#define TT_DIE(/;"	d
TT_ENABLED_	src/ext/tinytest.h	/^#define TT_ENABLED_ /;"	d
TT_EXIT_TEST_FUNCTION	src/ext/tinytest_macros.h	/^#define TT_EXIT_TEST_FUNCTION /;"	d
TT_EXIT_TEST_FUNCTION	src/test/test.h	/^#define TT_EXIT_TEST_FUNCTION /;"	d
TT_FAIL	src/ext/tinytest_macros.h	/^#define TT_FAIL(/;"	d
TT_FIRST_USER_FLAG	src/ext/tinytest.h	/^#define TT_FIRST_USER_FLAG /;"	d
TT_FORK	src/ext/tinytest.h	/^#define TT_FORK /;"	d
TT_GRIPE	src/ext/tinytest_macros.h	/^#define TT_GRIPE(/;"	d
TT_OFF_BY_DEFAULT	src/ext/tinytest.h	/^#define TT_OFF_BY_DEFAULT /;"	d
TT_SKIP	src/ext/tinytest.h	/^#define TT_SKIP /;"	d
TT_STMT_BEGIN	src/ext/tinytest_macros.h	/^#define TT_STMT_BEGIN /;"	d
TT_STMT_END	src/ext/tinytest_macros.h	/^#define TT_STMT_END /;"	d
T_	src/test/test_util.c	/^#define T_ /;"	d	file:
T_	src/test/test_util.c	/^#undef T_$/;"	d	file:
TestSocks	src/or/or.h	/^  int TestSocks; \/**< Boolean: when we get a socks connection, do we loudly$/;"	m	struct:__anon55
TestingAuthDirTimeToLearnReachability	src/or/or.h	/^  int TestingAuthDirTimeToLearnReachability;$/;"	m	struct:__anon55
TestingAuthKeyLifetime	src/or/or.h	/^  int TestingAuthKeyLifetime;$/;"	m	struct:__anon55
TestingAuthKeySlop	src/or/or.h	/^  int TestingAuthKeySlop;$/;"	m	struct:__anon55
TestingBridgeDownloadSchedule	src/or/or.h	/^  smartlist_t *TestingBridgeDownloadSchedule;$/;"	m	struct:__anon55
TestingCertMaxDownloadTries	src/or/or.h	/^  int TestingCertMaxDownloadTries;$/;"	m	struct:__anon55
TestingClientConsensusDownloadSchedule	src/or/or.h	/^  smartlist_t *TestingClientConsensusDownloadSchedule;$/;"	m	struct:__anon55
TestingClientDownloadSchedule	src/or/or.h	/^  smartlist_t *TestingClientDownloadSchedule;$/;"	m	struct:__anon55
TestingClientMaxIntervalWithoutRequest	src/or/or.h	/^  int TestingClientMaxIntervalWithoutRequest;$/;"	m	struct:__anon55
TestingConsensusMaxDownloadTries	src/or/or.h	/^  int TestingConsensusMaxDownloadTries;$/;"	m	struct:__anon55
TestingDescriptorMaxDownloadTries	src/or/or.h	/^  int TestingDescriptorMaxDownloadTries;$/;"	m	struct:__anon55
TestingDirAuthVoteExit	src/or/or.h	/^  routerset_t *TestingDirAuthVoteExit;$/;"	m	struct:__anon55
TestingDirAuthVoteExitIsStrict	src/or/or.h	/^  int TestingDirAuthVoteExitIsStrict;$/;"	m	struct:__anon55
TestingDirAuthVoteGuard	src/or/or.h	/^  routerset_t *TestingDirAuthVoteGuard;$/;"	m	struct:__anon55
TestingDirAuthVoteGuardIsStrict	src/or/or.h	/^  int TestingDirAuthVoteGuardIsStrict;$/;"	m	struct:__anon55
TestingDirAuthVoteHSDir	src/or/or.h	/^  routerset_t *TestingDirAuthVoteHSDir;$/;"	m	struct:__anon55
TestingDirAuthVoteHSDirIsStrict	src/or/or.h	/^  int TestingDirAuthVoteHSDirIsStrict;$/;"	m	struct:__anon55
TestingDirConnectionMaxStall	src/or/or.h	/^  int TestingDirConnectionMaxStall;$/;"	m	struct:__anon55
TestingEnableCellStatsEvent	src/or/or.h	/^  int TestingEnableCellStatsEvent;$/;"	m	struct:__anon55
TestingEnableConnBwEvent	src/or/or.h	/^  int TestingEnableConnBwEvent;$/;"	m	struct:__anon55
TestingEnableTbEmptyEvent	src/or/or.h	/^  int TestingEnableTbEmptyEvent;$/;"	m	struct:__anon55
TestingEstimatedDescriptorPropagationTime	src/or/or.h	/^  int TestingEstimatedDescriptorPropagationTime;$/;"	m	struct:__anon55
TestingLinkCertLifetime	src/or/or.h	/^  int TestingLinkCertLifetime;$/;"	m	struct:__anon55
TestingLinkKeySlop	src/or/or.h	/^  int TestingLinkKeySlop;$/;"	m	struct:__anon55
TestingMicrodescMaxDownloadTries	src/or/or.h	/^  int TestingMicrodescMaxDownloadTries;$/;"	m	struct:__anon55
TestingMinExitFlagThreshold	src/or/or.h	/^  uint64_t TestingMinExitFlagThreshold;$/;"	m	struct:__anon55
TestingMinFastFlagThreshold	src/or/or.h	/^  uint64_t TestingMinFastFlagThreshold;$/;"	m	struct:__anon55
TestingServerConsensusDownloadSchedule	src/or/or.h	/^  smartlist_t *TestingServerConsensusDownloadSchedule;$/;"	m	struct:__anon55
TestingServerDownloadSchedule	src/or/or.h	/^  smartlist_t *TestingServerDownloadSchedule;$/;"	m	struct:__anon55
TestingSigningKeySlop	src/or/or.h	/^  int TestingSigningKeySlop;$/;"	m	struct:__anon55
TestingTorNetwork	src/or/or.h	/^  int TestingTorNetwork;$/;"	m	struct:__anon55
TestingV3AuthInitialDistDelay	src/or/or.h	/^  int TestingV3AuthInitialDistDelay;$/;"	m	struct:__anon55
TestingV3AuthInitialVoteDelay	src/or/or.h	/^  int TestingV3AuthInitialVoteDelay;$/;"	m	struct:__anon55
TestingV3AuthInitialVotingInterval	src/or/or.h	/^  int TestingV3AuthInitialVotingInterval;$/;"	m	struct:__anon55
TestingV3AuthVotingStartOffset	src/or/or.h	/^  int TestingV3AuthVotingStartOffset;$/;"	m	struct:__anon55
TokenBucketRefillInterval	src/or/or.h	/^  int TokenBucketRefillInterval;$/;"	m	struct:__anon55
Tor2webMode	src/or/or.h	/^  int Tor2webMode;$/;"	m	struct:__anon55
Tor2webRendezvousPoints	src/or/or.h	/^  routerset_t *Tor2webRendezvousPoints;$/;"	m	struct:__anon55
TorVersion	src/or/or.h	/^  char *TorVersion;$/;"	m	struct:__anon61
TotalBuildTimes	src/or/or.h	/^  unsigned int TotalBuildTimes;$/;"	m	struct:__anon61
TrackHostExits	src/or/or.h	/^  smartlist_t *TrackHostExits;$/;"	m	struct:__anon55
TrackHostExitsExpire	src/or/or.h	/^  int TrackHostExitsExpire; \/**< Number of seconds until we expire an$/;"	m	struct:__anon55
TransListenAddress	src/or/or.h	/^  config_line_t *TransListenAddress;$/;"	m	struct:__anon55
TransPort_lines	src/or/or.h	/^  config_line_t *TransPort_lines;$/;"	m	struct:__anon55
TransPort_set	src/or/or.h	/^  unsigned int TransPort_set : 1;$/;"	m	struct:__anon55
TransProxyType	src/or/or.h	/^  const char *TransProxyType; \/**< What kind of transparent proxy$/;"	m	struct:__anon55
TransProxyType_parsed	src/or/or.h	/^  } TransProxyType_parsed;$/;"	m	struct:__anon55	typeref:enum:__anon55::__anon57
TransportProxies	src/or/or.h	/^  config_line_t *TransportProxies;$/;"	m	struct:__anon61
TruncateLogFile	src/or/or.h	/^  int TruncateLogFile; \/**< Boolean: Should we truncate the log file$/;"	m	struct:__anon55
U32TO8_LE	src/ext/ed25519/donna/ed25519-donna-portable.h	/^static inline void U32TO8_LE(unsigned char *p, const uint32_t v) {$/;"	f
U64TO8_LE	src/ext/ed25519/donna/ed25519-donna-portable.h	/^static inline void U64TO8_LE(unsigned char *p, const uint64_t v) {$/;"	f
U64_FORMAT	src/common/compat.h	/^#define U64_FORMAT /;"	d
U64_LITERAL	src/common/compat.h	/^#define U64_LITERAL(/;"	d
U64_PRINTF_ARG	src/common/compat.h	/^#define U64_PRINTF_ARG(/;"	d
U64_PRINTF_TYPE	src/test/test.h	/^#define U64_PRINTF_TYPE /;"	d
U64_SCANF_ARG	src/common/compat.h	/^#define U64_SCANF_ARG(/;"	d
U64_TO_DBL	src/common/compat.h	/^#define U64_TO_DBL(/;"	d
U8TO32_LE	src/ext/ed25519/donna/ed25519-donna-portable.h	/^static inline uint32_t U8TO32_LE(const unsigned char *p) {$/;"	f
U8TO64_LE	src/ext/ed25519/donna/ed25519-donna-portable.h	/^static inline uint64_t U8TO64_LE(const unsigned char *p) {$/;"	f
UINT16_MAX	src/common/torint.h	/^#define UINT16_MAX /;"	d
UINT32_MAX	src/common/torint.h	/^#define UINT32_MAX /;"	d
UINT64_MAX	src/common/torint.h	/^#define UINT64_MAX /;"	d
UINT_MAX	src/common/torint.h	/^#define UINT_MAX /;"	d
UINT_MAX_AS_DOUBLE	src/common/crypto.c	/^#define UINT_MAX_AS_DOUBLE /;"	d	file:
ULIMIT_BUFFER	src/common/compat.c	/^#define ULIMIT_BUFFER /;"	d	file:
UNITS_PER_SEC	src/common/compat.c	/^#define UNITS_PER_SEC /;"	d	file:
UNITS_PER_USEC	src/common/compat.c	/^#define UNITS_PER_USEC /;"	d	file:
UNIT_DAY	src/or/hibernate.c	/^  UNIT_MONTH=1, UNIT_WEEK=2, UNIT_DAY=3,$/;"	e	enum:__anon29	file:
UNIT_MONTH	src/or/hibernate.c	/^  UNIT_MONTH=1, UNIT_WEEK=2, UNIT_DAY=3,$/;"	e	enum:__anon29	file:
UNIT_WEEK	src/or/hibernate.c	/^  UNIT_MONTH=1, UNIT_WEEK=2, UNIT_DAY=3,$/;"	e	enum:__anon29	file:
UNIX_ONLY	src/or/main.c	/^#define UNIX_ONLY /;"	d	file:
UNIX_SOCKET_PURPOSE_CONTROL_SOCKET	src/or/connection.c	/^#define UNIX_SOCKET_PURPOSE_CONTROL_SOCKET /;"	d	file:
UNIX_SOCKET_PURPOSE_SOCKS_SOCKET	src/or/connection.c	/^#define UNIX_SOCKET_PURPOSE_SOCKS_SOCKET /;"	d	file:
UNKNOWN_METHOD	src/common/torgzip.h	/^  NO_METHOD=0, GZIP_METHOD=1, ZLIB_METHOD=2, UNKNOWN_METHOD=3$/;"	e	enum:__anon80
UNLOCK_LOGS	src/common/log.c	/^#define UNLOCK_LOGS(/;"	d	file:
UNMOCK	src/common/testsupport.h	/^#define UNMOCK(/;"	d
UNNAMED_ROUTER_NICKNAME	src/or/or.h	/^#define UNNAMED_ROUTER_NICKNAME /;"	d
UNPWBOX_BAD_SECRET	src/common/crypto_pwbox.h	/^#define UNPWBOX_BAD_SECRET /;"	d
UNPWBOX_CORRUPTED	src/common/crypto_pwbox.h	/^#define UNPWBOX_CORRUPTED /;"	d
UNPWBOX_OKAY	src/common/crypto_pwbox.h	/^#define UNPWBOX_OKAY /;"	d
UNRESTRICTED_SERVER_CIPHER_LIST	src/common/tortls.c	/^const char UNRESTRICTED_SERVER_CIPHER_LIST[] =$/;"	v
UPDATE	src/or/rephist.c	/^#define UPDATE(/;"	d	file:
UPDATE	src/or/rephist.c	/^#undef UPDATE$/;"	d	file:
UPDATE_CTR_BUF	src/common/aes.c	/^#define UPDATE_CTR_BUF(/;"	d	file:
UPDATE_IDX	src/common/container.c	/^#define UPDATE_IDX(/;"	d	file:
UPTIME_CUTOFF_FOR_NEW_BANDWIDTH_TEST	src/or/main.c	/^#define UPTIME_CUTOFF_FOR_NEW_BANDWIDTH_TEST /;"	d	file:
UPTIME_TO_GUARANTEE_STABLE	src/or/dirserv.c	/^#define UPTIME_TO_GUARANTEE_STABLE /;"	d	file:
US2_CONCAT_2__	src/test/test.h	/^#define US2_CONCAT_2__(/;"	d
USABLE_DESCRIPTOR_ALL	src/or/nodelist.c	/^  USABLE_DESCRIPTOR_ALL = 0,$/;"	e	enum:__anon24	file:
USABLE_DESCRIPTOR_EXIT_ONLY	src/or/nodelist.c	/^  USABLE_DESCRIPTOR_EXIT_ONLY = 1$/;"	e	enum:__anon24	file:
USEC_PER_SEC	src/common/compat.c	/^#define USEC_PER_SEC /;"	d	file:
USE_ALIGNED_ATTRIBUTE	src/common/memarea.c	/^#define USE_ALIGNED_ATTRIBUTE$/;"	d	file:
USE_BACKTRACE	src/common/backtrace.c	/^#define USE_BACKTRACE$/;"	d	file:
USE_BACKTRACE	src/common/sandbox.c	/^#define USE_BACKTRACE$/;"	d	file:
USE_EVP_AES_CTR	src/common/aes.c	/^#define USE_EVP_AES_CTR$/;"	d	file:
USE_LIBSECCOMP	src/common/sandbox.h	/^#define USE_LIBSECCOMP$/;"	d
USE_PTHREADS	src/common/compat_threads.h	/^#define USE_PTHREADS$/;"	d
USE_SENTINELS	src/common/memarea.c	/^#define USE_SENTINELS$/;"	d	file:
USE_WIN32_THREADS	src/common/compat_threads.h	/^#define USE_WIN32_THREADS$/;"	d
USING_COUNTER_VARS	src/common/aes.c	/^#define USING_COUNTER_VARS$/;"	d	file:
US_CONCAT_2_	src/test/test.h	/^#define US_CONCAT_2_(/;"	d
US_CONCAT_2__	src/test/test.h	/^#define US_CONCAT_2__(/;"	d
US_CONCAT_3_	src/test/test.h	/^#define US_CONCAT_3_(/;"	d
US_CONCAT_3__	src/test/test.h	/^#define US_CONCAT_3__(/;"	d
UTIL_FORMAT_PRIVATE	src/test/test_util_format.c	/^#define UTIL_FORMAT_PRIVATE$/;"	d	file:
UTIL_LEGACY	src/test/test_util.c	/^#define UTIL_LEGACY(/;"	d	file:
UTIL_PRIVATE	src/common/util.c	/^#define UTIL_PRIVATE$/;"	d	file:
UTIL_PRIVATE	src/test/test_pt.c	/^#define UTIL_PRIVATE$/;"	d	file:
UTIL_PRIVATE	src/test/test_util.c	/^#define UTIL_PRIVATE$/;"	d	file:
UTIL_PRIVATE	src/test/test_util_slow.c	/^#define UTIL_PRIVATE$/;"	d	file:
UTIL_PROCESS_PRIVATE	src/test/test_util_process.c	/^#define UTIL_PROCESS_PRIVATE$/;"	d	file:
UTIL_TEST	src/test/test_util.c	/^#define UTIL_TEST(/;"	d	file:
UTIL_TEST	src/test/test_util_slow.c	/^#define UTIL_TEST(/;"	d	file:
U_MEM	src/common/memarea.c	/^#define U_MEM /;"	d	file:
UpdateBridgesFromAuthority	src/or/or.h	/^  int UpdateBridgesFromAuthority;$/;"	m	struct:__anon55
UseBridges	src/or/or.h	/^  int UseBridges; \/**< Boolean: should we start all circuits with a bridge? *\/$/;"	m	struct:__anon55
UseEntryGuards	src/or/or.h	/^  int UseEntryGuards; \/**< Boolean: Do we try to enter from a smallish number$/;"	m	struct:__anon55
UseEntryGuardsAsDirGuards	src/or/or.h	/^  int UseEntryGuardsAsDirGuards; \/** Boolean: Do we try to get directory info$/;"	m	struct:__anon55
UseFilteringSSLBufferevents	src/or/or.h	/^  int UseFilteringSSLBufferevents;$/;"	m	struct:__anon55
UseGuardFraction	src/or/or.h	/^  int UseGuardFraction;$/;"	m	struct:__anon55
UseMicrodescriptors	src/or/or.h	/^  int UseMicrodescriptors;$/;"	m	struct:__anon55
UseNTorHandshake	src/or/or.h	/^  int UseNTorHandshake;$/;"	m	struct:__anon55
User	src/or/or.h	/^  char *User; \/**< Name of user to run Tor as. *\/$/;"	m	struct:__anon55
UserspaceIOCPBuffers	src/or/or.h	/^  int UserspaceIOCPBuffers;$/;"	m	struct:__anon55
UsingTestNetworkDefaults_	src/or/or.h	/^  int UsingTestNetworkDefaults_;$/;"	m	struct:__anon55
V	src/common/compat_libevent.h	/^#define V(/;"	d
V	src/or/config.c	/^#define V(/;"	d	file:
V	src/or/config.c	/^#undef V$/;"	d	file:
V	src/or/statefile.c	/^#define V(/;"	d	file:
V	src/or/statefile.c	/^#undef V$/;"	d	file:
V	src/test/test_scheduler.c	/^#define V(/;"	d	file:
V2_HANDSHAKE_CLIENT	src/common/tortls.c	/^#define V2_HANDSHAKE_CLIENT$/;"	d	file:
V2_HANDSHAKE_SERVER	src/common/tortls.c	/^#define V2_HANDSHAKE_SERVER$/;"	d	file:
V3AuthDistDelay	src/or/or.h	/^  int V3AuthDistDelay;$/;"	m	struct:__anon55
V3AuthNIntervalsValid	src/or/or.h	/^  int V3AuthNIntervalsValid;$/;"	m	struct:__anon55
V3AuthUseLegacyKey	src/or/or.h	/^  int V3AuthUseLegacyKey;$/;"	m	struct:__anon55
V3AuthVoteDelay	src/or/or.h	/^  int V3AuthVoteDelay;$/;"	m	struct:__anon55
V3AuthVotingInterval	src/or/or.h	/^  int V3AuthVotingInterval;$/;"	m	struct:__anon55
V3AuthoritativeDir	src/or/or.h	/^  int V3AuthoritativeDir; \/**< Boolean: is this an authoritative directory$/;"	m	struct:__anon55
V3BandwidthsFile	src/or/or.h	/^  char *V3BandwidthsFile;$/;"	m	struct:__anon55
V3_AUTH_BODY_LEN	src/or/or.h	/^#define V3_AUTH_BODY_LEN /;"	d
V3_AUTH_FIXED_PART_LEN	src/or/or.h	/^#define V3_AUTH_FIXED_PART_LEN /;"	d
V3_DIRINFO	src/or/or.h	/^  V3_DIRINFO      = 1 << 2,$/;"	e	enum:__anon49
VAR	src/or/config.c	/^#define VAR(/;"	d	file:
VAR	src/or/config.c	/^#undef VAR$/;"	d	file:
VAR	src/or/statefile.c	/^#define VAR(/;"	d	file:
VAR	src/or/statefile.c	/^#undef VAR$/;"	d	file:
VAR_CELL_MAX_HEADER_SIZE	src/or/or.h	/^#define VAR_CELL_MAX_HEADER_SIZE /;"	d
VERIFY_DIR	src/or/or.h	/^  VERIFY_DIR, VERIFY_RTR,$/;"	e	enum:__anon72
VERIFY_RTR	src/or/or.h	/^  VERIFY_DIR, VERIFY_RTR,$/;"	e	enum:__anon72
VERY_OLD_FILE_AGE	src/or/config.c	/^#define VERY_OLD_FILE_AGE /;"	d	file:
VER_PRE	src/or/or.h	/^  enum { VER_PRE=0, VER_RC=1, VER_RELEASE=2, } status;$/;"	e	enum:tor_version_t::__anon74
VER_RC	src/or/or.h	/^  enum { VER_PRE=0, VER_RC=1, VER_RELEASE=2, } status;$/;"	e	enum:tor_version_t::__anon74
VER_RELEASE	src/or/or.h	/^  enum { VER_PRE=0, VER_RC=1, VER_RELEASE=2, } status;$/;"	e	enum:tor_version_t::__anon74
VER_SUITE_EMBEDDEDNT	src/common/compat.h	/^#define VER_SUITE_EMBEDDEDNT /;"	d
VER_SUITE_SINGLEUSERTS	src/common/compat.h	/^#define VER_SUITE_SINGLEUSERTS /;"	d
VOTE_BODY_V3	src/test/test_dir_handle_get.c	/^const char* VOTE_BODY_V3 = $/;"	v
VOTE_DIGEST	src/test/test_dir_handle_get.c	/^#define VOTE_DIGEST /;"	d	file:
VPORT	src/or/config.c	/^#define VPORT(/;"	d	file:
VS_EMPTY	src/or/or.h	/^  VS_EMPTY=5, \/**< The version list was empty; no agreed-on versions. *\/$/;"	e	enum:version_status_t
VS_NEW	src/or/or.h	/^  VS_NEW=2, \/**< This version is newer than any recommended version. *\/$/;"	e	enum:version_status_t
VS_NEW_IN_SERIES	src/or/or.h	/^  VS_NEW_IN_SERIES=3, \/**< This version is newer than any recommended version$/;"	e	enum:version_status_t
VS_OLD	src/or/or.h	/^  VS_OLD=1, \/**< This version is older than any recommended version. *\/$/;"	e	enum:version_status_t
VS_RECOMMENDED	src/or/or.h	/^  VS_RECOMMENDED=0, \/**< This version is listed as recommended. *\/$/;"	e	enum:version_status_t
VS_UNKNOWN	src/or/or.h	/^  VS_UNKNOWN, \/**< We have no idea. *\/$/;"	e	enum:version_status_t
VS_UNRECOMMENDED	src/or/or.h	/^  VS_UNRECOMMENDED=4, \/**< This version is not recommended (general case). *\/$/;"	e	enum:version_status_t
V_LINE_OVERHEAD	src/or/dirserv.c	/^#define V_LINE_OVERHEAD /;"	d	file:
V_OLD	src/common/compat_libevent.h	/^#define V_OLD(/;"	d
VersioningAuthoritativeDir	src/or/or.h	/^  int VersioningAuthoritativeDir; \/**< Boolean: is this an authoritative$/;"	m	struct:__anon55
VirtualAddrNetworkIPv4	src/or/or.h	/^  char *VirtualAddrNetworkIPv4; \/**< Address and mask to hand out for virtual$/;"	m	struct:__anon55
VirtualAddrNetworkIPv6	src/or/or.h	/^  char *VirtualAddrNetworkIPv6; \/**< Address and mask to hand out for virtual$/;"	m	struct:__anon55
W0	src/ext/ed25519/donna/ed25519-hash.h	/^#define W0(/;"	d
W1	src/ext/ed25519/donna/ed25519-hash.h	/^#define W1(/;"	d
WANT_ERR	src/test/test_options.c	/^#define WANT_ERR(/;"	d	file:
WANT_ERR_LOG	src/test/test_options.c	/^#define WANT_ERR_LOG(/;"	d	file:
WANT_LOG	src/test/test_options.c	/^#define WANT_LOG(/;"	d	file:
WARN_INTRVL_LOOP	src/or/connection_edge.c	/^#define WARN_INTRVL_LOOP /;"	d	file:
WARN_INTRVL_PRIV	src/or/connection_edge.c	/^#define WARN_INTRVL_PRIV /;"	d	file:
WARN_TOO_MANY_CIRC_CREATIONS_INTERVAL	src/or/onion.c	/^#define WARN_TOO_MANY_CIRC_CREATIONS_INTERVAL /;"	d	file:
WARN_TOO_MANY_CONNS_INTERVAL	src/or/connection.c	/^#define WARN_TOO_MANY_CONNS_INTERVAL /;"	d	file:
WEEKDAY_NAMES	src/common/util.c	/^static const char *WEEKDAY_NAMES[] =$/;"	v	file:
WEIGHT_FOR_DIR	src/or/or.h	/^  WEIGHT_FOR_DIR$/;"	e	enum:bandwidth_weight_rule_t
WEIGHT_FOR_EXIT	src/or/or.h	/^  NO_WEIGHTING, WEIGHT_FOR_EXIT, WEIGHT_FOR_MID, WEIGHT_FOR_GUARD,$/;"	e	enum:bandwidth_weight_rule_t
WEIGHT_FOR_GUARD	src/or/or.h	/^  NO_WEIGHTING, WEIGHT_FOR_EXIT, WEIGHT_FOR_MID, WEIGHT_FOR_GUARD,$/;"	e	enum:bandwidth_weight_rule_t
WEIGHT_FOR_MID	src/or/or.h	/^  NO_WEIGHTING, WEIGHT_FOR_EXIT, WEIGHT_FOR_MID, WEIGHT_FOR_GUARD,$/;"	e	enum:bandwidth_weight_rule_t
WEOF	src/common/compat.c	/^#define WEOF /;"	d	file:
WFU_TO_GUARANTEE_GUARD	src/or/dirserv.c	/^#define WFU_TO_GUARANTEE_GUARD /;"	d	file:
WINDOWS_LEAN_AND_MEAN	src/test/test-child.c	/^#define WINDOWS_LEAN_AND_MEAN$/;"	d	file:
WORD	src/or/dirserv.c	/^#define WORD(/;"	d	file:
WQ_RPL_ERROR	src/common/workqueue.h	/^  WQ_RPL_ERROR = 1, \/** indicates fatal error *\/$/;"	e	enum:__anon3
WQ_RPL_REPLY	src/common/workqueue.h	/^  WQ_RPL_REPLY = 0, \/** indicates success *\/$/;"	e	enum:__anon3
WQ_RPL_SHUTDOWN	src/common/workqueue.h	/^  WQ_RPL_SHUTDOWN = 2, \/** indicates thread is shutting down *\/$/;"	e	enum:__anon3
WRA_MORE_SEVERE	src/or/dirserv.c	/^WRA_MORE_SEVERE(was_router_added_t a, was_router_added_t b)$/;"	f	file:
WRA_NEVER_DOWNLOADABLE	src/or/routerlist.h	/^static INLINE int WRA_NEVER_DOWNLOADABLE(was_router_added_t s)$/;"	f
WRA_WAS_ADDED	src/or/routerlist.h	/^WRA_WAS_ADDED(was_router_added_t s) {$/;"	f
WRA_WAS_OUTDATED	src/or/routerlist.h	/^static INLINE int WRA_WAS_OUTDATED(was_router_added_t s)$/;"	f
WRA_WAS_REJECTED	src/or/routerlist.h	/^static INLINE int WRA_WAS_REJECTED(was_router_added_t s)$/;"	f
WRITE	src/test/test_extorport.c	/^#define WRITE(/;"	d	file:
WRITE	src/test/test_extorport.c	/^#undef WRITE$/;"	d	file:
WRITE_EVENT	src/or/main.h	/^  WRITE_EVENT=0x04 \/**< We want to know when a connection is writable *\/$/;"	e	enum:watchable_events
WRITE_STATS_INTERVAL	src/or/or.h	/^#define WRITE_STATS_INTERVAL /;"	d
WarnPlaintextPorts	src/or/or.h	/^  smartlist_t *WarnPlaintextPorts;$/;"	m	struct:__anon55
WarnUnsafeSocks	src/or/or.h	/^  int WarnUnsafeSocks;$/;"	m	struct:__anon55
X	src/common/util_format.c	/^#define X /;"	d	file:
X	src/common/util_format.c	/^#undef X$/;"	d	file:
X	src/ext/ed25519/ref10/ge.h	/^  fe X;$/;"	m	struct:__anon101
X	src/ext/ed25519/ref10/ge.h	/^  fe X;$/;"	m	struct:__anon102
X	src/ext/ed25519/ref10/ge.h	/^  fe X;$/;"	m	struct:__anon103
XCIPHER	src/common/tortls.c	/^#define XCIPHER(/;"	d	file:
XCIPHER	src/common/tortls.c	/^#undef XCIPHER$/;"	d	file:
X_ADDRESS_HEADER	src/or/directory.c	/^#define X_ADDRESS_HEADER /;"	d	file:
Xm	src/or/circuitstats.h	/^  build_time_t Xm;$/;"	m	struct:circuit_build_times_s
Y	src/ext/ed25519/ref10/ge.h	/^  fe Y;$/;"	m	struct:__anon101
Y	src/ext/ed25519/ref10/ge.h	/^  fe Y;$/;"	m	struct:__anon102
Y	src/ext/ed25519/ref10/ge.h	/^  fe Y;$/;"	m	struct:__anon103
YminusX	src/ext/ed25519/ref10/ge.h	/^  fe YminusX;$/;"	m	struct:__anon105
YplusX	src/ext/ed25519/ref10/ge.h	/^  fe YplusX;$/;"	m	struct:__anon105
Z	src/ext/ed25519/ref10/ge.h	/^  fe Z;$/;"	m	struct:__anon101
Z	src/ext/ed25519/ref10/ge.h	/^  fe Z;$/;"	m	struct:__anon102
Z	src/ext/ed25519/ref10/ge.h	/^  fe Z;$/;"	m	struct:__anon103
Z	src/ext/ed25519/ref10/ge.h	/^  fe Z;$/;"	m	struct:__anon105
ZLIB_METHOD	src/common/torgzip.h	/^  NO_METHOD=0, GZIP_METHOD=1, ZLIB_METHOD=2, UNKNOWN_METHOD=3$/;"	e	enum:__anon80
_FILE_OFFSET_BITS	src/common/torgzip.c	/^#define _FILE_OFFSET_BITS /;"	d	file:
_GNU_SOURCE	src/common/backtrace.c	/^#define _GNU_SOURCE /;"	d	file:
_GNU_SOURCE	src/common/compat.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	src/common/compat_pthreads.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	src/common/compat_threads.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	src/common/sandbox.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	src/common/util.c	/^#define _GNU_SOURCE$/;"	d	file:
_LARGEFILE64_SOURCE	src/common/sandbox.c	/^#define _LARGEFILE64_SOURCE$/;"	d	file:
_LARGEFILE64_SOURCE	src/common/torgzip.c	/^#define _LARGEFILE64_SOURCE /;"	d	file:
_LFS64_LARGEFILE	src/common/torgzip.c	/^#define _LFS64_LARGEFILE /;"	d	file:
_READPASSPHRASE_H_	src/ext/tor_readpassphrase.h	/^#define _READPASSPHRASE_H_$/;"	d
_SIZEOF_ADDR_IFREQ	src/common/address.c	/^#define _SIZEOF_ADDR_IFREQ /;"	d	file:
_TFE	src/test/test_util.c	/^#define _TFE(/;"	d	file:
_TOR_FP_PAIR_H	src/or/fp_pair.h	/^#define _TOR_FP_PAIR_H$/;"	d
_USE_ISOC99_	src/common/util.c	/^#define _USE_ISOC99_ /;"	d	file:
__INCLUDE_LEVEL__	src/or/config.c	/^#   define __INCLUDE_LEVEL__ /;"	d	file:
__INCLUDE_LEVEL__	src/or/main.c	/^#   define __INCLUDE_LEVEL__ /;"	d	file:
__USE_GNU	src/common/backtrace.c	/^#define __USE_GNU$/;"	d	file:
__USE_GNU	src/common/sandbox.h	/^#define __USE_GNU$/;"	d
__attribute__	src/ext/tinytest.c	/^#define __attribute__(/;"	d	file:
__func__	src/common/compat.h	/^#define __func__ /;"	d
_le64toh	src/ext/csiphash.c	/^#      define _le64toh(/;"	d	file:
_le64toh	src/ext/csiphash.c	/^#    define _le64toh(/;"	d	file:
_le64toh	src/ext/csiphash.c	/^#  define _le64toh(/;"	d	file:
a	src/ext/ed25519/donna/ed25519-randombytes.h	/^	uint32_t a, b, c;$/;"	m	struct:isaacp_state_t
a_tangled_web	src/test/test_bt_cl.c	/^a_tangled_web(int x)$/;"	f
abbreviated	src/or/confparse.h	/^  const char *abbreviated;$/;"	m	struct:config_abbrev_t
abbrevs	src/or/confparse.h	/^  config_abbrev_t *abbrevs; \/**< List of abbreviations that we expand when$/;"	m	struct:config_format_t
abort_handler	src/test/test_bt_cl.c	/^abort_handler(int s)$/;"	f	file:
abort_writing_to_file	src/common/util.c	/^abort_writing_to_file(open_file_t *file_data)$/;"	f
accepted	src/or/policies.c	/^    unsigned int accepted:1; \/** Has this port already been accepted *\/$/;"	m	struct:policy_summary_item_t	file:
accepted_intro_dh_parts	src/or/rendservice.c	/^  replaycache_t *accepted_intro_dh_parts;$/;"	m	struct:rend_service_t	file:
accepted_intro_rsa_parts	src/or/or.h	/^  replaycache_t *accepted_intro_rsa_parts;$/;"	m	struct:rend_intro_point_t
accepted_introduce2_count	src/or/or.h	/^  int accepted_introduce2_count;$/;"	m	struct:rend_intro_point_t
accounting_add_bytes	src/or/hibernate.c	/^accounting_add_bytes(size_t n_read, size_t n_written, int seconds)$/;"	f
accounting_get_end_time	src/test/test_status.c	/^NS(accounting_get_end_time)(void)$/;"	f	file:
accounting_get_interval_length	src/or/hibernate.c	/^accounting_get_interval_length(void)$/;"	f
accounting_is_enabled	src/test/test_config.c	/^NS(accounting_is_enabled)(const or_options_t *options)$/;"	f	file:
accounting_is_enabled	src/test/test_status.c	/^NS(accounting_is_enabled)(const or_options_t *options)$/;"	f	file:
accounting_parse_options	src/test/test_config.c	/^NS(accounting_parse_options)(const or_options_t *options, int validate_only)$/;"	f	file:
accounting_record_bandwidth_usage	src/or/hibernate.c	/^accounting_record_bandwidth_usage(time_t now, or_state_t *state)$/;"	f
accounting_run_housekeeping	src/or/hibernate.c	/^accounting_run_housekeeping(time_t now)$/;"	f
accounting_set_wakeup_time	src/or/hibernate.c	/^accounting_set_wakeup_time(void)$/;"	f	file:
accounting_tests	src/test/test_accounting.c	/^struct testcase_t accounting_tests[] = {$/;"	v	typeref:struct:testcase_t
action	src/or/geoip.c	/^  unsigned int action:2;$/;"	m	struct:clientmap_entry_t	file:
activate_signal	src/or/main.c	/^activate_signal(int signal_num)$/;"	f
active_channels	src/or/channel.c	/^static smartlist_t *active_channels = NULL;$/;"	v	file:
active_circuit_pqueue	src/or/circuitmux_ewma.c	/^  smartlist_t *active_circuit_pqueue;$/;"	m	struct:ewma_policy_data_s	file:
active_circuit_pqueue_last_recalibrated	src/or/circuitmux_ewma.c	/^  unsigned int active_circuit_pqueue_last_recalibrated;$/;"	m	struct:ewma_policy_data_s	file:
active_circuits_head	src/or/circuitmux.c	/^  struct circuit_t *active_circuits_head, *active_circuits_tail;$/;"	m	struct:circuitmux_s	typeref:struct:circuitmux_s::circuit_t	file:
active_circuits_tail	src/or/circuitmux.c	/^  struct circuit_t *active_circuits_head, *active_circuits_tail;$/;"	m	struct:circuitmux_s	typeref:struct:circuitmux_s::	file:
active_linked_connection_lst	src/or/main.c	/^static smartlist_t *active_linked_connection_lst = NULL;$/;"	v	file:
active_listeners	src/or/channel.c	/^static smartlist_t *active_listeners = NULL;$/;"	v	file:
active_on_link	src/or/or.h	/^  unsigned int active_on_link:1;$/;"	m	struct:connection_t
add128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define add128(/;"	d
add128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define add128(/;"	d
add128_64	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define add128_64(/;"	d
add128_64	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define add128_64(/;"	d
add256_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^add256_modm(bignum256modm r, const bignum256modm x, const bignum256modm y) {$/;"	f
add256_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^add256_modm(bignum256modm r, const bignum256modm x, const bignum256modm y) {$/;"	f
add_an_entry_guard	src/or/entrynodes.c	/^add_an_entry_guard(const node_t *chosen, int reset_status, int prepend,$/;"	f
add_bytes_to_buf	src/test/test_oom.c	/^add_bytes_to_buf(generic_buffer_t *buf, size_t n_bytes)$/;"	f	file:
add_callback_log	src/common/log.c	/^add_callback_log(const log_severity_list_t *severity, log_callback cb)$/;"	f
add_cell_ewma	src/or/circuitmux_ewma.c	/^add_cell_ewma(ewma_policy_data_t *pol, cell_ewma_t *ewma)$/;"	f	file:
add_connection_to_closeable_list	src/or/main.c	/^add_connection_to_closeable_list(connection_t *conn)$/;"	f
add_default_fallback_dir_servers_known_default	src/test/test_config.c	/^add_default_fallback_dir_servers_known_default(void)$/;"	f	file:
add_default_trusted_dir_authorities	src/or/config.c	/^add_default_trusted_dir_authorities(dirinfo_type_t type)$/;"	f	file:
add_entropy	src/or/main.h	/^  time_t add_entropy;$/;"	m	struct:__anon5
add_file_log	src/common/log.c	/^add_file_log(const log_severity_list_t *severity, const char *filename,$/;"	f
add_fingerprint_to_dir	src/or/dirserv.c	/^add_fingerprint_to_dir(const char *fp, authdir_config_t *list,$/;"	f
add_laplace_noise	src/common/util.c	/^add_laplace_noise(int64_t signal, double random, double delta_f,$/;"	f
add_n_work_items	src/test/test_workqueue.c	/^add_n_work_items(threadpool_t *tp, int n)$/;"	f	file:
add_noparam_filter	src/common/sandbox.c	/^add_noparam_filter(scmp_filter_ctx ctx)$/;"	f	file:
add_obs	src/or/rephist.c	/^add_obs(bw_array_t *b, time_t when, uint64_t n)$/;"	f	file:
add_onion_helper_keyarg	src/or/control.c	/^add_onion_helper_keyarg(const char *arg, int discard_pk,$/;"	f
add_param_filter	src/common/sandbox.c	/^add_param_filter(scmp_filter_ctx ctx, sandbox_cfg_t* cfg)$/;"	f	file:
add_predicted_port	src/or/rephist.c	/^add_predicted_port(time_t now, uint16_t port)$/;"	f	file:
add_stream_log	src/common/log.c	/^add_stream_log(const log_severity_list_t *severity, const char *name, int fd)$/;"	f
add_stream_log_impl	src/common/log.c	/^add_stream_log_impl(const log_severity_list_t *severity,$/;"	f	file:
add_syslog_log	src/common/log.c	/^add_syslog_log(const log_severity_list_t *severity)$/;"	f
add_temp_log	src/common/log.c	/^add_temp_log(int min_severity)$/;"	f
add_testing_cell_stats_entry	src/test/test_controller_events.c	/^add_testing_cell_stats_entry(circuit_t *circ, uint8_t command,$/;"	f	file:
add_transport_to_proxy	src/or/transports.c	/^add_transport_to_proxy(const char *transport, managed_proxy_t *mp)$/;"	f	file:
add_unix_port	src/or/rendservice.c	/^add_unix_port(smartlist_t *ports, rend_service_port_config_t *p)$/;"	f	file:
add_wildcarded_test_address	src/or/dns.c	/^add_wildcarded_test_address(const char *address)$/;"	f	file:
add_work	src/test/test_workqueue.c	/^add_work(threadpool_t *tp)$/;"	f	file:
added_cells_appward	src/or/control.h	/^  uint64_t added_cells_appward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
added_cells_exitward	src/or/control.h	/^  uint64_t added_cells_exitward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
addend	src/test/test_threads.c	/^  int addend;$/;"	m	struct:cv_testinfo_s	file:
addr	src/common/address.h	/^  tor_addr_t addr;$/;"	m	struct:tor_addr_port_t
addr	src/common/address.h	/^  } addr;$/;"	m	struct:tor_addr_t	typeref:union:tor_addr_t::__anon1
addr	src/or/addressmap.h	/^  tor_addr_t addr;$/;"	m	struct:virtual_addr_conf_t
addr	src/or/config.h	/^  tor_addr_t addr; \/* The IP address of the bridge. *\/$/;"	m	struct:bridge_line_t
addr	src/or/entrynodes.c	/^  tor_addr_t addr;$/;"	m	struct:__anon32	file:
addr	src/or/geoip.c	/^  tor_addr_t addr;$/;"	m	struct:clientmap_entry_t	file:
addr	src/or/or.h	/^  tor_addr_t addr; \/**< IP address. *\/$/;"	m	struct:extend_info_t
addr	src/or/or.h	/^  tor_addr_t addr; \/**< IP of the other side of the connection; used to$/;"	m	struct:connection_t
addr	src/or/or.h	/^  tor_addr_t addr; \/**< The actual IP to listen on, if !is_unix_addr. *\/$/;"	m	struct:port_cfg_t
addr	src/or/or.h	/^  tor_addr_t addr;$/;"	m	struct:addr_policy_t
addr	src/or/or.h	/^  uint32_t addr; \/**< Address of this voter, in IPv4, in host order. *\/$/;"	m	struct:networkstatus_voter_info_t
addr	src/or/or.h	/^  uint32_t addr; \/**< IPv4 address for this router. *\/$/;"	m	struct:routerstatus_t
addr	src/or/or.h	/^  uint32_t addr; \/**< IPv4 address of OR, in host order. *\/$/;"	m	struct:__anon45
addr	src/or/or.h	/^  uint32_t addr; \/**< IPv4 address. *\/$/;"	m	struct:dir_server_t
addr	src/or/or.h	/^  uint32_t addr;$/;"	m	struct:authority_cert_t
addr	src/or/relay.h	/^  tor_addr_t addr;$/;"	m	struct:address_ttl_s
addr	src/or/transports.h	/^  tor_addr_t addr;$/;"	m	struct:transport_t
addr_current_at	src/or/or.h	/^  time_t addr_current_at; \/**< When was the document that we derived the$/;"	m	struct:dir_server_t
addr_ipv4	src/or/dns_structs.h	/^    uint32_t addr_ipv4; \/**< IPv4 addr for <b>address<\/b>, if successful.$/;"	m	union:cached_resolve_t::__anon12
addr_ipv6	src/or/dns_structs.h	/^    struct in6_addr addr_ipv6; \/**< IPv6 addr for <b>address<\/b>, if$/;"	m	union:cached_resolve_t::__anon13	typeref:struct:cached_resolve_t::__anon13::in6_addr
addr_is_in_cc_list	src/or/policies.c	/^addr_is_in_cc_list(uint32_t addr, const smartlist_t *cc_list)$/;"	f	file:
addr_mask_get_bits	src/common/address.c	/^addr_mask_get_bits(uint32_t mask)$/;"	f
addr_policy_action_bitfield_t	src/or/or.h	/^#define addr_policy_action_bitfield_t /;"	d
addr_policy_action_t	src/or/or.h	/^} addr_policy_action_t;$/;"	t	typeref:enum:__anon42
addr_policy_append_reject_addr	src/or/policies.c	/^addr_policy_append_reject_addr(smartlist_t **dest, const tor_addr_t *addr)$/;"	f
addr_policy_covers	src/or/policies.c	/^addr_policy_covers(addr_policy_t *a, addr_policy_t *b)$/;"	f	file:
addr_policy_free	src/or/policies.c	/^addr_policy_free(addr_policy_t *p)$/;"	f
addr_policy_intersects	src/or/policies.c	/^addr_policy_intersects(addr_policy_t *a, addr_policy_t *b)$/;"	f	file:
addr_policy_list_free	src/or/policies.c	/^addr_policy_list_free(smartlist_t *lst)$/;"	f
addr_policy_permits_address	src/or/policies.c	/^addr_policy_permits_address(uint32_t addr, uint16_t port,$/;"	f	file:
addr_policy_permits_tor_addr	src/or/policies.c	/^addr_policy_permits_tor_addr(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
addr_policy_result_t	src/or/or.h	/^} addr_policy_result_t;$/;"	t	typeref:enum:__anon71
addr_policy_t	src/or/or.h	/^typedef struct addr_policy_t {$/;"	s
addr_policy_t	src/or/or.h	/^} addr_policy_t;$/;"	t	typeref:struct:addr_policy_t
addr_port_lookup	src/common/address.c	/^addr_port_lookup(int severity, const char *addrport, char **address,$/;"	f
addr_tests	src/test/test_addr.c	/^struct testcase_t addr_tests[] = {$/;"	v	typeref:struct:testcase_t
address	src/common/tortls.h	/^  char *address; \/**< An address to log when describing this connection. *\/$/;"	m	struct:tor_tls_t
address	src/or/connection_edge.h	/^  char *address;$/;"	m	struct:begin_cell_t
address	src/or/dns_structs.h	/^  char address[MAX_ADDRESSLEN]; \/**< The hostname to be resolved. *\/$/;"	m	struct:cached_resolve_t
address	src/or/or.h	/^  char *address; \/**< Address of this voter, in string format. *\/$/;"	m	struct:networkstatus_voter_info_t
address	src/or/or.h	/^  char *address; \/**< FQDN (or IP) of the guy on the other end.$/;"	m	struct:connection_t
address	src/or/or.h	/^  char *address; \/**< Hostname. *\/$/;"	m	struct:dir_server_t
address	src/or/or.h	/^  char address[MAX_SOCKS_ADDR_LEN]; \/**< What address did the client ask to$/;"	m	struct:socks_request_t
address	src/tools/tor-gencert.c	/^char *address = NULL;$/;"	v
address_is_in_virtual_range	src/or/addressmap.c	/^address_is_in_virtual_range(const char *address)$/;"	f
address_is_invalid_destination	src/or/addressmap.c	/^address_is_invalid_destination(const char *address, int client)$/;"	f
address_is_invalid_mapaddress_target	src/or/control.c	/^address_is_invalid_mapaddress_target(const char *addr)$/;"	f	file:
address_tests	src/test/test_address.c	/^struct testcase_t address_tests[] = {$/;"	v	typeref:struct:testcase_t
address_ttl	src/or/or.h	/^  uint32_t address_ttl; \/**< TTL for address-to-addr mapping on exit$/;"	m	struct:edge_connection_t
address_ttl_free	src/or/relay.c	/^address_ttl_free(address_ttl_t *addr)$/;"	f
address_ttl_s	src/or/relay.h	/^typedef struct address_ttl_s {$/;"	s
address_ttl_t	src/or/relay.h	/^} address_ttl_t;$/;"	t	typeref:struct:address_ttl_s
addressmap	src/or/addressmap.c	/^static strmap_t *addressmap=NULL;$/;"	v	file:
addressmap_address_should_automap	src/or/addressmap.c	/^addressmap_address_should_automap(const char *address,$/;"	f
addressmap_clean	src/or/addressmap.c	/^addressmap_clean(time_t now)$/;"	f
addressmap_clear_configured	src/or/addressmap.c	/^addressmap_clear_configured(void)$/;"	f
addressmap_clear_excluded_trackexithosts	src/or/addressmap.c	/^addressmap_clear_excluded_trackexithosts(const or_options_t *options)$/;"	f
addressmap_clear_invalid_automaps	src/test/test_config.c	/^NS(addressmap_clear_invalid_automaps)(const or_options_t *options)$/;"	f
addressmap_clear_transient	src/or/addressmap.c	/^addressmap_clear_transient(void)$/;"	f
addressmap_ent_free	src/or/addressmap.c	/^addressmap_ent_free(void *_ent)$/;"	f	file:
addressmap_ent_remove	src/or/addressmap.c	/^addressmap_ent_remove(const char *address, addressmap_entry_t *ent)$/;"	f	file:
addressmap_entry_source_bitfield_t	src/or/or.h	/^#define addressmap_entry_source_bitfield_t /;"	d
addressmap_entry_source_t	src/or/or.h	/^} addressmap_entry_source_t;$/;"	t	typeref:enum:__anon63
addressmap_entry_t	src/or/addressmap.c	/^} addressmap_entry_t;$/;"	t	typeref:struct:__anon83	file:
addressmap_free_all	src/or/addressmap.c	/^addressmap_free_all(void)$/;"	f
addressmap_get_mappings	src/or/addressmap.c	/^addressmap_get_mappings(smartlist_t *sl, time_t min_expires,$/;"	f
addressmap_get_virtual_address	src/or/addressmap.c	/^addressmap_get_virtual_address(int type)$/;"	f	file:
addressmap_have_mapping	src/or/addressmap.c	/^addressmap_have_mapping(const char *address, int update_expiry)$/;"	f
addressmap_init	src/or/addressmap.c	/^addressmap_init(void)$/;"	f
addressmap_match_superdomains	src/or/addressmap.c	/^addressmap_match_superdomains(char *address)$/;"	f	file:
addressmap_register	src/or/addressmap.c	/^addressmap_register(const char *address, char *new_address, time_t expires,$/;"	f
addressmap_register_auto	src/or/config.c	/^addressmap_register_auto(const char *from, const char *to,$/;"	f
addressmap_register_virtual_address	src/or/addressmap.c	/^addressmap_register_virtual_address(int type, char *new_address)$/;"	f
addressmap_rewrite	src/or/addressmap.c	/^addressmap_rewrite(char *address, size_t maxlen,$/;"	f
addressmap_rewrite	src/test/test_config.c	/^#define addressmap_rewrite(/;"	d	file:
addressmap_rewrite	src/test/test_config.c	/^#undef addressmap_rewrite$/;"	d	file:
addressmap_rewrite_reverse	src/or/addressmap.c	/^addressmap_rewrite_reverse(char *address, size_t maxlen, unsigned flags,$/;"	f
addressmap_virtaddress_ent_free	src/or/addressmap.c	/^addressmap_virtaddress_ent_free(void *_ent)$/;"	f	file:
addressmap_virtaddress_remove	src/or/addressmap.c	/^addressmap_virtaddress_remove(const char *address, addressmap_entry_t *ent)$/;"	f	file:
addrs_in_same_network_family	src/or/nodelist.c	/^addrs_in_same_network_family(const tor_addr_t *a1,$/;"	f	file:
adjust_exit_policy_from_exitpolicy_failure	src/or/relay.c	/^adjust_exit_policy_from_exitpolicy_failure(origin_circuit_t *circ,$/;"	f	file:
advance_obs	src/or/rephist.c	/^advance_obs(bw_array_t *b)$/;"	f	file:
advertised_server_mode	src/or/router.c	/^advertised_server_mode(void)$/;"	f
aes	src/common/aes.c	/^    AES_KEY aes;$/;"	m	union:aes_cnt_cipher::__anon106	file:
aes_cipher_free	src/common/aes.c	/^aes_cipher_free(aes_cnt_cipher_t *cipher)$/;"	f
aes_cnt_cipher	src/common/aes.c	/^struct aes_cnt_cipher {$/;"	s	file:
aes_cnt_cipher_t	src/common/aes.h	/^typedef struct aes_cnt_cipher aes_cnt_cipher_t;$/;"	t	typeref:struct:aes_cnt_cipher
aes_crypt	src/common/aes.c	/^aes_crypt(aes_cnt_cipher_t *cipher, const char *input, size_t len,$/;"	f
aes_crypt_inplace	src/common/aes.c	/^aes_crypt_inplace(aes_cnt_cipher_t *cipher, char *data, size_t len)$/;"	f
aes_fill_buf_	src/common/aes.c	/^aes_fill_buf_(aes_cnt_cipher_t *cipher)$/;"	f	file:
aes_new_cipher	src/common/aes.c	/^aes_new_cipher(const char *key, const char *iv)$/;"	f
aes_set_iv	src/common/aes.c	/^aes_set_iv(aes_cnt_cipher_t *cipher, const char *iv)$/;"	f	file:
aes_set_key	src/common/aes.c	/^aes_set_key(aes_cnt_cipher_t *cipher, const char *key, int key_bits)$/;"	f	file:
aes_tests	src/test/test_aes.c	/^struct testcase_t aes_tests[] = {$/;"	v	typeref:struct:testcase_t
after_firsthop_idx	src/or/or.h	/^  int after_firsthop_idx;$/;"	m	struct:__anon62
age_tmp	src/or/or.h	/^  uint32_t age_tmp;$/;"	m	struct:circuit_t
alert	src/common/workqueue.c	/^  alert_sockets_t alert;$/;"	m	struct:replyqueue_s	file:
alert_fn	src/common/compat_threads.h	/^  int (*alert_fn)(tor_socket_t write_fd);$/;"	m	struct:alert_sockets_s
alert_sockets_close	src/common/compat_threads.c	/^alert_sockets_close(alert_sockets_t *socks)$/;"	f
alert_sockets_create	src/common/compat_threads.c	/^alert_sockets_create(alert_sockets_t *socks_out, uint32_t flags)$/;"	f
alert_sockets_s	src/common/compat_threads.h	/^typedef struct alert_sockets_s {$/;"	s
alert_sockets_t	src/common/compat_threads.h	/^} alert_sockets_t;$/;"	t	typeref:struct:alert_sockets_s
alg	src/or/or.h	/^  digest_algorithm_t alg;$/;"	m	struct:document_signature_t
algorithm	src/common/crypto.c	/^  digest_algorithm_bitfield_t algorithm : 8; \/**< Which algorithm is in use? *\/$/;"	m	struct:crypto_digest_t	file:
all_addrs	src/or/or.h	/^  unsigned int all_addrs : 1;$/;"	m	struct:server_port_cfg_t
all_channels	src/or/channel.c	/^static smartlist_t *all_channels = NULL;$/;"	v	file:
all_listeners	src/or/channel.c	/^static smartlist_t *all_listeners = NULL;$/;"	v	file:
all_rsa_sha1_lst	src/or/dircollate.h	/^  smartlist_t *all_rsa_sha1_lst;$/;"	m	struct:dircollator_s
all_uploads_performed	src/or/or.h	/^  int all_uploads_performed;$/;"	m	struct:rend_service_descriptor_t
alloc_chunk	src/common/memarea.c	/^alloc_chunk(size_t sz, int freelist_ok)$/;"	f	file:
alloc_circ_data	src/or/circuitmux.h	/^    (*alloc_circ_data)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
alloc_cmux_data	src/or/circuitmux.h	/^  circuitmux_policy_data_t * (*alloc_cmux_data)(circuitmux_t *cmux);$/;"	m	struct:circuitmux_policy_s
alloc_getcwd	src/common/compat.c	/^alloc_getcwd(void)$/;"	f	file:
alloc_http_authenticator	src/test/test_config.c	/^NS(alloc_http_authenticator)(const char *authenticator)$/;"	f
allocation	src/common/torgzip.c	/^  size_t allocation;$/;"	m	struct:tor_zlib_state_t	file:
allow_single_hop_exits	src/or/or.h	/^  unsigned int allow_single_hop_exits:1;  \/**< Whether the router says$/;"	m	struct:__anon45
allow_unknown_ports	src/or/rendservice.c	/^  int allow_unknown_ports;$/;"	m	struct:rend_service_t	file:
alpha	src/or/circuitstats.h	/^  double alpha;$/;"	m	struct:circuit_build_times_s
already_have_cert	src/or/routerlist.c	/^already_have_cert(authority_cert_t *cert)$/;"	f	file:
already_received_introduce1	src/or/or.h	/^  unsigned int already_received_introduce1 : 1;$/;"	m	struct:or_circuit_t
alternate_clip_bw	src/test/test_dir.c	/^static uint32_t alternate_clip_bw = 0;$/;"	v	file:
always_accept_verify_cb	src/common/tortls.c	/^always_accept_verify_cb(int preverify_ok,$/;"	f
annotations_len	src/or/or.h	/^  size_t annotations_len;$/;"	m	struct:signed_descriptor_t
answer_is_wildcarded	src/or/dns.c	/^answer_is_wildcarded(const char *ip)$/;"	f	file:
any_bridge_descriptors_known	src/or/entrynodes.c	/^any_bridge_descriptors_known(void)$/;"	f
any_bridge_supports_microdescriptors	src/or/entrynodes.c	/^any_bridge_supports_microdescriptors(void)$/;"	f
any_other_active_or_conns	src/or/connection.c	/^any_other_active_or_conns(const or_connection_t *this_conn)$/;"	f
any_predicted_circuits	src/or/rephist.c	/^any_predicted_circuits(time_t now)$/;"	f
ap_stream_wants_exit_attention	src/or/circuitbuild.c	/^ap_stream_wants_exit_attention(connection_t *conn)$/;"	f	file:
append_address_to_payload	src/or/relay.c	/^append_address_to_payload(uint8_t *payload_out, const tor_addr_t *addr)$/;"	f
append_bytes_to_file	src/common/util.c	/^append_bytes_to_file(const char *fname, const char *str, size_t len,$/;"	f
append_cell_stats_by_command	src/or/control.c	/^append_cell_stats_by_command(smartlist_t *event_parts, const char *key,$/;"	f
append_cell_to_circuit_queue	src/or/relay.c	/^append_cell_to_circuit_queue(circuit_t *circ, channel_t *chan,$/;"	f
append_exit_policy_string	src/or/policies.c	/^append_exit_policy_string(smartlist_t **policy, const char *more)$/;"	f	file:
appname	src/common/log.c	/^static char *appname = NULL;$/;"	v	file:
approx_time	src/common/util.c	/^approx_time(void)$/;"	f
approx_time	src/common/util.h	/^#define approx_time(/;"	d
arg	src/common/workqueue.c	/^  void *arg;$/;"	m	struct:workqueue_entry_s	file:
args	src/or/routerparse.c	/^  char **args;                 \/**< Array of arguments from keyword line. *\/$/;"	m	struct:directory_token_t	file:
argv	src/or/transports.h	/^  char **argv; \/* the cli arguments of this proxy *\/$/;"	m	struct:__anon34
as_of	src/or/dirserv.c	/^  time_t as_of;$/;"	m	struct:mbw_cache_entry_s	file:
assert_addr_policy_ok	src/or/routerparse.c	/^assert_addr_policy_ok(smartlist_t *lst)$/;"	f
assert_all_pending_dns_resolves_ok	src/or/dns.c	/^assert_all_pending_dns_resolves_ok(void)$/;"	f
assert_buf_ok	src/or/buffers.c	/^assert_buf_ok(buf_t *buf)$/;"	f
assert_cache_ok	src/or/dns.c	/^#define assert_cache_ok(/;"	d	file:
assert_cache_ok_	src/or/dns.c	/^assert_cache_ok_(void)$/;"	f	file:
assert_circuit_mux_okay	src/or/relay.c	/^assert_circuit_mux_okay(channel_t *chan)$/;"	f
assert_circuit_ok	src/or/circuitlist.c	/^assert_circuit_ok(const circuit_t *c)$/;"	f
assert_cmux_ok_paranoid	src/or/relay.c	/^#define assert_cmux_ok_paranoid(/;"	d	file:
assert_connection_edge_not_dns_pending	src/or/dns.c	/^assert_connection_edge_not_dns_pending(edge_connection_t *conn)$/;"	f
assert_connection_ok	src/or/connection.c	/^assert_connection_ok(connection_t *conn, time_t now)$/;"	f
assert_cpath_layer_ok	src/or/circuitlist.c	/^assert_cpath_layer_ok(const crypt_path_t *cp)$/;"	f
assert_cpath_ok	src/or/circuitlist.c	/^assert_cpath_ok(const crypt_path_t *cp)$/;"	f	file:
assert_identity_keys_ok	src/or/router.c	/^assert_identity_keys_ok(void)$/;"	f	file:
assert_resolve_ok	src/or/dns.c	/^assert_resolve_ok(cached_resolve_t *resolve)$/;"	f	file:
assert_unconfigured_count_ok	src/or/transports.c	/^assert_unconfigured_count_ok(void)$/;"	f	file:
assign_onionskin_to_cpuworker	src/or/cpuworker.c	/^assign_onionskin_to_cpuworker(or_circuit_t *circ,$/;"	f
associated_isolated_stream_global_id	src/or/or.h	/^  uint64_t associated_isolated_stream_global_id;$/;"	m	struct:origin_circuit_t
attr_detached	src/common/compat_pthreads.c	/^static pthread_attr_t attr_detached;$/;"	v	file:
attr_recursive	src/common/compat_pthreads.c	/^static pthread_mutexattr_t attr_recursive;$/;"	v	file:
auth1_add_sig	src/trunnel/link_handshake.c	/^auth1_add_sig(auth1_t *inp, uint8_t elt)$/;"	f
auth1_check	src/trunnel/link_handshake.c	/^auth1_check(const auth1_t *obj, const auth_ctx_t *auth_ctx_ctx)$/;"	f
auth1_clear	src/trunnel/link_handshake.c	/^auth1_clear(auth1_t *obj)$/;"	f	file:
auth1_clear_errors	src/trunnel/link_handshake.c	/^auth1_clear_errors(auth1_t *obj)$/;"	f
auth1_encode	src/trunnel/link_handshake.c	/^auth1_encode(uint8_t *output, const size_t avail, const auth1_t *obj, const auth_ctx_t *auth_ctx_ctx)$/;"	f
auth1_encoded_len	src/trunnel/link_handshake.c	/^auth1_encoded_len(const auth1_t *obj, const auth_ctx_t *auth_ctx_ctx)$/;"	f
auth1_free	src/trunnel/link_handshake.c	/^auth1_free(auth1_t *obj)$/;"	f
auth1_get_cid	src/trunnel/link_handshake.c	/^auth1_get_cid(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_clog	src/trunnel/link_handshake.c	/^auth1_get_clog(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_end_of_fixed_part	src/trunnel/link_handshake.c	/^auth1_get_end_of_fixed_part(const auth1_t *inp)$/;"	f
auth1_get_end_of_signed	src/trunnel/link_handshake.c	/^auth1_get_end_of_signed(const auth1_t *inp)$/;"	f
auth1_get_rand	src/trunnel/link_handshake.c	/^auth1_get_rand(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_scert	src/trunnel/link_handshake.c	/^auth1_get_scert(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_sid	src/trunnel/link_handshake.c	/^auth1_get_sid(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_sig	src/trunnel/link_handshake.c	/^auth1_get_sig(auth1_t *inp, size_t idx)$/;"	f
auth1_get_slog	src/trunnel/link_handshake.c	/^auth1_get_slog(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_tlssecrets	src/trunnel/link_handshake.c	/^auth1_get_tlssecrets(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_type	src/trunnel/link_handshake.c	/^auth1_get_type(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_u1_cid_ed	src/trunnel/link_handshake.c	/^auth1_get_u1_cid_ed(const auth1_t *inp, size_t idx)$/;"	f
auth1_get_u1_sid_ed	src/trunnel/link_handshake.c	/^auth1_get_u1_sid_ed(const auth1_t *inp, size_t idx)$/;"	f
auth1_getarray_cid	src/trunnel/link_handshake.c	/^auth1_getarray_cid(auth1_t *inp)$/;"	f
auth1_getarray_clog	src/trunnel/link_handshake.c	/^auth1_getarray_clog(auth1_t *inp)$/;"	f
auth1_getarray_rand	src/trunnel/link_handshake.c	/^auth1_getarray_rand(auth1_t *inp)$/;"	f
auth1_getarray_scert	src/trunnel/link_handshake.c	/^auth1_getarray_scert(auth1_t *inp)$/;"	f
auth1_getarray_sid	src/trunnel/link_handshake.c	/^auth1_getarray_sid(auth1_t *inp)$/;"	f
auth1_getarray_sig	src/trunnel/link_handshake.c	/^auth1_getarray_sig(auth1_t *inp)$/;"	f
auth1_getarray_slog	src/trunnel/link_handshake.c	/^auth1_getarray_slog(auth1_t *inp)$/;"	f
auth1_getarray_tlssecrets	src/trunnel/link_handshake.c	/^auth1_getarray_tlssecrets(auth1_t *inp)$/;"	f
auth1_getarray_type	src/trunnel/link_handshake.c	/^auth1_getarray_type(auth1_t *inp)$/;"	f
auth1_getarray_u1_cid_ed	src/trunnel/link_handshake.c	/^auth1_getarray_u1_cid_ed(auth1_t *inp)$/;"	f
auth1_getarray_u1_sid_ed	src/trunnel/link_handshake.c	/^auth1_getarray_u1_sid_ed(auth1_t *inp)$/;"	f
auth1_getlen_cid	src/trunnel/link_handshake.c	/^auth1_getlen_cid(const auth1_t *inp)$/;"	f
auth1_getlen_clog	src/trunnel/link_handshake.c	/^auth1_getlen_clog(const auth1_t *inp)$/;"	f
auth1_getlen_rand	src/trunnel/link_handshake.c	/^auth1_getlen_rand(const auth1_t *inp)$/;"	f
auth1_getlen_scert	src/trunnel/link_handshake.c	/^auth1_getlen_scert(const auth1_t *inp)$/;"	f
auth1_getlen_sid	src/trunnel/link_handshake.c	/^auth1_getlen_sid(const auth1_t *inp)$/;"	f
auth1_getlen_sig	src/trunnel/link_handshake.c	/^auth1_getlen_sig(const auth1_t *inp)$/;"	f
auth1_getlen_slog	src/trunnel/link_handshake.c	/^auth1_getlen_slog(const auth1_t *inp)$/;"	f
auth1_getlen_tlssecrets	src/trunnel/link_handshake.c	/^auth1_getlen_tlssecrets(const auth1_t *inp)$/;"	f
auth1_getlen_type	src/trunnel/link_handshake.c	/^auth1_getlen_type(const auth1_t *inp)$/;"	f
auth1_getlen_u1_cid_ed	src/trunnel/link_handshake.c	/^auth1_getlen_u1_cid_ed(const auth1_t *inp)$/;"	f
auth1_getlen_u1_sid_ed	src/trunnel/link_handshake.c	/^auth1_getlen_u1_sid_ed(const auth1_t *inp)$/;"	f
auth1_new	src/trunnel/link_handshake.c	/^auth1_new(void)$/;"	f
auth1_parse	src/trunnel/link_handshake.c	/^auth1_parse(auth1_t **output, const uint8_t *input, const size_t len_in, const auth_ctx_t *auth_ctx_ctx)$/;"	f
auth1_parse_into	src/trunnel/link_handshake.c	/^auth1_parse_into(auth1_t *obj, const uint8_t *input, const size_t len_in, const auth_ctx_t *auth_ctx_ctx)$/;"	f	file:
auth1_set_cid	src/trunnel/link_handshake.c	/^auth1_set_cid(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_clog	src/trunnel/link_handshake.c	/^auth1_set_clog(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_rand	src/trunnel/link_handshake.c	/^auth1_set_rand(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_scert	src/trunnel/link_handshake.c	/^auth1_set_scert(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_sid	src/trunnel/link_handshake.c	/^auth1_set_sid(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_sig	src/trunnel/link_handshake.c	/^auth1_set_sig(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_slog	src/trunnel/link_handshake.c	/^auth1_set_slog(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_tlssecrets	src/trunnel/link_handshake.c	/^auth1_set_tlssecrets(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_type	src/trunnel/link_handshake.c	/^auth1_set_type(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_u1_cid_ed	src/trunnel/link_handshake.c	/^auth1_set_u1_cid_ed(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_set_u1_sid_ed	src/trunnel/link_handshake.c	/^auth1_set_u1_sid_ed(auth1_t *inp, size_t idx, uint8_t elt)$/;"	f
auth1_setlen_sig	src/trunnel/link_handshake.c	/^auth1_setlen_sig(auth1_t *inp, size_t newlen)$/;"	f
auth1_st	src/trunnel/link_handshake.h	/^struct auth1_st {$/;"	s
auth1_t	src/trunnel/link_handshake.h	/^typedef struct auth1_st auth1_t;$/;"	t	typeref:struct:auth1_st
auth_cert	src/or/or.h	/^  tor_x509_cert_t *auth_cert;$/;"	m	struct:or_handshake_state_t
auth_challenge_cell_add_methods	src/trunnel/link_handshake.c	/^auth_challenge_cell_add_methods(auth_challenge_cell_t *inp, uint16_t elt)$/;"	f
auth_challenge_cell_check	src/trunnel/link_handshake.c	/^auth_challenge_cell_check(const auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_clear	src/trunnel/link_handshake.c	/^auth_challenge_cell_clear(auth_challenge_cell_t *obj)$/;"	f	file:
auth_challenge_cell_clear_errors	src/trunnel/link_handshake.c	/^auth_challenge_cell_clear_errors(auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_encode	src/trunnel/link_handshake.c	/^auth_challenge_cell_encode(uint8_t *output, const size_t avail, const auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_encoded_len	src/trunnel/link_handshake.c	/^auth_challenge_cell_encoded_len(const auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_free	src/trunnel/link_handshake.c	/^auth_challenge_cell_free(auth_challenge_cell_t *obj)$/;"	f
auth_challenge_cell_get_challenge	src/trunnel/link_handshake.c	/^auth_challenge_cell_get_challenge(const auth_challenge_cell_t *inp, size_t idx)$/;"	f
auth_challenge_cell_get_methods	src/trunnel/link_handshake.c	/^auth_challenge_cell_get_methods(auth_challenge_cell_t *inp, size_t idx)$/;"	f
auth_challenge_cell_get_n_methods	src/trunnel/link_handshake.c	/^auth_challenge_cell_get_n_methods(auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_getarray_challenge	src/trunnel/link_handshake.c	/^auth_challenge_cell_getarray_challenge(auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_getarray_methods	src/trunnel/link_handshake.c	/^auth_challenge_cell_getarray_methods(auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_getlen_challenge	src/trunnel/link_handshake.c	/^auth_challenge_cell_getlen_challenge(const auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_getlen_methods	src/trunnel/link_handshake.c	/^auth_challenge_cell_getlen_methods(const auth_challenge_cell_t *inp)$/;"	f
auth_challenge_cell_new	src/trunnel/link_handshake.c	/^auth_challenge_cell_new(void)$/;"	f
auth_challenge_cell_parse	src/trunnel/link_handshake.c	/^auth_challenge_cell_parse(auth_challenge_cell_t **output, const uint8_t *input, const size_t len_in)$/;"	f
auth_challenge_cell_parse_into	src/trunnel/link_handshake.c	/^auth_challenge_cell_parse_into(auth_challenge_cell_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
auth_challenge_cell_set_challenge	src/trunnel/link_handshake.c	/^auth_challenge_cell_set_challenge(auth_challenge_cell_t *inp, size_t idx, uint8_t elt)$/;"	f
auth_challenge_cell_set_methods	src/trunnel/link_handshake.c	/^auth_challenge_cell_set_methods(auth_challenge_cell_t *inp, size_t idx, uint16_t elt)$/;"	f
auth_challenge_cell_set_n_methods	src/trunnel/link_handshake.c	/^auth_challenge_cell_set_n_methods(auth_challenge_cell_t *inp, uint16_t val)$/;"	f
auth_challenge_cell_setlen_methods	src/trunnel/link_handshake.c	/^auth_challenge_cell_setlen_methods(auth_challenge_cell_t *inp, size_t newlen)$/;"	f
auth_challenge_cell_st	src/trunnel/link_handshake.h	/^struct auth_challenge_cell_st {$/;"	s
auth_challenge_cell_t	src/trunnel/link_handshake.h	/^typedef struct auth_challenge_cell_st auth_challenge_cell_t;$/;"	t	typeref:struct:auth_challenge_cell_st
auth_ctx_clear	src/trunnel/link_handshake.c	/^auth_ctx_clear(auth_ctx_t *obj)$/;"	f	file:
auth_ctx_free	src/trunnel/link_handshake.c	/^auth_ctx_free(auth_ctx_t *obj)$/;"	f
auth_ctx_get_is_ed	src/trunnel/link_handshake.c	/^auth_ctx_get_is_ed(auth_ctx_t *inp)$/;"	f
auth_ctx_new	src/trunnel/link_handshake.c	/^auth_ctx_new(void)$/;"	f
auth_ctx_set_is_ed	src/trunnel/link_handshake.c	/^auth_ctx_set_is_ed(auth_ctx_t *inp, uint8_t val)$/;"	f
auth_ctx_st	src/trunnel/link_handshake.h	/^struct auth_ctx_st {$/;"	s
auth_ctx_t	src/trunnel/link_handshake.h	/^typedef struct auth_ctx_st auth_ctx_t;$/;"	t	typeref:struct:auth_ctx_st
auth_data	src/or/rendservice.h	/^      uint8_t *auth_data;$/;"	m	struct:rend_intro_cell_s::__anon108::__anon111
auth_hid_servs	src/or/rendclient.c	/^static strmap_t *auth_hid_servs = NULL;$/;"	v	file:
auth_key	src/common/tortls.h	/^  crypto_pk_t *auth_key;$/;"	m	struct:tor_tls_context_t
auth_key_cert	src/or/routerkeys.c	/^static tor_cert_t *auth_key_cert = NULL;$/;"	v	file:
auth_len	src/or/rendservice.h	/^      uint16_t auth_len;$/;"	m	struct:rend_intro_cell_s::__anon108::__anon111
auth_type	src/or/or.h	/^  rend_auth_type_t auth_type;$/;"	m	struct:rend_data_t
auth_type	src/or/or.h	/^  rend_auth_type_t auth_type;$/;"	m	struct:rend_service_authorization_t
auth_type	src/or/or.h	/^  uint8_t auth_type;$/;"	m	struct:socks_request_t
auth_type	src/or/rendservice.c	/^  rend_auth_type_t auth_type; \/**< Client authorization type or 0 if no client$/;"	m	struct:rend_service_t	file:
auth_type	src/or/rendservice.h	/^      uint8_t auth_type;$/;"	m	struct:rend_intro_cell_s::__anon108::__anon111
authchallenge_data_s	src/test/test_link_handshake.c	/^typedef struct authchallenge_data_s {$/;"	s	file:
authchallenge_data_t	src/test/test_link_handshake.c	/^} authchallenge_data_t;$/;"	t	typeref:struct:authchallenge_data_s	file:
authdir_badexit_policy	src/or/policies.c	/^static smartlist_t *authdir_badexit_policy = NULL;$/;"	v	file:
authdir_config_new	src/or/dirserv.c	/^authdir_config_new(void)$/;"	f	file:
authdir_config_t	src/or/dirserv.c	/^typedef struct authdir_config_t {$/;"	s	file:
authdir_config_t	src/or/dirserv.c	/^} authdir_config_t;$/;"	t	typeref:struct:authdir_config_t	file:
authdir_invalid_policy	src/or/policies.c	/^static smartlist_t *authdir_invalid_policy = NULL;$/;"	v	file:
authdir_mode	src/or/router.c	/^authdir_mode(const or_options_t *options)$/;"	f
authdir_mode_any_main	src/or/router.c	/^authdir_mode_any_main(const or_options_t *options)$/;"	f
authdir_mode_any_nonhidserv	src/or/router.c	/^authdir_mode_any_nonhidserv(const or_options_t *options)$/;"	f
authdir_mode_bridge	src/or/router.c	/^authdir_mode_bridge(const or_options_t *options)$/;"	f
authdir_mode_handles_descs	src/or/router.c	/^authdir_mode_handles_descs(const or_options_t *options, int purpose)$/;"	f
authdir_mode_publishes_statuses	src/or/router.c	/^authdir_mode_publishes_statuses(const or_options_t *options)$/;"	f
authdir_mode_tests_reachability	src/or/router.c	/^authdir_mode_tests_reachability(const or_options_t *options)$/;"	f
authdir_mode_v3	src/or/router.c	/^authdir_mode_v3(const or_options_t *options)$/;"	f
authdir_policy_badexit_address	src/or/policies.c	/^authdir_policy_badexit_address(uint32_t addr, uint16_t port)$/;"	f
authdir_policy_permits_address	src/or/policies.c	/^authdir_policy_permits_address(uint32_t addr, uint16_t port)$/;"	f
authdir_policy_valid_address	src/or/policies.c	/^authdir_policy_valid_address(uint32_t addr, uint16_t port)$/;"	f
authdir_reject_policy	src/or/policies.c	/^static smartlist_t *authdir_reject_policy = NULL;$/;"	v	file:
authdir_type_to_string	src/or/directory.c	/^authdir_type_to_string(dirinfo_type_t auth)$/;"	f
authdir_wants_to_reject_router	src/or/dirserv.c	/^authdir_wants_to_reject_router(routerinfo_t *ri, const char **msg,$/;"	f
authenticate_data_cleanup	src/test/test_link_handshake.c	/^authenticate_data_cleanup(const struct testcase_t *test, void *arg)$/;"	f	file:
authenticate_data_s	src/test/test_link_handshake.c	/^typedef struct authenticate_data_s {$/;"	s	file:
authenticate_data_setup	src/test/test_link_handshake.c	/^authenticate_data_setup(const struct testcase_t *test)$/;"	f	file:
authenticate_data_t	src/test/test_link_handshake.c	/^} authenticate_data_t;$/;"	t	typeref:struct:authenticate_data_s	file:
authenticated	src/or/or.h	/^  unsigned int authenticated : 1;$/;"	m	struct:or_handshake_state_t
authenticated_peer_id	src/or/or.h	/^  uint8_t authenticated_peer_id[DIGEST_LEN];$/;"	m	struct:or_handshake_state_t
authentication_cookie	src/or/control.c	/^static uint8_t *authentication_cookie = NULL;$/;"	v	file:
authentication_cookie_is_set	src/or/control.c	/^static int authentication_cookie_is_set = 0;$/;"	v	file:
authority_cert_dl_failed	src/or/routerlist.c	/^authority_cert_dl_failed(const char *id_digest,$/;"	f
authority_cert_dl_looks_uncertain	src/or/routerlist.c	/^authority_cert_dl_looks_uncertain(const char *id_digest)$/;"	f
authority_cert_dup	src/or/dirvote.c	/^authority_cert_dup(authority_cert_t *cert)$/;"	f
authority_cert_free	src/or/routerlist.c	/^authority_cert_free(authority_cert_t *cert)$/;"	f
authority_cert_get_all	src/or/routerlist.c	/^authority_cert_get_all(smartlist_t *certs_out)$/;"	f
authority_cert_get_by_digests	src/or/routerlist.c	/^authority_cert_get_by_digests(const char *id_digest,$/;"	f
authority_cert_get_by_sk_digest	src/or/routerlist.c	/^authority_cert_get_by_sk_digest(const char *sk_digest)$/;"	f
authority_cert_get_newest_by_id	src/or/routerlist.c	/^authority_cert_get_newest_by_id(const char *id_digest)$/;"	f
authority_cert_is_blacklisted	src/or/routerlist.c	/^authority_cert_is_blacklisted(const authority_cert_t *cert)$/;"	f
authority_cert_parse_from_string	src/or/routerparse.c	/^authority_cert_parse_from_string(const char *s, const char **end_of_string)$/;"	f
authority_cert_t	src/or/or.h	/^typedef struct authority_cert_t {$/;"	s
authority_cert_t	src/or/or.h	/^} authority_cert_t;$/;"	t	typeref:struct:authority_cert_t
authority_certs_fetch_missing	src/or/routerlist.c	/^authority_certs_fetch_missing(networkstatus_t *status, time_t now)$/;"	f
authority_key_certificate	src/or/router.c	/^static authority_cert_t *authority_key_certificate = NULL;$/;"	v	file:
authority_signing_key	src/or/router.c	/^static crypto_pk_t *authority_signing_key = NULL;$/;"	v	file:
automap	src/or/connection_edge.h	/^  int automap;$/;"	m	struct:__anon85
b	src/ext/ed25519/donna/ed25519-randombytes.h	/^	uint32_t a, b, c;$/;"	m	struct:isaacp_state_t
b_crypto	src/or/or.h	/^  crypto_cipher_t *b_crypto;$/;"	m	struct:crypt_path_t
b_digest	src/or/or.h	/^  crypto_digest_t *b_digest;$/;"	m	struct:crypt_path_t
ba	src/common/container.h	/^  bitarray_t *ba; \/**< A bit array to implement the Bloom filter. *\/$/;"	m	struct:__anon79
bad_bridge_line_test	src/test/test_config.c	/^bad_bridge_line_test(const char *string)$/;"	f	file:
bad_sig	src/or/or.h	/^  unsigned int bad_sig : 1;$/;"	m	struct:extrainfo_t
bad_signature	src/or/or.h	/^  unsigned int bad_signature : 1; \/**< Set to true if we've tried to verify$/;"	m	struct:document_signature_t
bad_since	src/or/entrynodes.h	/^  time_t bad_since; \/**< 0 if this guard is currently usable, or the time at$/;"	m	struct:entry_guard_t
bandwidth_kb	src/or/or.h	/^  uint32_t bandwidth_kb; \/**< Bandwidth (capacity) of the router as reported in$/;"	m	struct:routerstatus_t
bandwidth_weight_rule_t	src/or/or.h	/^typedef enum bandwidth_weight_rule_t {$/;"	g
bandwidth_weight_rule_t	src/or/or.h	/^} bandwidth_weight_rule_t;$/;"	t	typeref:enum:bandwidth_weight_rule_t
bandwidth_weight_rule_to_string	src/or/reasons.c	/^bandwidth_weight_rule_to_string(bandwidth_weight_rule_t rule)$/;"	f
bandwidthburst	src/or/or.h	/^  int bandwidthburst; \/**< Max bucket size for this conn. (OPEN ORs only.) *\/$/;"	m	struct:or_connection_t
bandwidthburst	src/or/or.h	/^  uint32_t bandwidthburst; \/**< How large is this OR's token bucket? *\/$/;"	m	struct:__anon45
bandwidthcapacity	src/or/or.h	/^  uint32_t bandwidthcapacity;$/;"	m	struct:__anon45
bandwidthrate	src/or/or.h	/^  int bandwidthrate; \/**< Bytes\/s added to the bucket. (OPEN ORs only.) *\/$/;"	m	struct:or_connection_t
bandwidthrate	src/or/or.h	/^  uint32_t bandwidthrate; \/**< How many bytes does this OR add to its token$/;"	m	struct:__anon45
barrett_reduce256_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^barrett_reduce256_modm(bignum256modm r, const bignum256modm q1, const bignum256modm r1) {$/;"	f
barrett_reduce256_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^barrett_reduce256_modm(bignum256modm r, const bignum256modm q1, const bignum256modm r1) {$/;"	f
base	src/ext/ed25519/ref10/ge_scalarmult_base.c	/^static ge_precomp base[32][8] = {$/;"	v	file:
base16_decode	src/common/util_format.c	/^base16_decode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base16_encode	src/common/util_format.c	/^base16_encode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base32_decode	src/common/util_format.c	/^base32_decode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base32_encode	src/common/util_format.c	/^base32_encode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base64_decode	src/common/util_format.c	/^base64_decode(char *dest, size_t destlen, const char *src, size_t srclen)$/;"	f
base64_decode_nopad	src/common/util_format.c	/^base64_decode_nopad(uint8_t *dest, size_t destlen,$/;"	f
base64_decode_table	src/common/util_format.c	/^static const uint8_t base64_decode_table[256] = {$/;"	v	file:
base64_encode	src/common/util_format.c	/^base64_encode(char *dest, size_t destlen, const char *src, size_t srclen,$/;"	f
base64_encode_evp	src/test/test_crypto.c	/^base64_encode_evp(char *dest, char *src, size_t srclen)$/;"	f	file:
base64_encode_nopad	src/common/util_format.c	/^base64_encode_nopad(char *dest, size_t destlen,$/;"	f
base64_encode_size	src/common/util_format.c	/^base64_encode_size(size_t srclen, int flags)$/;"	f
base64_encode_table	src/common/util_format.c	/^static const char base64_encode_table[64] = {$/;"	v	file:
base_	src/or/channeltls.h	/^  channel_t base_;$/;"	m	struct:channel_tls_s
base_	src/or/circuitmux_ewma.c	/^  circuitmux_policy_circ_data_t base_;$/;"	m	struct:ewma_policy_circ_data_s	file:
base_	src/or/circuitmux_ewma.c	/^  circuitmux_policy_data_t base_;$/;"	m	struct:ewma_policy_data_s	file:
base_	src/or/or.h	/^  circuit_t base_;$/;"	m	struct:or_circuit_t
base_	src/or/or.h	/^  circuit_t base_;$/;"	m	struct:origin_circuit_t
base_	src/or/or.h	/^  connection_t base_;$/;"	m	struct:control_connection_t
base_	src/or/or.h	/^  connection_t base_;$/;"	m	struct:dir_connection_t
base_	src/or/or.h	/^  connection_t base_;$/;"	m	struct:edge_connection_t
base_	src/or/or.h	/^  connection_t base_;$/;"	m	struct:listener_connection_t
base_	src/or/or.h	/^  connection_t base_;$/;"	m	struct:or_connection_t
batch_heap	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^} batch_heap;$/;"	t	typeref:struct:batch_heap_t
batch_heap_t	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^typedef struct batch_heap_t {$/;"	s
batch_point_buffer	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^unsigned char batch_point_buffer[3][32];$/;"	v
begin_cell_parse	src/or/connection_edge.c	/^begin_cell_parse(const cell_t *cell, begin_cell_t *bcell,$/;"	f
begin_cell_t	src/or/connection_edge.h	/^typedef struct begin_cell_t {$/;"	s
begin_cell_t	src/or/connection_edge.h	/^} begin_cell_t;$/;"	t	typeref:struct:begin_cell_t
begincell_flags	src/or/or.h	/^  uint32_t begincell_flags; \/** Flags sent or received in the BEGIN cell$/;"	m	struct:edge_connection_t
below_threshold	src/or/rephist.c	/^static uint32_t below_threshold = 0;$/;"	v	file:
bench_aes	src/test/bench.c	/^bench_aes(void)$/;"	f	file:
bench_cell_aes	src/test/bench.c	/^bench_cell_aes(void)$/;"	f	file:
bench_cell_ops	src/test/bench.c	/^bench_cell_ops(void)$/;"	f	file:
bench_dh	src/test/bench.c	/^bench_dh(void)$/;"	f	file:
bench_dmap	src/test/bench.c	/^bench_dmap(void)$/;"	f	file:
bench_ecdh_impl	src/test/bench.c	/^bench_ecdh_impl(int nid, const char *name)$/;"	f	file:
bench_ecdh_p224	src/test/bench.c	/^bench_ecdh_p224(void)$/;"	f	file:
bench_ecdh_p256	src/test/bench.c	/^bench_ecdh_p256(void)$/;"	f	file:
bench_ed25519	src/test/bench.c	/^bench_ed25519(void)$/;"	f	file:
bench_ed25519_impl	src/test/bench.c	/^bench_ed25519_impl(void)$/;"	f	file:
bench_fn	src/test/bench.c	/^typedef void (*bench_fn)(void);$/;"	t	file:
bench_onion_TAP	src/test/bench.c	/^bench_onion_TAP(void)$/;"	f	file:
bench_onion_ntor	src/test/bench.c	/^bench_onion_ntor(void)$/;"	f	file:
bench_onion_ntor_impl	src/test/bench.c	/^bench_onion_ntor_impl(void)$/;"	f	file:
bench_siphash	src/test/bench.c	/^bench_siphash(void)$/;"	f	file:
benchmark_t	src/test/bench.c	/^typedef struct benchmark_t {$/;"	s	file:
benchmark_t	src/test/bench.c	/^} benchmark_t;$/;"	t	typeref:struct:benchmark_t	file:
benchmarks	src/test/bench.c	/^static struct benchmark_t benchmarks[] = {$/;"	v	typeref:struct:benchmark_t	file:
bidi_map_ent_eq	src/or/rephist.c	/^bidi_map_ent_eq(const bidi_map_entry_t *a, const bidi_map_entry_t *b)$/;"	f	file:
bidi_map_ent_hash	src/or/rephist.c	/^bidi_map_ent_hash(const bidi_map_entry_t *entry)$/;"	f	file:
bidi_map_entry_t	src/or/rephist.c	/^typedef struct bidi_map_entry_t {$/;"	s	file:
bidi_map_entry_t	src/or/rephist.c	/^} bidi_map_entry_t;$/;"	t	typeref:struct:bidi_map_entry_t	file:
bidi_map_free	src/or/rephist.c	/^bidi_map_free(void)$/;"	f	file:
bidi_next_interval	src/or/rephist.c	/^static time_t bidi_next_interval = 0;$/;"	v	file:
bignum25519	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^typedef uint32_t bignum25519[10];$/;"	t
bignum25519	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^typedef uint64_t bignum25519[5];$/;"	t
bignum25519	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^typedef uint32_t bignum25519[12];$/;"	t
bignum25519align16	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^typedef uint32_t bignum25519align16[12];$/;"	t
bignum256modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^typedef bignum256modm_element_t bignum256modm[9];$/;"	t
bignum256modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^typedef bignum256modm_element_t bignum256modm[5];$/;"	t
bignum256modm_bits_per_limb	src/ext/ed25519/donna/modm-donna-32bit.h	/^#define bignum256modm_bits_per_limb /;"	d
bignum256modm_bits_per_limb	src/ext/ed25519/donna/modm-donna-64bit.h	/^#define bignum256modm_bits_per_limb /;"	d
bignum256modm_element_t	src/ext/ed25519/donna/modm-donna-32bit.h	/^typedef uint32_t bignum256modm_element_t;$/;"	t
bignum256modm_element_t	src/ext/ed25519/donna/modm-donna-64bit.h	/^typedef uint64_t bignum256modm_element_t;$/;"	t
bignum256modm_limb_size	src/ext/ed25519/donna/modm-donna-32bit.h	/^#define bignum256modm_limb_size /;"	d
bignum256modm_limb_size	src/ext/ed25519/donna/modm-donna-64bit.h	/^#define bignum256modm_limb_size /;"	d
binary	src/common/util.c	/^  unsigned binary:1; \/**< Did we open in binary mode? *\/$/;"	m	struct:open_file_t	file:
bind_ipv4_only	src/or/or.h	/^  unsigned int bind_ipv4_only : 1;$/;"	m	struct:server_port_cfg_t
bind_ipv6_only	src/or/or.h	/^  unsigned int bind_ipv6_only : 1;$/;"	m	struct:server_port_cfg_t
bitarray_clear	src/common/container.h	/^bitarray_clear(bitarray_t *b, int bit)$/;"	f
bitarray_expand	src/common/container.h	/^bitarray_expand(bitarray_t *ba,$/;"	f
bitarray_free	src/common/container.h	/^bitarray_free(bitarray_t *ba)$/;"	f
bitarray_init_zero	src/common/container.h	/^bitarray_init_zero(unsigned int n_bits)$/;"	f
bitarray_is_set	src/common/container.h	/^bitarray_is_set(bitarray_t *b, int bit)$/;"	f
bitarray_set	src/common/container.h	/^bitarray_set(bitarray_t *b, int bit)$/;"	f
bitarray_t	src/common/container.h	/^typedef unsigned int bitarray_t;$/;"	t
bitmap_mutex	src/test/test_workqueue.c	/^tor_mutex_t bitmap_mutex;$/;"	v
bits	src/or/addressmap.h	/^  maskbits_t bits;$/;"	m	struct:virtual_addr_conf_t
blind_public_key	src/common/crypto_ed25519.c	/^  int (*blind_public_key)(unsigned char *, const unsigned char *,$/;"	m	struct:__anon15	file:
blind_secret_key	src/common/crypto_ed25519.c	/^  int (*blind_secret_key)(unsigned char *, const unsigned char *,$/;"	m	struct:__anon15	file:
block_event_queue	src/or/control.c	/^static tor_threadlocal_t block_event_queue;$/;"	v	file:
body	src/or/dirvote.c	/^  char *body;$/;"	m	struct:pending_consensus_t	file:
body	src/or/networkstatus.c	/^  char *body;$/;"	m	struct:consensus_waiting_for_certs_t	file:
body	src/or/or.h	/^  char *body;$/;"	m	struct:microdesc_t
body	src/or/or.h	/^  char body[CELL_MAX_NETWORK_SIZE]; \/**< Cell as packed for network. *\/$/;"	m	struct:packed_cell_t
body	src/or/or.h	/^  char body[FLEXIBLE_ARRAY_MEMBER]; \/** Message body *\/$/;"	m	struct:ext_or_cmd_t
body	src/trunnel/link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) body;$/;"	m	struct:certs_cell_cert_st
body_is_plausible	src/or/directory.c	/^body_is_plausible(const char *body, size_t len, int purpose)$/;"	f	file:
bodylen	src/or/or.h	/^  size_t bodylen;$/;"	m	struct:microdesc_t
bool_eq	src/common/util.h	/^#define bool_eq(/;"	d
bool_neq	src/common/util.h	/^#define bool_neq(/;"	d
bootstrap_percent	src/or/control.c	/^static int bootstrap_percent = BOOTSTRAP_STATUS_UNDEF;$/;"	v	file:
bootstrap_problems	src/or/control.c	/^static int bootstrap_problems = 0;$/;"	v	file:
bootstrap_status_t	src/or/or.h	/^} bootstrap_status_t;$/;"	t	typeref:enum:__anon64
bootstrap_status_to_string	src/or/control.c	/^bootstrap_status_to_string(bootstrap_status_t s, const char **tag,$/;"	f	file:
bot32bitmask	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 bot32bitmask = {{0xffffffff, 0x00000000, 0xffffffff, 0x00000000}};$/;"	v
bot64bitmask	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 bot64bitmask = {{0xffffffff, 0xffffffff, 0x00000000, 0x00000000}};$/;"	v
both_read_and_written	src/or/rephist.c	/^static uint32_t both_read_and_written = 0;$/;"	v	file:
bridge_add_from_config	src/or/entrynodes.c	/^bridge_add_from_config(bridge_line_t *bridge_line)$/;"	f
bridge_free	src/or/entrynodes.c	/^bridge_free(bridge_info_t *bridge)$/;"	f	file:
bridge_get_advertised_bandwidth_bounded	src/or/routerlist.c	/^bridge_get_advertised_bandwidth_bounded(routerinfo_t *router)$/;"	f	file:
bridge_has_digest	src/or/entrynodes.c	/^bridge_has_digest(const bridge_info_t *bridge, const char *digest)$/;"	f	file:
bridge_info_t	src/or/entrynodes.c	/^} bridge_info_t;$/;"	t	typeref:struct:__anon32	file:
bridge_line_free	src/or/config.c	/^bridge_line_free(bridge_line_t *bridge_line)$/;"	f
bridge_line_t	src/or/config.h	/^typedef struct bridge_line_t {$/;"	s
bridge_line_t	src/or/config.h	/^} bridge_line_t;$/;"	t	typeref:struct:bridge_line_t
bridge_list	src/or/entrynodes.c	/^static smartlist_t *bridge_list = NULL;$/;"	v	file:
bridge_resolve_conflicts	src/or/entrynodes.c	/^bridge_resolve_conflicts(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
bridge_stats_extrainfo	src/or/geoip.c	/^static char *bridge_stats_extrainfo = NULL;$/;"	v	file:
broken_connection_counts	src/or/connection_or.c	/^static strmap_t *broken_connection_counts;$/;"	v	file:
broken_state_count_compare	src/or/connection_or.c	/^broken_state_count_compare(const void **a_ptr, const void **b_ptr)$/;"	f	file:
broken_state_count_t	src/or/connection_or.c	/^typedef struct broken_state_count_t {$/;"	s	file:
broken_state_count_t	src/or/connection_or.c	/^} broken_state_count_t;$/;"	t	typeref:struct:broken_state_count_t	file:
bt_version	src/common/backtrace.c	/^static char *bt_version = NULL;$/;"	v	file:
bucket_cfg	src/or/or.h	/^  struct ev_token_bucket_cfg *bucket_cfg;$/;"	m	struct:or_connection_t	typeref:struct:or_connection_t::ev_token_bucket_cfg
bucket_millis_empty	src/or/connection.c	/^bucket_millis_empty(int tokens_before, uint32_t last_empty_time,$/;"	f
buf	src/common/aes.c	/^    uint8_t buf[16];$/;"	m	union:aes_cnt_cipher::__anon107	file:
buf	src/common/aes.c	/^  uint8_t buf[16];$/;"	m	struct:aes_cnt_cipher	file:
buf	src/test/test_socks.c	/^  buf_t *buf;$/;"	m	struct:socks_test_data_t	file:
buf32	src/common/aes.c	/^    uint32_t buf32[4];$/;"	m	union:aes_cnt_cipher::__anon107	file:
buf_add_chunk_with_capacity	src/or/buffers.c	/^buf_add_chunk_with_capacity(buf_t *buf, size_t capacity, int capped)$/;"	f	file:
buf_allocation	src/or/buffers.c	/^buf_allocation(const buf_t *buf)$/;"	f
buf_clear	src/or/buffers.c	/^buf_clear(buf_t *buf)$/;"	f
buf_copy	src/or/buffers.c	/^buf_copy(const buf_t *buf)$/;"	f
buf_find_offset_of_char	src/or/buffers.c	/^buf_find_offset_of_char(buf_t *buf, char ch)$/;"	f	file:
buf_find_pos_of_char	src/or/buffers.c	/^buf_find_pos_of_char(char ch, buf_pos_t *out)$/;"	f	file:
buf_find_string_offset	src/or/buffers.c	/^buf_find_string_offset(const buf_t *buf, const char *s, size_t n)$/;"	f
buf_free	src/or/buffers.c	/^buf_free(buf_t *buf)$/;"	f
buf_get_contents	src/test/test_extorport.c	/^buf_get_contents(buf_t *buf, size_t *sz_out)$/;"	f	file:
buf_get_default_chunk_size	src/or/buffers.c	/^buf_get_default_chunk_size(const buf_t *buf)$/;"	f
buf_get_first_chunk_data	src/or/buffers.c	/^buf_get_first_chunk_data(const buf_t *buf, const char **cp, size_t *sz)$/;"	f
buf_get_oldest_chunk_timestamp	src/or/buffers.c	/^buf_get_oldest_chunk_timestamp(const buf_t *buf, uint32_t now)$/;"	f
buf_get_total_allocation	src/or/buffers.c	/^buf_get_total_allocation(void)$/;"	f
buf_matches_at_pos	src/or/buffers.c	/^buf_matches_at_pos(const buf_pos_t *pos, const char *s, size_t n)$/;"	f	file:
buf_new	src/or/buffers.c	/^buf_new(void)$/;"	f
buf_new_with_capacity	src/or/buffers.c	/^buf_new_with_capacity(size_t size)$/;"	f
buf_pos_inc	src/or/buffers.c	/^buf_pos_inc(buf_pos_t *pos)$/;"	f	file:
buf_pos_init	src/or/buffers.c	/^buf_pos_init(const buf_t *buf, buf_pos_t *out)$/;"	f	file:
buf_pos_t	src/or/buffers.c	/^typedef struct buf_pos_t {$/;"	s	file:
buf_pos_t	src/or/buffers.c	/^} buf_pos_t;$/;"	t	typeref:struct:buf_pos_t	file:
buf_pullup	src/or/buffers.c	/^buf_pullup(buf_t *buf, size_t bytes)$/;"	f
buf_remove_from_front	src/or/buffers.c	/^buf_remove_from_front(buf_t *buf, size_t n)$/;"	f	file:
buf_slack	src/or/buffers.c	/^buf_slack(const buf_t *buf)$/;"	f
buf_t	src/or/buffers.h	/^struct buf_t {$/;"	s
buf_t	src/or/or.h	/^typedef struct buf_t buf_t;$/;"	t	typeref:struct:buf_t
bufev	src/or/or.h	/^  struct bufferevent *bufev; \/**< A Libevent buffered IO structure. *\/$/;"	m	struct:connection_t	typeref:struct:connection_t::bufferevent
buffer	src/ext/ed25519/donna/ed25519-hash.h	/^	uint8_t buffer[HASH_BLOCK_SIZE];$/;"	m	struct:sha512_state_t
buffer	src/ext/ed25519/donna/ed25519-randombytes.h	/^	unsigned char buffer[1024];$/;"	m	struct:isaacp_state_t
buffer_stats_compare_entries_	src/or/rephist.c	/^buffer_stats_compare_entries_(const void **_a, const void **_b)$/;"	f	file:
buffer_tests	src/test/test_buffers.c	/^struct testcase_t buffer_tests[] = {$/;"	v	typeref:struct:testcase_t
bug_suffix	src/common/log.c	/^const char bug_suffix[] = " (on Tor " VERSION$/;"	v
build_socks_resolve_request	src/tools/tor-resolve.c	/^build_socks_resolve_request(char **out,$/;"	f	file:
build_state	src/or/or.h	/^  cpath_build_state_t *build_state;$/;"	m	struct:origin_circuit_t
build_state_get_exit_nickname	src/or/circuitbuild.c	/^build_state_get_exit_nickname(cpath_build_state_t *state)$/;"	f
build_state_get_exit_node	src/or/circuitbuild.c	/^build_state_get_exit_node(cpath_build_state_t *state)$/;"	f
build_time_t	src/or/or.h	/^typedef uint32_t build_time_t;$/;"	t
build_times_idx	src/or/circuitstats.h	/^  int build_times_idx;$/;"	m	struct:circuit_build_times_s
buildtimeout_set_event_t	src/or/or.h	/^typedef enum buildtimeout_set_event_t {$/;"	g
buildtimeout_set_event_t	src/or/or.h	/^} buildtimeout_set_event_t;$/;"	t	typeref:enum:buildtimeout_set_event_t
bw_array_new	src/or/rephist.c	/^bw_array_new(void)$/;"	f	file:
bw_array_t	src/or/rephist.c	/^typedef struct bw_array_t {$/;"	s	file:
bw_array_t	src/or/rephist.c	/^} bw_array_t;$/;"	t	typeref:struct:bw_array_t	file:
bw_arrays_init	src/or/rephist.c	/^bw_arrays_init(void)$/;"	f	file:
bw_is_unmeasured	src/or/or.h	/^  unsigned int bw_is_unmeasured:1; \/**< This is a consensus entry, with$/;"	m	struct:routerstatus_t
bw_kb	src/or/or.h	/^  long int bw_kb;$/;"	m	struct:measured_bw_line_t
bw_weights_error_t	src/or/dirvote.c	/^} bw_weights_error_t;$/;"	t	typeref:enum:__anon98	file:
by_both_ids	src/or/dircollate.c	/^double_digest_map_t *by_both_ids;$/;"	v
by_both_ids	src/or/dircollate.h	/^  struct double_digest_map by_both_ids;$/;"	m	struct:dircollator_s	typeref:struct:dircollator_s::double_digest_map
by_collated_rsa_sha1	src/or/dircollate.h	/^  digestmap_t *by_collated_rsa_sha1;$/;"	m	struct:dircollator_s
by_rsa_sha1	src/or/dircollate.h	/^  digestmap_t *by_rsa_sha1;$/;"	m	struct:dircollator_s
bytes	src/common/util.h	/^  const char *bytes;$/;"	m	struct:sized_chunk_t
bytes	src/or/directory.c	/^  uint64_t bytes; \/**< How many bytes have we transferred? *\/$/;"	m	struct:request_t	file:
bytes_dropped	src/or/microdesc.c	/^  size_t bytes_dropped;$/;"	m	struct:microdesc_cache_t	file:
bytes_dropped	src/or/or.h	/^  size_t bytes_dropped;$/;"	m	struct:desc_store_t
bytes_in_queue	src/or/channel.h	/^  uint64_t bytes_in_queue;$/;"	m	struct:channel_s
bytes_queued_for_xmit	src/or/channel.h	/^  uint64_t bytes_queued_for_xmit;$/;"	m	struct:channel_s
bytes_to_usage	src/or/status.c	/^bytes_to_usage(uint64_t bytes)$/;"	f
bytes_xmitted	src/or/or.h	/^  uint64_t bytes_xmitted, bytes_xmitted_by_tls;$/;"	m	struct:or_connection_t
bytes_xmitted_by_tls	src/or/or.h	/^  uint64_t bytes_xmitted, bytes_xmitted_by_tls;$/;"	m	struct:or_connection_t
c	src/ext/ed25519/donna/ed25519-randombytes.h	/^	uint32_t a, b, c;$/;"	m	struct:isaacp_state_t
c	src/test/test_link_handshake.c	/^  or_connection_t *c;$/;"	m	struct:authchallenge_data_s	file:
c	src/test/test_link_handshake.c	/^  or_connection_t *c;$/;"	m	struct:certs_data_s	file:
c1	src/test/test_link_handshake.c	/^  or_connection_t *c1, *c2;$/;"	m	struct:authenticate_data_s	file:
c2	src/test/test_link_handshake.c	/^  or_connection_t *c1, *c2;$/;"	m	struct:authenticate_data_s	file:
c_hist_compare_	src/or/geoip.c	/^c_hist_compare_(const void **_a, const void **_b)$/;"	f	file:
c_hist_t	src/or/geoip.c	/^typedef struct c_hist_t {$/;"	s	file:
c_hist_t	src/or/geoip.c	/^} c_hist_t;$/;"	t	typeref:struct:c_hist_t	file:
caCertString	src/test/test_tortls.c	/^static const char* caCertString = "-----BEGIN CERTIFICATE-----\\n"$/;"	v	file:
cache_content	src/or/microdesc.c	/^  tor_mmap_t *cache_content;$/;"	m	struct:microdesc_cache_t	file:
cache_entry	src/test/test_dns.c	/^static cached_resolve_t *cache_entry = NULL;$/;"	v	file:
cache_failure_intro_add	src/or/rendcache.c	/^cache_failure_intro_add(const uint8_t *identity, const char *service_id,$/;"	f
cache_failure_intro_lookup	src/or/rendcache.c	/^cache_failure_intro_lookup(const uint8_t *identity, const char *service_id,$/;"	f
cache_fname	src/or/microdesc.c	/^  char *cache_fname;$/;"	m	struct:microdesc_cache_t	file:
cache_info	src/or/or.h	/^  signed_descriptor_t cache_info;$/;"	m	struct:__anon45
cache_info	src/or/or.h	/^  signed_descriptor_t cache_info;$/;"	m	struct:authority_cert_t
cache_info	src/or/or.h	/^  signed_descriptor_t cache_info;$/;"	m	struct:extrainfo_t
cache_ipv4_answers	src/or/or.h	/^  unsigned int cache_ipv4_answers : 1;$/;"	m	struct:entry_port_cfg_t
cache_ipv6_answers	src/or/or.h	/^  unsigned int cache_ipv6_answers : 1;$/;"	m	struct:entry_port_cfg_t
cached_approx_time	src/common/util.c	/^static time_t cached_approx_time = 0;$/;"	v	file:
cached_bw_event_s	src/or/control.c	/^static struct cached_bw_event_s {$/;"	s	file:
cached_bw_events	src/or/control.c	/^} cached_bw_events[N_BW_EVENTS_TO_CACHE];$/;"	v	typeref:struct:cached_bw_event_s	file:
cached_consensuses	src/or/dirserv.c	/^static strmap_t *cached_consensuses = NULL;$/;"	v	file:
cached_dir	src/or/or.h	/^  struct cached_dir_t *cached_dir;$/;"	m	struct:dir_connection_t	typeref:struct:dir_connection_t::cached_dir_t
cached_dir_decref	src/or/dirserv.c	/^cached_dir_decref(cached_dir_t *d)$/;"	f
cached_dir_offset	src/or/or.h	/^  off_t cached_dir_offset;$/;"	m	struct:dir_connection_t
cached_dir_t	src/or/or.h	/^typedef struct cached_dir_t {$/;"	s
cached_dir_t	src/or/or.h	/^} cached_dir_t;$/;"	t	typeref:struct:cached_dir_t
cached_getaddrinfo_item_free	src/common/sandbox.c	/^cached_getaddrinfo_item_free(cached_getaddrinfo_item_t *item)$/;"	f	file:
cached_getaddrinfo_item_hash	src/common/sandbox.c	/^cached_getaddrinfo_item_hash(const cached_getaddrinfo_item_t *item)$/;"	f	file:
cached_getaddrinfo_item_t	src/common/sandbox.c	/^typedef struct cached_getaddrinfo_item_t {$/;"	s	file:
cached_getaddrinfo_item_t	src/common/sandbox.c	/^} cached_getaddrinfo_item_t;$/;"	t	typeref:struct:cached_getaddrinfo_item_t	file:
cached_getaddrinfo_items_eq	src/common/sandbox.c	/^cached_getaddrinfo_items_eq(const cached_getaddrinfo_item_t *a,$/;"	f	file:
cached_resolve_add_answer	src/or/dns.c	/^cached_resolve_add_answer(cached_resolve_t *resolve,$/;"	f	file:
cached_resolve_hash	src/or/dns.c	/^cached_resolve_hash(cached_resolve_t *a)$/;"	f	file:
cached_resolve_have_all_answers	src/or/dns.c	/^cached_resolve_have_all_answers(const cached_resolve_t *resolve)$/;"	f	file:
cached_resolve_pqueue	src/or/dns.c	/^static smartlist_t *cached_resolve_pqueue = NULL;$/;"	v	file:
cached_resolve_t	src/or/dns_structs.h	/^typedef struct cached_resolve_t {$/;"	s
cached_resolve_t	src/or/dns_structs.h	/^} cached_resolve_t;$/;"	t	typeref:struct:cached_resolve_t
cached_resolves_eq	src/or/dns.c	/^cached_resolves_eq(cached_resolve_t *a, cached_resolve_t *b)$/;"	f	file:
cached_time_hires	src/common/compat_libevent.c	/^static struct timeval cached_time_hires = {0, 0};$/;"	v	typeref:struct:timeval	file:
caches_extra_info	src/or/or.h	/^  unsigned int caches_extra_info:1; \/**< Whether the router says it caches and$/;"	m	struct:__anon45
callback	src/common/log.c	/^  log_callback callback; \/**< If not NULL, send messages to this function. *\/$/;"	m	struct:logfile_t	file:
callback_arg	src/common/tortls.h	/^  void *callback_arg;$/;"	m	struct:tor_tls_t
called_loop_once	src/or/main.c	/^static int called_loop_once = 0;$/;"	v	file:
cam	src/test/test_circuitlist.c	/^} cam;$/;"	v	typeref:struct:__anon77	file:
can_complete_circuits	src/or/main.c	/^static int can_complete_circuits = 0;$/;"	v	file:
can_reach_dir_port	src/or/router.c	/^static int can_reach_dir_port = 0;$/;"	v	file:
can_reach_or_port	src/or/router.c	/^static int can_reach_or_port = 0;$/;"	v	file:
can_retry	src/or/entrynodes.h	/^  unsigned int can_retry : 1; \/**< Should we retry connecting to this entry,$/;"	m	struct:entry_guard_t
capacity	src/common/container.h	/^  int capacity;$/;"	m	struct:smartlist_t
carry_final	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^	#undef carry_final$/;"	d
carry_final	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	#undef carry_final$/;"	d
carry_full	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^	#undef carry_full$/;"	d
carry_full	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	#undef carry_full$/;"	d
carry_pass	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^	#define carry_pass(/;"	d
carry_pass	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^	#undef carry_pass$/;"	d
carry_pass	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	#define carry_pass(/;"	d
carry_pass	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	#undef carry_pass$/;"	d
carry_pass_final	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^	#define carry_pass_final(/;"	d
carry_pass_final	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	#define carry_pass_final(/;"	d
carry_pass_full	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^	#define carry_pass_full(/;"	d
carry_pass_full	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	#define carry_pass_full(/;"	d
cases	src/ext/tinytest.h	/^	struct testcase_t *cases; \/** Array, ending with END_OF_TESTCASES *\/$/;"	m	struct:testgroup_t	typeref:struct:testgroup_t::testcase_t
cb	src/common/compat_libevent.c	/^  void (*cb)(struct periodic_timer_t *, void *);$/;"	m	struct:periodic_timer_t	file:
cb	src/common/procmon.c	/^  tor_procmon_callback_t cb;$/;"	m	struct:tor_process_monitor_t	file:
cb_arg	src/common/procmon.c	/^  void *cb_arg; \/**< A user-specified pointer to be passed to cb. *\/$/;"	m	struct:tor_process_monitor_t	file:
cb_buf	src/common/backtrace.c	/^static void *cb_buf[MAX_DEPTH];$/;"	v	file:
cb_buf_mutex	src/common/backtrace.c	/^static tor_mutex_t cb_buf_mutex;$/;"	v	file:
cbt_control_event_buildtimeout_set	src/or/circuitstats.c	/^cbt_control_event_buildtimeout_set(const circuit_build_times_t *cbt,$/;"	f	file:
ccell	src/test/test_link_handshake.c	/^  certs_cell_t *ccell;$/;"	m	struct:certs_data_s	file:
cdm	src/test/test_circuitlist.c	/^} cdm;$/;"	v	typeref:struct:__anon78	file:
cell	src/or/channel.h	/^      cell_t *cell;$/;"	m	struct:cell_queue_entry_s::__anon92::__anon93
cell	src/test/test_link_handshake.c	/^  var_cell_t *cell;$/;"	m	struct:authchallenge_data_s	file:
cell	src/test/test_link_handshake.c	/^  var_cell_t *cell;$/;"	m	struct:authenticate_data_s	file:
cell	src/test/test_link_handshake.c	/^  var_cell_t *cell;$/;"	m	struct:certs_data_s	file:
cell	src/test/test_relay.c	/^  cell_t *cell;$/;"	m	struct:relay_connection_test_data_t	file:
cell_command_is_var_length	src/or/buffers.c	/^cell_command_is_var_length(uint8_t command, int linkproto)$/;"	f	file:
cell_command_to_string	src/or/command.c	/^cell_command_to_string(uint8_t command)$/;"	f
cell_count	src/or/circuitmux.c	/^  unsigned int cell_count;$/;"	m	struct:circuit_muxinfo_s	file:
cell_count	src/or/circuitmux_ewma.c	/^  double cell_count;$/;"	m	struct:cell_ewma_s	file:
cell_direction_t	src/or/or.h	/^} cell_direction_t;$/;"	t	typeref:enum:__anon37
cell_ewma	src/or/circuitmux_ewma.c	/^  cell_ewma_t cell_ewma;$/;"	m	struct:ewma_policy_circ_data_s	file:
cell_ewma_enabled	src/test/test_config.c	/^NS(cell_ewma_enabled)(void)$/;"	f	file:
cell_ewma_get_tick	src/or/circuitmux_ewma.c	/^cell_ewma_get_tick(void)$/;"	f
cell_ewma_s	src/or/circuitmux_ewma.c	/^struct cell_ewma_s {$/;"	s	file:
cell_ewma_set_scale_factor	src/or/circuitmux_ewma.c	/^cell_ewma_set_scale_factor(const or_options_t *options,$/;"	f
cell_ewma_t	src/or/circuitmux_ewma.c	/^typedef struct cell_ewma_s cell_ewma_t;$/;"	t	typeref:struct:cell_ewma_s	file:
cell_ewma_tick_from_timeval	src/or/circuitmux_ewma.c	/^cell_ewma_tick_from_timeval(const struct timeval *now,$/;"	f	file:
cell_ewma_to_circuit	src/or/circuitmux_ewma.c	/^cell_ewma_to_circuit(cell_ewma_t *ewma)$/;"	f	file:
cell_format_tests	src/test/test_cell_formats.c	/^struct testcase_t cell_format_tests[] = {$/;"	v	typeref:struct:testcase_t
cell_handler	src/or/channel.h	/^  channel_cell_handler_fn_ptr cell_handler;$/;"	m	struct:channel_s
cell_pack	src/or/connection_or.c	/^cell_pack(packed_cell_t *dst, const cell_t *src, int wide_circ_ids)$/;"	f
cell_queue_append	src/or/relay.c	/^cell_queue_append(cell_queue_t *queue, packed_cell_t *cell)$/;"	f
cell_queue_append_packed_copy	src/or/relay.c	/^cell_queue_append_packed_copy(circuit_t *circ, cell_queue_t *queue,$/;"	f
cell_queue_clear	src/or/relay.c	/^cell_queue_clear(cell_queue_t *queue)$/;"	f
cell_queue_entry_dup	src/or/channel.c	/^cell_queue_entry_dup(cell_queue_entry_t *q)$/;"	f	file:
cell_queue_entry_free	src/or/channel.c	/^cell_queue_entry_free(cell_queue_entry_t *q, int handed_off)$/;"	f
cell_queue_entry_new_fixed	src/or/channel.c	/^cell_queue_entry_new_fixed(cell_t *cell)$/;"	f	file:
cell_queue_entry_new_var	src/or/channel.c	/^cell_queue_entry_new_var(var_cell_t *var_cell)$/;"	f	file:
cell_queue_entry_s	src/or/channel.h	/^struct cell_queue_entry_s {$/;"	s
cell_queue_entry_t	src/or/channel.h	/^typedef struct cell_queue_entry_s cell_queue_entry_t;$/;"	t	typeref:struct:cell_queue_entry_s
cell_queue_init	src/or/relay.c	/^cell_queue_init(cell_queue_t *queue)$/;"	f
cell_queue_pop	src/or/relay.c	/^cell_queue_pop(cell_queue_t *queue)$/;"	f
cell_queue_t	src/or/or.h	/^typedef struct cell_queue_t {$/;"	s
cell_queue_t	src/or/or.h	/^} cell_queue_t;$/;"	t	typeref:struct:cell_queue_t
cell_queue_tests	src/test/test_cell_queue.c	/^struct testcase_t cell_queue_tests[] = {$/;"	v	typeref:struct:testcase_t
cell_queues_check_size	src/or/relay.c	/^cell_queues_check_size(void)$/;"	f
cell_queues_get_total_allocation	src/or/relay.c	/^cell_queues_get_total_allocation(void)$/;"	f
cell_stats_t	src/or/control.h	/^typedef struct cell_stats_t {$/;"	s
cell_stats_t	src/or/control.h	/^} cell_stats_t;$/;"	t	typeref:struct:cell_stats_t
cell_t	src/or/or.h	/^#define cell_t /;"	d
cell_t	src/or/or.h	/^typedef struct cell_t {$/;"	s
cell_t	src/or/or.h	/^} cell_t;$/;"	t	typeref:struct:cell_t
cell_type	src/or/onion.h	/^  uint8_t cell_type;$/;"	m	struct:create_cell_t
cell_type	src/or/onion.h	/^  uint8_t cell_type;$/;"	m	struct:created_cell_t
cell_type	src/or/onion.h	/^  uint8_t cell_type;$/;"	m	struct:extend_cell_t
cell_type	src/or/onion.h	/^  uint8_t cell_type;$/;"	m	struct:extended_cell_t
cell_unpack	src/or/connection_or.c	/^cell_unpack(cell_t *dest, const char *src, int wide_circ_ids)$/;"	f	file:
cells	src/test/test_scheduler.c	/^  ssize_t cells;$/;"	m	struct:__anon113	file:
cert	src/common/tortls.h	/^  X509 *cert;$/;"	m	struct:tor_x509_cert_t
cert	src/or/or.h	/^  struct authority_cert_t *cert; \/**< Vote only: the voter's certificate. *\/$/;"	m	struct:networkstatus_t	typeref:struct:networkstatus_t::authority_cert_t
cert_digests	src/common/tortls.h	/^  digests_t cert_digests;$/;"	m	struct:tor_x509_cert_t
cert_expiration_time	src/or/or.h	/^  time_t cert_expiration_time;$/;"	m	struct:__anon45
cert_expired	src/or/torcert.h	/^  unsigned cert_expired : 1;$/;"	m	struct:tor_cert_st
cert_key_type	src/trunnel/ed25519_cert.h	/^  uint8_t cert_key_type;$/;"	m	struct:ed25519_cert_st
cert_len	src/trunnel/link_handshake.h	/^  uint16_t cert_len;$/;"	m	struct:certs_cell_cert_st
cert_list_free	src/or/routerlist.c	/^cert_list_free(cert_list_t *cl)$/;"	f	file:
cert_list_free_	src/or/routerlist.c	/^cert_list_free_(void *cl)$/;"	f	file:
cert_list_t	src/or/routerlist.c	/^struct cert_list_t {$/;"	s	file:
cert_list_t	src/or/routerlist.c	/^typedef struct cert_list_t cert_list_t;$/;"	t	typeref:struct:cert_list_t	file:
cert_pkey_st_local	src/test/test_tortls.c	/^typedef struct cert_pkey_st_local$/;"	s	file:
cert_type	src/or/torcert.h	/^  uint8_t cert_type;$/;"	m	struct:tor_cert_st
cert_type	src/trunnel/ed25519_cert.h	/^  uint8_t cert_type;$/;"	m	struct:ed25519_cert_st
cert_type	src/trunnel/link_handshake.h	/^  uint8_t cert_type;$/;"	m	struct:certs_cell_cert_st
cert_valid	src/or/torcert.h	/^  unsigned cert_valid : 1;$/;"	m	struct:tor_cert_st
certificate_file	src/tools/tor-gencert.c	/^char *certificate_file = NULL;$/;"	v
certified_key	src/trunnel/ed25519_cert.h	/^  uint8_t certified_key[32];$/;"	m	struct:ed25519_cert_st
certs	src/or/routerlist.c	/^  smartlist_t *certs;$/;"	m	struct:cert_list_t	file:
certs	src/trunnel/link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, struct certs_cell_cert_st *) certs;$/;"	m	struct:certs_cell_st
certs_cell_add_certs	src/trunnel/link_handshake.c	/^certs_cell_add_certs(certs_cell_t *inp, struct certs_cell_cert_st * elt)$/;"	f
certs_cell_cert_add_body	src/trunnel/link_handshake.c	/^certs_cell_cert_add_body(certs_cell_cert_t *inp, uint8_t elt)$/;"	f
certs_cell_cert_check	src/trunnel/link_handshake.c	/^certs_cell_cert_check(const certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_clear	src/trunnel/link_handshake.c	/^certs_cell_cert_clear(certs_cell_cert_t *obj)$/;"	f	file:
certs_cell_cert_clear_errors	src/trunnel/link_handshake.c	/^certs_cell_cert_clear_errors(certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_encode	src/trunnel/link_handshake.c	/^certs_cell_cert_encode(uint8_t *output, const size_t avail, const certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_encoded_len	src/trunnel/link_handshake.c	/^certs_cell_cert_encoded_len(const certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_free	src/trunnel/link_handshake.c	/^certs_cell_cert_free(certs_cell_cert_t *obj)$/;"	f
certs_cell_cert_get_body	src/trunnel/link_handshake.c	/^certs_cell_cert_get_body(certs_cell_cert_t *inp, size_t idx)$/;"	f
certs_cell_cert_get_cert_len	src/trunnel/link_handshake.c	/^certs_cell_cert_get_cert_len(certs_cell_cert_t *inp)$/;"	f
certs_cell_cert_get_cert_type	src/trunnel/link_handshake.c	/^certs_cell_cert_get_cert_type(certs_cell_cert_t *inp)$/;"	f
certs_cell_cert_getarray_body	src/trunnel/link_handshake.c	/^certs_cell_cert_getarray_body(certs_cell_cert_t *inp)$/;"	f
certs_cell_cert_getlen_body	src/trunnel/link_handshake.c	/^certs_cell_cert_getlen_body(const certs_cell_cert_t *inp)$/;"	f
certs_cell_cert_new	src/trunnel/link_handshake.c	/^certs_cell_cert_new(void)$/;"	f
certs_cell_cert_parse	src/trunnel/link_handshake.c	/^certs_cell_cert_parse(certs_cell_cert_t **output, const uint8_t *input, const size_t len_in)$/;"	f
certs_cell_cert_parse_into	src/trunnel/link_handshake.c	/^certs_cell_cert_parse_into(certs_cell_cert_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
certs_cell_cert_set_body	src/trunnel/link_handshake.c	/^certs_cell_cert_set_body(certs_cell_cert_t *inp, size_t idx, uint8_t elt)$/;"	f
certs_cell_cert_set_cert_len	src/trunnel/link_handshake.c	/^certs_cell_cert_set_cert_len(certs_cell_cert_t *inp, uint16_t val)$/;"	f
certs_cell_cert_set_cert_type	src/trunnel/link_handshake.c	/^certs_cell_cert_set_cert_type(certs_cell_cert_t *inp, uint8_t val)$/;"	f
certs_cell_cert_setlen_body	src/trunnel/link_handshake.c	/^certs_cell_cert_setlen_body(certs_cell_cert_t *inp, size_t newlen)$/;"	f
certs_cell_cert_st	src/trunnel/link_handshake.h	/^struct certs_cell_cert_st {$/;"	s
certs_cell_cert_t	src/trunnel/link_handshake.h	/^typedef struct certs_cell_cert_st certs_cell_cert_t;$/;"	t	typeref:struct:certs_cell_cert_st
certs_cell_check	src/trunnel/link_handshake.c	/^certs_cell_check(const certs_cell_t *obj)$/;"	f
certs_cell_clear	src/trunnel/link_handshake.c	/^certs_cell_clear(certs_cell_t *obj)$/;"	f	file:
certs_cell_clear_errors	src/trunnel/link_handshake.c	/^certs_cell_clear_errors(certs_cell_t *obj)$/;"	f
certs_cell_encode	src/trunnel/link_handshake.c	/^certs_cell_encode(uint8_t *output, const size_t avail, const certs_cell_t *obj)$/;"	f
certs_cell_encoded_len	src/trunnel/link_handshake.c	/^certs_cell_encoded_len(const certs_cell_t *obj)$/;"	f
certs_cell_free	src/trunnel/link_handshake.c	/^certs_cell_free(certs_cell_t *obj)$/;"	f
certs_cell_get_certs	src/trunnel/link_handshake.c	/^certs_cell_get_certs(certs_cell_t *inp, size_t idx)$/;"	f
certs_cell_get_n_certs	src/trunnel/link_handshake.c	/^certs_cell_get_n_certs(certs_cell_t *inp)$/;"	f
certs_cell_getarray_certs	src/trunnel/link_handshake.c	/^certs_cell_getarray_certs(certs_cell_t *inp)$/;"	f
certs_cell_getlen_certs	src/trunnel/link_handshake.c	/^certs_cell_getlen_certs(const certs_cell_t *inp)$/;"	f
certs_cell_new	src/trunnel/link_handshake.c	/^certs_cell_new(void)$/;"	f
certs_cell_parse	src/trunnel/link_handshake.c	/^certs_cell_parse(certs_cell_t **output, const uint8_t *input, const size_t len_in)$/;"	f
certs_cell_parse_into	src/trunnel/link_handshake.c	/^certs_cell_parse_into(certs_cell_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
certs_cell_set0_certs	src/trunnel/link_handshake.c	/^certs_cell_set0_certs(certs_cell_t *inp, size_t idx, struct certs_cell_cert_st * elt)$/;"	f
certs_cell_set_certs	src/trunnel/link_handshake.c	/^certs_cell_set_certs(certs_cell_t *inp, size_t idx, struct certs_cell_cert_st * elt)$/;"	f
certs_cell_set_n_certs	src/trunnel/link_handshake.c	/^certs_cell_set_n_certs(certs_cell_t *inp, uint8_t val)$/;"	f
certs_cell_setlen_certs	src/trunnel/link_handshake.c	/^certs_cell_setlen_certs(certs_cell_t *inp, size_t newlen)$/;"	f
certs_cell_st	src/trunnel/link_handshake.h	/^struct certs_cell_st {$/;"	s
certs_cell_t	src/trunnel/link_handshake.h	/^typedef struct certs_cell_st certs_cell_t;$/;"	t	typeref:struct:certs_cell_st
certs_data_s	src/test/test_link_handshake.c	/^typedef struct certs_data_s {$/;"	s	file:
certs_data_t	src/test/test_link_handshake.c	/^} certs_data_t;$/;"	t	typeref:struct:certs_data_s	file:
cfg_aliases	src/ext/tinytest.c	/^const struct testlist_alias_t *cfg_aliases=NULL;$/;"	v	typeref:struct:testlist_alias_t
cfg_start_day	src/or/hibernate.c	/^static int cfg_start_day = 0,$/;"	v	file:
cfg_start_hour	src/or/hibernate.c	/^           cfg_start_hour = 0,$/;"	v	file:
cfg_start_min	src/or/hibernate.c	/^           cfg_start_min = 0;$/;"	v	file:
cfg_unit	src/or/hibernate.c	/^static time_unit_t cfg_unit = UNIT_MONTH;$/;"	v	file:
challenge	src/trunnel/link_handshake.h	/^  uint8_t challenge[32];$/;"	m	struct:auth_challenge_cell_st
chan	src/or/circuitlist.c	/^  channel_t *chan;$/;"	m	struct:chan_circid_circuit_map_t	file:
chan	src/or/or.h	/^  channel_tls_t *chan;$/;"	m	struct:or_connection_t
chan	src/test/test_link_handshake.c	/^  channel_tls_t *chan;$/;"	m	struct:authchallenge_data_s	file:
chan	src/test/test_link_handshake.c	/^  channel_tls_t *chan;$/;"	m	struct:certs_data_s	file:
chan	src/test/test_scheduler.c	/^  const channel_t *chan;$/;"	m	struct:__anon113	file:
chan2	src/test/test_link_handshake.c	/^  channel_tls_t *chan2;$/;"	m	struct:authenticate_data_s	file:
chan_cell_queue_len	src/or/channel.c	/^chan_cell_queue_len(const chan_cell_queue_t *queue)$/;"	f
chan_cell_queue_t	src/or/channel.h	/^typedef struct chan_cell_queue chan_cell_queue_t;$/;"	t	typeref:struct:chan_cell_queue
chan_circid_circuit_map_t	src/or/circuitlist.c	/^typedef struct chan_circid_circuit_map_t {$/;"	s	file:
chan_circid_circuit_map_t	src/or/circuitlist.c	/^} chan_circid_circuit_map_t;$/;"	t	typeref:struct:chan_circid_circuit_map_t	file:
chan_circid_entries_eq_	src/or/circuitlist.c	/^chan_circid_entries_eq_(chan_circid_circuit_map_t *a,$/;"	f	file:
chan_circid_entry_hash_	src/or/circuitlist.c	/^chan_circid_entry_hash_(chan_circid_circuit_map_t *a)$/;"	f	file:
chan_id	src/or/circuitmux.c	/^  uint64_t chan_id;$/;"	m	struct:chanid_circid_muxinfo_t	file:
chan_test_cell_handler	src/test/test_channel.c	/^chan_test_cell_handler(channel_t *ch,$/;"	f	file:
chan_test_channel_dump_statistics_mock	src/test/test_channel.c	/^chan_test_channel_dump_statistics_mock(channel_t *chan, int severity)$/;"	f	file:
chan_test_channel_flush_from_first_active_circuit_mock	src/test/test_channel.c	/^chan_test_channel_flush_from_first_active_circuit_mock(channel_t *chan,$/;"	f	file:
chan_test_circuitmux_num_cells_mock	src/test/test_channel.c	/^chan_test_circuitmux_num_cells_mock(circuitmux_t *cmux)$/;"	f	file:
chan_test_close	src/test/test_channel.c	/^chan_test_close(channel_t *ch)$/;"	f	file:
chan_test_describe_transport	src/test/test_channel.c	/^chan_test_describe_transport(channel_t *ch)$/;"	f	file:
chan_test_dumpstats	src/test/test_channel.c	/^chan_test_dumpstats(channel_t *ch, int severity)$/;"	f	file:
chan_test_error	src/test/test_channel.c	/^chan_test_error(channel_t *ch)$/;"	f	file:
chan_test_finish_close	src/test/test_channel.c	/^chan_test_finish_close(channel_t *ch)$/;"	f	file:
chan_test_get_overhead_estimate	src/test/test_channel.c	/^chan_test_get_overhead_estimate(channel_t *ch)$/;"	f	file:
chan_test_get_remote_descr	src/test/test_channel.c	/^chan_test_get_remote_descr(channel_t *ch, int flags)$/;"	f	file:
chan_test_is_canonical	src/test/test_channel.c	/^chan_test_is_canonical(channel_t *ch, int req)$/;"	f	file:
chan_test_num_bytes_queued	src/test/test_channel.c	/^chan_test_num_bytes_queued(channel_t *ch)$/;"	f	file:
chan_test_num_cells_writeable	src/test/test_channel.c	/^chan_test_num_cells_writeable(channel_t *ch)$/;"	f	file:
chan_test_var_cell_handler	src/test/test_channel.c	/^chan_test_var_cell_handler(channel_t *ch,$/;"	f	file:
chan_test_write_cell	src/test/test_channel.c	/^chan_test_write_cell(channel_t *ch, cell_t *cell)$/;"	f	file:
chan_test_write_packed_cell	src/test/test_channel.c	/^chan_test_write_packed_cell(channel_t *ch,$/;"	f	file:
chan_test_write_var_cell	src/test/test_channel.c	/^chan_test_write_var_cell(channel_t *ch, var_cell_t *var_cell)$/;"	f	file:
change_callback_log_severity	src/common/log.c	/^change_callback_log_severity(int loglevelMin, int loglevelMax,$/;"	f
changed	src/or/rephist.c	/^  time_t changed;$/;"	m	struct:link_history_t	file:
changed	src/or/rephist.c	/^  time_t changed;$/;"	m	struct:or_history_t	file:
chanid_circid_entries_eq	src/or/circuitmux.c	/^chanid_circid_entries_eq(chanid_circid_muxinfo_t *a,$/;"	f	file:
chanid_circid_entry_hash	src/or/circuitmux.c	/^chanid_circid_entry_hash(chanid_circid_muxinfo_t *a)$/;"	f	file:
chanid_circid_map	src/or/circuitmux.c	/^  chanid_circid_muxinfo_map_t *chanid_circid_map;$/;"	m	struct:circuitmux_s	file:
chanid_circid_muxinfo_map_t	src/or/circuitmux.c	/^typedef struct chanid_circid_muxinfo_map chanid_circid_muxinfo_map_t;$/;"	t	typeref:struct:chanid_circid_muxinfo_map	file:
chanid_circid_muxinfo_t	src/or/circuitmux.c	/^struct chanid_circid_muxinfo_t {$/;"	s	file:
chanid_circid_muxinfo_t	src/or/circuitmux.c	/^typedef struct chanid_circid_muxinfo_t chanid_circid_muxinfo_t;$/;"	t	typeref:struct:chanid_circid_muxinfo_t	file:
channel_add_to_digest_map	src/or/channel.c	/^channel_add_to_digest_map(channel_t *chan)$/;"	f	file:
channel_assert_counter_consistency	src/or/channel.c	/^channel_assert_counter_consistency(void)$/;"	f	file:
channel_cell_handler_fn_ptr	src/or/channel.h	/^typedef void (*channel_cell_handler_fn_ptr)(channel_t *, cell_t *);$/;"	t
channel_change_state	src/or/channel.c	/^channel_change_state(channel_t *chan, channel_state_t to_state)$/;"	f
channel_clear_identity_digest	src/or/channel.c	/^channel_clear_identity_digest(channel_t *chan)$/;"	f
channel_clear_remote_end	src/or/channel.c	/^channel_clear_remote_end(channel_t *chan)$/;"	f
channel_close_for_error	src/or/channel.c	/^channel_close_for_error(channel_t *chan)$/;"	f
channel_close_from_lower_layer	src/or/channel.c	/^channel_close_from_lower_layer(channel_t *chan)$/;"	f
channel_closed	src/or/channel.c	/^channel_closed(channel_t *chan)$/;"	f
channel_connect	src/or/channel.c	/^channel_connect(const tor_addr_t *addr, uint16_t port,$/;"	f
channel_connect_for_circuit	src/or/circuitbuild.c	/^channel_connect_for_circuit(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
channel_count_recved	src/or/channel.c	/^channel_count_recved(channel_t *chan)$/;"	f
channel_count_xmitted	src/or/channel.c	/^channel_count_xmitted(channel_t *chan)$/;"	f
channel_describe_transport	src/or/channel.c	/^channel_describe_transport(channel_t *chan)$/;"	f
channel_do_open_actions	src/or/channel.c	/^channel_do_open_actions(channel_t *chan)$/;"	f
channel_dump_transport_statistics	src/or/channel.c	/^channel_dump_transport_statistics(channel_t *chan, int severity)$/;"	f
channel_dumpstats	src/or/channel.c	/^channel_dumpstats(int severity)$/;"	f
channel_find_by_global_id	src/or/channel.c	/^channel_find_by_global_id(uint64_t global_identifier)$/;"	f
channel_find_by_remote_digest	src/or/channel.c	/^channel_find_by_remote_digest(const char *identity_digest)$/;"	f
channel_flush_cells	src/or/channel.c	/^channel_flush_cells(channel_t *chan)$/;"	f
channel_flush_some_cells_from_outgoing_queue	src/or/channel.c	/^channel_flush_some_cells_from_outgoing_queue(channel_t *chan,$/;"	f	file:
channel_flush_some_cells_mock	src/test/test_scheduler.c	/^channel_flush_some_cells_mock(channel_t *chan, ssize_t num_cells)$/;"	f	file:
channel_flush_some_cells_mock_free_all	src/test/test_scheduler.c	/^channel_flush_some_cells_mock_free_all(void)$/;"	f	file:
channel_flush_some_cells_mock_set	src/test/test_scheduler.c	/^channel_flush_some_cells_mock_set(channel_t *chan, ssize_t num_cells)$/;"	f	file:
channel_force_free	src/or/channel.c	/^channel_force_free(channel_t *chan)$/;"	f	file:
channel_free	src/or/channel.c	/^channel_free(channel_t *chan)$/;"	f
channel_free_all	src/or/channel.c	/^channel_free_all(void)$/;"	f
channel_free_list	src/or/channel.c	/^channel_free_list(smartlist_t *channels, int mark_for_close)$/;"	f	file:
channel_get_actual_remote_address	src/or/channel.c	/^channel_get_actual_remote_address(channel_t *chan)$/;"	f
channel_get_actual_remote_descr	src/or/channel.c	/^channel_get_actual_remote_descr(channel_t *chan)$/;"	f
channel_get_addr_if_possible	src/or/channel.c	/^channel_get_addr_if_possible(channel_t *chan, tor_addr_t *addr_out)$/;"	f
channel_get_canonical_remote_descr	src/or/channel.c	/^channel_get_canonical_remote_descr(channel_t *chan)$/;"	f
channel_get_cell_handler	src/or/channel.c	/^channel_get_cell_handler(channel_t *chan)$/;"	f
channel_get_cell_queue_entry_size	src/or/channel.c	/^channel_get_cell_queue_entry_size(channel_t *chan, cell_queue_entry_t *q)$/;"	f	file:
channel_get_for_extend	src/or/channel.c	/^channel_get_for_extend(const char *digest,$/;"	f
channel_get_global_queue_estimate	src/or/channel.c	/^channel_get_global_queue_estimate(void)$/;"	f
channel_get_var_cell_handler	src/or/channel.c	/^channel_get_var_cell_handler(channel_t *chan)$/;"	f
channel_has_queued_writes	src/or/channel.c	/^channel_has_queued_writes(channel_t *chan)$/;"	f
channel_idmap_entry_s	src/or/channel.c	/^typedef struct channel_idmap_entry_s {$/;"	s	file:
channel_idmap_entry_t	src/or/channel.c	/^} channel_idmap_entry_t;$/;"	t	typeref:struct:channel_idmap_entry_s	file:
channel_idmap_eq	src/or/channel.c	/^channel_idmap_eq(const channel_idmap_entry_t *a,$/;"	f	file:
channel_idmap_hash	src/or/channel.c	/^channel_idmap_hash(const channel_idmap_entry_t *ent)$/;"	f	file:
channel_init	src/or/channel.c	/^channel_init(channel_t *chan)$/;"	f
channel_init_listener	src/or/channel.c	/^channel_init_listener(channel_listener_t *chan_l)$/;"	f
channel_is_bad_for_new_circs	src/or/channel.c	/^channel_is_bad_for_new_circs(channel_t *chan)$/;"	f
channel_is_better	src/or/channel.c	/^channel_is_better(time_t now, channel_t *a, channel_t *b,$/;"	f
channel_is_canonical	src/or/channel.c	/^channel_is_canonical(channel_t *chan)$/;"	f
channel_is_canonical_is_reliable	src/or/channel.c	/^channel_is_canonical_is_reliable(channel_t *chan)$/;"	f
channel_is_client	src/or/channel.c	/^channel_is_client(channel_t *chan)$/;"	f
channel_is_in_state	src/or/channel.h	/^channel_is_in_state(channel_t *chan, channel_state_t state)$/;"	f
channel_is_incoming	src/or/channel.c	/^channel_is_incoming(channel_t *chan)$/;"	f
channel_is_local	src/or/channel.c	/^channel_is_local(channel_t *chan)$/;"	f
channel_is_outgoing	src/or/channel.c	/^channel_is_outgoing(channel_t *chan)$/;"	f
channel_listener_change_state	src/or/channel.c	/^channel_listener_change_state(channel_listener_t *chan_l,$/;"	f
channel_listener_close_for_error	src/or/channel.c	/^channel_listener_close_for_error(channel_listener_t *chan_l)$/;"	f
channel_listener_close_from_lower_layer	src/or/channel.c	/^channel_listener_close_from_lower_layer(channel_listener_t *chan_l)$/;"	f
channel_listener_closed	src/or/channel.c	/^channel_listener_closed(channel_listener_t *chan_l)$/;"	f
channel_listener_count_accepted	src/or/channel.c	/^channel_listener_count_accepted(channel_listener_t *chan_l)$/;"	f
channel_listener_describe_transport	src/or/channel.c	/^channel_listener_describe_transport(channel_listener_t *chan_l)$/;"	f
channel_listener_dump_statistics	src/or/channel.c	/^channel_listener_dump_statistics(channel_listener_t *chan_l, int severity)$/;"	f
channel_listener_dump_transport_statistics	src/or/channel.c	/^channel_listener_dump_transport_statistics(channel_listener_t *chan_l,$/;"	f
channel_listener_dumpstats	src/or/channel.c	/^channel_listener_dumpstats(int severity)$/;"	f
channel_listener_fn_ptr	src/or/channel.h	/^typedef void (*channel_listener_fn_ptr)(channel_listener_t *, channel_t *);$/;"	t
channel_listener_force_free	src/or/channel.c	/^channel_listener_force_free(channel_listener_t *chan_l)$/;"	f	file:
channel_listener_free	src/or/channel.c	/^channel_listener_free(channel_listener_t *chan_l)$/;"	f
channel_listener_free_list	src/or/channel.c	/^channel_listener_free_list(smartlist_t *listeners, int mark_for_close)$/;"	f	file:
channel_listener_get_listener_fn	src/or/channel.c	/^channel_listener_get_listener_fn(channel_listener_t *chan_l)$/;"	f
channel_listener_mark_for_close	src/or/channel.c	/^channel_listener_mark_for_close(channel_listener_t *chan_l)$/;"	f
channel_listener_process_incoming	src/or/channel.c	/^channel_listener_process_incoming(channel_listener_t *listener)$/;"	f
channel_listener_queue_incoming	src/or/channel.c	/^channel_listener_queue_incoming(channel_listener_t *listener,$/;"	f
channel_listener_register	src/or/channel.c	/^channel_listener_register(channel_listener_t *chan_l)$/;"	f
channel_listener_run_cleanup	src/or/channel.c	/^channel_listener_run_cleanup(void)$/;"	f
channel_listener_s	src/or/channel.h	/^struct channel_listener_s {$/;"	s
channel_listener_set_listener_fn	src/or/channel.c	/^channel_listener_set_listener_fn(channel_listener_t *chan_l,$/;"	f
channel_listener_state_can_transition	src/or/channel.c	/^channel_listener_state_can_transition(channel_listener_state_t from,$/;"	f
channel_listener_state_is_valid	src/or/channel.c	/^channel_listener_state_is_valid(channel_listener_state_t state)$/;"	f
channel_listener_state_t	src/or/or.h	/^} channel_listener_state_t;$/;"	t	typeref:enum:__anon39
channel_listener_state_to_string	src/or/channel.c	/^channel_listener_state_to_string(channel_listener_state_t state)$/;"	f
channel_listener_t	src/or/or.h	/^typedef struct channel_listener_s channel_listener_t;$/;"	t	typeref:struct:channel_listener_s
channel_listener_timestamp_accepted	src/or/channel.c	/^channel_listener_timestamp_accepted(channel_listener_t *chan_l)$/;"	f
channel_listener_timestamp_active	src/or/channel.c	/^channel_listener_timestamp_active(channel_listener_t *chan_l)$/;"	f
channel_listener_timestamp_created	src/or/channel.c	/^channel_listener_timestamp_created(channel_listener_t *chan_l)$/;"	f
channel_listener_unregister	src/or/channel.c	/^channel_listener_unregister(channel_listener_t *chan_l)$/;"	f
channel_listener_when_created	src/or/channel.c	/^channel_listener_when_created(channel_listener_t *chan_l)$/;"	f
channel_listener_when_last_accepted	src/or/channel.c	/^channel_listener_when_last_accepted(channel_listener_t *chan_l)$/;"	f
channel_listener_when_last_active	src/or/channel.c	/^channel_listener_when_last_active(channel_listener_t *chan_l)$/;"	f
channel_mark_bad_for_new_circs	src/or/channel.c	/^channel_mark_bad_for_new_circs(channel_t *chan)$/;"	f
channel_mark_circid_unusable	src/or/circuitlist.c	/^channel_mark_circid_unusable(channel_t *chan, circid_t id)$/;"	f
channel_mark_circid_usable	src/or/circuitlist.c	/^channel_mark_circid_usable(channel_t *chan, circid_t id)$/;"	f
channel_mark_client	src/or/channel.c	/^channel_mark_client(channel_t *chan)$/;"	f
channel_mark_for_close	src/or/channel.c	/^channel_mark_for_close(channel_t *chan)$/;"	f
channel_mark_incoming	src/or/channel.c	/^channel_mark_incoming(channel_t *chan)$/;"	f
channel_mark_local	src/or/channel.c	/^channel_mark_local(channel_t *chan)$/;"	f
channel_mark_outgoing	src/or/channel.c	/^channel_mark_outgoing(channel_t *chan)$/;"	f
channel_mark_remote	src/or/channel.c	/^channel_mark_remote(channel_t *chan)$/;"	f
channel_matches_extend_info	src/or/channel.c	/^channel_matches_extend_info(channel_t *chan, extend_info_t *extend_info)$/;"	f
channel_matches_target_addr_for_extend	src/or/channel.c	/^channel_matches_target_addr_for_extend(channel_t *chan,$/;"	f
channel_more_to_flush	src/or/channel.c	/^channel_more_to_flush(channel_t *chan)$/;"	f
channel_next_with_digest	src/or/channel.c	/^channel_next_with_digest(channel_t *chan)$/;"	f
channel_note_destroy_not_pending_mock	src/test/test_channel.c	/^channel_note_destroy_not_pending_mock(channel_t *ch,$/;"	f	file:
channel_note_destroy_pending	src/or/circuitlist.c	/^channel_note_destroy_pending(channel_t *chan, circid_t id)$/;"	f
channel_notify_flushed	src/or/channel.c	/^channel_notify_flushed(channel_t *chan)$/;"	f
channel_num_cells_writeable	src/or/channel.c	/^channel_num_cells_writeable(channel_t *chan)$/;"	f
channel_num_circuits	src/or/channel.c	/^channel_num_circuits(channel_t *chan)$/;"	f
channel_process_cells	src/or/channel.c	/^channel_process_cells(channel_t *chan)$/;"	f
channel_queue_cell	src/or/channel.c	/^channel_queue_cell(channel_t *chan, cell_t *cell)$/;"	f
channel_queue_var_cell	src/or/channel.c	/^channel_queue_var_cell(channel_t *chan, var_cell_t *var_cell)$/;"	f
channel_register	src/or/channel.c	/^channel_register(channel_t *chan)$/;"	f
channel_remove_from_digest_map	src/or/channel.c	/^channel_remove_from_digest_map(channel_t *chan)$/;"	f	file:
channel_run_cleanup	src/or/channel.c	/^channel_run_cleanup(void)$/;"	f
channel_s	src/or/channel.h	/^struct channel_s {$/;"	s
channel_send_destroy	src/or/channel.c	/^channel_send_destroy(circid_t circ_id, channel_t *chan, int reason)$/;"	f
channel_set_cell_handlers	src/or/channel.c	/^channel_set_cell_handlers(channel_t *chan,$/;"	f
channel_set_cmux_policy_everywhere	src/or/channel.c	/^channel_set_cmux_policy_everywhere(circuitmux_policy_t *pol)$/;"	f
channel_set_identity_digest	src/or/channel.c	/^channel_set_identity_digest(channel_t *chan,$/;"	f
channel_set_remote_end	src/or/channel.c	/^channel_set_remote_end(channel_t *chan,$/;"	f
channel_state_can_transition	src/or/channel.c	/^channel_state_can_transition(channel_state_t from, channel_state_t to)$/;"	f
channel_state_is_valid	src/or/channel.c	/^channel_state_is_valid(channel_state_t state)$/;"	f
channel_state_t	src/or/or.h	/^} channel_state_t;$/;"	t	typeref:enum:__anon38
channel_state_to_string	src/or/channel.c	/^channel_state_to_string(channel_state_t state)$/;"	f
channel_t	src/or/or.h	/^typedef struct channel_s channel_t;$/;"	t	typeref:struct:channel_s
channel_tests	src/test/test_channel.c	/^struct testcase_t channel_tests[] = {$/;"	v	typeref:struct:testcase_t
channel_timestamp_active	src/or/channel.c	/^channel_timestamp_active(channel_t *chan)$/;"	f
channel_timestamp_client	src/or/channel.c	/^channel_timestamp_client(channel_t *chan)$/;"	f
channel_timestamp_created	src/or/channel.c	/^channel_timestamp_created(channel_t *chan)$/;"	f
channel_timestamp_drained	src/or/channel.c	/^channel_timestamp_drained(channel_t *chan)$/;"	f
channel_timestamp_recv	src/or/channel.c	/^channel_timestamp_recv(channel_t *chan)$/;"	f
channel_timestamp_xmit	src/or/channel.c	/^channel_timestamp_xmit(channel_t *chan)$/;"	f
channel_tls_close_method	src/or/channeltls.c	/^channel_tls_close_method(channel_t *chan)$/;"	f	file:
channel_tls_common_init	src/or/channeltls.c	/^channel_tls_common_init(channel_tls_t *tlschan)$/;"	f
channel_tls_connect	src/or/channeltls.c	/^channel_tls_connect(const tor_addr_t *addr, uint16_t port,$/;"	f
channel_tls_describe_transport_method	src/or/channeltls.c	/^channel_tls_describe_transport_method(channel_t *chan)$/;"	f	file:
channel_tls_free_all	src/or/channeltls.c	/^channel_tls_free_all(void)$/;"	f
channel_tls_free_method	src/or/channeltls.c	/^channel_tls_free_method(channel_t *chan)$/;"	f	file:
channel_tls_from_base	src/or/channeltls.c	/^channel_tls_from_base(channel_t *chan)$/;"	f
channel_tls_get_listener	src/or/channeltls.c	/^channel_tls_get_listener(void)$/;"	f
channel_tls_get_overhead_estimate_method	src/or/channeltls.c	/^channel_tls_get_overhead_estimate_method(channel_t *chan)$/;"	f	file:
channel_tls_get_remote_addr_method	src/or/channeltls.c	/^channel_tls_get_remote_addr_method(channel_t *chan, tor_addr_t *addr_out)$/;"	f	file:
channel_tls_get_remote_descr_method	src/or/channeltls.c	/^channel_tls_get_remote_descr_method(channel_t *chan, int flags)$/;"	f	file:
channel_tls_get_transport_name_method	src/or/channeltls.c	/^channel_tls_get_transport_name_method(channel_t *chan, char **transport_out)$/;"	f	file:
channel_tls_handle_cell	src/or/channeltls.c	/^channel_tls_handle_cell(cell_t *cell, or_connection_t *conn)$/;"	f
channel_tls_handle_incoming	src/or/channeltls.c	/^channel_tls_handle_incoming(or_connection_t *orconn)$/;"	f
channel_tls_handle_state_change_on_orconn	src/or/channeltls.c	/^channel_tls_handle_state_change_on_orconn(channel_tls_t *chan,$/;"	f
channel_tls_handle_var_cell	src/or/channeltls.c	/^channel_tls_handle_var_cell(var_cell_t *var_cell, or_connection_t *conn)$/;"	f
channel_tls_has_queued_writes_method	src/or/channeltls.c	/^channel_tls_has_queued_writes_method(channel_t *chan)$/;"	f	file:
channel_tls_is_canonical_method	src/or/channeltls.c	/^channel_tls_is_canonical_method(channel_t *chan, int req)$/;"	f	file:
channel_tls_listener	src/or/channeltls.c	/^channel_listener_t *channel_tls_listener = NULL;$/;"	v
channel_tls_listener_close_method	src/or/channeltls.c	/^channel_tls_listener_close_method(channel_listener_t *chan_l)$/;"	f	file:
channel_tls_listener_describe_transport_method	src/or/channeltls.c	/^channel_tls_listener_describe_transport_method(channel_listener_t *chan_l)$/;"	f	file:
channel_tls_matches_extend_info_method	src/or/channeltls.c	/^channel_tls_matches_extend_info_method(channel_t *chan,$/;"	f	file:
channel_tls_matches_target_method	src/or/channeltls.c	/^channel_tls_matches_target_method(channel_t *chan,$/;"	f	file:
channel_tls_num_bytes_queued_method	src/or/channeltls.c	/^channel_tls_num_bytes_queued_method(channel_t *chan)$/;"	f	file:
channel_tls_num_cells_writeable_method	src/or/channeltls.c	/^channel_tls_num_cells_writeable_method(channel_t *chan)$/;"	f	file:
channel_tls_process_auth_challenge_cell	src/or/channeltls.c	/^channel_tls_process_auth_challenge_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f
channel_tls_process_authenticate_cell	src/or/channeltls.c	/^channel_tls_process_authenticate_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f
channel_tls_process_certs_cell	src/or/channeltls.c	/^channel_tls_process_certs_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f
channel_tls_process_netinfo_cell	src/or/channeltls.c	/^channel_tls_process_netinfo_cell(cell_t *cell, channel_tls_t *chan)$/;"	f	file:
channel_tls_process_versions_cell	src/or/channeltls.c	/^channel_tls_process_versions_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f	file:
channel_tls_s	src/or/channeltls.h	/^struct channel_tls_s {$/;"	s
channel_tls_start_listener	src/or/channeltls.c	/^channel_tls_start_listener(void)$/;"	f
channel_tls_t	src/or/or.h	/^typedef struct channel_tls_s channel_tls_t;$/;"	t	typeref:struct:channel_tls_s
channel_tls_time_process_cell	src/or/channeltls.c	/^channel_tls_time_process_cell(cell_t *cell, channel_tls_t *chan, int *time,$/;"	f	file:
channel_tls_to_base	src/or/channeltls.c	/^channel_tls_to_base(channel_tls_t *tlschan)$/;"	f
channel_tls_update_marks	src/or/channeltls.c	/^channel_tls_update_marks(or_connection_t *conn)$/;"	f
channel_tls_write_cell_method	src/or/channeltls.c	/^channel_tls_write_cell_method(channel_t *chan, cell_t *cell)$/;"	f	file:
channel_tls_write_packed_cell_method	src/or/channeltls.c	/^channel_tls_write_packed_cell_method(channel_t *chan,$/;"	f	file:
channel_tls_write_var_cell_method	src/or/channeltls.c	/^channel_tls_write_var_cell_method(channel_t *chan, var_cell_t *var_cell)$/;"	f	file:
channel_unlink_all_circuits	src/or/relay.c	/^channel_unlink_all_circuits(channel_t *chan, smartlist_t *circuits_out)$/;"	f
channel_unregister	src/or/channel.c	/^channel_unregister(channel_t *chan)$/;"	f
channel_update_xmit_queue_size	src/or/channel.c	/^channel_update_xmit_queue_size(channel_t *chan)$/;"	f
channel_var_cell_handler_fn_ptr	src/or/channel.h	/^typedef void (*channel_var_cell_handler_fn_ptr)(channel_t *, var_cell_t *);$/;"	t
channel_when_created	src/or/channel.c	/^channel_when_created(channel_t *chan)$/;"	f
channel_when_last_active	src/or/channel.c	/^channel_when_last_active(channel_t *chan)$/;"	f
channel_when_last_client	src/or/channel.c	/^channel_when_last_client(channel_t *chan)$/;"	f
channel_when_last_drained	src/or/channel.c	/^channel_when_last_drained(channel_t *chan)$/;"	f
channel_when_last_recv	src/or/channel.c	/^channel_when_last_recv(channel_t *chan)$/;"	f
channel_when_last_xmit	src/or/channel.c	/^channel_when_last_xmit(channel_t *chan)$/;"	f
channel_write_cell	src/or/channel.c	/^channel_write_cell(channel_t *chan, cell_t *cell)$/;"	f
channel_write_cell_queue_entry	src/or/channel.c	/^channel_write_cell_queue_entry(channel_t *chan, cell_queue_entry_t *q)$/;"	f	file:
channel_write_packed_cell	src/or/channel.c	/^channel_write_packed_cell(channel_t *chan, packed_cell_t *packed_cell)$/;"	f
channel_write_var_cell	src/or/channel.c	/^channel_write_var_cell(channel_t *chan, var_cell_t *var_cell)$/;"	f
channels_pending	src/or/scheduler.c	/^STATIC smartlist_t *channels_pending = NULL;$/;"	v
channeltls_tests	src/test/test_channeltls.c	/^struct testcase_t channeltls_tests[] = {$/;"	v	typeref:struct:testcase_t
chans_for_flush_mock	src/test/test_scheduler.c	/^static smartlist_t *chans_for_flush_mock = NULL;$/;"	v	file:
check	src/or/buffers.c	/^#define check(/;"	d	file:
check_a_buffer	src/test/test-memwipe.c	/^check_a_buffer(void)$/;"	f	file:
check_cert_lifetime_internal	src/common/tortls.c	/^check_cert_lifetime_internal(int severity, const X509 *cert,$/;"	f	file:
check_create_cell	src/or/onion.c	/^check_create_cell(const create_cell_t *cell, int unknown_ok)$/;"	f	file:
check_created_cell	src/or/onion.c	/^check_created_cell(const created_cell_t *cell)$/;"	f	file:
check_descriptor	src/or/main.h	/^  time_t check_descriptor;$/;"	m	struct:__anon5
check_descriptor_bandwidth_changed	src/or/router.c	/^check_descriptor_bandwidth_changed(time_t now)$/;"	f
check_descriptor_ipaddress_changed	src/or/router.c	/^check_descriptor_ipaddress_changed(time_t now)$/;"	f
check_ed_keys	src/or/main.h	/^  time_t check_ed_keys;$/;"	m	struct:__anon5
check_extend_cell	src/or/onion.c	/^check_extend_cell(const extend_cell_t *cell)$/;"	f	file:
check_extended_cell	src/or/onion.c	/^check_extended_cell(const extended_cell_t *cell)$/;"	f	file:
check_fn	src/test/test-memwipe.c	/^    (*check_fn)(void);$/;"	m	struct:testcase	file:
check_for_correct_dns	src/or/main.h	/^  time_t check_for_correct_dns;$/;"	m	struct:__anon5
check_for_expired_networkstatus	src/or/main.h	/^  time_t check_for_expired_networkstatus;$/;"	m	struct:__anon5
check_heap_buffer	src/test/test-memwipe.c	/^check_heap_buffer(void)$/;"	f	file:
check_if_restarts_needed	src/or/transports.c	/^static int check_if_restarts_needed = 0;$/;"	v	file:
check_listeners	src/or/main.h	/^  time_t check_listeners;$/;"	m	struct:__anon5
check_location_for_unix_socket	src/or/connection.c	/^check_location_for_unix_socket(const or_options_t *options, const char *path,$/;"	f	file:
check_nickname_list	src/or/config.c	/^check_nickname_list(char **lst, const char *name, char **msg)$/;"	f	file:
check_no_tls_errors	src/common/tortls.h	/^#define check_no_tls_errors(/;"	d
check_no_tls_errors_	src/common/tortls.c	/^check_no_tls_errors_(const char *fname, int line)$/;"	f
check_or_create_data_subdir	src/or/config.c	/^check_or_create_data_subdir(const char *subdir)$/;"	f
check_port_forwarding	src/or/main.h	/^  time_t check_port_forwarding;$/;"	m	struct:__anon5
check_private_dir	src/common/util.c	/^check_private_dir(const char *dirname, cpd_check_t check,$/;"	f
check_server_ports	src/or/config.c	/^check_server_ports(const smartlist_t *ports,$/;"	f	file:
check_signature_token	src/or/routerparse.c	/^check_signature_token(const char *digest,$/;"	f	file:
check_sockaddr	src/or/connection.c	/^check_sockaddr(const struct sockaddr *sa, int len, int level)$/;"	f	file:
check_sockaddr_family_match	src/or/connection.c	/^check_sockaddr_family_match(sa_family_t got, connection_t *listener)$/;"	f	file:
check_tap_onion_key_crosscert	src/or/routerkeys.c	/^check_tap_onion_key_crosscert(const uint8_t *crosscert,$/;"	f
check_v3_certificate	src/or/main.h	/^  time_t check_v3_certificate;$/;"	m	struct:__anon5
check_whether_dirport_reachable	src/or/router.c	/^check_whether_dirport_reachable(void)$/;"	f
check_whether_orport_reachable	src/or/router.c	/^check_whether_orport_reachable(void)$/;"	f
checkdir_tests	src/test/test_checkdir.c	/^struct testcase_t checkdir_tests[] = {$/;"	v	typeref:struct:testcase_t
choose_array_element_by_weight	src/or/routerlist.c	/^choose_array_element_by_weight(const u64_dbl_t *entries, int n_entries)$/;"	f
choose_compression_level	src/or/directory.c	/^choose_compression_level(ssize_t n_bytes)$/;"	f
choose_good_entry_server	src/or/circuitbuild.c	/^choose_good_entry_server(uint8_t purpose, cpath_build_state_t *state)$/;"	f
choose_good_exit_server	src/or/circuitbuild.c	/^choose_good_exit_server(uint8_t purpose,$/;"	f	file:
choose_good_exit_server_general	src/or/circuitbuild.c	/^choose_good_exit_server_general(int need_uptime, int need_capacity)$/;"	f	file:
choose_good_middle_server	src/or/circuitbuild.c	/^choose_good_middle_server(uint8_t purpose,$/;"	f	file:
choose_random_dirguard	src/or/entrynodes.c	/^choose_random_dirguard(dirinfo_type_t type)$/;"	f
choose_random_entry	src/or/entrynodes.c	/^choose_random_entry(cpath_build_state_t *state)$/;"	f
choose_random_entry_impl	src/or/entrynodes.c	/^choose_random_entry_impl(cpath_build_state_t *state, int for_directory,$/;"	f	file:
chosen_by_version	src/or/entrynodes.h	/^  char *chosen_by_version; \/**< What tor version added this guard? NULL$/;"	m	struct:entry_guard_t
chosen_exit	src/or/or.h	/^  extend_info_t *chosen_exit;$/;"	m	struct:__anon53
chosen_exit_name	src/or/or.h	/^  char *chosen_exit_name;$/;"	m	struct:entry_connection_t
chosen_exit_optional	src/or/or.h	/^  unsigned int chosen_exit_optional:1;$/;"	m	struct:entry_connection_t
chosen_exit_retries	src/or/or.h	/^  unsigned int chosen_exit_retries:3;$/;"	m	struct:entry_connection_t
chosen_on_date	src/or/entrynodes.h	/^  time_t chosen_on_date; \/**< Approximately when was this guard added?$/;"	m	struct:entry_guard_t
chunk	src/or/buffers.c	/^  const chunk_t *chunk; \/**< Which chunk are we pointing to? *\/$/;"	m	struct:buf_pos_t	file:
chunk_copy	src/or/buffers.c	/^chunk_copy(const chunk_t *in_chunk)$/;"	f	file:
chunk_free_unchecked	src/common/memarea.c	/^chunk_free_unchecked(memarea_chunk_t *chunk)$/;"	f	file:
chunk_free_unchecked	src/or/buffers.c	/^chunk_free_unchecked(chunk_t *chunk)$/;"	f	file:
chunk_grow	src/or/buffers.c	/^chunk_grow(chunk_t *chunk, size_t sz)$/;"	f	file:
chunk_new_with_alloc_size	src/or/buffers.c	/^chunk_new_with_alloc_size(size_t alloc)$/;"	f	file:
chunk_pos	src/or/buffers.c	/^  size_t chunk_pos; \/**< Total length of all previous chunks. *\/$/;"	m	struct:buf_pos_t	file:
chunk_repack	src/or/buffers.c	/^chunk_repack(chunk_t *chunk)$/;"	f	file:
chunk_t	src/or/buffers.h	/^typedef struct chunk_t {$/;"	s
chunk_t	src/or/buffers.h	/^} chunk_t;$/;"	t	typeref:struct:chunk_t
cid	src/trunnel/link_handshake.h	/^  uint8_t cid[32];$/;"	m	struct:auth1_st
cipher	src/common/crypto.c	/^  aes_cnt_cipher_t *cipher; \/**< The key in format usable for counter-mode AES$/;"	m	struct:crypto_cipher_t	file:
ciphertext	src/or/rendservice.h	/^  uint8_t *ciphertext;$/;"	m	struct:rend_intro_cell_s
ciphertext_len	src/or/rendservice.h	/^  ssize_t ciphertext_len;$/;"	m	struct:rend_intro_cell_s
circ	src/or/circuitmux_ewma.c	/^  circuit_t *circ;$/;"	m	struct:ewma_policy_circ_data_s	file:
circ	src/or/cpuworker.c	/^  or_circuit_t *circ;$/;"	m	struct:cpuworker_job_u	file:
circ	src/or/onion.c	/^  or_circuit_t *circ;$/;"	m	struct:onion_queue_t	file:
circ	src/test/test_circuitlist.c	/^  void *circ;$/;"	m	struct:__anon77	file:
circ	src/test/test_circuitlist.c	/^  void *circ;$/;"	m	struct:__anon78	file:
circ	src/test/test_relay.c	/^  circuit_t *circ;$/;"	m	struct:relay_connection_test_data_t	file:
circ_attempts	src/or/entrynodes.h	/^  double circ_attempts; \/**< Number of circuits this guard has "attempted" *\/$/;"	m	struct:entry_guard_t
circ_buffer_stats_t	src/or/rephist.c	/^typedef struct circ_buffer_stats_t {$/;"	s	file:
circ_buffer_stats_t	src/or/rephist.c	/^} circ_buffer_stats_t;$/;"	t	typeref:struct:circ_buffer_stats_t	file:
circ_id	src/or/circuitlist.c	/^  circid_t circ_id;$/;"	m	struct:chan_circid_circuit_map_t	file:
circ_id	src/or/circuitmux.c	/^  circid_t circ_id;$/;"	m	struct:chanid_circid_muxinfo_t	file:
circ_id	src/or/or.h	/^  circid_t circ_id; \/**< Circuit which received the cell. *\/$/;"	m	struct:cell_t
circ_id	src/or/or.h	/^  circid_t circ_id;$/;"	m	struct:var_cell_t
circ_id_type	src/or/channel.h	/^  circ_id_type_bitfield_t circ_id_type:2;$/;"	m	struct:channel_s
circ_id_type_bitfield_t	src/or/or.h	/^#define circ_id_type_bitfield_t /;"	d
circ_id_type_t	src/or/or.h	/^} circ_id_type_t;$/;"	t	typeref:enum:__anon36
circ_successes	src/or/entrynodes.h	/^  double circ_successes; \/**< Number of successfully built circuits using$/;"	m	struct:entry_guard_t
circ_times	src/or/circuitstats.c	/^static circuit_build_times_t circ_times;$/;"	v	file:
circid_t	src/or/or.h	/^typedef uint32_t circid_t;$/;"	t
circuit	src/or/circuitlist.c	/^  circuit_t *circuit;$/;"	m	struct:chan_circid_circuit_map_t	file:
circuit_all_predicted_ports_handled	src/or/circuitbuild.c	/^circuit_all_predicted_ports_handled(time_t now, int *need_uptime,$/;"	f
circuit_append_new_exit	src/or/circuitbuild.c	/^circuit_append_new_exit(origin_circuit_t *circ, extend_info_t *exit)$/;"	f
circuit_build_failed	src/or/circuituse.c	/^circuit_build_failed(origin_circuit_t *circ)$/;"	f
circuit_build_needed_circs	src/or/circuituse.c	/^circuit_build_needed_circs(time_t now)$/;"	f
circuit_build_times	src/or/circuitstats.h	/^  build_time_t circuit_build_times[CBT_NCIRCUITS_TO_OBSERVE];$/;"	m	struct:circuit_build_times_s
circuit_build_times_add_time	src/or/circuitstats.c	/^circuit_build_times_add_time(circuit_build_times_t *cbt, build_time_t time)$/;"	f
circuit_build_times_calculate_timeout	src/or/circuitstats.c	/^circuit_build_times_calculate_timeout(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_cdf	src/or/circuitstats.c	/^circuit_build_times_cdf(circuit_build_times_t *cbt, double x)$/;"	f
circuit_build_times_close_quantile	src/or/circuitstats.c	/^circuit_build_times_close_quantile(void)$/;"	f	file:
circuit_build_times_close_rate	src/or/circuitstats.c	/^circuit_build_times_close_rate(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_count_close	src/or/circuitstats.c	/^circuit_build_times_count_close(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_count_timeout	src/or/circuitstats.c	/^circuit_build_times_count_timeout(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_create_histogram	src/or/circuitstats.c	/^circuit_build_times_create_histogram(const circuit_build_times_t *cbt,$/;"	f	file:
circuit_build_times_default_num_xm_modes	src/or/circuitstats.c	/^circuit_build_times_default_num_xm_modes(void)$/;"	f	file:
circuit_build_times_disabled	src/or/circuitstats.c	/^circuit_build_times_disabled(void)$/;"	f
circuit_build_times_enough_to_compute	src/or/circuitstats.c	/^circuit_build_times_enough_to_compute(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_filter_timeouts	src/or/circuitstats.c	/^circuit_build_times_filter_timeouts(circuit_build_times_t *cbt)$/;"	f	file:
circuit_build_times_free_timeouts	src/or/circuitstats.c	/^circuit_build_times_free_timeouts(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_generate_sample	src/or/circuitstats.c	/^circuit_build_times_generate_sample(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_get_initial_timeout	src/or/circuitstats.c	/^circuit_build_times_get_initial_timeout(void)$/;"	f	file:
circuit_build_times_get_xm	src/or/circuitstats.c	/^circuit_build_times_get_xm(circuit_build_times_t *cbt)$/;"	f	file:
circuit_build_times_init	src/or/circuitstats.c	/^circuit_build_times_init(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_initial_alpha	src/or/circuitstats.c	/^circuit_build_times_initial_alpha(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_initial_timeout	src/or/circuitstats.c	/^circuit_build_times_initial_timeout(void)$/;"	f
circuit_build_times_max	src/or/circuitstats.c	/^circuit_build_times_max(const circuit_build_times_t *cbt)$/;"	f	file:
circuit_build_times_max_timeouts	src/or/circuitstats.c	/^circuit_build_times_max_timeouts(void)$/;"	f	file:
circuit_build_times_min_circs_to_observe	src/or/circuitstats.c	/^circuit_build_times_min_circs_to_observe(void)$/;"	f	file:
circuit_build_times_min_timeout	src/or/circuitstats.c	/^circuit_build_times_min_timeout(void)$/;"	f	file:
circuit_build_times_needs_circuits	src/or/circuitstats.c	/^circuit_build_times_needs_circuits(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_needs_circuits_now	src/or/circuitstats.c	/^circuit_build_times_needs_circuits_now(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_check_changed	src/or/circuitstats.c	/^circuit_build_times_network_check_changed(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_check_live	src/or/circuitstats.c	/^circuit_build_times_network_check_live(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_circ_success	src/or/circuitstats.c	/^circuit_build_times_network_circ_success(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_close	src/or/circuitstats.c	/^circuit_build_times_network_close(circuit_build_times_t *cbt,$/;"	f	file:
circuit_build_times_network_is_live	src/or/circuitstats.c	/^circuit_build_times_network_is_live(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_network_timeout	src/or/circuitstats.c	/^circuit_build_times_network_timeout(circuit_build_times_t *cbt,$/;"	f	file:
circuit_build_times_new_consensus_params	src/or/circuitstats.c	/^circuit_build_times_new_consensus_params(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_parse_state	src/or/circuitstats.c	/^circuit_build_times_parse_state(circuit_build_times_t *cbt,$/;"	f
circuit_build_times_quantile_cutoff	src/or/circuitstats.c	/^circuit_build_times_quantile_cutoff(void)$/;"	f
circuit_build_times_recent_circuit_count	src/or/circuitstats.c	/^circuit_build_times_recent_circuit_count(networkstatus_t *ns)$/;"	f	file:
circuit_build_times_reset	src/or/circuitstats.c	/^circuit_build_times_reset(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_s	src/or/circuitstats.h	/^struct circuit_build_times_s {$/;"	s
circuit_build_times_set_timeout	src/or/circuitstats.c	/^circuit_build_times_set_timeout(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_set_timeout_worker	src/or/circuitstats.c	/^circuit_build_times_set_timeout_worker(circuit_build_times_t *cbt)$/;"	f	file:
circuit_build_times_shuffle_and_store_array	src/or/circuitstats.c	/^circuit_build_times_shuffle_and_store_array(circuit_build_times_t *cbt,$/;"	f	file:
circuit_build_times_t	src/or/or.h	/^typedef struct circuit_build_times_s circuit_build_times_t;$/;"	t	typeref:struct:circuit_build_times_s
circuit_build_times_test_frequency	src/or/circuitstats.c	/^circuit_build_times_test_frequency(void)$/;"	f	file:
circuit_build_times_timeout_rate	src/or/circuitstats.c	/^circuit_build_times_timeout_rate(const circuit_build_times_t *cbt)$/;"	f
circuit_build_times_update_alpha	src/or/circuitstats.c	/^circuit_build_times_update_alpha(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_update_last_circ	src/or/circuitstats.c	/^circuit_build_times_update_last_circ(circuit_build_times_t *cbt)$/;"	f
circuit_build_times_update_state	src/or/circuitstats.c	/^circuit_build_times_update_state(const circuit_build_times_t *cbt,$/;"	f
circuit_carries_hs_traffic_stats	src/or/or.h	/^  unsigned int circuit_carries_hs_traffic_stats : 1;$/;"	m	struct:or_circuit_t
circuit_change_purpose	src/or/circuituse.c	/^circuit_change_purpose(circuit_t *circ, uint8_t new_purpose)$/;"	f
circuit_clear_cell_queue	src/or/relay.c	/^circuit_clear_cell_queue(circuit_t *circ, channel_t *chan)$/;"	f
circuit_clear_cpath	src/or/circuitlist.c	/^circuit_clear_cpath(origin_circuit_t *circ)$/;"	f
circuit_clear_isolation	src/or/connection_edge.c	/^circuit_clear_isolation(origin_circuit_t *circ)$/;"	f
circuit_clear_rend_token	src/or/circuitlist.c	/^circuit_clear_rend_token(or_circuit_t *circ)$/;"	f	file:
circuit_close_all_marked	src/or/circuitlist.c	/^circuit_close_all_marked(void)$/;"	f
circuit_consider_sending_sendme	src/or/relay.c	/^circuit_consider_sending_sendme(circuit_t *circ, crypt_path_t *layer_hint)$/;"	f	file:
circuit_consider_stop_edge_reading	src/or/relay.c	/^circuit_consider_stop_edge_reading(circuit_t *circ, crypt_path_t *layer_hint)$/;"	f	file:
circuit_count_pending_on_channel	src/or/circuitlist.c	/^circuit_count_pending_on_channel(channel_t *chan)$/;"	f
circuit_cpath_supports_ntor	src/or/circuitbuild.c	/^circuit_cpath_supports_ntor(const origin_circuit_t *circ)$/;"	f	file:
circuit_deliver_create_cell	src/or/circuitbuild.c	/^circuit_deliver_create_cell(circuit_t *circ, const create_cell_t *create_cell,$/;"	f	file:
circuit_describe_status_for_controller	src/or/control.c	/^circuit_describe_status_for_controller(origin_circuit_t *circ)$/;"	f	file:
circuit_detach_stream	src/or/circuituse.c	/^circuit_detach_stream(circuit_t *circ, edge_connection_t *conn)$/;"	f
circuit_discard_optional_exit_enclaves	src/or/connection_edge.c	/^circuit_discard_optional_exit_enclaves(extend_info_t *info)$/;"	f
circuit_dump_by_conn	src/or/circuitlist.c	/^circuit_dump_by_conn(connection_t *conn, int severity)$/;"	f
circuit_dump_conn_details	src/or/circuitlist.c	/^circuit_dump_conn_details(int severity,$/;"	f	file:
circuit_end_reason_to_control_string	src/or/reasons.c	/^circuit_end_reason_to_control_string(int reason)$/;"	f
circuit_enough_testing_circs	src/or/circuituse.c	/^circuit_enough_testing_circs(void)$/;"	f
circuit_establish_circuit	src/or/circuitbuild.c	/^circuit_establish_circuit(uint8_t purpose, extend_info_t *exit, int flags)$/;"	f
circuit_established	src/or/or.h	/^  unsigned int circuit_established:1;$/;"	m	struct:rend_intro_point_t
circuit_expire_building	src/or/circuituse.c	/^circuit_expire_building(void)$/;"	f
circuit_expire_old_circs_as_needed	src/or/circuituse.c	/^circuit_expire_old_circs_as_needed(time_t now)$/;"	f
circuit_expire_old_circuits_clientside	src/or/circuituse.c	/^circuit_expire_old_circuits_clientside(void)$/;"	f	file:
circuit_expire_old_circuits_serverside	src/or/circuituse.c	/^circuit_expire_old_circuits_serverside(time_t now)$/;"	f
circuit_extend	src/or/circuitbuild.c	/^circuit_extend(cell_t *cell, circuit_t *circ)$/;"	f
circuit_extend_to_new_exit	src/or/circuitbuild.c	/^circuit_extend_to_new_exit(origin_circuit_t *circ, extend_info_t *exit)$/;"	f
circuit_find_to_cannibalize	src/or/circuitlist.c	/^circuit_find_to_cannibalize(uint8_t purpose, extend_info_t *info,$/;"	f
circuit_free	src/or/circuitlist.c	/^circuit_free(circuit_t *circ)$/;"	f
circuit_free_all	src/or/circuitlist.c	/^circuit_free_all(void)$/;"	f
circuit_free_cpath_node	src/or/circuitlist.c	/^circuit_free_cpath_node(crypt_path_t *victim)$/;"	f	file:
circuit_get_all_pending_on_channel	src/or/circuitlist.c	/^circuit_get_all_pending_on_channel(smartlist_t *out, channel_t *chan)$/;"	f
circuit_get_best	src/or/circuituse.c	/^circuit_get_best(const entry_connection_t *conn,$/;"	f	file:
circuit_get_by_circid_channel	src/or/circuitlist.c	/^circuit_get_by_circid_channel(circid_t circ_id, channel_t *chan)$/;"	f
circuit_get_by_circid_channel_even_if_marked	src/or/circuitlist.c	/^circuit_get_by_circid_channel_even_if_marked(circid_t circ_id,$/;"	f
circuit_get_by_circid_channel_impl	src/or/circuitlist.c	/^circuit_get_by_circid_channel_impl(circid_t circ_id, channel_t *chan,$/;"	f	file:
circuit_get_by_edge_conn	src/or/circuitlist.c	/^circuit_get_by_edge_conn(edge_connection_t *conn)$/;"	f
circuit_get_by_global_id	src/or/circuitlist.c	/^circuit_get_by_global_id(uint32_t id)$/;"	f
circuit_get_by_rend_token_and_purpose	src/or/circuitlist.c	/^circuit_get_by_rend_token_and_purpose(uint8_t purpose, int is_rend_circ,$/;"	f	file:
circuit_get_cpath_hop	src/or/circuitlist.c	/^circuit_get_cpath_hop(origin_circuit_t *circ, int hopnum)$/;"	f
circuit_get_cpath_len	src/or/circuitlist.c	/^circuit_get_cpath_len(origin_circuit_t *circ)$/;"	f
circuit_get_global_list	src/test/test_status.c	/^NS(circuit_get_global_list)(void)$/;"	f	file:
circuit_get_intro_point	src/or/circuitlist.c	/^circuit_get_intro_point(const uint8_t *digest)$/;"	f
circuit_get_next_by_pk_and_purpose	src/or/circuitlist.c	/^circuit_get_next_by_pk_and_purpose(origin_circuit_t *start,$/;"	f
circuit_get_open_circ_or_launch	src/or/circuituse.c	/^circuit_get_open_circ_or_launch(entry_connection_t *conn,$/;"	f	file:
circuit_get_ready_rend_circ_by_rend_data	src/or/circuitlist.c	/^circuit_get_ready_rend_circ_by_rend_data(const rend_data_t *rend_data)$/;"	f
circuit_get_rendezvous	src/or/circuitlist.c	/^circuit_get_rendezvous(const uint8_t *cookie)$/;"	f
circuit_get_streams_max_data_age	src/or/circuitlist.c	/^circuit_get_streams_max_data_age(const edge_connection_t *stream, uint32_t now)$/;"	f	file:
circuit_get_unhandled_ports	src/or/circuitbuild.c	/^circuit_get_unhandled_ports(time_t now)$/;"	f	file:
circuit_handle_first_hop	src/or/circuitbuild.c	/^circuit_handle_first_hop(origin_circuit_t *circ)$/;"	f
circuit_has_opened	src/or/circuituse.c	/^circuit_has_opened(origin_circuit_t *circ)$/;"	f
circuit_id_in_use_on_channel	src/or/circuitlist.c	/^circuit_id_in_use_on_channel(circid_t circ_id, channel_t *chan)$/;"	f
circuit_id_when_marked_unusable_on_channel	src/or/circuitlist.c	/^circuit_id_when_marked_unusable_on_channel(circid_t circ_id, channel_t *chan)$/;"	f
circuit_increment_failure_count	src/or/circuituse.c	/^circuit_increment_failure_count(void)$/;"	f	file:
circuit_init_cpath_crypto	src/or/circuitbuild.c	/^circuit_init_cpath_crypto(crypt_path_t *cpath, const char *key_data,$/;"	f
circuit_initial_package_window	src/or/circuitlist.c	/^circuit_initial_package_window(void)$/;"	f
circuit_is_acceptable	src/or/circuituse.c	/^circuit_is_acceptable(const origin_circuit_t *origin_circ,$/;"	f	file:
circuit_is_better	src/or/circuituse.c	/^circuit_is_better(const origin_circuit_t *oa, const origin_circuit_t *ob,$/;"	f	file:
circuit_launch	src/or/circuituse.c	/^circuit_launch(uint8_t purpose, int flags)$/;"	f
circuit_launch_by_extend_info	src/or/circuituse.c	/^circuit_launch_by_extend_info(uint8_t purpose,$/;"	f
circuit_list_path	src/or/circuitbuild.c	/^circuit_list_path(origin_circuit_t *circ, int verbose)$/;"	f
circuit_list_path_for_controller	src/or/circuitbuild.c	/^circuit_list_path_for_controller(origin_circuit_t *circ)$/;"	f
circuit_list_path_impl	src/or/circuitbuild.c	/^circuit_list_path_impl(origin_circuit_t *circ, int verbose, int verbose_names)$/;"	f	file:
circuit_log_ancient_one_hop_circuits	src/or/circuituse.c	/^circuit_log_ancient_one_hop_circuits(int age)$/;"	f
circuit_log_path	src/or/circuitbuild.c	/^circuit_log_path(int severity, unsigned int domain, origin_circuit_t *circ)$/;"	f
circuit_mark_all_dirty_circs_as_unusable	src/or/circuitlist.c	/^circuit_mark_all_dirty_circs_as_unusable(void)$/;"	f
circuit_mark_all_unused_circs	src/or/circuitlist.c	/^circuit_mark_all_unused_circs(void)$/;"	f
circuit_mark_for_close	src/or/circuitlist.h	/^#define circuit_mark_for_close(/;"	d
circuit_mark_for_close_dummy_	src/test/test_oom.c	/^circuit_mark_for_close_dummy_(circuit_t *circ, int reason, int line,$/;"	f	file:
circuit_max_queued_cell_age	src/or/circuitlist.c	/^circuit_max_queued_cell_age(const circuit_t *c, uint32_t now)$/;"	f
circuit_max_queued_data_age	src/or/circuitlist.c	/^circuit_max_queued_data_age(const circuit_t *c, uint32_t now)$/;"	f
circuit_max_queued_item_age	src/or/circuitlist.c	/^circuit_max_queued_item_age(const circuit_t *c, uint32_t now)$/;"	f
circuit_muxinfo_s	src/or/circuitmux.c	/^struct circuit_muxinfo_s {$/;"	s	file:
circuit_muxinfo_t	src/or/circuitmux.c	/^typedef struct circuit_muxinfo_s circuit_muxinfo_t;$/;"	t	typeref:struct:circuit_muxinfo_s	file:
circuit_n_chan_done	src/or/circuitbuild.c	/^circuit_n_chan_done(channel_t *chan, int status, int close_origin_circuits)$/;"	f
circuit_note_clock_jumped	src/or/circuitbuild.c	/^circuit_note_clock_jumped(int seconds_elapsed)$/;"	f
circuit_package_relay_cell	src/or/relay.c	/^circuit_package_relay_cell(cell_t *cell, circuit_t *circ,$/;"	f	file:
circuit_pick_create_handshake	src/or/circuitbuild.c	/^circuit_pick_create_handshake(uint8_t *cell_type_out,$/;"	f	file:
circuit_pick_extend_handshake	src/or/circuitbuild.c	/^circuit_pick_extend_handshake(uint8_t *cell_type_out,$/;"	f	file:
circuit_predict_and_launch_new	src/or/circuituse.c	/^circuit_predict_and_launch_new(void)$/;"	f	file:
circuit_purpose_from_string	src/or/control.c	/^circuit_purpose_from_string(const char *string)$/;"	f	file:
circuit_purpose_to_controller_hs_state_string	src/or/circuitlist.c	/^circuit_purpose_to_controller_hs_state_string(uint8_t purpose)$/;"	f
circuit_purpose_to_controller_string	src/or/circuitlist.c	/^circuit_purpose_to_controller_string(uint8_t purpose)$/;"	f
circuit_purpose_to_string	src/or/circuitlist.c	/^circuit_purpose_to_string(uint8_t purpose)$/;"	f
circuit_queue_streams_are_blocked	src/or/relay.c	/^circuit_queue_streams_are_blocked(circuit_t *circ)$/;"	f	file:
circuit_receive_relay_cell	src/or/relay.c	/^circuit_receive_relay_cell(cell_t *cell, circuit_t *circ,$/;"	f
circuit_remove_handled_ports	src/or/circuituse.c	/^circuit_remove_handled_ports(smartlist_t *needed_ports)$/;"	f
circuit_rep_hist_note_result	src/or/circuitbuild.c	/^circuit_rep_hist_note_result(origin_circuit_t *circ)$/;"	f
circuit_reset_failure_count	src/or/circuituse.c	/^circuit_reset_failure_count(int timeout)$/;"	f
circuit_resume_edge_reading	src/or/relay.c	/^circuit_resume_edge_reading(circuit_t *circ, crypt_path_t *layer_hint)$/;"	f	file:
circuit_resume_edge_reading_helper	src/or/relay.c	/^circuit_resume_edge_reading_helper(edge_connection_t *first_conn,$/;"	f	file:
circuit_retries	src/or/or.h	/^  unsigned int circuit_retries;$/;"	m	struct:rend_intro_point_t
circuit_set_circid_chan_helper	src/or/circuitlist.c	/^circuit_set_circid_chan_helper(circuit_t *circ, int direction,$/;"	f	file:
circuit_set_intro_point_digest	src/or/circuitlist.c	/^circuit_set_intro_point_digest(or_circuit_t *circ, const uint8_t *digest)$/;"	f
circuit_set_n_circid_chan	src/or/circuitlist.c	/^circuit_set_n_circid_chan(circuit_t *circ, circid_t id,$/;"	f
circuit_set_p_circid_chan	src/or/circuitlist.c	/^circuit_set_p_circid_chan(or_circuit_t *or_circ, circid_t id,$/;"	f
circuit_set_rend_token	src/or/circuitlist.c	/^circuit_set_rend_token(or_circuit_t *circ, int is_rend_circ,$/;"	f	file:
circuit_set_rendezvous_cookie	src/or/circuitlist.c	/^circuit_set_rendezvous_cookie(or_circuit_t *circ, const uint8_t *cookie)$/;"	f
circuit_set_state	src/or/circuitlist.c	/^circuit_set_state(circuit_t *circ, uint8_t state)$/;"	f
circuit_state_to_string	src/or/circuitlist.c	/^circuit_state_to_string(int state)$/;"	f
circuit_status_event_t	src/or/or.h	/^typedef enum circuit_status_event_t {$/;"	g
circuit_status_event_t	src/or/or.h	/^} circuit_status_event_t;$/;"	t	typeref:enum:circuit_status_event_t
circuit_status_minor_event_t	src/or/or.h	/^typedef enum circuit_status_minor_event_t {$/;"	g
circuit_status_minor_event_t	src/or/or.h	/^} circuit_status_minor_event_t;$/;"	t	typeref:enum:circuit_status_minor_event_t
circuit_stream_is_being_handled	src/or/circuituse.c	/^circuit_stream_is_being_handled(entry_connection_t *conn,$/;"	f
circuit_t	src/or/or.h	/^typedef struct circuit_t {$/;"	s
circuit_t	src/or/or.h	/^} circuit_t;$/;"	t	typeref:struct:circuit_t
circuit_testing_failed	src/or/circuituse.c	/^circuit_testing_failed(origin_circuit_t *circ, int at_last_hop)$/;"	f	file:
circuit_testing_opened	src/or/circuituse.c	/^circuit_testing_opened(origin_circuit_t *circ)$/;"	f	file:
circuit_timeout_want_to_count_circ	src/or/circuitbuild.c	/^circuit_timeout_want_to_count_circ(origin_circuit_t *circ)$/;"	f
circuit_truncated	src/or/circuitbuild.c	/^circuit_truncated(origin_circuit_t *circ, crypt_path_t *layer, int reason)$/;"	f
circuit_try_attaching_streams	src/or/circuituse.c	/^circuit_try_attaching_streams(origin_circuit_t *circ)$/;"	f
circuit_try_clearing_isolation_state	src/or/circuituse.c	/^circuit_try_clearing_isolation_state(origin_circuit_t *circ)$/;"	f	file:
circuit_unlink_all_from_channel	src/or/circuitlist.c	/^circuit_unlink_all_from_channel(channel_t *chan, int reason)$/;"	f
circuitbuild_running_unit_tests	src/or/circuitstats.c	/^circuitbuild_running_unit_tests(void)$/;"	f
circuitlist_tests	src/test/test_circuitlist.c	/^struct testcase_t circuitlist_tests[] = {$/;"	v	typeref:struct:testcase_t
circuitmux_alloc	src/or/circuitmux.c	/^circuitmux_alloc(void)$/;"	f
circuitmux_append_destroy_cell	src/or/circuitmux.c	/^circuitmux_append_destroy_cell(channel_t *chan,$/;"	f
circuitmux_assert_okay	src/or/circuitmux.c	/^circuitmux_assert_okay(circuitmux_t *cmux)$/;"	f
circuitmux_assert_okay_paranoid	src/or/circuitmux.c	/^#define circuitmux_assert_okay_paranoid(/;"	d	file:
circuitmux_assert_okay_pass_one	src/or/circuitmux.c	/^circuitmux_assert_okay_pass_one(circuitmux_t *cmux)$/;"	f	file:
circuitmux_assert_okay_pass_three	src/or/circuitmux.c	/^circuitmux_assert_okay_pass_three(circuitmux_t *cmux)$/;"	f	file:
circuitmux_assert_okay_pass_two	src/or/circuitmux.c	/^circuitmux_assert_okay_pass_two(circuitmux_t *cmux)$/;"	f	file:
circuitmux_attach_mock	src/test/test_circuitlist.c	/^circuitmux_attach_mock(circuitmux_t *cmux, circuit_t *circ,$/;"	f	file:
circuitmux_attached_circuit_direction	src/or/circuitmux.c	/^circuitmux_attached_circuit_direction(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_clear_num_cells	src/or/circuitmux.c	/^circuitmux_clear_num_cells(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_clear_policy	src/or/circuitmux.c	/^circuitmux_clear_policy(circuitmux_t *cmux)$/;"	f
circuitmux_compare_muxes_mock	src/test/test_scheduler.c	/^circuitmux_compare_muxes_mock(circuitmux_t *cmux_1,$/;"	f	file:
circuitmux_count_queued_destroy_cells	src/or/circuitmux.c	/^circuitmux_count_queued_destroy_cells(const channel_t *chan,$/;"	f
circuitmux_detach_all_circuits	src/or/circuitmux.c	/^circuitmux_detach_all_circuits(circuitmux_t *cmux, smartlist_t *detached_out)$/;"	f
circuitmux_detach_mock	src/test/test_circuitlist.c	/^circuitmux_detach_mock(circuitmux_t *cmux, circuit_t *circ)$/;"	f	file:
circuitmux_find_map_entry	src/or/circuitmux.c	/^circuitmux_find_map_entry(circuitmux_t *cmux, circuit_t *circ)$/;"	f	file:
circuitmux_free	src/or/circuitmux.c	/^circuitmux_free(circuitmux_t *cmux)$/;"	f
circuitmux_get_first_active_circuit	src/or/circuitmux.c	/^circuitmux_get_first_active_circuit(circuitmux_t *cmux,$/;"	f
circuitmux_get_policy_mock	src/test/test_scheduler.c	/^circuitmux_get_policy_mock(circuitmux_t *cmux)$/;"	f	file:
circuitmux_is_circuit_active	src/or/circuitmux.c	/^circuitmux_is_circuit_active(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_is_circuit_attached	src/or/circuitmux.c	/^circuitmux_is_circuit_attached(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_make_circuit_active	src/or/circuitmux.c	/^circuitmux_make_circuit_active(circuitmux_t *cmux, circuit_t *circ,$/;"	f	file:
circuitmux_make_circuit_inactive	src/or/circuitmux.c	/^circuitmux_make_circuit_inactive(circuitmux_t *cmux, circuit_t *circ,$/;"	f	file:
circuitmux_mark_destroyed_circids_usable	src/or/circuitmux.c	/^circuitmux_mark_destroyed_circids_usable(circuitmux_t *cmux, channel_t *chan)$/;"	f
circuitmux_move_active_circ_to_tail	src/or/circuitmux.c	/^circuitmux_move_active_circ_to_tail(circuitmux_t *cmux, circuit_t *circ,$/;"	f	file:
circuitmux_next_active_circ_p	src/or/circuitmux.c	/^circuitmux_next_active_circ_p(circuitmux_t *cmux, circuit_t *circ)$/;"	f	file:
circuitmux_notify_xmit_cells	src/or/circuitmux.c	/^circuitmux_notify_xmit_cells(circuitmux_t *cmux, circuit_t *circ,$/;"	f
circuitmux_notify_xmit_destroy	src/or/circuitmux.c	/^circuitmux_notify_xmit_destroy(circuitmux_t *cmux)$/;"	f
circuitmux_num_active_circuits	src/or/circuitmux.c	/^circuitmux_num_active_circuits(circuitmux_t *cmux)$/;"	f
circuitmux_num_cells_for_circuit	src/or/circuitmux.c	/^circuitmux_num_cells_for_circuit(circuitmux_t *cmux, circuit_t *circ)$/;"	f
circuitmux_num_circuits	src/or/circuitmux.c	/^circuitmux_num_circuits(circuitmux_t *cmux)$/;"	f
circuitmux_policy_circ_data_s	src/or/circuitmux.h	/^struct circuitmux_policy_circ_data_s {$/;"	s
circuitmux_policy_circ_data_t	src/or/circuitmux.h	/^typedef struct circuitmux_policy_circ_data_s circuitmux_policy_circ_data_t;$/;"	t	typeref:struct:circuitmux_policy_circ_data_s
circuitmux_policy_data_s	src/or/circuitmux.h	/^struct circuitmux_policy_data_s {$/;"	s
circuitmux_policy_data_t	src/or/circuitmux.h	/^typedef struct circuitmux_policy_data_s circuitmux_policy_data_t;$/;"	t	typeref:struct:circuitmux_policy_data_s
circuitmux_policy_s	src/or/circuitmux.h	/^struct circuitmux_policy_s {$/;"	s
circuitmux_policy_t	src/or/circuitmux.h	/^typedef struct circuitmux_policy_s circuitmux_policy_t;$/;"	t	typeref:struct:circuitmux_policy_s
circuitmux_prev_active_circ_p	src/or/circuitmux.c	/^circuitmux_prev_active_circ_p(circuitmux_t *cmux, circuit_t *circ)$/;"	f	file:
circuitmux_s	src/or/circuitmux.c	/^struct circuitmux_s {$/;"	s	file:
circuitmux_set_num_cells	src/or/circuitmux.c	/^circuitmux_set_num_cells(circuitmux_t *cmux, circuit_t *circ,$/;"	f
circuitmux_set_policy	src/or/circuitmux.c	/^circuitmux_set_policy(circuitmux_t *cmux,$/;"	f
circuitmux_t	src/or/or.h	/^typedef struct circuitmux_s circuitmux_t;$/;"	t	typeref:struct:circuitmux_s
circuitmux_tests	src/test/test_circuitmux.c	/^struct testcase_t circuitmux_tests[] = {$/;"	v	typeref:struct:testcase_t
circuits_can_use_ntor	src/or/circuitbuild.c	/^circuits_can_use_ntor(void)$/;"	f	file:
circuits_compare_by_oldest_queued_item_	src/or/circuitlist.c	/^circuits_compare_by_oldest_queued_item_(const void **a_, const void **b_)$/;"	f	file:
circuits_for_buffer_stats	src/or/rephist.c	/^static smartlist_t *circuits_for_buffer_stats = NULL;$/;"	v	file:
circuits_handle_oom	src/or/circuitlist.c	/^circuits_handle_oom(size_t current_allocation)$/;"	f
circuits_pending_chans	src/or/circuitlist.c	/^static smartlist_t *circuits_pending_chans = NULL;$/;"	v	file:
clean_backtrace	src/common/backtrace.c	/^clean_backtrace(void **stack, int depth, const ucontext_t *ctx)$/;"	f
clean_caches	src/or/main.h	/^  time_t clean_caches;$/;"	m	struct:__anon5
clean_name_for_stat	src/common/util.c	/^clean_name_for_stat(char *name)$/;"	f	file:
clean_relay_connection_test_data	src/test/test_relay.c	/^clean_relay_connection_test_data(relay_connection_test_data_t *data)$/;"	f	file:
clean_up_backtrace_handler	src/common/backtrace.c	/^clean_up_backtrace_handler(void)$/;"	f
cleanup_command_type_holder	src/test/test_relay.c	/^int cleanup_command_type_holder(const struct testcase_t *tc, void *env_)$/;"	f
cleanup_fn	src/ext/tinytest.h	/^	int (*cleanup_fn)(const struct testcase_t *, void *);$/;"	m	struct:testcase_setup_t
clear_bridge_list	src/or/entrynodes.c	/^clear_bridge_list(void)$/;"	f	file:
clear_broken_connection_map	src/or/connection_or.c	/^clear_broken_connection_map(int stop_recording)$/;"	f
clear_cached_dir	src/or/dirserv.c	/^clear_cached_dir(cached_dir_t *d)$/;"	f	file:
clear_circ_bw_fields	src/or/control.c	/^clear_circ_bw_fields(void)$/;"	f	file:
clear_dir_servers	src/or/routerlist.c	/^clear_dir_servers(void)$/;"	f
clear_geoip_db	src/or/geoip.c	/^clear_geoip_db(void)$/;"	f
clear_hex_errno	src/test/test_util.c	/^clear_hex_errno(char *hex_errno)$/;"	f	file:
clear_log_messages	src/test/test_options.c	/^clear_log_messages(void)$/;"	f	file:
clear_passphrase	src/tools/tor-gencert.c	/^clear_passphrase(void)$/;"	f	file:
clear_pending_onions	src/or/onion.c	/^clear_pending_onions(void)$/;"	f
clear_status_flags_on_sybil	src/or/dirserv.c	/^clear_status_flags_on_sybil(routerstatus_t *rs)$/;"	f	file:
clear_trackexithost_mappings	src/or/addressmap.c	/^clear_trackexithost_mappings(const char *exitname)$/;"	f
clear_transport_list	src/or/transports.c	/^clear_transport_list(void)$/;"	f	file:
clear_waitpid_callback	src/common/util_process.c	/^clear_waitpid_callback(waitpid_callback_t *ent)$/;"	f
client1	src/test/test_ntor_cl.c	/^client1(int argc, char **argv)$/;"	f	file:
client2	src/test/test_ntor_cl.c	/^client2(int argc, char **argv)$/;"	f	file:
client_addr	src/or/or.h	/^  tor_addr_t client_addr;$/;"	m	struct:origin_circuit_t
client_check_address_changed	src/or/connection.c	/^client_check_address_changed(tor_socket_t sock)$/;"	f	file:
client_cipher_list_type	src/common/tortls.h	/^  int8_t client_cipher_list_type;$/;"	m	struct:tor_tls_t
client_dns_clear_failures	src/or/addressmap.c	/^client_dns_clear_failures(const char *address)$/;"	f
client_dns_incr_failures	src/or/addressmap.c	/^client_dns_incr_failures(const char *address)$/;"	f
client_dns_set_addressmap	src/or/addressmap.c	/^client_dns_set_addressmap(entry_connection_t *for_conn,$/;"	f
client_dns_set_addressmap_impl	src/or/addressmap.c	/^client_dns_set_addressmap_impl(entry_connection_t *for_conn,$/;"	f	file:
client_dns_set_reverse_addressmap	src/or/addressmap.c	/^client_dns_set_reverse_addressmap(entry_connection_t *for_conn,$/;"	f
client_history_clear	src/or/geoip.c	/^client_history_clear(void)$/;"	f	file:
client_identity_key_is_set	src/or/router.c	/^client_identity_key_is_set(void)$/;"	f
client_identitykey	src/or/router.c	/^static crypto_pk_t *client_identitykey=NULL;$/;"	v	file:
client_key	src/or/or.h	/^  crypto_pk_t *client_key;$/;"	m	struct:rend_authorized_client_t
client_keys_token_table	src/or/routerparse.c	/^static token_rule_t client_keys_token_table[] = {$/;"	v	file:
client_likes_consensus	src/or/directory.c	/^client_likes_consensus(networkstatus_t *v, const char *want_url)$/;"	f
client_name	src/or/or.h	/^  char *client_name;$/;"	m	struct:rend_authorized_client_t
client_proto_socksver	src/or/or.h	/^  uint8_t client_proto_socksver;$/;"	m	struct:origin_circuit_t
client_proto_type	src/or/or.h	/^  uint8_t client_proto_type;$/;"	m	struct:origin_circuit_t
client_tls_context	src/common/tortls.c	/^STATIC tor_tls_context_t *client_tls_context = NULL;$/;"	v
client_versions	src/or/or.h	/^  char *client_versions;$/;"	m	struct:networkstatus_t
client_would_use_router	src/or/networkstatus.c	/^client_would_use_router(const routerstatus_t *rs, time_t now,$/;"	f
clientmap_entries_eq	src/or/geoip.c	/^clientmap_entries_eq(const clientmap_entry_t *a, const clientmap_entry_t *b)$/;"	f	file:
clientmap_entry_free	src/or/geoip.c	/^clientmap_entry_free(clientmap_entry_t *ent)$/;"	f	file:
clientmap_entry_hash	src/or/geoip.c	/^clientmap_entry_hash(const clientmap_entry_t *a)$/;"	f	file:
clientmap_entry_t	src/or/geoip.c	/^typedef struct clientmap_entry_t {$/;"	s	file:
clientmap_entry_t	src/or/geoip.c	/^} clientmap_entry_t;$/;"	t	typeref:struct:clientmap_entry_t	file:
clients	src/or/rendservice.c	/^  smartlist_t *clients; \/**< List of rend_authorized_client_t's of$/;"	m	struct:rend_service_t	file:
clog	src/trunnel/link_handshake.h	/^  uint8_t clog[32];$/;"	m	struct:auth1_st
close	src/or/channel.h	/^  void (*close)(channel_listener_t *);$/;"	m	struct:channel_listener_s
close	src/or/channel.h	/^  void (*close)(channel_t *);$/;"	m	struct:channel_s
close_closeable_connections	src/or/main.c	/^close_closeable_connections(void)$/;"	f
close_log	src/common/log.c	/^close_log(logfile_t *victim)$/;"	f	file:
close_ms	src/or/circuitstats.h	/^  double close_ms;$/;"	m	struct:circuit_build_times_s
close_temp_logs	src/common/log.c	/^close_temp_logs(void)$/;"	f
closeable_connection_lst	src/or/main.c	/^STATIC smartlist_t *closeable_connection_lst = NULL;$/;"	v
cmd	src/or/or.h	/^  uint16_t cmd; \/** Command type *\/$/;"	m	struct:ext_or_cmd_t
cmov	src/ext/ed25519/ref10/ge_scalarmult_base.c	/^static void cmov(ge_precomp *t,ge_precomp *u,unsigned char b)$/;"	f	file:
cmp_addr_policies	src/or/policies.c	/^cmp_addr_policies(smartlist_t *a, smartlist_t *b)$/;"	f
cmp_cmux	src/or/circuitmux.h	/^  int (*cmp_cmux)(circuitmux_t *cmux_1, circuitmux_policy_data_t *pol_data_1,$/;"	m	struct:circuitmux_policy_s
cmp_int_strings_	src/or/dirvote.c	/^cmp_int_strings_(const void **_a, const void **_b)$/;"	f	file:
cmp_single_addr_policy	src/or/policies.c	/^cmp_single_addr_policy(addr_policy_t *a, addr_policy_t *b)$/;"	f	file:
cmp_without_first_	src/test/test_containers.c	/^cmp_without_first_(const void *a, const void **b)$/;"	f	file:
cmult	src/ext/curve25519_donna/curve25519-donna-c64.c	/^cmult(limb *resultx, limb *resultz, const u8 *n, const limb *q) {$/;"	f	file:
cmux	src/or/channel.h	/^  circuitmux_t *cmux;$/;"	m	struct:channel_s
cmux	src/test/test_circuitlist.c	/^  void *cmux;$/;"	m	struct:__anon77	file:
cmux	src/test/test_circuitlist.c	/^  void *cmux;$/;"	m	struct:__anon78	file:
code	src/common/compat.c	/^struct { int code; const char *msg; } windows_socket_errors[] = {$/;"	m	struct:__anon25	file:
collapsed_circuits	src/or/entrynodes.h	/^  double collapsed_circuits; \/**< Number of fully built circuits that were$/;"	m	struct:entry_guard_t
command	src/or/or.h	/^  uint8_t command; \/**< The end-to-end relay command. *\/$/;"	m	struct:__anon40
command	src/or/or.h	/^  uint8_t command; \/**< Type of the cell: one of CELL_PADDING, CELL_CREATE,$/;"	m	struct:cell_t
command	src/or/or.h	/^  uint8_t command; \/**< cell command number. *\/$/;"	m	struct:testing_cell_stats_entry_t
command	src/or/or.h	/^  uint8_t command;$/;"	m	struct:socks_request_t
command	src/or/or.h	/^  uint8_t command;$/;"	m	struct:var_cell_t
command	src/or/or.h	/^  unsigned int command:2;$/;"	m	struct:config_line_t
command	src/or/or.h	/^  } command;$/;"	m	struct:__anon55	typeref:enum:__anon55::__anon56
command	src/test/test_relay.c	/^  uint8_t command;$/;"	m	struct:command_type_holder_t	file:
command_allowed_before_handshake	src/or/channeltls.c	/^command_allowed_before_handshake(uint8_t command)$/;"	f	file:
command_arg	src/or/or.h	/^  char *command_arg; \/**< Argument for command-line option. *\/$/;"	m	struct:__anon55
command_handle_incoming_channel	src/or/command.c	/^command_handle_incoming_channel(channel_listener_t *listener, channel_t *chan)$/;"	f	file:
command_process_cell	src/or/command.c	/^command_process_cell(channel_t *chan, cell_t *cell)$/;"	f
command_process_create_cell	src/or/command.c	/^command_process_create_cell(cell_t *cell, channel_t *chan)$/;"	f	file:
command_process_created_cell	src/or/command.c	/^command_process_created_cell(cell_t *cell, channel_t *chan)$/;"	f	file:
command_process_destroy_cell	src/or/command.c	/^command_process_destroy_cell(cell_t *cell, channel_t *chan)$/;"	f	file:
command_process_relay_cell	src/or/command.c	/^command_process_relay_cell(cell_t *cell, channel_t *chan)$/;"	f	file:
command_process_var_cell	src/or/command.c	/^command_process_var_cell(channel_t *chan, var_cell_t *var_cell)$/;"	f
command_setup_channel	src/or/command.c	/^command_setup_channel(channel_t *chan)$/;"	f
command_setup_listener	src/or/command.c	/^command_setup_listener(channel_listener_t *listener)$/;"	f
command_time_process_cell	src/or/command.c	/^command_time_process_cell(cell_t *cell, channel_t *chan, int *time,$/;"	f	file:
command_type_holder_t	src/test/test_relay.c	/^typedef struct command_type_holder_t {$/;"	s	file:
command_type_holder_t	src/test/test_relay.c	/^} command_type_holder_t;$/;"	t	typeref:struct:command_type_holder_t	file:
commandline_only	src/or/confparse.h	/^  int commandline_only;$/;"	m	struct:config_abbrev_t
commandname	src/ext/tinytest.c	/^static char commandname[MAX_PATH+1];$/;"	v	file:
commit_max	src/or/rephist.c	/^commit_max(bw_array_t *b)$/;"	f	file:
compare_cached_resolves_by_expiry_	src/or/dns.c	/^compare_cached_resolves_by_expiry_(const void *_a, const void *_b)$/;"	f	file:
compare_cell_ewma_counts	src/or/circuitmux_ewma.c	/^compare_cell_ewma_counts(const void *p1, const void *p2)$/;"	f	file:
compare_certs_by_pubdates	src/or/routerlist.c	/^compare_certs_by_pubdates(const void **_a, const void **_b)$/;"	f	file:
compare_digest_to_routerstatus_entry	src/or/networkstatus.c	/^compare_digest_to_routerstatus_entry(const void *_key, const void **_member)$/;"	f
compare_digest_to_vote_routerstatus_entry	src/or/networkstatus.c	/^compare_digest_to_vote_routerstatus_entry(const void *_key,$/;"	f
compare_digests256_	src/common/container.c	/^compare_digests256_(const void **_a, const void **_b)$/;"	f	file:
compare_digests_	src/common/container.c	/^compare_digests_(const void **_a, const void **_b)$/;"	f	file:
compare_dir_src_ents_by_authority_id_	src/or/dirvote.c	/^compare_dir_src_ents_by_authority_id_(const void **_a, const void **_b)$/;"	f	file:
compare_duration_idx_	src/or/routerlist.c	/^compare_duration_idx_(const void *_d1, const void *_d2)$/;"	f	file:
compare_int_	src/or/rephist.c	/^compare_int_(const void *x, const void *y)$/;"	f	file:
compare_known_tor_addr_to_addr_policy	src/or/policies.c	/^compare_known_tor_addr_to_addr_policy(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
compare_known_tor_addr_to_addr_policy_noport	src/or/policies.c	/^compare_known_tor_addr_to_addr_policy_noport(const tor_addr_t *addr,$/;"	f	file:
compare_old_routers_by_identity_	src/or/routerlist.c	/^compare_old_routers_by_identity_(const void **_a, const void **_b)$/;"	f	file:
compare_orports_	src/or/dirvote.c	/^compare_orports_(const void **_a, const void **_b)$/;"	f	file:
compare_pairs_	src/or/directory.c	/^compare_pairs_(const void **a, const void **b)$/;"	f	file:
compare_ptrs_	src/common/container.c	/^compare_ptrs_(const void **_a, const void **_b)$/;"	f	file:
compare_routerinfo_by_id_digest_	src/or/routerlist.c	/^compare_routerinfo_by_id_digest_(const void **a, const void **b)$/;"	f	file:
compare_routerinfo_by_ip_and_bw_	src/or/dirserv.c	/^compare_routerinfo_by_ip_and_bw_(const void **a, const void **b)$/;"	f	file:
compare_signed_descriptors_by_age_	src/or/routerlist.c	/^compare_signed_descriptors_by_age_(const void **_a, const void **_b)$/;"	f	file:
compare_string_ptrs_	src/common/container.c	/^compare_string_ptrs_(const void **_a, const void **_b)$/;"	f	file:
compare_strings_for_pqueue_	src/test/test_containers.c	/^compare_strings_for_pqueue_(const void *p1, const void *p2)$/;"	f	file:
compare_strs_	src/or/directory.c	/^compare_strs_(const void **a, const void **b)$/;"	f	file:
compare_strs_	src/test/test_containers.c	/^compare_strs_(const void **a, const void **b)$/;"	f	file:
compare_strs_for_bsearch_	src/test/test_containers.c	/^compare_strs_for_bsearch_(const void *a, const void **b)$/;"	f	file:
compare_tor_addr_to_addr_policy	src/test/test_routerset.c	/^NS(compare_tor_addr_to_addr_policy)(const tor_addr_t *addr, uint16_t port,$/;"	f
compare_tor_addr_to_node_policy	src/or/policies.c	/^compare_tor_addr_to_node_policy(const tor_addr_t *addr, uint16_t port,$/;"	f
compare_tor_addr_to_short_policy	src/or/policies.c	/^compare_tor_addr_to_short_policy(const tor_addr_t *addr, uint16_t port,$/;"	f
compare_tor_version_str_ptr_	src/or/routerparse.c	/^compare_tor_version_str_ptr_(const void **_a, const void **_b)$/;"	f	file:
compare_unknown_tor_addr_to_addr_policy	src/or/policies.c	/^compare_unknown_tor_addr_to_addr_policy(uint16_t port,$/;"	f	file:
compare_vote_routerstatus_entries	src/or/routerparse.c	/^compare_vote_routerstatus_entries(const void **_a, const void **_b)$/;"	f
compare_vote_rs	src/or/dirvote.c	/^compare_vote_rs(const vote_routerstatus_t *a, const vote_routerstatus_t *b)$/;"	f	file:
compare_vote_rs_	src/or/dirvote.c	/^compare_vote_rs_(const void **_a, const void **_b)$/;"	f	file:
compare_votes_by_authority_id_	src/or/dirvote.c	/^compare_votes_by_authority_id_(const void **_a, const void **_b)$/;"	f	file:
compat_libevent_tests	src/test/test_compat_libevent.c	/^struct testcase_t compat_libevent_tests[] = {$/;"	v	typeref:struct:testcase_t
completed	src/or/geoip.c	/^  unsigned int completed:1; \/**< Is this request complete? *\/$/;"	m	struct:dirreq_map_entry_t	file:
completion_time	src/or/geoip.c	/^  struct timeval completion_time; \/**< When did the request succeed? *\/$/;"	m	struct:dirreq_map_entry_t	typeref:struct:dirreq_map_entry_t::timeval	file:
compress	src/common/torgzip.c	/^  int compress; \/**< True if we are compressing; false if we are inflating *\/$/;"	m	struct:tor_zlib_state_t	file:
compress_method_t	src/common/torgzip.h	/^} compress_method_t;$/;"	t	typeref:enum:__anon80
compute_consensus_method	src/or/dirvote.c	/^compute_consensus_method(smartlist_t *votes)$/;"	f	file:
compute_consensus_package_lines	src/or/dirvote.c	/^compute_consensus_package_lines(smartlist_t *votes)$/;"	f
compute_consensus_versions_list	src/or/dirvote.c	/^compute_consensus_versions_list(smartlist_t *lst, int n_versioning)$/;"	f	file:
compute_desc_id	src/or/rendcommon.c	/^compute_desc_id(rend_data_t *rend_data)$/;"	f	file:
compute_frac_paths_available	src/or/nodelist.c	/^compute_frac_paths_available(const networkstatus_t *consensus,$/;"	f	file:
compute_num_cpus	src/common/compat.c	/^compute_num_cpus(void)$/;"	f
compute_num_cpus_impl	src/common/compat.c	/^compute_num_cpus_impl(void)$/;"	f	file:
compute_publishserverdescriptor	src/or/config.c	/^compute_publishserverdescriptor(or_options_t *options)$/;"	f	file:
compute_real_max_mem_in_queues	src/or/config.c	/^compute_real_max_mem_in_queues(const uint64_t val, int log_guess)$/;"	f	file:
compute_retry_timeout	src/or/connection_edge.c	/^compute_retry_timeout(entry_connection_t *conn)$/;"	f	file:
compute_routerstatus_consensus	src/or/dirvote.c	/^compute_routerstatus_consensus(smartlist_t *votes, int consensus_method,$/;"	f	file:
compute_weighted_bandwidths	src/or/routerlist.c	/^compute_weighted_bandwidths(const smartlist_t *sl,$/;"	f	file:
concat_args	src/or/routerparse.c	/^  int concat_args;$/;"	m	struct:token_rule_t	file:
cond	src/common/compat_threads.h	/^  pthread_cond_t cond;$/;"	m	struct:tor_cond_t
cond	src/test/test_threads.c	/^  tor_cond_t *cond;$/;"	m	struct:cv_testinfo_s	file:
condition	src/common/workqueue.c	/^  tor_cond_t condition;$/;"	m	struct:threadpool_s	file:
conf_protocol	src/or/transports.h	/^  int conf_protocol; \/* the configuration protocol version used *\/$/;"	m	struct:__anon34
conf_state	src/or/transports.h	/^  enum pt_proto_state conf_state; \/* the current configuration state *\/$/;"	m	struct:__anon34	typeref:enum:__anon34::pt_proto_state
config_abbrev_t	src/or/confparse.h	/^typedef struct config_abbrev_t {$/;"	s
config_abbrev_t	src/or/confparse.h	/^} config_abbrev_t;$/;"	t	typeref:struct:config_abbrev_t
config_assign	src/or/confparse.c	/^config_assign(const config_format_t *fmt, void *options, config_line_t *list,$/;"	f
config_assign_line	src/or/confparse.c	/^config_assign_line(const config_format_t *fmt, void *options,$/;"	f	file:
config_assign_value	src/or/confparse.c	/^config_assign_value(const config_format_t *fmt, void *options,$/;"	f	file:
config_clear	src/or/confparse.c	/^config_clear(const config_format_t *fmt, void *options,$/;"	f	file:
config_count_key	src/or/confparse.c	/^config_count_key(const config_line_t *a, const char *key)$/;"	f
config_count_options	src/or/confparse.c	/^config_count_options(const config_format_t *fmt)$/;"	f	file:
config_dump	src/or/confparse.c	/^config_dump(const config_format_t *fmt, const void *default_options,$/;"	f
config_dup	src/or/confparse.c	/^config_dup(const config_format_t *fmt, const void *old)$/;"	f
config_expand_abbrev	src/or/confparse.c	/^config_expand_abbrev(const config_format_t *fmt, const char *option,$/;"	f
config_find_option	src/or/confparse.c	/^config_find_option(const config_format_t *fmt, const char *key)$/;"	f
config_find_option_mutable	src/or/confparse.c	/^config_find_option_mutable(config_format_t *fmt, const char *key)$/;"	f
config_format_t	src/or/confparse.h	/^typedef struct config_format_t {$/;"	s
config_format_t	src/or/confparse.h	/^} config_format_t;$/;"	t	typeref:struct:config_format_t
config_free	src/or/confparse.c	/^config_free(const config_format_t *fmt, void *options)$/;"	f
config_free_all	src/or/config.c	/^config_free_all(void)$/;"	f
config_free_lines	src/or/confparse.c	/^config_free_lines(config_line_t *front)$/;"	f
config_get_assigned_option	src/or/confparse.c	/^config_get_assigned_option(const config_format_t *fmt, const void *options,$/;"	f
config_get_lines	src/or/confparse.c	/^config_get_lines(const char *string, config_line_t **result, int extended)$/;"	f
config_init	src/or/confparse.c	/^config_init(const config_format_t *fmt, void *options)$/;"	f
config_is_same	src/or/confparse.c	/^config_is_same(const config_format_t *fmt,$/;"	f
config_line_append	src/or/confparse.c	/^config_line_append(config_line_t **lst,$/;"	f
config_line_find	src/or/confparse.c	/^config_line_find(const config_line_t *lines,$/;"	f
config_line_t	src/or/or.h	/^typedef struct config_line_t {$/;"	s
config_line_t	src/or/or.h	/^} config_line_t;$/;"	t	typeref:struct:config_line_t
config_lines_dup	src/or/confparse.c	/^config_lines_dup(const config_line_t *inp)$/;"	f
config_lines_eq	src/or/confparse.c	/^config_lines_eq(config_line_t *a, config_line_t *b)$/;"	f
config_load_geoip_file_	src/or/config.c	/^config_load_geoip_file_(sa_family_t family,$/;"	f	file:
config_mark_lists_fragile	src/or/confparse.c	/^config_mark_lists_fragile(const config_format_t *fmt, void *options)$/;"	f	file:
config_maybe_load_geoip_files_	src/or/config.c	/^config_maybe_load_geoip_files_(const or_options_t *options,$/;"	f	file:
config_new	src/or/confparse.c	/^config_new(const config_format_t *fmt)$/;"	f
config_parse_commandline	src/or/config.c	/^config_parse_commandline(int argc, char **argv, int ignore_errors,$/;"	f
config_parse_interval	src/or/confparse.c	/^config_parse_interval(const char *s, int *ok)$/;"	f	file:
config_parse_memunit	src/or/confparse.c	/^config_parse_memunit(const char *s, int *ok)$/;"	f	file:
config_parse_msec_interval	src/or/confparse.c	/^config_parse_msec_interval(const char *s, int *ok)$/;"	f	file:
config_parse_units	src/or/confparse.c	/^config_parse_units(const char *val, struct unit_table_t *u, int *ok)$/;"	f	file:
config_parse_unix_port	src/or/config.c	/^config_parse_unix_port(const char *addrport, char **path_out)$/;"	f
config_register_addressmaps	src/or/config.c	/^config_register_addressmaps(const or_options_t *options)$/;"	f
config_reset	src/or/confparse.c	/^config_reset(const config_format_t *fmt, void *options,$/;"	f	file:
config_reset_line	src/or/confparse.c	/^config_reset_line(const config_format_t *fmt, void *options,$/;"	f	file:
config_tests	src/test/test_config.c	/^struct testcase_t config_tests[] = {$/;"	v	typeref:struct:testcase_t
config_type_t	src/or/confparse.h	/^typedef enum config_type_t {$/;"	g
config_type_t	src/or/confparse.h	/^} config_type_t;$/;"	t	typeref:enum:config_type_t
config_value_needs_escape	src/or/confparse.c	/^config_value_needs_escape(const char *value)$/;"	f	file:
config_var_description_t	src/or/confparse.h	/^typedef struct config_var_description_t {$/;"	s
config_var_description_t	src/or/confparse.h	/^} config_var_description_t;$/;"	t	typeref:struct:config_var_description_t
config_var_t	src/or/confparse.h	/^typedef struct config_var_t {$/;"	s
config_var_t	src/or/confparse.h	/^} config_var_t;$/;"	t	typeref:struct:config_var_t
configure_accounting	src/test/test_config.c	/^NS(configure_accounting)(time_t now)$/;"	f
configure_backtrace_handler	src/common/backtrace.c	/^configure_backtrace_handler(const char *tor_version)$/;"	f
configure_libevent_logging	src/common/compat_libevent.c	/^configure_libevent_logging(void)$/;"	f
configure_nameservers	src/or/dns.c	/^configure_nameservers(int force)$/;"	f	file:
configure_proxy	src/or/transports.c	/^configure_proxy(managed_proxy_t *mp)$/;"	f
configured_ports	src/or/config.c	/^static smartlist_t *configured_ports = NULL;$/;"	v	file:
conn	src/or/channeltls.h	/^  or_connection_t *conn;$/;"	m	struct:channel_tls_s
conn	src/or/dns_structs.h	/^  edge_connection_t *conn;$/;"	m	struct:pending_connection_t
conn_array_index	src/or/or.h	/^  int conn_array_index; \/**< Index into the global connection array. *\/$/;"	m	struct:connection_t
conn_close_if_marked	src/or/main.c	/^conn_close_if_marked(int i)$/;"	f	file:
conn_edge_ap_handshake_tests	src/test/test_connection_edge_ap_handshake.c	/^struct testcase_t conn_edge_ap_handshake_tests[] =$/;"	v	typeref:struct:testcase_t
conn_for_resolved_cell	src/test/test_dns.c	/^static edge_connection_t *conn_for_resolved_cell = NULL;$/;"	v	file:
conn_get_buffer_age	src/or/circuitlist.c	/^conn_get_buffer_age(const connection_t *conn, uint32_t now)$/;"	f	file:
conn_id	src/or/rephist.c	/^  uint64_t conn_id; \/**< Connection ID *\/$/;"	m	struct:bidi_map_entry_t	file:
conn_listener_type_supports_af_unix	src/or/connection.c	/^conn_listener_type_supports_af_unix(int type)$/;"	f
conn_read_callback	src/or/main.c	/^conn_read_callback(evutil_socket_t fd, short event, void *_conn)$/;"	f	file:
conn_state_to_string	src/or/connection.c	/^conn_state_to_string(int type, int state)$/;"	f
conn_type_to_string	src/or/connection.c	/^conn_type_to_string(int type)$/;"	f
conn_write_callback	src/or/main.c	/^conn_write_callback(evutil_socket_t fd, short events, void *_conn)$/;"	f	file:
connect_retval	src/test/test_address.c	/^static int connect_retval = 0;$/;"	v	file:
connected_cell_format_payload	src/or/connection_edge.c	/^connected_cell_format_payload(uint8_t *payload_out,$/;"	f
connected_cell_parse	src/or/relay.c	/^connected_cell_parse(const relay_header_t *rh, const cell_t *cell,$/;"	f
connection_about_to_close_connection	src/or/connection.c	/^connection_about_to_close_connection(connection_t *conn)$/;"	f
connection_add	src/or/main.h	/^#define connection_add(/;"	d
connection_add_connecting	src/or/main.h	/^#define connection_add_connecting(/;"	d
connection_add_impl	src/or/main.c	/^connection_add_impl(connection_t *conn, int is_connecting)$/;"	f
connection_ap_about_to_close	src/or/connection_edge.c	/^connection_ap_about_to_close(entry_connection_t *entry_conn)$/;"	f
connection_ap_attach_pending	src/or/connection_edge.c	/^connection_ap_attach_pending(void)$/;"	f
connection_ap_can_use_exit	src/or/connection_edge.c	/^connection_ap_can_use_exit(const entry_connection_t *conn, const node_t *exit)$/;"	f
connection_ap_detach_retriable	src/or/connection_edge.c	/^connection_ap_detach_retriable(entry_connection_t *conn,$/;"	f
connection_ap_expire_beginning	src/or/connection_edge.c	/^connection_ap_expire_beginning(void)$/;"	f
connection_ap_fail_onehop	src/or/connection_edge.c	/^connection_ap_fail_onehop(const char *failed_digest,$/;"	f
connection_ap_get_begincell_flags	src/or/connection_edge.c	/^connection_ap_get_begincell_flags(entry_connection_t *ap_conn)$/;"	f	file:
connection_ap_get_original_destination	src/or/connection_edge.c	/^connection_ap_get_original_destination(entry_connection_t *conn,$/;"	f	file:
connection_ap_handshake_attach_chosen_circuit	src/or/circuituse.c	/^connection_ap_handshake_attach_chosen_circuit(entry_connection_t *conn,$/;"	f
connection_ap_handshake_attach_circuit	src/or/circuituse.c	/^connection_ap_handshake_attach_circuit(entry_connection_t *conn)$/;"	f
connection_ap_handshake_process_socks	src/or/connection_edge.c	/^connection_ap_handshake_process_socks(entry_connection_t *conn)$/;"	f	file:
connection_ap_handshake_rewrite_and_attach	src/or/connection_edge.c	/^connection_ap_handshake_rewrite_and_attach(entry_connection_t *conn,$/;"	f
connection_ap_handshake_rewrite_mock	src/test/test_connection_edge_ap_handshake.c	/^connection_ap_handshake_rewrite_mock(entry_connection_t *conn,$/;"	f	file:
connection_ap_handshake_send_begin	src/or/connection_edge.c	/^connection_ap_handshake_send_begin(entry_connection_t *ap_conn)$/;"	f
connection_ap_handshake_send_resolve	src/or/connection_edge.c	/^connection_ap_handshake_send_resolve(entry_connection_t *ap_conn)$/;"	f
connection_ap_handshake_socks_got_resolved_cell	src/or/relay.c	/^connection_ap_handshake_socks_got_resolved_cell(entry_connection_t *conn,$/;"	f	file:
connection_ap_handshake_socks_reply	src/or/connection_edge.c	/^connection_ap_handshake_socks_reply(entry_connection_t *conn, char *reply,$/;"	f
connection_ap_handshake_socks_resolved_addr	src/or/connection_edge.c	/^connection_ap_handshake_socks_resolved_addr(entry_connection_t *conn,$/;"	f
connection_ap_make_link	src/or/connection_edge.c	/^connection_ap_make_link(connection_t *partner,$/;"	f
connection_ap_process_end_not_open	src/or/relay.c	/^connection_ap_process_end_not_open($/;"	f	file:
connection_ap_process_natd	src/or/connection_edge.c	/^connection_ap_process_natd(entry_connection_t *conn)$/;"	f	file:
connection_ap_process_transparent	src/or/connection_edge.c	/^connection_ap_process_transparent(entry_connection_t *conn)$/;"	f
connection_ap_rewrite_and_attach_if_allowed	src/or/connection_edge.c	/^connection_ap_rewrite_and_attach_if_allowed(entry_connection_t *conn,$/;"	f
connection_ap_supports_optimistic_data	src/or/connection_edge.c	/^connection_ap_supports_optimistic_data(const entry_connection_t *conn)$/;"	f	file:
connection_array	src/or/main.c	/^static smartlist_t *connection_array = NULL;$/;"	v	file:
connection_bucket_init	src/or/connection.c	/^connection_bucket_init(void)$/;"	f
connection_bucket_read_limit	src/or/connection.c	/^connection_bucket_read_limit(connection_t *conn, time_t now)$/;"	f	file:
connection_bucket_refill	src/or/connection.c	/^connection_bucket_refill(int milliseconds_elapsed, time_t now)$/;"	f
connection_bucket_refill	src/or/connection.c	/^connection_bucket_refill(int seconds_elapsed, time_t now)$/;"	f
connection_bucket_refill_helper	src/or/connection.c	/^connection_bucket_refill_helper(int *bucket, int rate, int burst,$/;"	f	file:
connection_bucket_round_robin	src/or/connection.c	/^connection_bucket_round_robin(int base, int priority,$/;"	f	file:
connection_bucket_should_increase	src/or/connection.c	/^connection_bucket_should_increase(int bucket, or_connection_t *conn)$/;"	f	file:
connection_bucket_write_limit	src/or/connection.c	/^connection_bucket_write_limit(connection_t *conn, time_t now)$/;"	f
connection_buckets_decrement	src/or/connection.c	/^connection_buckets_decrement(connection_t *conn, time_t now,$/;"	f	file:
connection_buckets_note_empty_ts	src/or/connection.c	/^connection_buckets_note_empty_ts(uint32_t *timestamp_var,$/;"	f
connection_close_immediate	src/or/connection.c	/^connection_close_immediate(connection_t *conn)$/;"	f
connection_configure_bufferevent_callbacks	src/or/connection.c	/^connection_configure_bufferevent_callbacks(connection_t *conn)$/;"	f
connection_connect	src/or/connection.c	/^connection_connect(connection_t *conn, const char *address,$/;"	f
connection_connect_sockaddr	src/or/connection.c	/^connection_connect_sockaddr(connection_t *conn,$/;"	f	file:
connection_connect_unix	src/or/connection.c	/^connection_connect_unix(connection_t *conn, const char *socket_path,$/;"	f
connection_consider_empty_read_buckets	src/or/connection.c	/^connection_consider_empty_read_buckets(connection_t *conn)$/;"	f	file:
connection_consider_empty_write_buckets	src/or/connection.c	/^connection_consider_empty_write_buckets(connection_t *conn)$/;"	f	file:
connection_control_closed	src/or/control.c	/^connection_control_closed(control_connection_t *conn)$/;"	f
connection_control_finished_flushing	src/or/control.c	/^connection_control_finished_flushing(control_connection_t *conn)$/;"	f
connection_control_process_inbuf	src/or/control.c	/^connection_control_process_inbuf(control_connection_t *conn)$/;"	f
connection_control_reached_eof	src/or/control.c	/^connection_control_reached_eof(control_connection_t *conn)$/;"	f
connection_counts_as_relayed_traffic	src/or/connection.c	/^connection_counts_as_relayed_traffic(connection_t *conn, time_t now)$/;"	f	file:
connection_dir_about_to_close	src/or/directory.c	/^connection_dir_about_to_close(dir_connection_t *dir_conn)$/;"	f
connection_dir_bridge_routerdesc_failed	src/or/directory.c	/^connection_dir_bridge_routerdesc_failed(dir_connection_t *conn)$/;"	f	file:
connection_dir_client_reached_eof	src/or/directory.c	/^connection_dir_client_reached_eof(dir_connection_t *conn)$/;"	f	file:
connection_dir_download_cert_failed	src/or/directory.c	/^connection_dir_download_cert_failed(dir_connection_t *conn, int status)$/;"	f	file:
connection_dir_download_routerdesc_failed	src/or/directory.c	/^connection_dir_download_routerdesc_failed(dir_connection_t *conn)$/;"	f	file:
connection_dir_finished_connecting	src/or/directory.c	/^connection_dir_finished_connecting(dir_connection_t *conn)$/;"	f
connection_dir_finished_flushing	src/or/directory.c	/^connection_dir_finished_flushing(dir_connection_t *conn)$/;"	f
connection_dir_get_by_purpose_and_resource	src/or/connection.c	/^connection_dir_get_by_purpose_and_resource(int purpose,$/;"	f
connection_dir_is_encrypted	src/or/directory.c	/^connection_dir_is_encrypted(dir_connection_t *conn)$/;"	f
connection_dir_process_inbuf	src/or/directory.c	/^connection_dir_process_inbuf(dir_connection_t *conn)$/;"	f
connection_dir_reached_eof	src/or/directory.c	/^connection_dir_reached_eof(dir_connection_t *conn)$/;"	f
connection_dir_request_failed	src/or/directory.c	/^connection_dir_request_failed(dir_connection_t *conn)$/;"	f	file:
connection_dir_retry_bridges	src/or/directory.c	/^connection_dir_retry_bridges(smartlist_t *descs)$/;"	f	file:
connection_dirserv_add_dir_bytes_to_outbuf	src/or/dirserv.c	/^connection_dirserv_add_dir_bytes_to_outbuf(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_add_microdescs_to_outbuf	src/or/dirserv.c	/^connection_dirserv_add_microdescs_to_outbuf(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_add_networkstatus_bytes_to_outbuf	src/or/dirserv.c	/^connection_dirserv_add_networkstatus_bytes_to_outbuf(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_add_servers_to_outbuf	src/or/dirserv.c	/^connection_dirserv_add_servers_to_outbuf(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_finish_spooling	src/or/dirserv.c	/^connection_dirserv_finish_spooling(dir_connection_t *conn)$/;"	f	file:
connection_dirserv_flushed_some	src/or/dirserv.c	/^connection_dirserv_flushed_some(dir_connection_t *conn)$/;"	f
connection_dns_remove	src/or/dns.c	/^connection_dns_remove(edge_connection_t *conn)$/;"	f
connection_dump_buffer_mem_stats	src/or/connection.c	/^connection_dump_buffer_mem_stats(int severity)$/;"	f
connection_edge_about_to_close	src/or/connection_edge.c	/^connection_edge_about_to_close(edge_connection_t *edge_conn)$/;"	f	file:
connection_edge_compatible_with_circuit	src/or/connection_edge.c	/^connection_edge_compatible_with_circuit(const entry_connection_t *conn,$/;"	f
connection_edge_consider_sending_sendme	src/or/relay.c	/^connection_edge_consider_sending_sendme(edge_connection_t *conn)$/;"	f
connection_edge_destroy	src/or/connection_edge.c	/^connection_edge_destroy(circid_t circ_id, edge_connection_t *conn)$/;"	f
connection_edge_end	src/or/connection_edge.c	/^connection_edge_end(edge_connection_t *conn, uint8_t reason)$/;"	f
connection_edge_end_errno	src/or/connection_edge.c	/^connection_edge_end_errno(edge_connection_t *conn)$/;"	f
connection_edge_finished_connecting	src/or/connection_edge.c	/^connection_edge_finished_connecting(edge_connection_t *edge_conn)$/;"	f
connection_edge_finished_flushing	src/or/connection_edge.c	/^connection_edge_finished_flushing(edge_connection_t *conn)$/;"	f
connection_edge_flushed_some	src/or/connection_edge.c	/^connection_edge_flushed_some(edge_connection_t *conn)$/;"	f
connection_edge_is_rendezvous_stream	src/or/connection_edge.c	/^connection_edge_is_rendezvous_stream(edge_connection_t *conn)$/;"	f
connection_edge_package_raw_inbuf	src/or/relay.c	/^connection_edge_package_raw_inbuf(edge_connection_t *conn, int package_partial,$/;"	f
connection_edge_process_inbuf	src/or/connection_edge.c	/^connection_edge_process_inbuf(edge_connection_t *conn, int package_partial)$/;"	f
connection_edge_process_relay_cell	src/or/relay.c	/^connection_edge_process_relay_cell(cell_t *cell, circuit_t *circ,$/;"	f
connection_edge_process_relay_cell_not_open	src/or/relay.c	/^connection_edge_process_relay_cell_not_open($/;"	f	file:
connection_edge_process_resolved_cell	src/or/relay.c	/^connection_edge_process_resolved_cell(edge_connection_t *conn,$/;"	f
connection_edge_reached_eof	src/or/connection_edge.c	/^connection_edge_reached_eof(edge_connection_t *conn)$/;"	f
connection_edge_send_command	src/or/relay.c	/^connection_edge_send_command(edge_connection_t *fromconn,$/;"	f
connection_edge_update_circuit_isolation	src/or/connection_edge.c	/^connection_edge_update_circuit_isolation(const entry_connection_t *conn,$/;"	f
connection_enable_rate_limiting	src/or/connection.c	/^connection_enable_rate_limiting(connection_t *conn)$/;"	f
connection_exit_about_to_close	src/or/connection_edge.c	/^connection_exit_about_to_close(edge_connection_t *edge_conn)$/;"	f
connection_exit_begin_conn	src/or/connection_edge.c	/^connection_exit_begin_conn(cell_t *cell, circuit_t *circ)$/;"	f
connection_exit_begin_resolve	src/or/connection_edge.c	/^connection_exit_begin_resolve(cell_t *cell, or_circuit_t *circ)$/;"	f
connection_exit_connect	src/or/connection_edge.c	/^connection_exit_connect(edge_connection_t *edge_conn)$/;"	f
connection_exit_connect_dir	src/or/connection_edge.c	/^connection_exit_connect_dir(edge_connection_t *exitconn)$/;"	f	file:
connection_expire_held_open	src/or/connection.c	/^connection_expire_held_open(void)$/;"	f
connection_ext_or_auth_handle_client_hash	src/or/ext_orport.c	/^connection_ext_or_auth_handle_client_hash(connection_t *conn)$/;"	f	file:
connection_ext_or_auth_handle_client_nonce	src/or/ext_orport.c	/^connection_ext_or_auth_handle_client_nonce(connection_t *conn)$/;"	f	file:
connection_ext_or_auth_neg_auth_type	src/or/ext_orport.c	/^connection_ext_or_auth_neg_auth_type(connection_t *conn)$/;"	f	file:
connection_ext_or_auth_process_inbuf	src/or/ext_orport.c	/^connection_ext_or_auth_process_inbuf(or_connection_t *or_conn)$/;"	f	file:
connection_ext_or_auth_send_result	src/or/ext_orport.c	/^connection_ext_or_auth_send_result(connection_t *conn, int success)$/;"	f	file:
connection_ext_or_auth_send_result_fail	src/or/ext_orport.c	/^#define connection_ext_or_auth_send_result_fail(/;"	d	file:
connection_ext_or_auth_send_result_success	src/or/ext_orport.c	/^#define connection_ext_or_auth_send_result_success(/;"	d	file:
connection_ext_or_finished_flushing	src/or/ext_orport.c	/^connection_ext_or_finished_flushing(or_connection_t *conn)$/;"	f
connection_ext_or_handle_cmd_transport	src/or/ext_orport.c	/^connection_ext_or_handle_cmd_transport(or_connection_t *conn,$/;"	f	file:
connection_ext_or_handle_cmd_useraddr	src/or/ext_orport.c	/^connection_ext_or_handle_cmd_useraddr(connection_t *conn,$/;"	f	file:
connection_ext_or_process_inbuf	src/or/ext_orport.c	/^connection_ext_or_process_inbuf(or_connection_t *or_conn)$/;"	f
connection_ext_or_start_auth	src/or/ext_orport.c	/^connection_ext_or_start_auth(or_connection_t *or_conn)$/;"	f
connection_ext_or_transition	src/or/ext_orport.c	/^connection_ext_or_transition(or_connection_t *conn)$/;"	f	file:
connection_fetch_ext_or_cmd_from_buf	src/or/ext_orport.c	/^connection_fetch_ext_or_cmd_from_buf(connection_t *conn, ext_or_cmd_t **out)$/;"	f	file:
connection_fetch_from_buf	src/or/connection.c	/^connection_fetch_from_buf(char *string, size_t len, connection_t *conn)$/;"	f
connection_fetch_from_buf_http	src/or/connection.c	/^connection_fetch_from_buf_http(connection_t *conn,$/;"	f
connection_fetch_from_buf_line	src/or/connection.c	/^connection_fetch_from_buf_line(connection_t *conn, char *data,$/;"	f
connection_fetch_from_buf_socks_client	src/or/connection.c	/^connection_fetch_from_buf_socks_client(connection_t *conn,$/;"	f	file:
connection_fetch_var_cell_from_buf	src/or/connection_or.c	/^connection_fetch_var_cell_from_buf(or_connection_t *or_conn, var_cell_t **out)$/;"	f	file:
connection_finished_connecting	src/or/connection.c	/^connection_finished_connecting(connection_t *conn)$/;"	f	file:
connection_finished_flushing	src/or/connection.c	/^connection_finished_flushing(connection_t *conn)$/;"	f	file:
connection_flush	src/or/connection.c	/^connection_flush(connection_t *conn)$/;"	f
connection_flushed_some	src/or/connection.c	/^connection_flushed_some(connection_t *conn)$/;"	f	file:
connection_free_	src/or/connection.c	/^connection_free_(connection_t *conn)$/;"	f
connection_free_all	src/or/connection.c	/^connection_free_all(void)$/;"	f
connection_free_replacement	src/test/test_dns.c	/^connection_free_replacement(connection_t *conn)$/;"	f	file:
connection_get_by_global_id	src/or/connection.c	/^connection_get_by_global_id(uint64_t id)$/;"	f
connection_get_by_type	src/or/connection.c	/^connection_get_by_type(int type)$/;"	f
connection_get_by_type_addr_port_purpose	src/or/connection.c	/^connection_get_by_type_addr_port_purpose(int type,$/;"	f
connection_get_by_type_state	src/or/connection.c	/^connection_get_by_type_state(int type, int state)$/;"	f
connection_get_by_type_state_rendquery	src/or/connection.c	/^connection_get_by_type_state_rendquery(int type, int state,$/;"	f
connection_get_inbuf_len	src/or/connection.h	/^connection_get_inbuf_len(connection_t *conn)$/;"	f
connection_get_outbuf_len	src/or/connection.h	/^connection_get_outbuf_len(connection_t *conn)$/;"	f
connection_get_rate_limit_totals	src/or/connection.c	/^connection_get_rate_limit_totals(uint64_t *read_out, uint64_t *written_out)$/;"	f
connection_handle_event_cb	src/or/connection.c	/^connection_handle_event_cb(struct bufferevent *bufev, short event, void *arg)$/;"	f
connection_handle_listener_read	src/or/connection.c	/^connection_handle_listener_read(connection_t *conn, int new_type)$/;"	f	file:
connection_handle_read	src/or/connection.c	/^connection_handle_read(connection_t *conn)$/;"	f
connection_handle_read_cb	src/or/connection.c	/^connection_handle_read_cb(struct bufferevent *bufev, void *arg)$/;"	f
connection_handle_read_impl	src/or/connection.c	/^connection_handle_read_impl(connection_t *conn)$/;"	f	file:
connection_handle_write	src/or/connection.c	/^connection_handle_write(connection_t *conn, int force)$/;"	f
connection_handle_write_cb	src/or/connection.c	/^connection_handle_write_cb(struct bufferevent *bufev, void *arg)$/;"	f
connection_handle_write_impl	src/or/connection.c	/^connection_handle_write_impl(connection_t *conn, int force)$/;"	f	file:
connection_in_array	src/or/main.c	/^connection_in_array(connection_t *conn)$/;"	f
connection_init	src/or/connection.c	/^connection_init(time_t now, connection_t *conn, int type, int socket_family)$/;"	f	file:
connection_init_accepted_conn	src/or/connection.c	/^connection_init_accepted_conn(connection_t *conn,$/;"	f	file:
connection_init_or_handshake_state	src/or/connection_or.c	/^connection_init_or_handshake_state(or_connection_t *conn, int started_here)$/;"	f
connection_is_listener	src/or/connection.c	/^connection_is_listener(connection_t *conn)$/;"	f
connection_is_on_closeable_list	src/or/main.c	/^connection_is_on_closeable_list(connection_t *conn)$/;"	f
connection_is_rate_limited	src/or/connection.c	/^connection_is_rate_limited(connection_t *conn)$/;"	f	file:
connection_is_reading	src/or/main.c	/^connection_is_reading(connection_t *conn)$/;"	f
connection_is_writing	src/or/main.c	/^connection_is_writing(connection_t *conn)$/;"	f
connection_link_connections	src/or/connection.c	/^connection_link_connections(connection_t *conn_a, connection_t *conn_b)$/;"	f
connection_listener_new	src/or/connection.c	/^connection_listener_new(const struct sockaddr *listensockaddr,$/;"	f	file:
connection_mark_all_noncontrol_connections	src/or/connection.c	/^connection_mark_all_noncontrol_connections(void)$/;"	f
connection_mark_all_noncontrol_listeners	src/or/connection.c	/^connection_mark_all_noncontrol_listeners(void)$/;"	f
connection_mark_and_flush	src/or/connection.h	/^#define connection_mark_and_flush(/;"	d
connection_mark_and_flush_	src/or/connection.h	/^#define connection_mark_and_flush_(/;"	d
connection_mark_and_flush_internal	src/or/connection.h	/^#define connection_mark_and_flush_internal(/;"	d
connection_mark_and_flush_internal_	src/or/connection.h	/^#define connection_mark_and_flush_internal_(/;"	d
connection_mark_for_close	src/or/connection.h	/^#define connection_mark_for_close(/;"	d
connection_mark_for_close_	src/or/connection.c	/^connection_mark_for_close_(connection_t *conn, int line, const char *file)$/;"	f
connection_mark_for_close_internal	src/or/connection.h	/^#define connection_mark_for_close_internal(/;"	d
connection_mark_unattached_ap	src/or/connection_edge.h	/^#define connection_mark_unattached_ap(/;"	d
connection_mark_unattached_ap_mock	src/test/test_connection_edge_ap_handshake.c	/^connection_mark_unattached_ap_mock(entry_connection_t *conn,$/;"	f	file:
connection_new	src/or/connection.c	/^connection_new(int type, int socket_family)$/;"	f
connection_or_about_to_close	src/or/connection_or.c	/^connection_or_about_to_close(or_connection_t *or_conn)$/;"	f
connection_or_block_renegotiation	src/or/connection_or.c	/^connection_or_block_renegotiation(or_connection_t *conn)$/;"	f
connection_or_change_state	src/or/connection_or.c	/^connection_or_change_state(or_connection_t *conn, uint8_t state)$/;"	f	file:
connection_or_check_valid_tls_handshake	src/or/connection_or.c	/^connection_or_check_valid_tls_handshake(or_connection_t *conn,$/;"	f	file:
connection_or_clear_ext_or_id_map	src/or/connection_or.c	/^connection_or_clear_ext_or_id_map(void)$/;"	f
connection_or_clear_identity_map	src/or/connection_or.c	/^connection_or_clear_identity_map(void)$/;"	f
connection_or_client_learned_peer_id	src/or/connection_or.c	/^connection_or_client_learned_peer_id(or_connection_t *conn,$/;"	f
connection_or_client_used	src/or/connection_or.c	/^connection_or_client_used(or_connection_t *conn)$/;"	f
connection_or_close_normally	src/or/connection_or.c	/^connection_or_close_normally(or_connection_t *orconn, int flush)$/;"	f
connection_or_compute_authenticate_cell_body	src/or/connection_or.c	/^connection_or_compute_authenticate_cell_body(or_connection_t *conn,$/;"	f
connection_or_connect_failed	src/or/connection_or.c	/^connection_or_connect_failed(or_connection_t *conn,$/;"	f
connection_or_digest_is_known_relay	src/or/connection_or.c	/^connection_or_digest_is_known_relay(const char *id_digest)$/;"	f
connection_or_finished_connecting	src/or/connection_or.c	/^connection_or_finished_connecting(or_connection_t *or_conn)$/;"	f
connection_or_finished_flushing	src/or/connection_or.c	/^connection_or_finished_flushing(or_connection_t *conn)$/;"	f
connection_or_flushed_some	src/or/connection_or.c	/^connection_or_flushed_some(or_connection_t *conn)$/;"	f
connection_or_get_by_ext_or_id	src/or/connection_or.c	/^connection_or_get_by_ext_or_id(const char *id)$/;"	f
connection_or_get_num_circuits	src/or/connection_or.c	/^connection_or_get_num_circuits(or_connection_t *conn)$/;"	f
connection_or_get_state_description	src/or/connection_or.c	/^connection_or_get_state_description(or_connection_t *orconn,$/;"	f	file:
connection_or_group_set_badness	src/or/connection_or.c	/^connection_or_group_set_badness(or_connection_t *head, int force)$/;"	f	file:
connection_or_handle_event_cb	src/or/connection_or.c	/^connection_or_handle_event_cb(struct bufferevent *bufev, short event,$/;"	f	file:
connection_or_init_conn_from_address	src/or/connection_or.c	/^connection_or_init_conn_from_address(or_connection_t *conn,$/;"	f
connection_or_is_bad_for_new_circs	src/or/connection_or.c	/^connection_or_is_bad_for_new_circs(or_connection_t *or_conn)$/;"	f	file:
connection_or_launch_v3_or_handshake	src/or/connection_or.c	/^connection_or_launch_v3_or_handshake(or_connection_t *conn)$/;"	f	file:
connection_or_mark_bad_for_new_circs	src/or/connection_or.c	/^connection_or_mark_bad_for_new_circs(or_connection_t *or_conn)$/;"	f	file:
connection_or_nonopen_was_started_here	src/or/connection_or.c	/^connection_or_nonopen_was_started_here(or_connection_t *conn)$/;"	f
connection_or_note_state_when_broken	src/or/connection_or.c	/^connection_or_note_state_when_broken(or_connection_t *orconn)$/;"	f	file:
connection_or_notify_error	src/or/connection_or.c	/^connection_or_notify_error(or_connection_t *conn,$/;"	f
connection_or_num_cells_writeable	src/or/connection_or.c	/^connection_or_num_cells_writeable(or_connection_t *conn)$/;"	f
connection_or_process_cells_from_inbuf	src/or/connection_or.c	/^connection_or_process_cells_from_inbuf(or_connection_t *conn)$/;"	f	file:
connection_or_process_inbuf	src/or/connection_or.c	/^connection_or_process_inbuf(or_connection_t *conn)$/;"	f
connection_or_reached_eof	src/or/connection_or.c	/^connection_or_reached_eof(or_connection_t *conn)$/;"	f
connection_or_remove_from_ext_or_id_map	src/or/connection_or.c	/^connection_or_remove_from_ext_or_id_map(or_connection_t *conn)$/;"	f
connection_or_remove_from_identity_map	src/or/connection_or.c	/^connection_or_remove_from_identity_map(or_connection_t *conn)$/;"	f
connection_or_report_broken_states	src/or/connection_or.c	/^connection_or_report_broken_states(int severity, int domain)$/;"	f
connection_or_send_auth_challenge_cell	src/or/connection_or.c	/^connection_or_send_auth_challenge_cell(or_connection_t *conn)$/;"	f
connection_or_send_certs_cell	src/or/connection_or.c	/^connection_or_send_certs_cell(or_connection_t *conn)$/;"	f
connection_or_send_versions	src/or/connection_or.c	/^connection_or_send_versions(or_connection_t *conn, int v3_plus)$/;"	f
connection_or_set_bad_connections	src/or/connection_or.c	/^connection_or_set_bad_connections(const char *digest, int force)$/;"	f
connection_or_set_canonical	src/or/connection_or.c	/^connection_or_set_canonical(or_connection_t *or_conn,$/;"	f
connection_or_set_ext_or_identifier	src/or/connection_or.c	/^connection_or_set_ext_or_identifier(or_connection_t *conn)$/;"	f
connection_or_set_identity_digest	src/or/connection_or.c	/^connection_or_set_identity_digest(or_connection_t *conn, const char *digest)$/;"	f	file:
connection_or_set_state_open	src/or/connection_or.c	/^connection_or_set_state_open(or_connection_t *conn)$/;"	f
connection_or_tls_renegotiated_cb	src/or/connection_or.c	/^connection_or_tls_renegotiated_cb(tor_tls_t *tls, void *_conn)$/;"	f	file:
connection_or_update_token_buckets	src/test/test_config.c	/^NS(connection_or_update_token_buckets)(smartlist_t *conns,$/;"	f	file:
connection_or_update_token_buckets_helper	src/or/connection_or.c	/^connection_or_update_token_buckets_helper(or_connection_t *conn, int reset,$/;"	f	file:
connection_or_write_cell_to_buf	src/or/connection_or.c	/^connection_or_write_cell_to_buf(const cell_t *cell, or_connection_t *conn)$/;"	f
connection_outbuf_too_full	src/or/connection.c	/^connection_outbuf_too_full(connection_t *conn)$/;"	f
connection_printf_to_buf	src/or/control.c	/^connection_printf_to_buf(control_connection_t *conn, const char *format, ...)$/;"	f	file:
connection_process_inbuf	src/or/connection.c	/^connection_process_inbuf(connection_t *conn, int package_partial)$/;"	f	file:
connection_proxy_connect	src/or/connection.c	/^connection_proxy_connect(connection_t *conn, int type)$/;"	f
connection_proxy_state_to_string	src/or/connection.c	/^connection_proxy_state_to_string(int state)$/;"	f	file:
connection_reached_eof	src/or/connection.c	/^connection_reached_eof(connection_t *conn)$/;"	f	file:
connection_read_https_proxy_response	src/or/connection.c	/^connection_read_https_proxy_response(connection_t *conn)$/;"	f	file:
connection_read_proxy_handshake	src/or/connection.c	/^connection_read_proxy_handshake(connection_t *conn)$/;"	f
connection_read_to_buf	src/or/connection.c	/^connection_read_to_buf(connection_t *conn, ssize_t *max_to_read,$/;"	f	file:
connection_remove	src/or/main.c	/^connection_remove(connection_t *conn)$/;"	f
connection_send_socks5_connect	src/or/connection.c	/^connection_send_socks5_connect(connection_t *conn)$/;"	f	file:
connection_should_read_from_linked_conn	src/or/main.c	/^connection_should_read_from_linked_conn(connection_t *conn)$/;"	f	file:
connection_speaks_cells	src/or/connection.h	/^#define connection_speaks_cells(/;"	d
connection_start_reading_from_linked_conn	src/or/main.c	/^connection_start_reading_from_linked_conn(connection_t *conn)$/;"	f	file:
connection_state_is_connecting	src/or/connection.c	/^connection_state_is_connecting(connection_t *conn)$/;"	f
connection_state_is_open	src/or/connection.c	/^connection_state_is_open(connection_t *conn)$/;"	f
connection_stop_reading_from_linked_conn	src/or/main.c	/^connection_stop_reading_from_linked_conn(connection_t *conn)$/;"	f
connection_t	src/or/or.h	/^typedef struct connection_t {$/;"	s
connection_t	src/or/or.h	/^} connection_t;$/;"	t	typeref:struct:connection_t
connection_tls_continue_handshake	src/or/connection_or.c	/^connection_tls_continue_handshake(or_connection_t *conn)$/;"	f
connection_tls_finish_handshake	src/or/connection_or.c	/^connection_tls_finish_handshake(or_connection_t *conn)$/;"	f	file:
connection_type_uses_bufferevent	src/or/connection.c	/^connection_type_uses_bufferevent(connection_t *conn)$/;"	f
connection_type_uses_bufferevent	src/or/connection.h	/^#define connection_type_uses_bufferevent(/;"	d
connection_unlink	src/or/main.c	/^connection_unlink(connection_t *conn)$/;"	f	file:
connection_unregister_events	src/or/main.c	/^connection_unregister_events(connection_t *conn)$/;"	f
connection_wants_to_flush	src/or/connection.c	/^connection_wants_to_flush(connection_t *conn)$/;"	f
connection_watch_events	src/or/main.c	/^connection_watch_events(connection_t *conn, watchable_events_t events)$/;"	f
connection_write_ext_or_command	src/or/ext_orport.c	/^connection_write_ext_or_command(connection_t *conn,$/;"	f
connection_write_str_to_buf	src/or/control.c	/^connection_write_str_to_buf(const char *s, control_connection_t *conn)$/;"	f	file:
connection_write_to_buf	src/or/connection.h	/^connection_write_to_buf(const char *string, size_t len, connection_t *conn)$/;"	f
connection_write_to_buf_impl_replacement	src/test/test_extorport.c	/^connection_write_to_buf_impl_replacement(const char *string, size_t len,$/;"	f	file:
connection_write_to_buf_mock	src/test/test_dir_handle_get.c	/^static void connection_write_to_buf_mock(const char *string, size_t len,$/;"	f	file:
connection_write_to_buf_zlib	src/or/connection.h	/^connection_write_to_buf_zlib(const char *string, size_t len,$/;"	f
conns_compare_by_buffer_age_	src/or/circuitlist.c	/^conns_compare_by_buffer_age_(const void **a_, const void **b_)$/;"	f	file:
consensus	src/or/dirvote.c	/^  networkstatus_t *consensus;$/;"	m	struct:pending_consensus_t	file:
consensus	src/or/networkstatus.c	/^  networkstatus_t *consensus;$/;"	m	struct:consensus_waiting_for_certs_t	file:
consensus_dl_status	src/or/networkstatus.c	/^static download_status_t consensus_dl_status[N_CONSENSUS_FLAVORS] =$/;"	v	file:
consensus_flavor_t	src/or/or.h	/^} consensus_flavor_t;$/;"	t	typeref:enum:__anon47
consensus_is_waiting_for_certs	src/or/networkstatus.c	/^consensus_is_waiting_for_certs(void)$/;"	f
consensus_method	src/or/or.h	/^  int consensus_method;$/;"	m	struct:networkstatus_t
consensus_method_is_supported	src/or/dirvote.c	/^consensus_method_is_supported(int method)$/;"	f	file:
consensus_method_range_t	src/or/dirvote.c	/^static const struct consensus_method_range_t {$/;"	s	file:
consensus_path_type_t	src/or/nodelist.h	/^} consensus_path_type_t;$/;"	t	typeref:enum:__anon26
consensus_test	src/test/test_dir.c	/^    void (*consensus_test)(networkstatus_t *con, time_t now),$/;"	v	file:
consensus_waiting_for_certs	src/or/networkstatus.c	/^       consensus_waiting_for_certs[N_CONSENSUS_FLAVORS];$/;"	v	file:
consensus_waiting_for_certs_t	src/or/networkstatus.c	/^typedef struct consensus_waiting_for_certs_t {$/;"	s	file:
consensus_waiting_for_certs_t	src/or/networkstatus.c	/^} consensus_waiting_for_certs_t;$/;"	t	typeref:struct:consensus_waiting_for_certs_t	file:
consider_adding_dir_servers	src/or/config.c	/^consider_adding_dir_servers(const or_options_t *options,$/;"	f
consider_hibernation	src/or/hibernate.c	/^consider_hibernation(time_t now)$/;"	f
consider_plaintext_ports	src/or/connection_edge.c	/^consider_plaintext_ports(entry_connection_t *conn, uint16_t port)$/;"	f	file:
consider_publishable_server	src/or/router.c	/^consider_publishable_server(int force)$/;"	f
consider_recording_trackhost	src/or/circuituse.c	/^consider_recording_trackhost(const entry_connection_t *conn,$/;"	f	file:
consider_republishing_rend_descriptors	src/or/rendservice.c	/^static int consider_republishing_rend_descriptors = 1;$/;"	v	file:
consider_testing_reachability	src/or/router.c	/^consider_testing_reachability(int test_or, int test_dir)$/;"	f
construct_ntor_key_map	src/or/router.c	/^construct_ntor_key_map(void)$/;"	f
contact	src/or/or.h	/^  char *contact; \/**< Contact information for this voter. *\/$/;"	m	struct:networkstatus_voter_info_t
contact_info	src/or/or.h	/^  char *contact_info; \/**< Declared contact info for this router. *\/$/;"	m	struct:__anon45
container_tests	src/test/test_containers.c	/^struct testcase_t container_tests[] = {$/;"	v	typeref:struct:testcase_t
context	src/common/tortls.h	/^  tor_tls_context_t *context; \/** A link to the context object for this tls. *\/$/;"	m	struct:tor_tls_t
contract256_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^contract256_modm(unsigned char out[32], const bignum256modm in) {$/;"	f
contract256_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^contract256_modm(unsigned char out[32], const bignum256modm in) {$/;"	f
contract256_slidingwindow_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^contract256_slidingwindow_modm(signed char r[256], const bignum256modm s, int windowsize) {$/;"	f
contract256_slidingwindow_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^contract256_slidingwindow_modm(signed char r[256], const bignum256modm s, int windowsize) {$/;"	f
contract256_window4_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^contract256_window4_modm(signed char r[64], const bignum256modm in) {$/;"	f
contract256_window4_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^contract256_window4_modm(signed char r[64], const bignum256modm in) {$/;"	f
control_adjust_event_log_severity	src/or/control.c	/^control_adjust_event_log_severity(void)$/;"	f
control_connection_new	src/or/connection.c	/^control_connection_new(int socket_family)$/;"	f
control_connection_t	src/or/or.h	/^typedef struct control_connection_t {$/;"	s
control_connection_t	src/or/or.h	/^} control_connection_t;$/;"	t	typeref:struct:control_connection_t
control_event_address_mapped	src/or/control.c	/^control_event_address_mapped(const char *from, const char *to, time_t expires,$/;"	f
control_event_bandwidth_used	src/or/control.c	/^control_event_bandwidth_used(uint32_t n_read, uint32_t n_written)$/;"	f
control_event_bootstrap	src/or/control.c	/^control_event_bootstrap(bootstrap_status_t status, int progress)$/;"	f
control_event_buildtimeout_set	src/or/control.c	/^control_event_buildtimeout_set(buildtimeout_set_event_t type,$/;"	f
control_event_circ_bandwidth_used	src/or/control.c	/^control_event_circ_bandwidth_used(void)$/;"	f
control_event_circuit_cannibalized	src/or/control.c	/^control_event_circuit_cannibalized(origin_circuit_t *circ,$/;"	f
control_event_circuit_cell_stats	src/or/control.c	/^control_event_circuit_cell_stats(void)$/;"	f
control_event_circuit_purpose_changed	src/or/control.c	/^control_event_circuit_purpose_changed(origin_circuit_t *circ,$/;"	f
control_event_circuit_status	src/or/control.c	/^control_event_circuit_status(origin_circuit_t *circ, circuit_status_event_t tp,$/;"	f
control_event_circuit_status_minor	src/or/control.c	/^control_event_circuit_status_minor(origin_circuit_t *circ,$/;"	f	file:
control_event_client_error	src/or/control.c	/^control_event_client_error(const char *format, ...)$/;"	f
control_event_client_status	src/or/control.c	/^control_event_client_status(int severity, const char *format, ...)$/;"	f
control_event_clients_seen	src/or/control.c	/^control_event_clients_seen(const char *controller_str)$/;"	f
control_event_conf_changed	src/or/control.c	/^control_event_conf_changed(const smartlist_t *elements)$/;"	f
control_event_conn_bandwidth	src/or/control.c	/^control_event_conn_bandwidth(connection_t *conn)$/;"	f
control_event_conn_bandwidth_used	src/or/control.c	/^control_event_conn_bandwidth_used(void)$/;"	f
control_event_descriptors_changed	src/or/control.c	/^control_event_descriptors_changed(smartlist_t *routers)$/;"	f
control_event_general_error	src/or/control.c	/^control_event_general_error(const char *format, ...)$/;"	f
control_event_general_status	src/or/control.c	/^control_event_general_status(int severity, const char *format, ...)$/;"	f
control_event_guard	src/or/control.c	/^control_event_guard(const char *nickname, const char *digest,$/;"	f
control_event_guard_deferred	src/or/entrynodes.c	/^control_event_guard_deferred(void)$/;"	f	file:
control_event_hs_descriptor_content	src/or/control.c	/^control_event_hs_descriptor_content(const char *onion_address,$/;"	f
control_event_hs_descriptor_failed	src/or/control.c	/^control_event_hs_descriptor_failed(const rend_data_t *rend_data,$/;"	f
control_event_hs_descriptor_receive_end	src/or/control.c	/^control_event_hs_descriptor_receive_end(const char *action,$/;"	f
control_event_hs_descriptor_received	src/or/control.c	/^control_event_hs_descriptor_received(const char *onion_address,$/;"	f
control_event_hs_descriptor_requested	src/or/control.c	/^control_event_hs_descriptor_requested(const rend_data_t *rend_query,$/;"	f
control_event_hs_descriptor_upload	src/or/control.c	/^control_event_hs_descriptor_upload(const char *service_id,$/;"	f
control_event_hs_descriptor_upload_end	src/or/control.c	/^control_event_hs_descriptor_upload_end(const char *action,$/;"	f
control_event_hs_descriptor_upload_failed	src/or/control.c	/^control_event_hs_descriptor_upload_failed(const char *id_digest,$/;"	f
control_event_hs_descriptor_uploaded	src/or/control.c	/^control_event_hs_descriptor_uploaded(const char *id_digest)$/;"	f
control_event_is_interesting	src/or/control.c	/^control_event_is_interesting(int event)$/;"	f
control_event_logmsg	src/or/control.c	/^control_event_logmsg(int severity, uint32_t domain, const char *msg)$/;"	f
control_event_my_descriptor_changed	src/or/control.c	/^control_event_my_descriptor_changed(void)$/;"	f
control_event_network_liveness_update	src/or/control.c	/^control_event_network_liveness_update(int liveness)$/;"	f
control_event_networkstatus_changed	src/or/control.c	/^control_event_networkstatus_changed(smartlist_t *statuses)$/;"	f
control_event_networkstatus_changed_helper	src/or/control.c	/^control_event_networkstatus_changed_helper(smartlist_t *statuses,$/;"	f	file:
control_event_networkstatus_changed_single	src/or/control.c	/^control_event_networkstatus_changed_single(const routerstatus_t *rs)$/;"	f
control_event_newconsensus	src/or/control.c	/^control_event_newconsensus(const networkstatus_t *consensus)$/;"	f
control_event_or_authdir_new_descriptor	src/or/control.c	/^control_event_or_authdir_new_descriptor(const char *action,$/;"	f
control_event_or_conn_status	src/or/control.c	/^control_event_or_conn_status(or_connection_t *conn, or_conn_status_event_t tp,$/;"	f
control_event_server_error	src/or/control.c	/^control_event_server_error(const char *format, ...)$/;"	f
control_event_server_status	src/or/control.c	/^control_event_server_status(int severity, const char *format, ...)$/;"	f
control_event_signal	src/or/control.c	/^control_event_signal(uintptr_t signal)$/;"	f
control_event_status	src/or/control.c	/^control_event_status(int type, int severity, const char *format, va_list args)$/;"	f	file:
control_event_stream_bandwidth	src/or/control.c	/^control_event_stream_bandwidth(edge_connection_t *edge_conn)$/;"	f
control_event_stream_bandwidth_used	src/or/control.c	/^control_event_stream_bandwidth_used(void)$/;"	f
control_event_stream_status	src/or/control.c	/^control_event_stream_status(entry_connection_t *conn, stream_status_event_t tp,$/;"	f
control_event_t	src/or/control.c	/^struct control_event_t {$/;"	s	file:
control_event_table	src/or/control.c	/^static const struct control_event_t control_event_table[] = {$/;"	v	typeref:struct:control_event_t	file:
control_event_tb_empty	src/or/control.c	/^control_event_tb_empty(const char *bucket, uint32_t read_empty_time,$/;"	f
control_event_transport_launched	src/or/control.c	/^control_event_transport_launched(const char *mode, const char *transport_name,$/;"	f
control_free_all	src/or/control.c	/^control_free_all(void)$/;"	f
control_initialize_event_queue	src/or/control.c	/^control_initialize_event_queue(void)$/;"	f
control_ports_write_to_file	src/or/control.c	/^control_ports_write_to_file(void)$/;"	f
control_setconf_helper	src/or/control.c	/^control_setconf_helper(control_connection_t *conn, uint32_t len, char *body,$/;"	f	file:
control_testing_set_global_event_mask	src/or/control.c	/^control_testing_set_global_event_mask(uint64_t mask)$/;"	f
control_update_global_event_mask	src/or/control.c	/^control_update_global_event_mask(void)$/;"	f
controlevent_event	src/test/test_pt.c	/^static uint16_t controlevent_event = 0;$/;"	v	file:
controlevent_msgs	src/test/test_pt.c	/^static smartlist_t *controlevent_msgs = NULL;$/;"	v	file:
controlevent_n	src/test/test_pt.c	/^static int controlevent_n = 0;$/;"	v	file:
controller_event_tests	src/test/test_controller_events.c	/^struct testcase_t controller_event_tests[] = {$/;"	v	typeref:struct:testcase_t
controller_tests	src/test/test_controller.c	/^struct testcase_t controller_tests[] = {$/;"	v	typeref:struct:testcase_t
correct_time	src/or/rephist.c	/^correct_time(time_t t, time_t now, time_t stored_at, time_t started_measuring)$/;"	f	file:
correct_tm	src/common/compat.c	/^correct_tm(int islocal, const time_t *timep, struct tm *resultbuf,$/;"	f	file:
count	src/or/connection_or.c	/^  intptr_t count;$/;"	m	struct:broken_state_count_t	file:
count	src/or/directory.c	/^  uint64_t count; \/**< How many requests have we made? *\/$/;"	m	struct:request_t	file:
count	src/test/test_routerlist.c	/^static int count = 0;$/;"	v	file:
count	src/test/test_threads.c	/^static tor_threadlocal_t count;$/;"	v	file:
count_acceptable_nodes	src/or/circuitbuild.c	/^count_acceptable_nodes(smartlist_t *nodes)$/;"	f	file:
count_circuits	src/or/status.c	/^count_circuits(void)$/;"	f
count_established_intro_points	src/or/rendservice.c	/^count_established_intro_points(const rend_service_t *service)$/;"	f	file:
count_intro_point_circuits	src/or/rendservice.c	/^count_intro_point_circuits(const rend_service_t *service)$/;"	f	file:
count_loading_descriptors_progress	src/or/nodelist.c	/^count_loading_descriptors_progress(void)$/;"	f
count_pending_general_client_circuits	src/or/circuituse.c	/^count_pending_general_client_circuits(void)$/;"	f	file:
count_real_listeners	src/or/config.c	/^count_real_listeners(const smartlist_t *ports, int listenertype)$/;"	f	file:
count_usable_descriptors	src/or/nodelist.c	/^count_usable_descriptors(int *num_present, int *num_usable,$/;"	f	file:
counter0	src/common/aes.c	/^  uint32_t counter0;$/;"	m	struct:aes_cnt_cipher	file:
counter1	src/common/aes.c	/^  uint32_t counter1;$/;"	m	struct:aes_cnt_cipher	file:
counter2	src/common/aes.c	/^  uint32_t counter2;$/;"	m	struct:aes_cnt_cipher	file:
counter3	src/common/aes.c	/^  uint32_t counter3;$/;"	m	struct:aes_cnt_cipher	file:
countries	src/or/routerset.h	/^  bitarray_t *countries;$/;"	m	struct:routerset_t
country	src/or/geoip.c	/^  char country[3]; \/**< Two-letter country code. *\/$/;"	m	struct:c_hist_t	file:
country	src/or/geoip.c	/^  intptr_t country; \/**< An index into geoip_countries *\/$/;"	m	struct:geoip_ipv4_entry_t	file:
country	src/or/geoip.c	/^  intptr_t country; \/**< An index into geoip_countries *\/$/;"	m	struct:geoip_ipv6_entry_t	file:
country	src/or/or.h	/^  country_t country;$/;"	m	struct:node_t
country_idxplus1_by_lc_code	src/or/geoip.c	/^static strmap_t *country_idxplus1_by_lc_code = NULL;$/;"	v	file:
country_names	src/or/routerset.h	/^  smartlist_t *country_names;$/;"	m	struct:routerset_t
country_t	src/or/or.h	/^typedef int16_t country_t;$/;"	t
countrycode	src/or/geoip.c	/^  char countrycode[3];$/;"	m	struct:geoip_country_t	file:
cpath	src/or/or.h	/^  crypt_path_t *cpath;$/;"	m	struct:__anon52
cpath	src/or/or.h	/^  crypt_path_t *cpath;$/;"	m	struct:origin_circuit_t
cpath1	src/test/test_relay.c	/^  crypt_path_t *cpath1;$/;"	m	struct:relay_connection_test_data_t	file:
cpath2	src/test/test_relay.c	/^  crypt_path_t *cpath2;$/;"	m	struct:relay_connection_test_data_t	file:
cpath_build_state_t	src/or/or.h	/^} cpath_build_state_t;$/;"	t	typeref:struct:__anon53
cpath_is_on_circuit	src/or/circuituse.c	/^cpath_is_on_circuit(origin_circuit_t *circ, crypt_path_t *crypt_path)$/;"	f	file:
cpath_layer	src/or/or.h	/^  struct crypt_path_t *cpath_layer;$/;"	m	struct:edge_connection_t	typeref:struct:edge_connection_t::crypt_path_t
cpath_ref_decref	src/or/circuitlist.c	/^cpath_ref_decref(crypt_path_reference_t *cpath_ref)$/;"	f	file:
cpd_check_t	src/common/util.h	/^typedef unsigned int cpd_check_t;$/;"	t
cpu_init	src/test/test_config.c	/^NS(cpu_init)(void)$/;"	f
cpuworker_cancel_circ_handshake	src/or/cpuworker.c	/^cpuworker_cancel_circ_handshake(or_circuit_t *circ)$/;"	f
cpuworker_job_t	src/or/cpuworker.c	/^} cpuworker_job_t;$/;"	t	typeref:struct:cpuworker_job_u	file:
cpuworker_job_u	src/or/cpuworker.c	/^typedef struct cpuworker_job_u {$/;"	s	file:
cpuworker_log_onionskin_overhead	src/or/cpuworker.c	/^cpuworker_log_onionskin_overhead(int severity, int onionskin_type,$/;"	f
cpuworker_onion_handshake_replyfn	src/or/cpuworker.c	/^cpuworker_onion_handshake_replyfn(void *work_)$/;"	f	file:
cpuworker_onion_handshake_threadfn	src/or/cpuworker.c	/^cpuworker_onion_handshake_threadfn(void *state_, void *work_)$/;"	f	file:
cpuworker_reply_t	src/or/cpuworker.c	/^typedef struct cpuworker_reply_t {$/;"	s	file:
cpuworker_reply_t	src/or/cpuworker.c	/^} cpuworker_reply_t;$/;"	t	typeref:struct:cpuworker_reply_t	file:
cpuworker_request_t	src/or/cpuworker.c	/^typedef struct cpuworker_request_t {$/;"	s	file:
cpuworker_request_t	src/or/cpuworker.c	/^} cpuworker_request_t;$/;"	t	typeref:struct:cpuworker_request_t	file:
cpuworkers_rotate_keyinfo	src/or/cpuworker.c	/^cpuworkers_rotate_keyinfo(void)$/;"	f
crash	src/test/test_bt_cl.c	/^crash(int x)$/;"	f
crash_handler	src/common/backtrace.c	/^crash_handler(int sig, siginfo_t *si, void *ctx_)$/;"	f	file:
crashtype	src/test/test_bt_cl.c	/^static int crashtype = 0;$/;"	v	file:
create_cell	src/or/cpuworker.c	/^  create_cell_t create_cell;$/;"	m	struct:cpuworker_request_t	file:
create_cell	src/or/onion.h	/^  create_cell_t create_cell;$/;"	m	struct:extend_cell_t
create_cell_format	src/or/onion.c	/^create_cell_format(cell_t *cell_out, const create_cell_t *cell_in)$/;"	f
create_cell_format_impl	src/or/onion.c	/^create_cell_format_impl(cell_t *cell_out, const create_cell_t *cell_in,$/;"	f	file:
create_cell_format_relayed	src/or/onion.c	/^create_cell_format_relayed(cell_t *cell_out, const create_cell_t *cell_in)$/;"	f
create_cell_init	src/or/onion.c	/^create_cell_init(create_cell_t *cell_out, uint8_t cell_type,$/;"	f
create_cell_parse	src/or/onion.c	/^create_cell_parse(create_cell_t *cell_out, const cell_t *cell_in)$/;"	f
create_cell_t	src/or/onion.h	/^typedef struct create_cell_t {$/;"	s
create_cell_t	src/or/onion.h	/^} create_cell_t;$/;"	t	typeref:struct:create_cell_t
create_command_type_holder	src/test/test_relay.c	/^void *create_command_type_holder(const struct testcase_t *testcase)$/;"	f
create_descriptor	src/test/rend_test_helpers.c	/^create_descriptor(rend_service_descriptor_t **generated, char **service_id, int intro_points)$/;"	f
create_managed_proxy_environment	src/or/transports.c	/^create_managed_proxy_environment(const managed_proxy_t *mp)$/;"	f	file:
create_unix_sockaddr	src/or/connection.c	/^create_unix_sockaddr(const char *listenaddress, char **readable_address,$/;"	f	file:
created_cell	src/or/cpuworker.c	/^  created_cell_t created_cell;$/;"	m	struct:cpuworker_reply_t	file:
created_cell	src/or/onion.h	/^  created_cell_t created_cell;$/;"	m	struct:extended_cell_t
created_cell_format	src/or/onion.c	/^created_cell_format(cell_t *cell_out, const created_cell_t *cell_in)$/;"	f
created_cell_parse	src/or/onion.c	/^created_cell_parse(created_cell_t *cell_out, const cell_t *cell_in)$/;"	f
created_cell_t	src/or/onion.h	/^typedef struct created_cell_t {$/;"	s
created_cell_t	src/or/onion.h	/^} created_cell_t;$/;"	t	typeref:struct:created_cell_t
created_ts	src/or/rendcache.h	/^  time_t created_ts;$/;"	m	struct:rend_cache_failure_intro_t
crecip	src/ext/curve25519_donna/curve25519-donna-c64.c	/^crecip(felem out, const felem z) {$/;"	f	file:
crypt_path_reference_t	src/or/or.h	/^} crypt_path_reference_t;$/;"	t	typeref:struct:__anon52
crypt_path_t	src/or/or.h	/^typedef struct crypt_path_t {$/;"	s
crypt_path_t	src/or/or.h	/^} crypt_path_t;$/;"	t	typeref:struct:crypt_path_t
crypto_add_spaces_to_fp	src/common/crypto.c	/^crypto_add_spaces_to_fp(char *out, size_t outlen, const char *in)$/;"	f
crypto_cipher_crypt_inplace	src/common/crypto.c	/^crypto_cipher_crypt_inplace(crypto_cipher_t *env, char *buf, size_t len)$/;"	f
crypto_cipher_decrypt	src/common/crypto.c	/^crypto_cipher_decrypt(crypto_cipher_t *env, char *to,$/;"	f
crypto_cipher_decrypt_with_iv	src/common/crypto.c	/^crypto_cipher_decrypt_with_iv(const char *key,$/;"	f
crypto_cipher_encrypt	src/common/crypto.c	/^crypto_cipher_encrypt(crypto_cipher_t *env, char *to,$/;"	f
crypto_cipher_encrypt_with_iv	src/common/crypto.c	/^crypto_cipher_encrypt_with_iv(const char *key,$/;"	f
crypto_cipher_free	src/common/crypto.c	/^crypto_cipher_free(crypto_cipher_t *env)$/;"	f
crypto_cipher_get_key	src/common/crypto.c	/^crypto_cipher_get_key(crypto_cipher_t *env)$/;"	f
crypto_cipher_new	src/common/crypto.c	/^crypto_cipher_new(const char *key)$/;"	f
crypto_cipher_new_with_iv	src/common/crypto.c	/^crypto_cipher_new_with_iv(const char *key, const char *iv)$/;"	f
crypto_cipher_t	src/common/crypto.c	/^struct crypto_cipher_t$/;"	s	file:
crypto_cipher_t	src/common/crypto.h	/^typedef struct crypto_cipher_t crypto_cipher_t;$/;"	t	typeref:struct:crypto_cipher_t
crypto_dh_compute_secret	src/common/crypto.c	/^crypto_dh_compute_secret(int severity, crypto_dh_t *dh,$/;"	f
crypto_dh_dup	src/common/crypto.c	/^crypto_dh_dup(const crypto_dh_t *dh)$/;"	f
crypto_dh_free	src/common/crypto.c	/^crypto_dh_free(crypto_dh_t *dh)$/;"	f
crypto_dh_generate_public	src/common/crypto.c	/^crypto_dh_generate_public(crypto_dh_t *dh)$/;"	f
crypto_dh_get_bytes	src/common/crypto.c	/^crypto_dh_get_bytes(crypto_dh_t *dh)$/;"	f
crypto_dh_get_dh_	src/common/crypto.c	/^crypto_dh_get_dh_(crypto_dh_t *dh)$/;"	f
crypto_dh_get_public	src/common/crypto.c	/^crypto_dh_get_public(crypto_dh_t *dh, char *pubkey, size_t pubkey_len)$/;"	f
crypto_dh_new	src/common/crypto.c	/^crypto_dh_new(int dh_type)$/;"	f
crypto_dh_t	src/common/crypto.c	/^struct crypto_dh_t {$/;"	s	file:
crypto_dh_t	src/common/crypto.h	/^typedef struct crypto_dh_t crypto_dh_t;$/;"	t	typeref:struct:crypto_dh_t
crypto_digest	src/common/crypto.c	/^crypto_digest(char *digest, const char *m, size_t len)$/;"	f
crypto_digest256	src/common/crypto.c	/^crypto_digest256(char *digest, const char *m, size_t len,$/;"	f
crypto_digest256_new	src/common/crypto.c	/^crypto_digest256_new(digest_algorithm_t algorithm)$/;"	f
crypto_digest_add_bytes	src/common/crypto.c	/^crypto_digest_add_bytes(crypto_digest_t *digest, const char *data,$/;"	f
crypto_digest_algorithm_get_name	src/common/crypto.c	/^crypto_digest_algorithm_get_name(digest_algorithm_t alg)$/;"	f
crypto_digest_algorithm_parse_name	src/common/crypto.c	/^crypto_digest_algorithm_parse_name(const char *name)$/;"	f
crypto_digest_all	src/common/crypto.c	/^crypto_digest_all(digests_t *ds_out, const char *m, size_t len)$/;"	f
crypto_digest_assign	src/common/crypto.c	/^crypto_digest_assign(crypto_digest_t *into,$/;"	f
crypto_digest_dup	src/common/crypto.c	/^crypto_digest_dup(const crypto_digest_t *digest)$/;"	f
crypto_digest_free	src/common/crypto.c	/^crypto_digest_free(crypto_digest_t *digest)$/;"	f
crypto_digest_get_digest	src/common/crypto.c	/^crypto_digest_get_digest(crypto_digest_t *digest,$/;"	f
crypto_digest_new	src/common/crypto.c	/^crypto_digest_new(void)$/;"	f
crypto_digest_smartlist	src/common/crypto.c	/^crypto_digest_smartlist(char *digest_out, size_t len_out,$/;"	f
crypto_digest_smartlist_prefix	src/common/crypto.c	/^crypto_digest_smartlist_prefix(char *digest_out, size_t len_out,$/;"	f
crypto_digest_t	src/common/crypto.c	/^struct crypto_digest_t {$/;"	s	file:
crypto_digest_t	src/common/crypto.h	/^typedef struct crypto_digest_t crypto_digest_t;$/;"	t	typeref:struct:crypto_digest_t
crypto_early_init	src/common/crypto.c	/^crypto_early_init(void)$/;"	f
crypto_early_initialized_	src/common/crypto.c	/^static int crypto_early_initialized_ = 0;$/;"	v	file:
crypto_expand_key_material_TAP	src/common/crypto.c	/^crypto_expand_key_material_TAP(const uint8_t *key_in, size_t key_in_len,$/;"	f
crypto_expand_key_material_rfc5869_sha256	src/common/crypto.c	/^crypto_expand_key_material_rfc5869_sha256($/;"	f
crypto_force_rand_ssleay	src/common/crypto.c	/^crypto_force_rand_ssleay(void)$/;"	f	file:
crypto_get_rsa_padding	src/common/crypto.c	/^crypto_get_rsa_padding(int padding)$/;"	f	file:
crypto_get_rsa_padding_overhead	src/common/crypto.c	/^crypto_get_rsa_padding_overhead(int padding)$/;"	f	file:
crypto_global_cleanup	src/common/crypto.c	/^crypto_global_cleanup(void)$/;"	f
crypto_global_init	src/common/crypto.c	/^crypto_global_init(int useAccel, const char *accelName, const char *accelDir)$/;"	f
crypto_global_initialized_	src/common/crypto.c	/^static int crypto_global_initialized_ = 0;$/;"	v	file:
crypto_hash_sha512	src/ext/ed25519/ref10/crypto_hash_sha512.h	/^#define crypto_hash_sha512(/;"	d
crypto_hash_sha512_2	src/ext/ed25519/ref10/crypto_hash_sha512.h	/^#define crypto_hash_sha512_2(/;"	d
crypto_hash_sha512_3	src/ext/ed25519/ref10/crypto_hash_sha512.h	/^#define crypto_hash_sha512_3(/;"	d
crypto_hmac_sha256	src/common/crypto.c	/^crypto_hmac_sha256(char *hmac_out,$/;"	f
crypto_init_siphash_key	src/common/crypto.c	/^crypto_init_siphash_key(void)$/;"	f
crypto_int32	src/ext/ed25519/ref10/crypto_int32.h	/^#define crypto_int32 /;"	d
crypto_int64	src/ext/ed25519/ref10/crypto_int64.h	/^#define crypto_int64 /;"	d
crypto_log_errors	src/common/crypto.c	/^crypto_log_errors(int severity, const char *doing)$/;"	f	file:
crypto_log_errors	src/tools/tor-gencert.c	/^crypto_log_errors(int severity, const char *doing)$/;"	f	file:
crypto_new_pk_from_rsa_	src/common/crypto.c	/^crypto_new_pk_from_rsa_(RSA *rsa)$/;"	f
crypto_openssl_get_header_version_str	src/common/crypto.c	/^crypto_openssl_get_header_version_str(void)$/;"	f
crypto_openssl_get_version_str	src/common/crypto.c	/^crypto_openssl_get_version_str(void)$/;"	f
crypto_openssl_header_version_str	src/common/crypto.c	/^static char *crypto_openssl_header_version_str = NULL;$/;"	v	file:
crypto_openssl_version_str	src/common/crypto.c	/^static char *crypto_openssl_version_str = NULL;$/;"	v	file:
crypto_pk_asn1_decode	src/common/crypto.c	/^crypto_pk_asn1_decode(const char *str, size_t len)$/;"	f
crypto_pk_asn1_encode	src/common/crypto.c	/^crypto_pk_asn1_encode(crypto_pk_t *pk, char *dest, size_t dest_len)$/;"	f
crypto_pk_base64_decode	src/common/crypto.c	/^crypto_pk_base64_decode(const char *str, size_t len)$/;"	f
crypto_pk_base64_encode	src/common/crypto.c	/^crypto_pk_base64_encode(const crypto_pk_t *pk, char **priv_out)$/;"	f
crypto_pk_check_key	src/common/crypto.c	/^crypto_pk_check_key(crypto_pk_t *env)$/;"	f
crypto_pk_cmp_keys	src/common/crypto.c	/^crypto_pk_cmp_keys(const crypto_pk_t *a, const crypto_pk_t *b)$/;"	f
crypto_pk_copy_full	src/common/crypto.c	/^crypto_pk_copy_full(crypto_pk_t *env)$/;"	f
crypto_pk_dup_key	src/common/crypto.c	/^crypto_pk_dup_key(crypto_pk_t *env)$/;"	f
crypto_pk_eq_keys	src/common/crypto.c	/^crypto_pk_eq_keys(const crypto_pk_t *a, const crypto_pk_t *b)$/;"	f
crypto_pk_free	src/common/crypto.c	/^crypto_pk_free(crypto_pk_t *env)$/;"	f
crypto_pk_generate_key	src/common/crypto.h	/^#define crypto_pk_generate_key(/;"	d
crypto_pk_generate_key_with_bits	src/common/crypto.c	/^crypto_pk_generate_key_with_bits(crypto_pk_t *env, int bits)$/;"	f
crypto_pk_get_all_digests	src/common/crypto.c	/^crypto_pk_get_all_digests(crypto_pk_t *pk, digests_t *digests_out)$/;"	f
crypto_pk_get_digest	src/common/crypto.c	/^crypto_pk_get_digest(const crypto_pk_t *pk, char *digest_out)$/;"	f
crypto_pk_get_evp_pkey_	src/common/crypto.c	/^crypto_pk_get_evp_pkey_(crypto_pk_t *env, int private)$/;"	f
crypto_pk_get_fingerprint	src/common/crypto.c	/^crypto_pk_get_fingerprint(crypto_pk_t *pk, char *fp_out, int add_space)$/;"	f
crypto_pk_get_hashed_fingerprint	src/common/crypto.c	/^crypto_pk_get_hashed_fingerprint(crypto_pk_t *pk, char *fp_out)$/;"	f
crypto_pk_get_rsa_	src/common/crypto.c	/^crypto_pk_get_rsa_(crypto_pk_t *env)$/;"	f
crypto_pk_key_is_private	src/common/crypto.c	/^crypto_pk_key_is_private(const crypto_pk_t *key)$/;"	f
crypto_pk_keysize	src/common/crypto.c	/^crypto_pk_keysize(const crypto_pk_t *env)$/;"	f
crypto_pk_new	src/common/crypto.c	/^crypto_pk_new(void)$/;"	f
crypto_pk_num_bits	src/common/crypto.c	/^crypto_pk_num_bits(crypto_pk_t *env)$/;"	f
crypto_pk_private_decrypt	src/common/crypto.c	/^crypto_pk_private_decrypt(crypto_pk_t *env, char *to,$/;"	f
crypto_pk_private_hybrid_decrypt	src/common/crypto.c	/^crypto_pk_private_hybrid_decrypt(crypto_pk_t *env,$/;"	f
crypto_pk_private_sign	src/common/crypto.c	/^crypto_pk_private_sign(const crypto_pk_t *env, char *to, size_t tolen,$/;"	f
crypto_pk_private_sign_digest	src/common/crypto.c	/^crypto_pk_private_sign_digest(crypto_pk_t *env, char *to, size_t tolen,$/;"	f
crypto_pk_public_checksig	src/common/crypto.c	/^crypto_pk_public_checksig(const crypto_pk_t *env, char *to,$/;"	f
crypto_pk_public_checksig_digest	src/common/crypto.c	/^crypto_pk_public_checksig_digest(crypto_pk_t *env, const char *data,$/;"	f
crypto_pk_public_encrypt	src/common/crypto.c	/^crypto_pk_public_encrypt(crypto_pk_t *env, char *to, size_t tolen,$/;"	f
crypto_pk_public_exponent_ok	src/common/crypto.c	/^crypto_pk_public_exponent_ok(crypto_pk_t *env)$/;"	f
crypto_pk_public_hybrid_encrypt	src/common/crypto.c	/^crypto_pk_public_hybrid_encrypt(crypto_pk_t *env,$/;"	f
crypto_pk_read_private_key_from_filename	src/common/crypto.c	/^crypto_pk_read_private_key_from_filename(crypto_pk_t *env,$/;"	f
crypto_pk_read_private_key_from_string	src/common/crypto.c	/^crypto_pk_read_private_key_from_string(crypto_pk_t *env,$/;"	f
crypto_pk_read_public_key_from_string	src/common/crypto.c	/^crypto_pk_read_public_key_from_string(crypto_pk_t *env, const char *src,$/;"	f
crypto_pk_t	src/common/crypto.c	/^struct crypto_pk_t$/;"	s	file:
crypto_pk_t	src/common/crypto.h	/^typedef struct crypto_pk_t crypto_pk_t;$/;"	t	typeref:struct:crypto_pk_t
crypto_pk_write_key_to_string_impl	src/common/crypto.c	/^crypto_pk_write_key_to_string_impl(crypto_pk_t *env, char **dest,$/;"	f	file:
crypto_pk_write_private_key_to_filename	src/common/crypto.c	/^crypto_pk_write_private_key_to_filename(crypto_pk_t *env,$/;"	f
crypto_pk_write_private_key_to_string	src/common/crypto.c	/^crypto_pk_write_private_key_to_string(crypto_pk_t *env, char **dest,$/;"	f
crypto_pk_write_public_key_to_string	src/common/crypto.c	/^crypto_pk_write_public_key_to_string(crypto_pk_t *env, char **dest,$/;"	f
crypto_pwbox	src/common/crypto_pwbox.c	/^crypto_pwbox(uint8_t **out, size_t *outlen_out,$/;"	f
crypto_rand_double	src/common/crypto.c	/^crypto_rand_double(void)$/;"	f
crypto_rand_int	src/common/crypto.c	/^crypto_rand_int(unsigned int max)$/;"	f
crypto_rand_int_range	src/common/crypto.c	/^crypto_rand_int_range(unsigned int min, unsigned int max)$/;"	f
crypto_rand_return_tse_str	src/test/test_extorport.c	/^crypto_rand_return_tse_str(char *to, size_t n)$/;"	f	file:
crypto_rand_time_range	src/common/crypto.c	/^crypto_rand_time_range(time_t min, time_t max)$/;"	f
crypto_rand_uint64	src/common/crypto.c	/^crypto_rand_uint64(uint64_t max)$/;"	f
crypto_rand_uint64_range	src/common/crypto.c	/^crypto_rand_uint64_range(uint64_t min, uint64_t max)$/;"	f
crypto_rand_unmocked	src/common/crypto.c	/^crypto_rand_unmocked(char *to, size_t n)$/;"	f
crypto_random_hostname	src/common/crypto.c	/^crypto_random_hostname(int min_rand_len, int max_rand_len, const char *prefix,$/;"	f
crypto_read_tagged_contents_from_file	src/common/crypto_format.c	/^crypto_read_tagged_contents_from_file(const char *fname,$/;"	f
crypto_seed_rng	src/common/crypto.c	/^crypto_seed_rng(void)$/;"	f
crypto_seed_weak_rng	src/common/crypto.c	/^crypto_seed_weak_rng(tor_weak_rng_t *rng)$/;"	f
crypto_set_tls_dh_prime	src/common/crypto.c	/^crypto_set_tls_dh_prime(void)$/;"	f
crypto_sign	src/ext/ed25519/ref10/crypto_sign.h	/^#define crypto_sign /;"	d
crypto_sign	src/ext/ed25519/ref10/sign.c	/^int crypto_sign($/;"	f
crypto_sign_keypair	src/ext/ed25519/ref10/crypto_sign.h	/^#define crypto_sign_keypair /;"	d
crypto_sign_keypair	src/ext/ed25519/ref10/keypair.c	/^int crypto_sign_keypair(unsigned char *pk,unsigned char *sk)$/;"	f
crypto_sign_open	src/ext/ed25519/ref10/crypto_sign.h	/^#define crypto_sign_open /;"	d
crypto_sign_open	src/ext/ed25519/ref10/open.c	/^int crypto_sign_open($/;"	f
crypto_sign_pubkey	src/ext/ed25519/ref10/crypto_sign.h	/^#define crypto_sign_pubkey /;"	d
crypto_sign_pubkey	src/ext/ed25519/ref10/keypair.c	/^int crypto_sign_pubkey(unsigned char *pk,const unsigned char *sk)$/;"	f
crypto_sign_seckey	src/ext/ed25519/ref10/crypto_sign.h	/^#define crypto_sign_seckey /;"	d
crypto_sign_seckey	src/ext/ed25519/ref10/keypair.c	/^crypto_sign_seckey(unsigned char *sk)$/;"	f
crypto_sign_seckey_expand	src/ext/ed25519/ref10/crypto_sign.h	/^#define crypto_sign_seckey_expand /;"	d
crypto_sign_seckey_expand	src/ext/ed25519/ref10/keypair.c	/^int crypto_sign_seckey_expand(unsigned char *sk, const unsigned char *skseed)$/;"	f
crypto_strongest_rand	src/common/crypto.c	/^crypto_strongest_rand(uint8_t *out, size_t out_len)$/;"	f
crypto_tests	src/test/test_crypto.c	/^struct testcase_t crypto_tests[] = {$/;"	v	typeref:struct:testcase_t
crypto_thread_cleanup	src/common/crypto.c	/^crypto_thread_cleanup(void)$/;"	f
crypto_uint32	src/ext/ed25519/ref10/crypto_int32.h	/^#define crypto_uint32 /;"	d
crypto_uint32	src/ext/ed25519/ref10/crypto_uint32.h	/^#define crypto_uint32 /;"	d
crypto_uint64	src/ext/ed25519/ref10/crypto_int64.h	/^#define crypto_uint64 /;"	d
crypto_uint64	src/ext/ed25519/ref10/crypto_uint64.h	/^#define crypto_uint64 /;"	d
crypto_unpwbox	src/common/crypto_pwbox.c	/^crypto_unpwbox(uint8_t **out, size_t *outlen_out,$/;"	f
crypto_verify_32	src/ext/ed25519/ref10/crypto_verify_32.h	/^#define crypto_verify_32(/;"	d
crypto_write_tagged_contents_to_file	src/common/crypto_format.c	/^crypto_write_tagged_contents_to_file(const char *fname,$/;"	f
ctr_buf	src/common/aes.c	/^  } ctr_buf;$/;"	m	struct:aes_cnt_cipher	typeref:union:aes_cnt_cipher::__anon107	file:
ctx	src/common/tortls.h	/^  SSL_CTX *ctx;$/;"	m	struct:tor_tls_context_t
cur_obs_idx	src/or/rephist.c	/^  int cur_obs_idx; \/**< Current position in obs. *\/$/;"	m	struct:bw_array_t	file:
cur_obs_time	src/or/rephist.c	/^  time_t cur_obs_time; \/**< Time represented in obs[cur_obs_idx] *\/$/;"	m	struct:bw_array_t	file:
cur_test_name	src/ext/tinytest.c	/^const char *cur_test_name = NULL;$/;"	v
cur_test_outcome	src/ext/tinytest.c	/^static enum outcome cur_test_outcome = 0;$/;"	v	typeref:enum:outcome	file:
cur_test_prefix	src/ext/tinytest.c	/^const char *cur_test_prefix = NULL; \/**< prefix of the current test group *\/$/;"	v
current_auth_key	src/or/routerkeys.c	/^static ed25519_keypair_t *current_auth_key = NULL;$/;"	v	file:
current_consensus	src/or/networkstatus.c	/^#define current_consensus /;"	d	file:
current_md_consensus	src/or/networkstatus.c	/^static networkstatus_t *current_md_consensus = NULL;$/;"	v	file:
current_ns_consensus	src/or/networkstatus.c	/^static networkstatus_t *current_ns_consensus = NULL;$/;"	v	file:
curve25519_add	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_add(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_add(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_add(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_after_basic	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_add_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_after_basic	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_add_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_after_basic	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^#define curve25519_add_after_basic /;"	d
curve25519_add_packed32	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_add_packed32(packedelem32 *out, const packedelem32 *r, const packedelem32 *s) {$/;"	f
curve25519_add_reduce	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_add_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_reduce	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_add_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_reduce	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_add_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_add_reduce_packed32	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_add_reduce_packed32(packedelem32 *out, const packedelem32 *r, const packedelem32 *s) {$/;"	f
curve25519_basepoint_impl	src/common/crypto_curve25519.c	/^curve25519_basepoint_impl(uint8_t *output, const uint8_t *secret)$/;"	f
curve25519_basepoint_spot_check	src/common/crypto_curve25519.c	/^curve25519_basepoint_spot_check(void)$/;"	f	file:
curve25519_contract	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_contract(unsigned char out[32], const bignum25519 in) {$/;"	f
curve25519_contract	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_contract(unsigned char *out, const bignum25519 input) {$/;"	f
curve25519_contract	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_contract(unsigned char out[32], const bignum25519 in) {$/;"	f
curve25519_contract_carry	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^	#define curve25519_contract_carry(/;"	d
curve25519_contract_carry_final	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^	#define curve25519_contract_carry_final(/;"	d
curve25519_contract_carry_full	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^	#define curve25519_contract_carry_full(/;"	d
curve25519_copy	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_copy(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_copy	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_copy(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_copy	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_copy(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_donna	src/ext/curve25519_donna/curve25519-donna-c64.c	/^curve25519_donna(u8 *mypublic, const u8 *secret, const u8 *basepoint) {$/;"	f
curve25519_expand	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_expand(bignum25519 out, const unsigned char in[32]) {$/;"	f
curve25519_expand	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_expand(bignum25519 out, const unsigned char *in) {$/;"	f
curve25519_expand	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_expand(bignum25519 out, const unsigned char in[32]) {$/;"	f
curve25519_handshake	src/common/crypto_curve25519.c	/^curve25519_handshake(uint8_t *output,$/;"	f
curve25519_impl	src/common/crypto_curve25519.c	/^curve25519_impl(uint8_t *output, const uint8_t *secret,$/;"	f
curve25519_init	src/common/crypto_curve25519.c	/^curve25519_init(void)$/;"	f
curve25519_key_map	src/or/onion.h	/^  di_digest256_map_t *curve25519_key_map;$/;"	m	struct:server_onion_keys_t
curve25519_keypair_generate	src/common/crypto_curve25519.c	/^curve25519_keypair_generate(curve25519_keypair_t *keypair_out,$/;"	f
curve25519_keypair_read_from_file	src/common/crypto_curve25519.c	/^curve25519_keypair_read_from_file(curve25519_keypair_t *keypair_out,$/;"	f
curve25519_keypair_t	src/common/crypto_curve25519.h	/^typedef struct curve25519_keypair_t {$/;"	s
curve25519_keypair_t	src/common/crypto_curve25519.h	/^} curve25519_keypair_t;$/;"	t	typeref:struct:curve25519_keypair_t
curve25519_keypair_write_to_file	src/common/crypto_curve25519.c	/^curve25519_keypair_write_to_file(const curve25519_keypair_t *keypair,$/;"	f
curve25519_move_conditional_bytes	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_move_conditional_bytes(uint8_t out[96], const uint8_t in[96], uint32_t flag) {$/;"	f
curve25519_move_conditional_bytes	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_move_conditional_bytes(uint8_t out[96], const uint8_t in[96], uint64_t flag) {$/;"	f
curve25519_move_conditional_bytes	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_move_conditional_bytes(uint8_t out[96], const uint8_t in[96], uint32_t flag) {$/;"	f
curve25519_mul	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_mul(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_mul	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_mul(bignum25519 out, const bignum25519 in2, const bignum25519 in) {$/;"	f
curve25519_mul	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_mul(bignum25519 out, const bignum25519 r, const bignum25519 s) {$/;"	f
curve25519_mul_noinline	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^#define curve25519_mul_noinline /;"	d
curve25519_mul_noinline	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_mul_noinline(bignum25519 out, const bignum25519 in2, const bignum25519 in) {$/;"	f
curve25519_mul_noinline	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_mul_noinline(bignum25519 out, const bignum25519 r, const bignum25519 s) {$/;"	f
curve25519_mul_packed64	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_mul_packed64(packedelem64 *out, const packedelem64 *r, const packedelem64 *s) {$/;"	f
curve25519_neg	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_neg(bignum25519 out, const bignum25519 a) {$/;"	f
curve25519_neg	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_neg(bignum25519 out, const bignum25519 a) {$/;"	f
curve25519_neg	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_neg(bignum25519 out, const bignum25519 b) {$/;"	f
curve25519_onion_key	src/or/or.h	/^  curve25519_public_key_t curve25519_onion_key;$/;"	m	struct:extend_info_t
curve25519_onion_key	src/or/router.c	/^static curve25519_keypair_t curve25519_onion_key;$/;"	v	file:
curve25519_pow_two252m3	src/ext/ed25519/donna/curve25519-donna-helpers.h	/^curve25519_pow_two252m3(bignum25519 two252m3, const bignum25519 z) {$/;"	f
curve25519_pow_two5mtwo0_two250mtwo0	src/ext/ed25519/donna/curve25519-donna-helpers.h	/^curve25519_pow_two5mtwo0_two250mtwo0(bignum25519 b) {$/;"	f
curve25519_public_from_base64	src/common/crypto_format.c	/^curve25519_public_from_base64(curve25519_public_key_t *pkey,$/;"	f
curve25519_public_key_generate	src/common/crypto_curve25519.c	/^curve25519_public_key_generate(curve25519_public_key_t *key_out,$/;"	f
curve25519_public_key_is_ok	src/common/crypto_curve25519.c	/^curve25519_public_key_is_ok(const curve25519_public_key_t *key)$/;"	f
curve25519_public_key_t	src/common/crypto_curve25519.h	/^typedef struct curve25519_public_key_t {$/;"	s
curve25519_public_key_t	src/common/crypto_curve25519.h	/^} curve25519_public_key_t;$/;"	t	typeref:struct:curve25519_public_key_t
curve25519_public_to_base64	src/common/crypto_format.c	/^curve25519_public_to_base64(char *output,$/;"	f
curve25519_rand_seckey_bytes	src/common/crypto_curve25519.c	/^curve25519_rand_seckey_bytes(uint8_t *out, int extra_strong)$/;"	f
curve25519_recip	src/ext/ed25519/donna/curve25519-donna-helpers.h	/^curve25519_recip(bignum25519 out, const bignum25519 z) {$/;"	f
curve25519_secret_key_generate	src/common/crypto_curve25519.c	/^curve25519_secret_key_generate(curve25519_secret_key_t *key_out,$/;"	f
curve25519_secret_key_t	src/common/crypto_curve25519.h	/^typedef struct curve25519_secret_key_t {$/;"	s
curve25519_secret_key_t	src/common/crypto_curve25519.h	/^} curve25519_secret_key_t;$/;"	t	typeref:struct:curve25519_secret_key_t
curve25519_set_impl_params	src/common/crypto_curve25519.c	/^curve25519_set_impl_params(int use_ed)$/;"	f
curve25519_square	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_square(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_square	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_square(bignum25519 out, const bignum25519 in) {$/;"	f
curve25519_square	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^#define curve25519_square(/;"	d
curve25519_square_packed64	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_square_packed64(packedelem64 *out, const packedelem64 *r) {$/;"	f
curve25519_square_times	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_square_times(bignum25519 out, const bignum25519 in, int count) {$/;"	f
curve25519_square_times	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_square_times(bignum25519 out, const bignum25519 in, uint64_t count) {$/;"	f
curve25519_square_times	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_square_times(bignum25519 r, const bignum25519 in, int count) {$/;"	f
curve25519_sub	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_sub(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_sub(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_sub(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_after_basic	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_sub_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_after_basic	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_sub_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_after_basic	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_sub_after_basic(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_after_basic_packed32	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_sub_after_basic_packed32(packedelem32 *out, const packedelem32 *r, const packedelem32 *s) {$/;"	f
curve25519_sub_packed32	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_sub_packed32(packedelem32 *out, const packedelem32 *r, const packedelem32 *s) {$/;"	f
curve25519_sub_reduce	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_sub_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_reduce	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_sub_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_sub_reduce	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_sub_reduce(bignum25519 out, const bignum25519 a, const bignum25519 b) {$/;"	f
curve25519_swap64	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_swap64(packedelem64 *out) {$/;"	f
curve25519_swap_conditional	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^curve25519_swap_conditional(bignum25519 a, bignum25519 b, uint32_t iswap) {$/;"	f
curve25519_swap_conditional	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^curve25519_swap_conditional(bignum25519 a, bignum25519 b, uint64_t iswap) {$/;"	f
curve25519_swap_conditional	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_swap_conditional(bignum25519 a, bignum25519 b, uint32_t iswap) {$/;"	f
curve25519_tangle32	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_tangle32(packedelem32 *out, const bignum25519 x, const bignum25519 z) {$/;"	f
curve25519_tangle64	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_tangle64(packedelem64 *out, const bignum25519 x, const bignum25519 z) {$/;"	f
curve25519_tangle64_from32	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_tangle64_from32(packedelem64 *a, packedelem64 *b, const packedelem32 *c, const packedelem32 *d) {$/;"	f
curve25519_tangleone64	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_tangleone64(packedelem64 *out, const bignum25519 x) {$/;"	f
curve25519_untangle32	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_untangle32(bignum25519 x, bignum25519 z, const packedelem32 *in) {$/;"	f
curve25519_untangle64	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^curve25519_untangle64(bignum25519 x, bignum25519 z, const packedelem64 *in) {$/;"	f
curve25519_use_ed	src/common/crypto_curve25519.c	/^static int curve25519_use_ed = -1;$/;"	v	file:
curved25519_key	src/ext/ed25519/donna/ed25519.h	/^typedef unsigned char curved25519_key[32];$/;"	t
curved25519_key	src/ext/ed25519/donna/ed25519_donna_tor.h	/^typedef unsigned char curved25519_key[32];$/;"	t
curved25519_scalarmult_basepoint	src/ext/ed25519/donna/ed25519_tor.c	/^ED25519_FN(curved25519_scalarmult_basepoint) (curved25519_key pk, const curved25519_key e) {$/;"	f
cv_test_thr_fn_	src/test/test_threads.c	/^cv_test_thr_fn_(void *arg)$/;"	f	file:
cv_testinfo_free	src/test/test_threads.c	/^cv_testinfo_free(cv_testinfo_t *i)$/;"	f	file:
cv_testinfo_new	src/test/test_threads.c	/^cv_testinfo_new(void)$/;"	f	file:
cv_testinfo_s	src/test/test_threads.c	/^typedef struct cv_testinfo_s {$/;"	s	file:
cv_testinfo_t	src/test/test_threads.c	/^} cv_testinfo_t;$/;"	t	typeref:struct:cv_testinfo_s	file:
d	src/common/crypto.c	/^  } d; \/**< State for the digest we're using.  Only one member of the$/;"	m	struct:crypto_digest_t	typeref:union:crypto_digest_t::__anon16	file:
d	src/common/crypto.h	/^  char d[N_DIGEST_ALGORITHMS][DIGEST256_LEN];$/;"	m	struct:__anon23
d	src/ext/ed25519/ref10/ge_frombytes.c	/^static const fe d = {$/;"	v	file:
d	src/or/dircollate.c	/^  uint8_t d[DIGEST_LEN + DIGEST256_LEN];$/;"	m	struct:ddmap_entry_s	file:
d2	src/ext/ed25519/ref10/ge_p3_to_cached.c	/^static const fe d2 = {$/;"	v	file:
daemon_filedes	src/common/util.c	/^static int daemon_filedes[2];$/;"	v	file:
data	src/common/compat.h	/^  const char *data; \/**< Mapping of the file's contents. *\/$/;"	m	struct:tor_mmap_t
data	src/common/compat_libevent.c	/^  void *data;$/;"	m	struct:periodic_timer_t	file:
data	src/common/compat_pthreads.c	/^  void *data;$/;"	m	struct:tor_pthread_data_t	file:
data	src/or/buffers.h	/^  char *data; \/**< A pointer to the first byte of data stored in <b>mem<\/b>. *\/$/;"	m	struct:chunk_t
data	src/trunnel/pwbox.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) data;$/;"	m	struct:pwbox_encoded_st
datalen	src/or/buffers.h	/^  size_t datalen; \/**< How many bytes is this buffer holding right now? *\/$/;"	m	struct:buf_t
datalen	src/or/buffers.h	/^  size_t datalen; \/**< The number of bytes stored in this chunk *\/$/;"	m	struct:chunk_t
days_per_month	src/common/util.c	/^static const int days_per_month[] =$/;"	v	file:
dbl	src/or/routerlist.h	/^  double dbl;$/;"	m	union:u64_dbl_t
ddmap_entry_eq	src/or/dircollate.c	/^ddmap_entry_eq(const ddmap_entry_t *a, const ddmap_entry_t *b)$/;"	f	file:
ddmap_entry_free	src/or/dircollate.c	/^ddmap_entry_free(ddmap_entry_t *e)$/;"	f	file:
ddmap_entry_hash	src/or/dircollate.c	/^ddmap_entry_hash(const ddmap_entry_t *ent)$/;"	f	file:
ddmap_entry_new	src/or/dircollate.c	/^ddmap_entry_new(int n_votes)$/;"	f	file:
ddmap_entry_s	src/or/dircollate.c	/^typedef struct ddmap_entry_s {$/;"	s	file:
ddmap_entry_set_digests	src/or/dircollate.c	/^ddmap_entry_set_digests(ddmap_entry_t *ent,$/;"	f	file:
ddmap_entry_t	src/or/dircollate.c	/^} ddmap_entry_t;$/;"	t	typeref:struct:ddmap_entry_s	file:
decide_if_publishable_server	src/or/router.c	/^decide_if_publishable_server(void)$/;"	f	file:
decide_next_handshake_type	src/or/onion.c	/^decide_next_handshake_type(void)$/;"	f	file:
decide_num_guards	src/or/entrynodes.c	/^decide_num_guards(const or_options_t *options, int for_directory)$/;"	f
decide_to_advertise_dirport	src/or/router.c	/^decide_to_advertise_dirport(const or_options_t *options, uint16_t dir_port)$/;"	f	file:
declared_family	src/or/or.h	/^  smartlist_t *declared_family; \/**< Nicknames of router which this router$/;"	m	struct:__anon45
decode_address_from_payload	src/or/relay.c	/^decode_address_from_payload(tor_addr_t *addr_out, const uint8_t *payload,$/;"	f
decode_escaped_string	src/or/control.c	/^decode_escaped_string(const char *start, size_t in_len_max,$/;"	f	file:
decode_hashed_passwords	src/or/control.c	/^decode_hashed_passwords(config_line_t *passwords)$/;"	f
def_opt	src/test/test_options.c	/^  or_options_t *def_opt;$/;"	m	struct:__anon11	file:
default_authorities	src/or/config.c	/^static const char *default_authorities[] = {$/;"	v	file:
default_chunk_size	src/or/buffers.h	/^  size_t default_chunk_size; \/**< Don't allocate any chunks smaller than$/;"	m	struct:buf_t
delete_log	src/common/log.c	/^delete_log(logfile_t *victim)$/;"	f	file:
deliver_window	src/or/or.h	/^  int deliver_window; \/**< How many cells are we willing to deliver originating$/;"	m	struct:crypt_path_t
deliver_window	src/or/or.h	/^  int deliver_window; \/**< How many more relay cells can end at me? *\/$/;"	m	struct:edge_connection_t
deliver_window	src/or/or.h	/^  int deliver_window;$/;"	m	struct:circuit_t
desc	src/or/control.c	/^  const char *desc; \/**< Description of the variable. *\/$/;"	m	struct:getinfo_item_t	file:
desc	src/or/rendcache.h	/^  char *desc; \/**< Service descriptor *\/$/;"	m	struct:rend_cache_entry_t
desc	src/or/rendservice.c	/^  rend_service_descriptor_t *desc; \/**< Current hidden service descriptor. *\/$/;"	m	struct:rend_service_t	file:
desc_by_eid_map	src/or/or.h	/^  struct digest_sd_map_t *desc_by_eid_map;$/;"	m	struct:__anon48	typeref:struct:__anon48::digest_sd_map_t
desc_clean_since	src/or/router.c	/^static time_t desc_clean_since = 0;$/;"	v	file:
desc_digest_map	src/or/or.h	/^  digestmap_t *desc_digest_map;$/;"	m	struct:networkstatus_t
desc_digest_map	src/or/or.h	/^  struct digest_sd_map_t *desc_digest_map;$/;"	m	struct:__anon48	typeref:struct:__anon48::digest_sd_map_t
desc_dirty_reason	src/or/router.c	/^static const char *desc_dirty_reason = NULL;$/;"	v	file:
desc_extrainfo	src/or/router.c	/^static extrainfo_t *desc_extrainfo = NULL;$/;"	v	file:
desc_gen_reason	src/or/router.c	/^static const char *desc_gen_reason = NULL;$/;"	v	file:
desc_get_store	src/or/routerlist.c	/^desc_get_store(routerlist_t *rl, const signed_descriptor_t *sd)$/;"	f	file:
desc_id	src/or/or.h	/^  char desc_id[DIGEST_LEN]; \/**< Descriptor ID. *\/$/;"	m	struct:rend_encoded_v2_service_descriptor_t
desc_id_fetch	src/or/or.h	/^  char desc_id_fetch[DIGEST_LEN];$/;"	m	struct:rend_data_t
desc_is_dirty	src/or/rendservice.c	/^  time_t desc_is_dirty; \/**< Time at which changes to the hidden service$/;"	m	struct:rend_service_t	file:
desc_needs_upload	src/or/router.c	/^static int desc_needs_upload = 0;$/;"	v	file:
desc_routerinfo	src/or/router.c	/^static routerinfo_t *desc_routerinfo = NULL;$/;"	v	file:
desc_store	src/or/or.h	/^  desc_store_t desc_store;$/;"	m	struct:__anon48
desc_store_t	src/or/or.h	/^typedef struct desc_store_t {$/;"	s
desc_store_t	src/or/or.h	/^} desc_store_t;$/;"	t	typeref:struct:desc_store_t
desc_str	src/or/or.h	/^  char *desc_str; \/**< Descriptor string. *\/$/;"	m	struct:rend_encoded_v2_service_descriptor_t
desc_token_table	src/or/routerparse.c	/^static token_rule_t desc_token_table[] = {$/;"	v	file:
describe_transport	src/or/channel.h	/^  const char * (*describe_transport)(channel_listener_t *);$/;"	m	struct:channel_listener_s
describe_transport	src/or/channel.h	/^  const char * (*describe_transport)(channel_t *);$/;"	m	struct:channel_s
description	src/or/confparse.h	/^  const char *description;$/;"	m	struct:config_var_description_t
description	src/or/or.h	/^  char *description;$/;"	m	struct:dir_server_t
description	src/or/or.h	/^  const char *description;$/;"	m	struct:desc_store_t
description	src/or/routerset.h	/^  char *description;$/;"	m	struct:routerset_t
descriptor_cookie	src/or/or.h	/^  char descriptor_cookie[REND_DESC_COOKIE_LEN];$/;"	m	struct:rend_authorized_client_t
descriptor_cookie	src/or/or.h	/^  char descriptor_cookie[REND_DESC_COOKIE_LEN];$/;"	m	struct:rend_data_t
descriptor_cookie	src/or/or.h	/^  char descriptor_cookie[REND_DESC_COOKIE_LEN];$/;"	m	struct:rend_service_authorization_t
descriptor_digest	src/or/or.h	/^  char descriptor_digest[DIGEST256_LEN];$/;"	m	struct:routerstatus_t
descriptor_id	src/or/or.h	/^  char descriptor_id[REND_NUMBER_OF_NON_CONSECUTIVE_REPLICAS][DIGEST_LEN];$/;"	m	struct:rend_data_t
desired_path_len	src/or/or.h	/^  int desired_path_len;$/;"	m	struct:__anon53
dest_address	src/or/or.h	/^  char *dest_address;$/;"	m	struct:origin_circuit_t
dest_port	src/or/or.h	/^  uint16_t dest_port;$/;"	m	struct:origin_circuit_t
destination_from_pf	src/or/connection_edge.c	/^destination_from_pf(entry_connection_t *conn, socks_request_t *req)$/;"	f	file:
destination_from_socket	src/or/connection_edge.c	/^destination_from_socket(entry_connection_t *conn, socks_request_t *req)$/;"	f	file:
destroy_cell_queue	src/or/circuitmux.c	/^  cell_queue_t destroy_cell_queue;$/;"	m	struct:circuitmux_s	file:
destroy_ctr	src/or/circuitmux.c	/^  int64_t destroy_ctr;$/;"	m	struct:circuitmux_s	file:
destroy_exit_node_mock	src/test/test_connection_edge_ap_handshake.c	/^destroy_exit_node_mock()$/;"	f	file:
destroy_mark_unattached_ap_mock	src/test/test_connection_edge_ap_handshake.c	/^destroy_mark_unattached_ap_mock()$/;"	f	file:
destroy_mock_options	src/test/test_connection_edge_ap_handshake.c	/^destroy_mock_options()$/;"	f	file:
destroy_rewrite_mock	src/test/test_connection_edge_ap_handshake.c	/^destroy_rewrite_mock()$/;"	f	file:
detached_get_digests	src/or/routerparse.c	/^detached_get_digests(ns_detached_signatures_t *sigs, const char *flavor_name)$/;"	f	file:
detached_get_signatures	src/or/routerparse.c	/^detached_get_signatures(ns_detached_signatures_t *sigs,$/;"	f	file:
detached_onion_services	src/or/control.c	/^static smartlist_t *detached_onion_services = NULL;$/;"	v	file:
detect_compression_method	src/common/torgzip.c	/^detect_compression_method(const char *in, size_t in_len)$/;"	f
dh	src/common/crypto.c	/^  DH *dh; \/**< The openssl DH object *\/$/;"	m	struct:crypto_dh_t	file:
dh	src/or/rendservice.h	/^  uint8_t dh[DH_KEY_LEN];$/;"	m	struct:rend_intro_cell_s
dh_param_g	src/common/crypto.c	/^static BIGNUM *dh_param_g = NULL;$/;"	v	file:
dh_param_p	src/common/crypto.c	/^static BIGNUM *dh_param_p = NULL;$/;"	v	file:
dh_param_p_tls	src/common/crypto.c	/^static BIGNUM *dh_param_p_tls = NULL;$/;"	v	file:
di_digest256_map_t	src/common/di_ops.c	/^struct di_digest256_map_t {$/;"	s	file:
di_digest256_map_t	src/common/di_ops.h	/^typedef struct di_digest256_map_t di_digest256_map_t;$/;"	t	typeref:struct:di_digest256_map_t
did_circs_fail_last_period	src/or/circuituse.c	/^static int did_circs_fail_last_period = 0;$/;"	v	file:
did_last_state_file_write_fail	src/or/statefile.c	/^did_last_state_file_write_fail(void)$/;"	f
digest	src/or/channel.c	/^  uint8_t digest[DIGEST_LEN];$/;"	m	struct:channel_idmap_entry_s	file:
digest	src/or/config.h	/^  char digest[DIGEST_LEN]; \/* The bridge's identity key digest. *\/$/;"	m	struct:bridge_line_t
digest	src/or/dirvote.c	/^  const char *digest;$/;"	m	struct:dir_src_ent_t	file:
digest	src/or/or.h	/^  char digest[DIGEST256_LEN];$/;"	m	struct:microdesc_t
digest	src/or/or.h	/^  char digest[DIGEST_LEN]; \/**< Digest of identity key. *\/$/;"	m	struct:dir_server_t
digest	src/test/test_tortls.c	/^	const EVP_MD *digest;$/;"	m	struct:cert_pkey_st_local	file:
digest256	src/or/or.h	/^  uint8_t digest256[DIGEST256_LEN];$/;"	m	struct:extrainfo_t
digest256_from_base64	src/common/crypto_format.c	/^digest256_from_base64(char *digest, const char *d64)$/;"	f
digest256_to_base64	src/common/crypto_format.c	/^digest256_to_base64(char *d64, const char *digest)$/;"	f
digest256map_assign_key	src/common/container.c	/^digest256map_assign_key(digest256map_entry_t *ent, const uint8_t *key)$/;"	f	file:
digest256map_assign_tmp_key	src/common/container.c	/^digest256map_assign_tmp_key(digest256map_entry_t *ent, const uint8_t *key)$/;"	f	file:
digest256map_entries_eq	src/common/container.c	/^digest256map_entries_eq(const digest256map_entry_t *a,$/;"	f	file:
digest256map_entry_free	src/common/container.c	/^digest256map_entry_free(digest256map_entry_t *ent)$/;"	f	file:
digest256map_entry_hash	src/common/container.c	/^digest256map_entry_hash(const digest256map_entry_t *a)$/;"	f	file:
digest_algorithm_bitfield_t	src/common/crypto.h	/^#define digest_algorithm_bitfield_t /;"	d
digest_algorithm_t	src/common/crypto.h	/^} digest_algorithm_t;$/;"	t	typeref:enum:__anon22
digest_from_base64	src/common/crypto_format.c	/^digest_from_base64(char *digest, const char *d64)$/;"	f
digest_received	src/or/or.h	/^  crypto_digest_t *digest_received;$/;"	m	struct:or_handshake_state_t
digest_received_data	src/or/or.h	/^  unsigned int digest_received_data : 1;$/;"	m	struct:or_handshake_state_t
digest_sent	src/or/or.h	/^  crypto_digest_t *digest_sent;$/;"	m	struct:or_handshake_state_t
digest_sent_data	src/or/or.h	/^  unsigned int digest_sent_data : 1;$/;"	m	struct:or_handshake_state_t
digest_to_base64	src/common/crypto_format.c	/^digest_to_base64(char *d64, const char *digest)$/;"	f
digestmap_assign_key	src/common/container.c	/^digestmap_assign_key(digestmap_entry_t *ent, const char *key)$/;"	f	file:
digestmap_assign_tmp_key	src/common/container.c	/^digestmap_assign_tmp_key(digestmap_entry_t *ent, const char *key)$/;"	f	file:
digestmap_entries_eq	src/common/container.c	/^digestmap_entries_eq(const digestmap_entry_t *a, const digestmap_entry_t *b)$/;"	f	file:
digestmap_entry_free	src/common/container.c	/^digestmap_entry_free(digestmap_entry_t *ent)$/;"	f	file:
digestmap_entry_hash	src/common/container.c	/^digestmap_entry_hash(const digestmap_entry_t *a)$/;"	f	file:
digestmap_free	src/test/test_routerset.c	/^NS(digestmap_free)(digestmap_t *map, void (*free_val)(void*))$/;"	f
digests	src/or/or.h	/^  digests_t digests; \/**< Digests of this object (networkstatus only) *\/$/;"	m	struct:cached_dir_t
digests	src/or/or.h	/^  digests_t digests;$/;"	m	struct:networkstatus_t
digests	src/or/or.h	/^  strmap_t *digests; \/**< Map from flavor name to digestset_t *\/$/;"	m	struct:ns_detached_signatures_t
digests	src/or/routerset.h	/^  digestmap_t *digests;$/;"	m	struct:routerset_t
digests_seen	src/or/replaycache.h	/^  digestmap_t *digests_seen;$/;"	m	struct:replaycache_s
digests_t	src/common/crypto.h	/^} digests_t;$/;"	t	typeref:struct:__anon23
digestset_add	src/common/container.h	/^digestset_add(digestset_t *set, const char *digest)$/;"	f
digestset_contains	src/common/container.h	/^digestset_contains(const digestset_t *set, const char *digest)$/;"	f
digestset_free	src/common/container.c	/^digestset_free(digestset_t *set)$/;"	f
digestset_t	src/common/container.h	/^} digestset_t;$/;"	t	typeref:struct:__anon79
digit_to_num	src/common/util.c	/^digit_to_num(char d)$/;"	f	file:
dimap_add_entry	src/common/di_ops.c	/^dimap_add_entry(di_digest256_map_t **map,$/;"	f
dimap_free	src/common/di_ops.c	/^dimap_free(di_digest256_map_t *map, dimap_free_fn free_fn)$/;"	f
dimap_free_fn	src/common/di_ops.h	/^typedef void (*dimap_free_fn)(void *);$/;"	t
dimap_search	src/common/di_ops.c	/^dimap_search(const di_digest256_map_t *map, const uint8_t *key,$/;"	f
dir	src/or/or.h	/^  char *dir; \/**< Contents of this object, NUL-terminated. *\/$/;"	m	struct:cached_dir_t
dir	src/test/test_circuitlist.c	/^  cell_direction_t dir;$/;"	m	struct:__anon77	file:
dir_conn_purpose_to_string	src/or/directory.c	/^dir_conn_purpose_to_string(int purpose)$/;"	f
dir_connection_new	src/or/connection.c	/^dir_connection_new(int socket_family)$/;"	f
dir_connection_t	src/or/or.h	/^typedef struct dir_connection_t {$/;"	s
dir_connection_t	src/or/or.h	/^} dir_connection_t;$/;"	t	typeref:struct:dir_connection_t
dir_fetch_type	src/or/directory.c	/^dir_fetch_type(int dir_purpose, int router_purpose, const char *resource)$/;"	f
dir_group_readable	src/or/rendservice.c	/^  int dir_group_readable; \/**< if 1, allow group read$/;"	m	struct:rend_service_t	file:
dir_handle_get_tests	src/test/test_dir_handle_get.c	/^struct testcase_t dir_handle_get_tests[] = {$/;"	v	typeref:struct:testcase_t
dir_indirection_t	src/or/directory.h	/^} dir_indirection_t;$/;"	t	typeref:enum:__anon35
dir_info_status	src/or/nodelist.c	/^static char dir_info_status[512] = "";$/;"	v	file:
dir_key_certificate_table	src/or/routerparse.c	/^static token_rule_t dir_key_certificate_table[] = {$/;"	v	file:
dir_len	src/or/or.h	/^  size_t dir_len; \/**< Length of <b>dir<\/b> (not counting its NUL). *\/$/;"	m	struct:cached_dir_t
dir_microdesc_download_failed	src/or/directory.c	/^dir_microdesc_download_failed(smartlist_t *failed,$/;"	f	file:
dir_policy	src/or/policies.c	/^static smartlist_t *dir_policy = NULL;$/;"	v	file:
dir_policy_permits_address	src/or/policies.c	/^dir_policy_permits_address(const tor_addr_t *addr)$/;"	f
dir_port	src/or/or.h	/^  uint16_t dir_port; \/**< Directory port for this router. *\/$/;"	m	struct:routerstatus_t
dir_port	src/or/or.h	/^  uint16_t dir_port; \/**< Directory port of this voter *\/$/;"	m	struct:networkstatus_voter_info_t
dir_port	src/or/or.h	/^  uint16_t dir_port; \/**< Directory port. *\/$/;"	m	struct:dir_server_t
dir_port	src/or/or.h	/^  uint16_t dir_port; \/**< Port for HTTP directory connections. *\/$/;"	m	struct:__anon45
dir_port	src/or/or.h	/^  uint16_t dir_port;$/;"	m	struct:authority_cert_t
dir_read_array	src/or/rephist.c	/^static bw_array_t *dir_read_array = NULL;$/;"	v	file:
dir_routerdesc_download_failed	src/or/directory.c	/^dir_routerdesc_download_failed(smartlist_t *failed, int status_code,$/;"	f	file:
dir_server_add	src/or/routerlist.c	/^dir_server_add(dir_server_t *ent)$/;"	f
dir_server_free	src/or/routerlist.c	/^dir_server_free(dir_server_t *ds)$/;"	f	file:
dir_server_new	src/or/routerlist.c	/^dir_server_new(int is_authority,$/;"	f	file:
dir_server_t	src/or/or.h	/^typedef struct dir_server_t {$/;"	s
dir_server_t	src/or/or.h	/^} dir_server_t;$/;"	t	typeref:struct:dir_server_t
dir_signing_key_is_trusted	src/or/routerparse.c	/^dir_signing_key_is_trusted(crypto_pk_t *key)$/;"	f	file:
dir_split_resource_into_fingerprint_pairs	src/or/directory.c	/^dir_split_resource_into_fingerprint_pairs(const char *res,$/;"	f
dir_split_resource_into_fingerprints	src/or/directory.c	/^dir_split_resource_into_fingerprints(const char *resource,$/;"	f
dir_spool_source_bitfield_t	src/or/or.h	/^#define dir_spool_source_bitfield_t /;"	d
dir_spool_source_t	src/or/or.h	/^} dir_spool_source_t;$/;"	t	typeref:enum:__anon41
dir_spool_src	src/or/or.h	/^  dir_spool_source_bitfield_t  dir_spool_src : 3;$/;"	m	struct:dir_connection_t
dir_src_ent_t	src/or/dirvote.c	/^typedef struct dir_src_ent_t {$/;"	s	file:
dir_src_ent_t	src/or/dirvote.c	/^} dir_src_ent_t;$/;"	t	typeref:struct:dir_src_ent_t	file:
dir_tests	src/test/test_dir.c	/^struct testcase_t dir_tests[] = {$/;"	v	typeref:struct:testcase_t
dir_write_array	src/or/rephist.c	/^static bw_array_t *dir_write_array = NULL;$/;"	v	file:
dir_z	src/or/or.h	/^  char *dir_z; \/**< Compressed contents of this object. *\/$/;"	m	struct:cached_dir_t
dir_z_len	src/or/or.h	/^  size_t dir_z_len; \/**< Length of <b>dir_z<\/b>. *\/$/;"	m	struct:cached_dir_t
dircollator_add_routerstatus	src/or/dircollate.c	/^dircollator_add_routerstatus(dircollator_t *dc,$/;"	f	file:
dircollator_add_vote	src/or/dircollate.c	/^dircollator_add_vote(dircollator_t *dc, networkstatus_t *v)$/;"	f
dircollator_collate	src/or/dircollate.c	/^dircollator_collate(dircollator_t *dc, int consensus_method)$/;"	f
dircollator_collate_by_ed25519	src/or/dircollate.c	/^dircollator_collate_by_ed25519(dircollator_t *dc)$/;"	f	file:
dircollator_collate_by_rsa	src/or/dircollate.c	/^dircollator_collate_by_rsa(dircollator_t *dc)$/;"	f	file:
dircollator_free	src/or/dircollate.c	/^dircollator_free(dircollator_t *dc)$/;"	f
dircollator_get_votes_for_router	src/or/dircollate.c	/^dircollator_get_votes_for_router(dircollator_t *dc, int idx)$/;"	f
dircollator_n_routers	src/or/dircollate.c	/^dircollator_n_routers(dircollator_t *dc)$/;"	f
dircollator_new	src/or/dircollate.c	/^dircollator_new(int n_votes, int n_authorities)$/;"	f
dircollator_s	src/or/dircollate.h	/^struct dircollator_s {$/;"	s
dircollator_t	src/or/dircollate.h	/^typedef struct dircollator_s dircollator_t;$/;"	t	typeref:struct:dircollator_s
dirconn_direct	src/or/or.h	/^  unsigned int dirconn_direct:1; \/**< Is this dirconn direct, or via Tor? *\/$/;"	m	struct:dir_connection_t
direction	src/or/circuitmux.c	/^  cell_direction_t direction;$/;"	m	struct:circuit_muxinfo_s	file:
directories_have_accepted_server_descriptor	src/or/directory.c	/^directories_have_accepted_server_descriptor(void)$/;"	f
directory	src/or/rendservice.c	/^  char *directory; \/**< where in the filesystem it stores it. Will be NULL if$/;"	m	struct:rend_service_t	file:
directory_all_unreachable	src/or/main.c	/^directory_all_unreachable(time_t now)$/;"	f
directory_all_unreachable_cb	src/or/main.c	/^directory_all_unreachable_cb(evutil_socket_t fd, short event, void *arg)$/;"	f	file:
directory_all_unreachable_cb_event	src/or/main.c	/^static struct event *directory_all_unreachable_cb_event = NULL;$/;"	v	typeref:struct:event	file:
directory_caches_dir_info	src/or/dirserv.c	/^directory_caches_dir_info(const or_options_t *options)$/;"	f
directory_caches_unknown_auth_certs	src/or/dirserv.c	/^directory_caches_unknown_auth_certs(const or_options_t *options)$/;"	f
directory_clean_last_hid_serv_requests	src/or/rendclient.c	/^directory_clean_last_hid_serv_requests(time_t now)$/;"	f	file:
directory_command_should_use_begindir	src/or/directory.c	/^directory_command_should_use_begindir(const or_options_t *options,$/;"	f	file:
directory_conn_is_self_reachability_test	src/or/directory.c	/^directory_conn_is_self_reachability_test(dir_connection_t *conn)$/;"	f	file:
directory_dump_request_log	src/or/directory.c	/^directory_dump_request_log(void)$/;"	f
directory_fetches_dir_info_early	src/or/dirserv.c	/^directory_fetches_dir_info_early(const or_options_t *options)$/;"	f
directory_fetches_dir_info_later	src/or/dirserv.c	/^directory_fetches_dir_info_later(const or_options_t *options)$/;"	f
directory_fetches_from_authorities	src/or/dirserv.c	/^directory_fetches_from_authorities(const or_options_t *options)$/;"	f
directory_get_consensus_url	src/or/directory.c	/^directory_get_consensus_url(const char *resource)$/;"	f	file:
directory_get_from_all_authorities	src/or/directory.c	/^directory_get_from_all_authorities(uint8_t dir_purpose,$/;"	f
directory_get_from_hs_dir	src/or/rendclient.c	/^directory_get_from_hs_dir(const char *desc_id, const rend_data_t *rend_query,$/;"	f	file:
directory_handle_command	src/or/directory.c	/^directory_handle_command(dir_connection_t *conn)$/;"	f	file:
directory_handle_command_get	src/or/directory.c	/^directory_handle_command_get(dir_connection_t *conn, const char *headers,$/;"	f
directory_handle_command_post	src/or/directory.c	/^directory_handle_command_post(dir_connection_t *conn, const char *headers,$/;"	f	file:
directory_info_has_arrived	src/or/main.c	/^directory_info_has_arrived(time_t now, int from_cache)$/;"	f
directory_initiate_command	src/or/directory.c	/^directory_initiate_command(const tor_addr_t *_addr,$/;"	f
directory_initiate_command_rend	src/or/directory.c	/^directory_initiate_command_rend(const tor_addr_t *_addr,$/;"	f	file:
directory_initiate_command_routerstatus	src/test/test_dir.c	/^NS(directory_initiate_command_routerstatus)(const routerstatus_t *status,$/;"	f
directory_initiate_command_routerstatus_rend	src/or/directory.c	/^directory_initiate_command_routerstatus_rend(const routerstatus_t *status,$/;"	f
directory_keyword	src/or/routerparse.c	/^} directory_keyword;$/;"	t	typeref:enum:__anon96	file:
directory_permits_begindir_requests	src/or/dirserv.c	/^directory_permits_begindir_requests(const or_options_t *options)$/;"	f
directory_pick_generic_dirserver	src/or/directory.c	/^directory_pick_generic_dirserver(dirinfo_type_t type, int pds_flags,$/;"	f	file:
directory_post_to_dirservers	src/or/directory.c	/^directory_post_to_dirservers(uint8_t dir_purpose, uint8_t router_purpose,$/;"	f
directory_post_to_hs_dir	src/or/rendservice.c	/^directory_post_to_hs_dir(rend_service_descriptor_t *renddesc,$/;"	f
directory_remove_invalid	src/or/dirserv.c	/^directory_remove_invalid(void)$/;"	f	file:
directory_send_command	src/or/directory.c	/^directory_send_command(dir_connection_t *conn,$/;"	f	file:
directory_token_t	src/or/routerparse.c	/^typedef struct directory_token_t {$/;"	s	file:
directory_token_t	src/or/routerparse.c	/^} directory_token_t;$/;"	t	typeref:struct:directory_token_t	file:
directory_too_idle_to_fetch_descriptors	src/or/dirserv.c	/^directory_too_idle_to_fetch_descriptors(const or_options_t *options,$/;"	f
dirind_is_anon	src/or/directory.c	/^dirind_is_anon(dir_indirection_t ind)$/;"	f	file:
dirinfo_type_t	src/or/or.h	/^} dirinfo_type_t;$/;"	t	typeref:enum:__anon49
dirreq_id	src/or/channel.h	/^  uint64_t dirreq_id;$/;"	m	struct:channel_s
dirreq_id	src/or/geoip.c	/^  uint64_t dirreq_id;$/;"	m	struct:dirreq_map_entry_t	file:
dirreq_id	src/or/or.h	/^  uint64_t dirreq_id;$/;"	m	struct:circuit_t
dirreq_id	src/or/or.h	/^  uint64_t dirreq_id;$/;"	m	struct:dir_connection_t
dirreq_id	src/or/or.h	/^  uint64_t dirreq_id;$/;"	m	struct:edge_connection_t
dirreq_map_ent_eq	src/or/geoip.c	/^dirreq_map_ent_eq(const dirreq_map_entry_t *a,$/;"	f	file:
dirreq_map_ent_hash	src/or/geoip.c	/^dirreq_map_ent_hash(const dirreq_map_entry_t *entry)$/;"	f	file:
dirreq_map_entry_t	src/or/geoip.c	/^typedef struct dirreq_map_entry_t {$/;"	s	file:
dirreq_map_entry_t	src/or/geoip.c	/^} dirreq_map_entry_t;$/;"	t	typeref:struct:dirreq_map_entry_t	file:
dirreq_map_get_	src/or/geoip.c	/^dirreq_map_get_(dirreq_type_t type, uint64_t dirreq_id)$/;"	f	file:
dirreq_map_put_	src/or/geoip.c	/^dirreq_map_put_(dirreq_map_entry_t *entry, dirreq_type_t type,$/;"	f	file:
dirreq_state_t	src/or/or.h	/^} dirreq_state_t;$/;"	t	typeref:enum:__anon70
dirreq_type_t	src/or/or.h	/^} dirreq_type_t;$/;"	t	typeref:enum:__anon69
dirserv_add_descriptor	src/or/dirserv.c	/^dirserv_add_descriptor(routerinfo_t *ri, const char **msg, const char *source)$/;"	f
dirserv_add_extrainfo	src/or/dirserv.c	/^dirserv_add_extrainfo(extrainfo_t *ei, const char **msg)$/;"	f	file:
dirserv_add_multiple_descriptors	src/or/dirserv.c	/^dirserv_add_multiple_descriptors(const char *desc, uint8_t purpose,$/;"	f
dirserv_add_own_fingerprint	src/or/dirserv.c	/^dirserv_add_own_fingerprint(crypto_pk_t *pk)$/;"	f
dirserv_cache_measured_bw	src/or/dirserv.c	/^dirserv_cache_measured_bw(const measured_bw_line_t *parsed_line,$/;"	f
dirserv_clear_measured_bw_cache	src/or/dirserv.c	/^dirserv_clear_measured_bw_cache(void)$/;"	f
dirserv_compute_bridge_flag_thresholds	src/or/dirserv.c	/^dirserv_compute_bridge_flag_thresholds(routerlist_t *rl)$/;"	f
dirserv_compute_performance_thresholds	src/or/dirserv.c	/^dirserv_compute_performance_thresholds(routerlist_t *rl,$/;"	f	file:
dirserv_count_measured_bws	src/or/dirserv.c	/^dirserv_count_measured_bws(routerlist_t *rl)$/;"	f	file:
dirserv_dump_directory_to_string	src/or/dirserv.c	/^dirserv_dump_directory_to_string(char **dir_out,$/;"	f
dirserv_estimate_data_size	src/or/dirserv.c	/^dirserv_estimate_data_size(smartlist_t *fps, int is_serverdescs,$/;"	f
dirserv_estimate_microdesc_size	src/or/dirserv.c	/^dirserv_estimate_microdesc_size(const smartlist_t *fps, int compressed)$/;"	f
dirserv_expire_measured_bw_cache	src/or/dirserv.c	/^dirserv_expire_measured_bw_cache(time_t now)$/;"	f
dirserv_free_all	src/or/dirserv.c	/^dirserv_free_all(void)$/;"	f
dirserv_free_fingerprint_list	src/or/dirserv.c	/^dirserv_free_fingerprint_list(void)$/;"	f
dirserv_generate_networkstatus_vote_obj	src/or/dirserv.c	/^dirserv_generate_networkstatus_vote_obj(crypto_pk_t *private_key,$/;"	f
dirserv_get_bandwidth_for_router_kb	src/or/dirserv.c	/^dirserv_get_bandwidth_for_router_kb(const routerinfo_t *ri)$/;"	f	file:
dirserv_get_consensus	src/or/dirserv.c	/^dirserv_get_consensus(const char *flavor_name)$/;"	f
dirserv_get_credible_bandwidth_kb	src/or/dirserv.c	/^dirserv_get_credible_bandwidth_kb(const routerinfo_t *ri)$/;"	f	file:
dirserv_get_flag_thresholds_line	src/or/dirserv.c	/^dirserv_get_flag_thresholds_line(void)$/;"	f
dirserv_get_measured_bw_cache_size	src/or/dirserv.c	/^dirserv_get_measured_bw_cache_size(void)$/;"	f
dirserv_get_routerdesc_fingerprints	src/or/dirserv.c	/^dirserv_get_routerdesc_fingerprints(smartlist_t *fps_out, const char *key,$/;"	f
dirserv_get_routerdescs	src/or/dirserv.c	/^dirserv_get_routerdescs(smartlist_t *descs_out, const char *key,$/;"	f
dirserv_get_status_impl	src/or/dirserv.c	/^dirserv_get_status_impl(const char *id_digest, const char *nickname,$/;"	f	file:
dirserv_has_measured_bw	src/or/dirserv.c	/^dirserv_has_measured_bw(const char *node_id)$/;"	f
dirserv_have_any_microdesc	src/or/dirserv.c	/^dirserv_have_any_microdesc(const smartlist_t *fps)$/;"	f
dirserv_have_any_serverdesc	src/or/dirserv.c	/^dirserv_have_any_serverdesc(smartlist_t *fps, int spool_src)$/;"	f
dirserv_load_fingerprint_file	src/or/dirserv.c	/^dirserv_load_fingerprint_file(void)$/;"	f
dirserv_orconn_tls_done	src/or/dirserv.c	/^dirserv_orconn_tls_done(const tor_addr_t *addr,$/;"	f
dirserv_query_measured_bw_cache_kb	src/or/dirserv.c	/^dirserv_query_measured_bw_cache_kb(const char *node_id, long *bw_kb_out,$/;"	f
dirserv_read_guardfraction_file	src/or/dirserv.c	/^dirserv_read_guardfraction_file(const char *fname,$/;"	f
dirserv_read_guardfraction_file_from_str	src/or/dirserv.c	/^dirserv_read_guardfraction_file_from_str(const char *guardfraction_file_str,$/;"	f
dirserv_read_measured_bandwidths	src/or/dirserv.c	/^dirserv_read_measured_bandwidths(const char *from_file,$/;"	f
dirserv_remove_old_statuses	src/or/dirserv.c	/^dirserv_remove_old_statuses(smartlist_t *fps, time_t cutoff)$/;"	f
dirserv_router_get_status	src/or/dirserv.c	/^dirserv_router_get_status(const routerinfo_t *router, const char **msg,$/;"	f
dirserv_router_has_valid_address	src/or/dirserv.c	/^dirserv_router_has_valid_address(routerinfo_t *ri)$/;"	f	file:
dirserv_set_cached_consensus_networkstatus	src/or/dirserv.c	/^dirserv_set_cached_consensus_networkstatus(const char *networkstatus,$/;"	f
dirserv_set_node_flags_from_authoritative_status	src/or/dirserv.c	/^dirserv_set_node_flags_from_authoritative_status(node_t *node,$/;"	f
dirserv_set_router_is_running	src/or/dirserv.c	/^dirserv_set_router_is_running(routerinfo_t *router, time_t now)$/;"	f
dirserv_set_routerstatus_testing	src/or/dirserv.c	/^dirserv_set_routerstatus_testing(routerstatus_t *rs)$/;"	f
dirserv_should_launch_reachability_test	src/or/dirserv.c	/^dirserv_should_launch_reachability_test(const routerinfo_t *ri,$/;"	f
dirserv_single_reachability_test	src/or/dirserv.c	/^dirserv_single_reachability_test(time_t now, routerinfo_t *router)$/;"	f
dirserv_test_reachability	src/or/dirserv.c	/^dirserv_test_reachability(time_t now)$/;"	f
dirserv_thinks_router_is_hs_dir	src/or/dirserv.c	/^dirserv_thinks_router_is_hs_dir(const routerinfo_t *router,$/;"	f	file:
dirserv_thinks_router_is_unreliable	src/or/dirserv.c	/^dirserv_thinks_router_is_unreliable(time_t now,$/;"	f	file:
dirserv_would_reject_router	src/or/dirserv.c	/^dirserv_would_reject_router(const routerstatus_t *rs)$/;"	f
dirserver_choose_by_weight	src/or/routerlist.c	/^dirserver_choose_by_weight(const smartlist_t *servers, double authority_weight)$/;"	f	file:
dirvote_act	src/or/dirvote.c	/^dirvote_act(const or_options_t *options, time_t now)$/;"	f
dirvote_add_signatures	src/or/dirvote.c	/^dirvote_add_signatures(const char *detached_signatures_body,$/;"	f
dirvote_add_signatures_to_all_pending_consensuses	src/or/dirvote.c	/^dirvote_add_signatures_to_all_pending_consensuses($/;"	f	file:
dirvote_add_signatures_to_pending_consensus	src/or/dirvote.c	/^dirvote_add_signatures_to_pending_consensus($/;"	f	file:
dirvote_add_vote	src/or/dirvote.c	/^dirvote_add_vote(const char *vote_body, const char **msg_out, int *status_out)$/;"	f
dirvote_clear_pending_consensuses	src/or/dirvote.c	/^dirvote_clear_pending_consensuses(void)$/;"	f	file:
dirvote_clear_votes	src/or/dirvote.c	/^dirvote_clear_votes(int all_votes)$/;"	f	file:
dirvote_compute_consensuses	src/or/dirvote.c	/^dirvote_compute_consensuses(void)$/;"	f	file:
dirvote_compute_params	src/or/dirvote.c	/^dirvote_compute_params(smartlist_t *votes, int method, int total_authorities)$/;"	f
dirvote_create_microdescriptor	src/or/dirvote.c	/^dirvote_create_microdescriptor(const routerinfo_t *ri, int consensus_method)$/;"	f
dirvote_fetch_missing_signatures	src/or/dirvote.c	/^dirvote_fetch_missing_signatures(void)$/;"	f	file:
dirvote_fetch_missing_votes	src/or/dirvote.c	/^dirvote_fetch_missing_votes(void)$/;"	f	file:
dirvote_format_all_microdesc_vote_lines	src/or/dirvote.c	/^dirvote_format_all_microdesc_vote_lines(const routerinfo_t *ri, time_t now,$/;"	f
dirvote_format_microdesc_vote_line	src/or/dirvote.c	/^dirvote_format_microdesc_vote_line(char *out_buf, size_t out_buf_len,$/;"	f
dirvote_free_all	src/or/dirvote.c	/^dirvote_free_all(void)$/;"	f
dirvote_get_pending_consensus	src/test/test_dir_handle_get.c	/^NS(dirvote_get_pending_consensus)(consensus_flavor_t flav)$/;"	f
dirvote_get_pending_detached_signatures	src/test/test_dir_handle_get.c	/^NS(dirvote_get_pending_detached_signatures)(void)$/;"	f
dirvote_get_preferred_voting_intervals	src/or/dirvote.c	/^dirvote_get_preferred_voting_intervals(vote_timing_t *timing_out)$/;"	f
dirvote_get_start_of_next_interval	src/or/dirvote.c	/^dirvote_get_start_of_next_interval(time_t now, int interval, int offset)$/;"	f
dirvote_get_vote	src/or/dirvote.c	/^dirvote_get_vote(const char *fp, int flags)$/;"	f
dirvote_perform_vote	src/or/dirvote.c	/^dirvote_perform_vote(void)$/;"	f	file:
dirvote_publish_consensus	src/or/dirvote.c	/^dirvote_publish_consensus(void)$/;"	f	file:
dirvote_recalculate_timing	src/test/test_config.c	/^NS(dirvote_recalculate_timing)(const or_options_t *op, time_t now)$/;"	f	file:
disable_broken_connection_counts	src/or/connection_or.c	/^static int disable_broken_connection_counts = 0;$/;"	v	file:
disable_control_logging	src/or/control.c	/^disable_control_logging(void)$/;"	f
disable_iocp	src/common/compat_libevent.h	/^  int disable_iocp;$/;"	m	struct:tor_libevent_cfg
disable_log_messages	src/or/control.c	/^static int disable_log_messages = 0;$/;"	v	file:
dist_delay	src/or/or.h	/^  int dist_delay;$/;"	m	struct:vote_timing_t
dist_seconds	src/or/or.h	/^  int dist_seconds;$/;"	m	struct:networkstatus_t
dl_failed	src/or/networkstatus.c	/^  int dl_failed;$/;"	m	struct:consensus_waiting_for_certs_t	file:
dl_status	src/or/or.h	/^  download_status_t dl_status;$/;"	m	struct:routerstatus_t
dl_status_by_id	src/or/routerlist.c	/^  download_status_t dl_status_by_id;$/;"	m	struct:cert_list_t	file:
dl_status_map	src/or/routerlist.c	/^  struct digest_ds_map_t *dl_status_map;$/;"	m	struct:cert_list_t	typeref:struct:cert_list_t::digest_ds_map_t	file:
dls_bad_fingerprint	src/test/test_dir.c	/^static download_status_t dls_bad_fingerprint;$/;"	v	file:
dls_bad_ports	src/test/test_dir.c	/^static download_status_t dls_bad_ports;$/;"	v	file:
dls_bad_sig2	src/test/test_dir.c	/^static download_status_t dls_bad_sig2;$/;"	v	file:
dls_bad_tokens	src/test/test_dir.c	/^static download_status_t dls_bad_tokens;$/;"	v	file:
dls_maximal	src/test/test_dir.c	/^static download_status_t dls_maximal;$/;"	v	file:
dls_minimal	src/test/test_dir.c	/^static download_status_t dls_minimal;$/;"	v	file:
dmalloc_strdup	src/common/util.c	/^ #define dmalloc_strdup(/;"	d	file:
dn_indicates_v3_cert	src/common/tortls.c	/^dn_indicates_v3_cert(X509_NAME *name)$/;"	f
dns_cache_entry_count	src/or/dns.c	/^dns_cache_entry_count(void)$/;"	f	file:
dns_cancel_pending_resolve_replacement	src/test/test_dns.c	/^dns_cancel_pending_resolve_replacement(const char *address)$/;"	f	file:
dns_clip_ttl	src/or/dns.c	/^dns_clip_ttl(uint32_t ttl)$/;"	f
dns_found_answer	src/or/dns.c	/^dns_found_answer(const char *address, uint8_t query_type,$/;"	f	file:
dns_free_all	src/or/dns.c	/^dns_free_all(void)$/;"	f
dns_get_expiry_ttl	src/or/dns.c	/^dns_get_expiry_ttl(uint32_t ttl)$/;"	f
dns_init	src/or/dns.c	/^dns_init(void)$/;"	f
dns_is_broken_for_ipv6	src/or/dns.c	/^static int dns_is_broken_for_ipv6 = 0;$/;"	v	file:
dns_is_completely_invalid	src/or/dns.c	/^static int dns_is_completely_invalid = 0;$/;"	v	file:
dns_launch_correctness_checks	src/or/dns.c	/^dns_launch_correctness_checks(void)$/;"	f
dns_launch_wildcard_checks	src/or/dns.c	/^dns_launch_wildcard_checks(void)$/;"	f	file:
dns_question_class	src/ext/eventdns.h	/^	int dns_question_class;$/;"	m	struct:evdns_server_question
dns_randfn_	src/or/dns.c	/^dns_randfn_(char *b, size_t n)$/;"	f	file:
dns_reset	src/test/test_config.c	/^NS(dns_reset)(void)$/;"	f
dns_reset_correctness_checks	src/or/dns.c	/^dns_reset_correctness_checks(void)$/;"	f
dns_resolve	src/or/dns.c	/^dns_resolve(edge_connection_t *exitconn)$/;"	f
dns_resolve_fake_impl	src/test/test_dns.c	/^dns_resolve_fake_impl(edge_connection_t *exitconn, int is_resolve,$/;"	f	file:
dns_seems_to_be_broken	src/or/dns.c	/^dns_seems_to_be_broken(void)$/;"	f
dns_seems_to_be_broken_for_ipv6	src/or/dns.c	/^dns_seems_to_be_broken_for_ipv6(void)$/;"	f
dns_server_port	src/or/or.h	/^  struct evdns_server_port *dns_server_port;$/;"	m	struct:listener_connection_t	typeref:struct:listener_connection_t::evdns_server_port
dns_server_request	src/or/or.h	/^  struct evdns_server_request *dns_server_request;$/;"	m	struct:entry_connection_t	typeref:struct:entry_connection_t::evdns_server_request
dns_servers_relaunch_checks	src/or/main.c	/^dns_servers_relaunch_checks(void)$/;"	f
dns_tests	src/test/test_dns.c	/^struct testcase_t dns_tests[] = {$/;"	v	typeref:struct:testcase_t
dns_wildcard_list	src/or/dns.c	/^static smartlist_t *dns_wildcard_list = NULL;$/;"	v	file:
dns_wildcard_notice_given	src/or/dns.c	/^static int dns_wildcard_notice_given = 0;$/;"	v	file:
dns_wildcard_one_notice_given	src/or/dns.c	/^static int dns_wildcard_one_notice_given = 0;$/;"	v	file:
dns_wildcard_response_count	src/or/dns.c	/^static strmap_t *dns_wildcard_response_count = NULL;$/;"	v	file:
dns_wildcarded_test_address_list	src/or/dns.c	/^static smartlist_t *dns_wildcarded_test_address_list = NULL;$/;"	v	file:
dns_wildcarded_test_address_notice_given	src/or/dns.c	/^static int dns_wildcarded_test_address_notice_given = 0;$/;"	v	file:
dnsserv_close_listener	src/or/dnsserv.c	/^dnsserv_close_listener(connection_t *conn)$/;"	f
dnsserv_configure_listener	src/or/dnsserv.c	/^dnsserv_configure_listener(connection_t *conn)$/;"	f
dnsserv_launch_request	src/or/dnsserv.c	/^dnsserv_launch_request(const char *name, int reverse,$/;"	f
dnsserv_reject_request	src/or/dnsserv.c	/^dnsserv_reject_request(entry_connection_t *conn)$/;"	f
dnsserv_resolved	src/or/dnsserv.c	/^dnsserv_resolved(entry_connection_t *conn,$/;"	f
do_decrypt_test	src/test/test_introduce.c	/^do_decrypt_test(uint8_t *plaintext, size_t plaintext_len)$/;"	f	file:
do_dump_config	src/or/main.c	/^do_dump_config(void)$/;"	f	file:
do_early_parse_test	src/test/test_introduce.c	/^do_early_parse_test(uint8_t *plaintext, size_t plaintext_len)$/;"	f	file:
do_ext_or_handshake	src/test/test_extorport.c	/^do_ext_or_handshake(or_connection_t *conn)$/;"	f	file:
do_getpass	src/or/routerkeys.c	/^do_getpass(const char *prompt, char *buf, size_t buflen,$/;"	f	file:
do_hash_password	src/or/main.c	/^do_hash_password(void)$/;"	f	file:
do_hup	src/or/main.c	/^do_hup(void)$/;"	f	file:
do_late_parse_test	src/test/test_introduce.c	/^do_late_parse_test(uint8_t *plaintext, size_t plaintext_len)$/;"	f	file:
do_list_fingerprint	src/or/main.c	/^do_list_fingerprint(void)$/;"	f	file:
do_main_loop	src/or/main.c	/^do_main_loop(void)$/;"	f
do_not_cache	src/or/or.h	/^  unsigned int do_not_cache : 1;$/;"	m	struct:signed_descriptor_t
do_parse_test	src/test/test_introduce.c	/^do_parse_test(uint8_t *plaintext, size_t plaintext_len, int phase)$/;"	f	file:
do_resolve	src/tools/tor-resolve.c	/^do_resolve(const char *hostname, uint32_t sockshost, uint16_t socksport,$/;"	f	file:
document_signature_dup	src/or/networkstatus.c	/^document_signature_dup(const document_signature_t *sig)$/;"	f
document_signature_free	src/or/networkstatus.c	/^document_signature_free(document_signature_t *sig)$/;"	f
document_signature_t	src/or/or.h	/^typedef struct document_signature_t {$/;"	s
document_signature_t	src/or/or.h	/^} document_signature_t;$/;"	t	typeref:struct:document_signature_t
domain	src/common/log.c	/^  log_domain_mask_t domain; \/**< The domain of the message *\/$/;"	m	struct:pending_log_message_t	file:
domain	src/test/test_options.c	/^  uint32_t domain;$/;"	m	struct:__anon10	file:
domain_list	src/common/log.c	/^static const char *domain_list[] = {$/;"	v	file:
domain_to_string	src/common/log.c	/^domain_to_string(log_domain_mask_t domain, char *buf, size_t buflen)$/;"	f	file:
double_digest_map_t	src/or/dircollate.h	/^typedef HT_HEAD(double_digest_map, ddmap_entry_s) double_digest_map_t;$/;"	t
down_since	src/or/rephist.c	/^  time_t down_since;$/;"	m	struct:or_history_t	file:
download_networkstatus	src/or/main.h	/^  time_t download_networkstatus;$/;"	m	struct:__anon5
download_schedule_bitfield_t	src/or/or.h	/^#define download_schedule_bitfield_t /;"	d
download_schedule_t	src/or/or.h	/^} download_schedule_t;$/;"	t	typeref:enum:__anon44
download_status_failed	src/or/directory.h	/^#define download_status_failed(/;"	d
download_status_get_n_failures	src/or/directory.c	/^download_status_get_n_failures(const download_status_t *dls)$/;"	f
download_status_increment_failure	src/or/directory.c	/^download_status_increment_failure(download_status_t *dls, int status_code,$/;"	f
download_status_is_ready	src/or/directory.h	/^download_status_is_ready(download_status_t *dls, time_t now,$/;"	f
download_status_is_ready_by_sk_in_cl	src/or/routerlist.c	/^download_status_is_ready_by_sk_in_cl(cert_list_t *cl,$/;"	f	file:
download_status_mark_impossible	src/or/directory.h	/^download_status_mark_impossible(download_status_t *dl)$/;"	f
download_status_reset	src/or/directory.c	/^download_status_reset(download_status_t *dls)$/;"	f
download_status_reset_by_sk_in_cl	src/or/routerlist.c	/^download_status_reset_by_sk_in_cl(cert_list_t *cl, const char *digest)$/;"	f	file:
download_status_t	src/or/or.h	/^typedef struct download_status_t {$/;"	s
download_status_t	src/or/or.h	/^} download_status_t;$/;"	t	typeref:struct:download_status_t
downrate_stability	src/or/main.h	/^  time_t downrate_stability;$/;"	m	struct:__anon5
downtime	src/or/rephist.c	/^  unsigned long downtime;$/;"	m	struct:or_history_t	file:
drain_fn	src/common/compat_threads.h	/^  int (*drain_fn)(tor_socket_t read_fd);$/;"	m	struct:alert_sockets_s
dst_wildcard	src/or/addressmap.c	/^  unsigned dst_wildcard:1;$/;"	m	struct:__anon83	file:
dummy_	src/common/address.h	/^    uint32_t dummy_; \/* This field is here so we have something to initialize$/;"	m	union:tor_addr_t::__anon1
dummy_cb_fn	src/test/test_logging.c	/^dummy_cb_fn(int severity, uint32_t domain, const char *msg)$/;"	f	file:
dummy_edge_conn_new	src/test/test_oom.c	/^dummy_edge_conn_new(circuit_t *circ,$/;"	f	file:
dummy_or_circuit_new	src/test/test_oom.c	/^dummy_or_circuit_new(int n_p_cells, int n_n_cells)$/;"	f	file:
dummy_origin_circuit_new	src/test/test_oom.c	/^dummy_origin_circuit_new(int n_cells)$/;"	f	file:
dummy_state	src/test/test_entrynodes.c	/^static or_state_t *dummy_state = NULL;$/;"	v	file:
dummy_state	src/test/test_pt.c	/^static or_state_t *dummy_state = NULL;$/;"	v	file:
dump_cell_pool_usage	src/or/relay.c	/^dump_cell_pool_usage(int severity)$/;"	f
dump_desc	src/or/routerparse.c	/^dump_desc(const char *desc, const char *type)$/;"	f	file:
dump_distinct_digest_count	src/or/routerparse.c	/^dump_distinct_digest_count(int severity)$/;"	f
dump_dns_mem_usage	src/or/dns.c	/^dump_dns_mem_usage(int severity)$/;"	f
dump_logs	src/test/test_options.c	/^dump_logs(void)$/;"	f	file:
dump_microdescriptor	src/or/microdesc.c	/^dump_microdescriptor(int fd, microdesc_t *md, size_t *annotation_len_out)$/;"	f	file:
dump_pk_ops	src/or/rephist.c	/^dump_pk_ops(int severity)$/;"	f
dump_routerlist_mem_usage	src/or/routerlist.c	/^dump_routerlist_mem_usage(int severity)$/;"	f
dump_statistics_mock_matches	src/test/test_channel.c	/^static int dump_statistics_mock_matches = 0;$/;"	v	file:
dump_statistics_mock_target	src/test/test_channel.c	/^static channel_t *dump_statistics_mock_target = NULL;$/;"	v	file:
dumpmemusage	src/or/main.c	/^dumpmemusage(int severity)$/;"	f	file:
dumpstats	src/or/channel.h	/^  void (*dumpstats)(channel_listener_t *, int);$/;"	m	struct:channel_listener_s
dumpstats	src/or/channel.h	/^  void (*dumpstats)(channel_t *, int);$/;"	m	struct:channel_s
dumpstats	src/or/main.c	/^dumpstats(int severity)$/;"	f	file:
dup_onion_keys	src/or/router.c	/^dup_onion_keys(crypto_pk_t **key, crypto_pk_t **last)$/;"	f
duration	src/or/routerlist.c	/^  int duration;$/;"	m	struct:duration_idx_t	file:
duration_idx_t	src/or/routerlist.c	/^struct duration_idx_t {$/;"	s	file:
e	src/common/procmon.c	/^  struct event *e;$/;"	m	struct:tor_process_monitor_t	typeref:struct:tor_process_monitor_t::event	file:
eat_whitespace	src/common/util.c	/^eat_whitespace(const char *s)$/;"	f
eat_whitespace_eos	src/common/util.c	/^eat_whitespace_eos(const char *s, const char *eos)$/;"	f
eat_whitespace_eos_no_nl	src/common/util.c	/^eat_whitespace_eos_no_nl(const char *s, const char *eos)$/;"	f
eat_whitespace_no_nl	src/common/util.c	/^eat_whitespace_no_nl(const char *s)$/;"	f
ecdh	src/test/test_workqueue.c	/^  curve25519_secret_key_t ecdh;$/;"	m	struct:state_s	file:
ecdh_sent	src/test/test_workqueue.c	/^static int ecdh_sent = 0;$/;"	v	file:
ecdh_work_s	src/test/test_workqueue.c	/^typedef struct ecdh_work_s {$/;"	s	file:
ecdh_work_t	src/test/test_workqueue.c	/^} ecdh_work_t;$/;"	t	typeref:struct:ecdh_work_s	file:
ed25519_cert_add_ext	src/trunnel/ed25519_cert.c	/^ed25519_cert_add_ext(ed25519_cert_t *inp, struct ed25519_cert_extension_st * elt)$/;"	f
ed25519_cert_check	src/trunnel/ed25519_cert.c	/^ed25519_cert_check(const ed25519_cert_t *obj)$/;"	f
ed25519_cert_clear	src/trunnel/ed25519_cert.c	/^ed25519_cert_clear(ed25519_cert_t *obj)$/;"	f	file:
ed25519_cert_clear_errors	src/trunnel/ed25519_cert.c	/^ed25519_cert_clear_errors(ed25519_cert_t *obj)$/;"	f
ed25519_cert_encode	src/trunnel/ed25519_cert.c	/^ed25519_cert_encode(uint8_t *output, const size_t avail, const ed25519_cert_t *obj)$/;"	f
ed25519_cert_encoded_len	src/trunnel/ed25519_cert.c	/^ed25519_cert_encoded_len(const ed25519_cert_t *obj)$/;"	f
ed25519_cert_extension_add_un_unparsed	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_add_un_unparsed(ed25519_cert_extension_t *inp, uint8_t elt)$/;"	f
ed25519_cert_extension_check	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_check(const ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_clear	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_clear(ed25519_cert_extension_t *obj)$/;"	f	file:
ed25519_cert_extension_clear_errors	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_clear_errors(ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_encode	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_encode(uint8_t *output, const size_t avail, const ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_encoded_len	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_encoded_len(const ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_free	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_free(ed25519_cert_extension_t *obj)$/;"	f
ed25519_cert_extension_get_ext_flags	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_get_ext_flags(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_get_ext_length	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_get_ext_length(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_get_ext_type	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_get_ext_type(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_get_un_signing_key	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_get_un_signing_key(const ed25519_cert_extension_t *inp, size_t idx)$/;"	f
ed25519_cert_extension_get_un_unparsed	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_get_un_unparsed(ed25519_cert_extension_t *inp, size_t idx)$/;"	f
ed25519_cert_extension_getarray_un_signing_key	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_getarray_un_signing_key(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_getarray_un_unparsed	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_getarray_un_unparsed(ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_getlen_un_signing_key	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_getlen_un_signing_key(const ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_getlen_un_unparsed	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_getlen_un_unparsed(const ed25519_cert_extension_t *inp)$/;"	f
ed25519_cert_extension_new	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_new(void)$/;"	f
ed25519_cert_extension_parse	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_parse(ed25519_cert_extension_t **output, const uint8_t *input, const size_t len_in)$/;"	f
ed25519_cert_extension_parse_into	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_parse_into(ed25519_cert_extension_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
ed25519_cert_extension_set_ext_flags	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_set_ext_flags(ed25519_cert_extension_t *inp, uint8_t val)$/;"	f
ed25519_cert_extension_set_ext_length	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_set_ext_length(ed25519_cert_extension_t *inp, uint16_t val)$/;"	f
ed25519_cert_extension_set_ext_type	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_set_ext_type(ed25519_cert_extension_t *inp, uint8_t val)$/;"	f
ed25519_cert_extension_set_un_signing_key	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_set_un_signing_key(ed25519_cert_extension_t *inp, size_t idx, uint8_t elt)$/;"	f
ed25519_cert_extension_set_un_unparsed	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_set_un_unparsed(ed25519_cert_extension_t *inp, size_t idx, uint8_t elt)$/;"	f
ed25519_cert_extension_setlen_un_unparsed	src/trunnel/ed25519_cert.c	/^ed25519_cert_extension_setlen_un_unparsed(ed25519_cert_extension_t *inp, size_t newlen)$/;"	f
ed25519_cert_extension_st	src/trunnel/ed25519_cert.h	/^struct ed25519_cert_extension_st {$/;"	s
ed25519_cert_extension_t	src/trunnel/ed25519_cert.h	/^typedef struct ed25519_cert_extension_st ed25519_cert_extension_t;$/;"	t	typeref:struct:ed25519_cert_extension_st
ed25519_cert_free	src/trunnel/ed25519_cert.c	/^ed25519_cert_free(ed25519_cert_t *obj)$/;"	f
ed25519_cert_get_cert_key_type	src/trunnel/ed25519_cert.c	/^ed25519_cert_get_cert_key_type(ed25519_cert_t *inp)$/;"	f
ed25519_cert_get_cert_type	src/trunnel/ed25519_cert.c	/^ed25519_cert_get_cert_type(ed25519_cert_t *inp)$/;"	f
ed25519_cert_get_certified_key	src/trunnel/ed25519_cert.c	/^ed25519_cert_get_certified_key(const ed25519_cert_t *inp, size_t idx)$/;"	f
ed25519_cert_get_exp_field	src/trunnel/ed25519_cert.c	/^ed25519_cert_get_exp_field(ed25519_cert_t *inp)$/;"	f
ed25519_cert_get_ext	src/trunnel/ed25519_cert.c	/^ed25519_cert_get_ext(ed25519_cert_t *inp, size_t idx)$/;"	f
ed25519_cert_get_n_extensions	src/trunnel/ed25519_cert.c	/^ed25519_cert_get_n_extensions(ed25519_cert_t *inp)$/;"	f
ed25519_cert_get_signature	src/trunnel/ed25519_cert.c	/^ed25519_cert_get_signature(const ed25519_cert_t *inp, size_t idx)$/;"	f
ed25519_cert_get_version	src/trunnel/ed25519_cert.c	/^ed25519_cert_get_version(ed25519_cert_t *inp)$/;"	f
ed25519_cert_getarray_certified_key	src/trunnel/ed25519_cert.c	/^ed25519_cert_getarray_certified_key(ed25519_cert_t *inp)$/;"	f
ed25519_cert_getarray_ext	src/trunnel/ed25519_cert.c	/^ed25519_cert_getarray_ext(ed25519_cert_t *inp)$/;"	f
ed25519_cert_getarray_signature	src/trunnel/ed25519_cert.c	/^ed25519_cert_getarray_signature(ed25519_cert_t *inp)$/;"	f
ed25519_cert_getlen_certified_key	src/trunnel/ed25519_cert.c	/^ed25519_cert_getlen_certified_key(const ed25519_cert_t *inp)$/;"	f
ed25519_cert_getlen_ext	src/trunnel/ed25519_cert.c	/^ed25519_cert_getlen_ext(const ed25519_cert_t *inp)$/;"	f
ed25519_cert_getlen_signature	src/trunnel/ed25519_cert.c	/^ed25519_cert_getlen_signature(const ed25519_cert_t *inp)$/;"	f
ed25519_cert_new	src/trunnel/ed25519_cert.c	/^ed25519_cert_new(void)$/;"	f
ed25519_cert_parse	src/trunnel/ed25519_cert.c	/^ed25519_cert_parse(ed25519_cert_t **output, const uint8_t *input, const size_t len_in)$/;"	f
ed25519_cert_parse_into	src/trunnel/ed25519_cert.c	/^ed25519_cert_parse_into(ed25519_cert_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
ed25519_cert_set0_ext	src/trunnel/ed25519_cert.c	/^ed25519_cert_set0_ext(ed25519_cert_t *inp, size_t idx, struct ed25519_cert_extension_st * elt)$/;"	f
ed25519_cert_set_cert_key_type	src/trunnel/ed25519_cert.c	/^ed25519_cert_set_cert_key_type(ed25519_cert_t *inp, uint8_t val)$/;"	f
ed25519_cert_set_cert_type	src/trunnel/ed25519_cert.c	/^ed25519_cert_set_cert_type(ed25519_cert_t *inp, uint8_t val)$/;"	f
ed25519_cert_set_certified_key	src/trunnel/ed25519_cert.c	/^ed25519_cert_set_certified_key(ed25519_cert_t *inp, size_t idx, uint8_t elt)$/;"	f
ed25519_cert_set_exp_field	src/trunnel/ed25519_cert.c	/^ed25519_cert_set_exp_field(ed25519_cert_t *inp, uint32_t val)$/;"	f
ed25519_cert_set_ext	src/trunnel/ed25519_cert.c	/^ed25519_cert_set_ext(ed25519_cert_t *inp, size_t idx, struct ed25519_cert_extension_st * elt)$/;"	f
ed25519_cert_set_n_extensions	src/trunnel/ed25519_cert.c	/^ed25519_cert_set_n_extensions(ed25519_cert_t *inp, uint8_t val)$/;"	f
ed25519_cert_set_signature	src/trunnel/ed25519_cert.c	/^ed25519_cert_set_signature(ed25519_cert_t *inp, size_t idx, uint8_t elt)$/;"	f
ed25519_cert_set_version	src/trunnel/ed25519_cert.c	/^ed25519_cert_set_version(ed25519_cert_t *inp, uint8_t val)$/;"	f
ed25519_cert_setlen_ext	src/trunnel/ed25519_cert.c	/^ed25519_cert_setlen_ext(ed25519_cert_t *inp, size_t newlen)$/;"	f
ed25519_cert_st	src/trunnel/ed25519_cert.h	/^struct ed25519_cert_st {$/;"	s
ed25519_cert_t	src/trunnel/ed25519_cert.h	/^typedef struct ed25519_cert_st ed25519_cert_t;$/;"	t	typeref:struct:ed25519_cert_st
ed25519_checkable_t	src/common/crypto_ed25519.h	/^} ed25519_checkable_t;$/;"	t	typeref:struct:__anon21
ed25519_checksig	src/common/crypto_ed25519.c	/^ed25519_checksig(const ed25519_signature_t *signature,$/;"	f
ed25519_checksig_batch	src/common/crypto_ed25519.c	/^ed25519_checksig_batch(int *okay_out,$/;"	f
ed25519_donna_blind_public_key	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_blind_public_key(unsigned char *out, const unsigned char *inp,$/;"	f
ed25519_donna_blind_secret_key	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_blind_secret_key(unsigned char *out, const unsigned char *inp,$/;"	f
ed25519_donna_keygen	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_keygen(unsigned char *pk, unsigned char *sk)$/;"	f
ed25519_donna_open	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_open(const unsigned char *signature, const unsigned char *m,$/;"	f
ed25519_donna_pubkey	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_pubkey(unsigned char *pk, const unsigned char *sk)$/;"	f
ed25519_donna_pubkey_from_curve25519_pubkey	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_pubkey_from_curve25519_pubkey(unsigned char *out,$/;"	f
ed25519_donna_seckey	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_seckey(unsigned char *sk)$/;"	f
ed25519_donna_seckey_expand	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_seckey_expand(unsigned char *sk, const unsigned char *skseed)$/;"	f
ed25519_donna_selftest	src/ext/ed25519/donna/test-internals.c	/^ed25519_donna_selftest(void)$/;"	f
ed25519_donna_sign	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_donna_sign(unsigned char *sig, const unsigned char *m, size_t mlen,$/;"	f
ed25519_extsk	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_extsk(hash_512bits extsk, const ed25519_secret_key sk) {$/;"	f	file:
ed25519_hash	src/ext/ed25519/donna/ed25519-hash.h	/^ed25519_hash(uint8_t *hash, const uint8_t *in, size_t inlen) {$/;"	f
ed25519_hash_context	src/ext/ed25519/donna/ed25519-hash.h	/^typedef SHA512_CTX ed25519_hash_context;$/;"	t
ed25519_hash_context	src/ext/ed25519/donna/ed25519-hash.h	/^typedef sha512_state ed25519_hash_context;$/;"	t
ed25519_hash_final	src/ext/ed25519/donna/ed25519-hash.h	/^ed25519_hash_final(ed25519_hash_context *ctx, uint8_t *hash) {$/;"	f
ed25519_hash_final	src/ext/ed25519/donna/ed25519-hash.h	/^ed25519_hash_final(sha512_state *S, uint8_t *hash) {$/;"	f
ed25519_hash_init	src/ext/ed25519/donna/ed25519-hash.h	/^ed25519_hash_init(ed25519_hash_context *ctx) {$/;"	f
ed25519_hash_init	src/ext/ed25519/donna/ed25519-hash.h	/^ed25519_hash_init(sha512_state *S) {$/;"	f
ed25519_hash_update	src/ext/ed25519/donna/ed25519-hash.h	/^ed25519_hash_update(ed25519_hash_context *ctx, const uint8_t *in, size_t inlen) {$/;"	f
ed25519_hash_update	src/ext/ed25519/donna/ed25519-hash.h	/^ed25519_hash_update(sha512_state *S, const uint8_t *in, size_t inlen) {$/;"	f
ed25519_hram	src/ext/ed25519/donna/ed25519_tor.c	/^ed25519_hram(hash_512bits hram, const ed25519_signature RS, const ed25519_public_key pk, const unsigned char *m, size_t mlen) {$/;"	f	file:
ed25519_id	src/or/or.h	/^  uint8_t ed25519_id[ED25519_PUBKEY_LEN];$/;"	m	struct:vote_routerstatus_t
ed25519_identity_pkey	src/or/or.h	/^  ed25519_public_key_t *ed25519_identity_pkey;$/;"	m	struct:microdesc_t
ed25519_impl	src/common/crypto_ed25519.c	/^static const ed25519_impl_t *ed25519_impl = NULL;$/;"	v	file:
ed25519_impl_spot_check	src/common/crypto_ed25519.c	/^ed25519_impl_spot_check(void)$/;"	f	file:
ed25519_impl_t	src/common/crypto_ed25519.c	/^} ed25519_impl_t;$/;"	t	typeref:struct:__anon15	file:
ed25519_init	src/common/crypto_ed25519.c	/^ed25519_init(void)$/;"	f
ed25519_key	src/or/keypin.h	/^  uint8_t ed25519_key[DIGEST256_LEN];$/;"	m	struct:keypin_ent_st
ed25519_keypair_blind	src/common/crypto_ed25519.c	/^ed25519_keypair_blind(ed25519_keypair_t *out,$/;"	f
ed25519_keypair_free	src/common/crypto_ed25519.c	/^ed25519_keypair_free(ed25519_keypair_t *kp)$/;"	f
ed25519_keypair_from_curve25519_keypair	src/common/crypto_ed25519.c	/^ed25519_keypair_from_curve25519_keypair(ed25519_keypair_t *out,$/;"	f
ed25519_keypair_generate	src/common/crypto_ed25519.c	/^ed25519_keypair_generate(ed25519_keypair_t *keypair_out, int extra_strong)$/;"	f
ed25519_keypair_t	src/common/crypto_ed25519.h	/^} ed25519_keypair_t;$/;"	t	typeref:struct:__anon20
ed25519_pubkey_eq	src/common/crypto_ed25519.c	/^ed25519_pubkey_eq(const ed25519_public_key_t *key1,$/;"	f
ed25519_pubkey_read_from_file	src/common/crypto_ed25519.c	/^ed25519_pubkey_read_from_file(ed25519_public_key_t *pubkey_out,$/;"	f
ed25519_pubkey_write_to_file	src/common/crypto_ed25519.c	/^ed25519_pubkey_write_to_file(const ed25519_public_key_t *pubkey,$/;"	f
ed25519_public_blind	src/common/crypto_ed25519.c	/^ed25519_public_blind(ed25519_public_key_t *out,$/;"	f
ed25519_public_from_base64	src/common/crypto_format.c	/^ed25519_public_from_base64(ed25519_public_key_t *pkey,$/;"	f
ed25519_public_key	src/ext/ed25519/donna/ed25519.h	/^typedef unsigned char ed25519_public_key[32];$/;"	t
ed25519_public_key	src/ext/ed25519/donna/ed25519_tor.c	/^typedef unsigned char ed25519_public_key[32];$/;"	t	file:
ed25519_public_key_from_curve25519_public_key	src/common/crypto_ed25519.c	/^ed25519_public_key_from_curve25519_public_key(ed25519_public_key_t *pubkey,$/;"	f
ed25519_public_key_generate	src/common/crypto_ed25519.c	/^ed25519_public_key_generate(ed25519_public_key_t *pubkey_out,$/;"	f
ed25519_public_key_t	src/common/crypto_ed25519.h	/^} ed25519_public_key_t;$/;"	t	typeref:struct:__anon18
ed25519_public_to_base64	src/common/crypto_format.c	/^ed25519_public_to_base64(char *output,$/;"	f
ed25519_randombytes_unsafe	src/ext/ed25519/donna/ed25519-randombytes-custom.h	/^ED25519_FN(ed25519_randombytes_unsafe) (void *p, size_t len)$/;"	f
ed25519_randombytes_unsafe	src/ext/ed25519/donna/ed25519-randombytes.h	/^ED25519_FN(ed25519_randombytes_unsafe) (void *p, size_t len) {$/;"	f
ed25519_ref10_blind_public_key	src/ext/ed25519/ref10/blinding.c	/^int ed25519_ref10_blind_public_key(unsigned char *out,$/;"	f
ed25519_ref10_blind_secret_key	src/ext/ed25519/ref10/blinding.c	/^int ed25519_ref10_blind_secret_key(unsigned char *out,$/;"	f
ed25519_ref10_pubkey_from_curve25519_pubkey	src/ext/ed25519/ref10/keyconv.c	/^int ed25519_ref10_pubkey_from_curve25519_pubkey(unsigned char *out,$/;"	f
ed25519_reflects_consensus	src/or/or.h	/^  unsigned int ed25519_reflects_consensus:1; \/** DOCDOC *\/$/;"	m	struct:vote_routerstatus_t
ed25519_seckey_read_from_file	src/common/crypto_ed25519.c	/^ed25519_seckey_read_from_file(ed25519_secret_key_t *seckey_out,$/;"	f
ed25519_seckey_write_to_file	src/common/crypto_ed25519.c	/^ed25519_seckey_write_to_file(const ed25519_secret_key_t *seckey,$/;"	f
ed25519_secret_key	src/ext/ed25519/donna/ed25519.h	/^typedef unsigned char ed25519_secret_key[32];$/;"	t
ed25519_secret_key	src/ext/ed25519/donna/ed25519_tor.c	/^typedef unsigned char ed25519_secret_key[32];$/;"	t	file:
ed25519_secret_key_from_seed	src/common/crypto_ed25519.c	/^ed25519_secret_key_from_seed(ed25519_secret_key_t *seckey_out,$/;"	f
ed25519_secret_key_generate	src/common/crypto_ed25519.c	/^ed25519_secret_key_generate(ed25519_secret_key_t *seckey_out,$/;"	f
ed25519_secret_key_t	src/common/crypto_ed25519.h	/^} ed25519_secret_key_t;$/;"	t	typeref:struct:__anon19
ed25519_set_impl_params	src/common/crypto_ed25519.c	/^ed25519_set_impl_params(int use_donna)$/;"	f
ed25519_sign	src/common/crypto_ed25519.c	/^ed25519_sign(ed25519_signature_t *signature_out,$/;"	f
ed25519_sign_open	src/ext/ed25519/donna/ed25519_tor.c	/^ED25519_FN(ed25519_sign_open) (const unsigned char *m, size_t mlen, const ed25519_public_key pk, const ed25519_signature RS) {$/;"	f	file:
ed25519_sign_open_batch	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^ED25519_FN(ed25519_sign_open_batch) (const unsigned char **m, size_t *mlen, const unsigned char **pk, const unsigned char **RS, size_t num, int *valid) {$/;"	f
ed25519_signature	src/ext/ed25519/donna/ed25519.h	/^typedef unsigned char ed25519_signature[64];$/;"	t
ed25519_signature	src/ext/ed25519/donna/ed25519_tor.c	/^typedef unsigned char ed25519_signature[64];$/;"	t	file:
ed25519_signature_from_base64	src/common/crypto_format.c	/^ed25519_signature_from_base64(ed25519_signature_t *sig,$/;"	f
ed25519_signature_t	src/common/crypto_ed25519.h	/^} ed25519_signature_t;$/;"	t	typeref:struct:__anon17
ed25519_signature_to_base64	src/common/crypto_format.c	/^ed25519_signature_to_base64(char *output,$/;"	f
ed25519_verify	src/ext/ed25519/donna/ed25519-donna.h	/^ed25519_verify(const unsigned char *x, const unsigned char *y, size_t len) {$/;"	f
ed_key	src/trunnel/link_handshake.h	/^  uint8_t ed_key[32];$/;"	m	struct:rsa_ed_crosscert_st
ed_key_init_from_file	src/or/routerkeys.c	/^ed_key_init_from_file(const char *fname, uint32_t flags,$/;"	f
ed_key_new	src/or/routerkeys.c	/^ed_key_new(const ed25519_keypair_t *signing_key,$/;"	f
edcert_deadcode_dummy__	src/trunnel/ed25519_cert.c	/^int edcert_deadcode_dummy__ = 0;$/;"	v
edge_	src/or/or.h	/^  edge_connection_t edge_;$/;"	m	struct:entry_connection_t
edge_blocked_on_circ	src/or/or.h	/^  unsigned int edge_blocked_on_circ:1;$/;"	m	struct:edge_connection_t
edge_connection_new	src/or/connection.c	/^edge_connection_new(int type, int socket_family)$/;"	f
edge_connection_t	src/or/or.h	/^typedef struct edge_connection_t {$/;"	s
edge_connection_t	src/or/or.h	/^} edge_connection_t;$/;"	t	typeref:struct:edge_connection_t
edge_has_sent_end	src/or/or.h	/^  unsigned int edge_has_sent_end:1; \/**< For debugging; only used on edge$/;"	m	struct:edge_connection_t
edge_of_accounting_period_containing	src/or/hibernate.c	/^edge_of_accounting_period_containing(time_t now, int get_end)$/;"	f	file:
edge_reason_is_retriable	src/or/relay.c	/^edge_reason_is_retriable(int reason)$/;"	f	file:
edgeconn	src/test/test_relay.c	/^  edge_connection_t *edgeconn;$/;"	m	struct:relay_connection_test_data_t	file:
edmap_node	src/or/keypin.h	/^  HT_ENTRY(keypin_ent_st) edmap_node;$/;"	m	struct:keypin_ent_st
ei_dl_status	src/or/or.h	/^  download_status_t ei_dl_status;$/;"	m	struct:signed_descriptor_t
enable_control_logging	src/or/control.c	/^enable_control_logging(void)$/;"	f
enabled	src/test/bench.c	/^  int enabled;$/;"	m	struct:benchmark_t	file:
encoded	src/common/tortls.h	/^  uint8_t *encoded;$/;"	m	struct:tor_x509_cert_t
encoded	src/or/torcert.h	/^  uint8_t *encoded;$/;"	m	struct:tor_cert_st
encoded_len	src/common/tortls.h	/^  size_t encoded_len;$/;"	m	struct:tor_x509_cert_t
encoded_len	src/or/torcert.h	/^  size_t encoded_len;$/;"	m	struct:tor_cert_st
end_of_fixed_part	src/trunnel/link_handshake.h	/^  const uint8_t *end_of_fixed_part;$/;"	m	struct:auth1_st
end_of_signed	src/trunnel/link_handshake.h	/^  const uint8_t *end_of_signed;$/;"	m	struct:auth1_st
end_of_signed	src/trunnel/link_handshake.h	/^  const uint8_t *end_of_signed;$/;"	m	struct:rsa_ed_crosscert_st
end_reason	src/or/connection_edge.h	/^  int end_reason;$/;"	m	struct:__anon85
end_reason	src/or/or.h	/^  uint16_t end_reason;$/;"	m	struct:edge_connection_t
enough_mtbf_info	src/or/dirserv.c	/^static int enough_mtbf_info = 0;$/;"	v	file:
ensure_bandwidth_cap	src/or/config.c	/^ensure_bandwidth_cap(uint64_t *value, const char *desc, char **msg)$/;"	f	file:
ensure_request_map_initialized	src/or/directory.c	/^ensure_request_map_initialized(void)$/;"	f	file:
enter_v3_handshake_with_cell	src/or/channeltls.c	/^enter_v3_handshake_with_cell(var_cell_t *cell, channel_tls_t *chan)$/;"	f	file:
entries	src/or/or.h	/^  short_policy_entry_t entries[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:short_policy_t
entries_known_but_down	src/or/entrynodes.c	/^entries_known_but_down(const or_options_t *options)$/;"	f
entries_retry_all	src/or/entrynodes.c	/^entries_retry_all(const or_options_t *options)$/;"	f
entries_retry_helper	src/or/entrynodes.c	/^entries_retry_helper(const or_options_t *options, int act)$/;"	f	file:
entry_cfg	src/or/or.h	/^  entry_port_cfg_t entry_cfg;$/;"	m	struct:entry_connection_t
entry_cfg	src/or/or.h	/^  entry_port_cfg_t entry_cfg;$/;"	m	struct:listener_connection_t
entry_cfg	src/or/or.h	/^  entry_port_cfg_t entry_cfg;$/;"	m	struct:port_cfg_t
entry_connection_new	src/or/connection.c	/^entry_connection_new(int type, int socket_family)$/;"	f
entry_connection_t	src/or/or.h	/^typedef struct entry_connection_t {$/;"	s
entry_connection_t	src/or/or.h	/^} entry_connection_t;$/;"	t	typeref:struct:entry_connection_t
entry_guard_free	src/or/entrynodes.c	/^entry_guard_free(entry_guard_t *e)$/;"	f	file:
entry_guard_get_by_id_digest	src/or/entrynodes.c	/^entry_guard_get_by_id_digest(const char *digest)$/;"	f
entry_guard_inc_circ_attempt_count	src/or/circpathbias.c	/^entry_guard_inc_circ_attempt_count(entry_guard_t *guard)$/;"	f	file:
entry_guard_register_connect_status	src/or/entrynodes.c	/^entry_guard_register_connect_status(const char *digest, int succeeded,$/;"	f
entry_guard_set_status	src/or/entrynodes.c	/^entry_guard_set_status(entry_guard_t *e, const node_t *node,$/;"	f	file:
entry_guard_t	src/or/entrynodes.h	/^typedef struct entry_guard_t {$/;"	s
entry_guard_t	src/or/entrynodes.h	/^} entry_guard_t;$/;"	t	typeref:struct:entry_guard_t
entry_guards	src/or/entrynodes.c	/^static smartlist_t *entry_guards = NULL;$/;"	v	file:
entry_guards_changed	src/or/entrynodes.c	/^entry_guards_changed(void)$/;"	f
entry_guards_compute_status	src/or/entrynodes.c	/^entry_guards_compute_status(const or_options_t *options, time_t now)$/;"	f
entry_guards_dirty	src/or/entrynodes.c	/^static int entry_guards_dirty = 0;$/;"	v	file:
entry_guards_free_all	src/or/entrynodes.c	/^entry_guards_free_all(void)$/;"	f
entry_guards_parse_state	src/or/entrynodes.c	/^entry_guards_parse_state(or_state_t *state, int set, char **msg)$/;"	f
entry_guards_set_from_config	src/or/entrynodes.c	/^entry_guards_set_from_config(const or_options_t *options)$/;"	f
entry_guards_update_state	src/or/entrynodes.c	/^entry_guards_update_state(or_state_t *state)$/;"	f
entry_is_live	src/or/entrynodes.c	/^entry_is_live(const entry_guard_t *e, entry_is_live_flags_t flags,$/;"	f
entry_is_live_flags_t	src/or/entrynodes.h	/^} entry_is_live_flags_t;$/;"	t	typeref:enum:__anon33
entry_is_time_to_retry	src/or/entrynodes.c	/^entry_is_time_to_retry(const entry_guard_t *e, time_t now)$/;"	f
entry_list_is_constrained	src/or/entrynodes.c	/^entry_list_is_constrained(const or_options_t *options)$/;"	f
entry_nodes_should_be_added	src/or/entrynodes.c	/^entry_nodes_should_be_added(void)$/;"	f
entry_port_cfg_t	src/or/or.h	/^typedef struct entry_port_cfg_t {$/;"	s
entry_port_cfg_t	src/or/or.h	/^} entry_port_cfg_t;$/;"	t	typeref:struct:entry_port_cfg_t
entryconn	src/test/test_relay.c	/^  entry_connection_t *entryconn;$/;"	m	struct:relay_connection_test_data_t	file:
entryconn_rewrite_setup	src/test/test_connection_edge_ap_handshake.c	/^entryconn_rewrite_setup(const struct testcase_t *tc)$/;"	f	file:
entryconn_rewrite_setup	src/test/test_entryconn.c	/^entryconn_rewrite_setup(const struct testcase_t *tc)$/;"	f	file:
entryconn_rewrite_teardown	src/test/test_connection_edge_ap_handshake.c	/^entryconn_rewrite_teardown(const struct testcase_t *tc, void *arg)$/;"	f	file:
entryconn_rewrite_teardown	src/test/test_entryconn.c	/^entryconn_rewrite_teardown(const struct testcase_t *tc, void *arg)$/;"	f	file:
entryconn_tests	src/test/test_entryconn.c	/^struct testcase_t entryconn_tests[] = {$/;"	v	typeref:struct:testcase_t
entrynodes_tests	src/test/test_entrynodes.c	/^struct testcase_t entrynodes_tests[] = {$/;"	v	typeref:struct:testcase_t
env_setup	src/test/test_relay.c	/^struct testcase_setup_t env_setup = {$/;"	v	typeref:struct:testcase_setup_t
environment_variable_names_equal	src/common/util.c	/^environment_variable_names_equal(const char *s1, const char *s2)$/;"	f
ephemeral_onion_services	src/or/or.h	/^  smartlist_t *ephemeral_onion_services;$/;"	m	struct:control_connection_t
equal	src/ext/ed25519/ref10/ge_scalarmult_base.c	/^static unsigned char equal(signed char b,signed char c)$/;"	f	file:
err	src/common/sandbox.c	/^  int err;$/;"	m	struct:cached_getaddrinfo_item_t	file:
err_hostname	src/or/dns_structs.h	/^    int err_hostname; \/** One of DNS_ERR_*, if PTR lookup failed. *\/$/;"	m	union:cached_resolve_t::__anon14
err_ipv4	src/or/dns_structs.h	/^    int err_ipv4; \/**< One of DNS_ERR_*, if IPv4 lookup failed. *\/$/;"	m	union:cached_resolve_t::__anon12
err_ipv6	src/or/dns_structs.h	/^    int err_ipv6; \/**< One of DNS_ERR_*, if IPv6 lookup failed. *\/$/;"	m	union:cached_resolve_t::__anon13
errno_to_orconn_end_reason	src/or/reasons.c	/^errno_to_orconn_end_reason(int e)$/;"	f
errno_to_stream_end_reason	src/or/reasons.c	/^errno_to_stream_end_reason(int e)$/;"	f
error	src/or/routerparse.c	/^  char *error;                 \/**< For ERR_ tokens only. *\/$/;"	m	struct:directory_token_t	file:
esc_for_log	src/common/util.c	/^esc_for_log(const char *s)$/;"	f
esc_for_log_len	src/common/util.c	/^esc_for_log_len(const char *chars, size_t n)$/;"	f
esc_router_info	src/or/routerlist.c	/^esc_router_info(const routerinfo_t *router)$/;"	f
escaped	src/common/util.c	/^escaped(const char *s)$/;"	f
escaped_safe_str	src/or/config.c	/^escaped_safe_str(const char *address)$/;"	f
escaped_safe_str_client	src/or/config.c	/^escaped_safe_str_client(const char *address)$/;"	f
estimated_total_queue_size	src/or/channel.c	/^STATIC uint64_t estimated_total_queue_size = 0;$/;"	v
estimated_usec_for_onionskins	src/or/cpuworker.c	/^estimated_usec_for_onionskins(uint32_t n_requests, uint16_t onionskin_type)$/;"	f
ev	src/common/compat_libevent.c	/^  struct event *ev;$/;"	m	struct:periodic_timer_t	typeref:struct:periodic_timer_t::event	file:
evaluate_ctr_for_aes	src/common/aes.c	/^evaluate_ctr_for_aes(void)$/;"	f
evaluate_ecgroup_for_tls	src/common/tortls.c	/^evaluate_ecgroup_for_tls(const char *ecgroup)$/;"	f
evaluate_evp_for_aes	src/common/aes.c	/^evaluate_evp_for_aes(int force_val)$/;"	f
evbuffer_inbuf_callback	src/or/connection.c	/^evbuffer_inbuf_callback(struct evbuffer *buf,$/;"	f	file:
evbuffer_outbuf_callback	src/or/connection.c	/^evbuffer_outbuf_callback(struct evbuffer *buf,$/;"	f	file:
evdns_base_clear_nameservers_and_suspend	src/or/dns.c	/^#define evdns_base_clear_nameservers_and_suspend(/;"	d	file:
evdns_base_config_windows_nameservers	src/or/dns.c	/^#define evdns_base_config_windows_nameservers(/;"	d	file:
evdns_base_count_nameservers	src/or/dns.c	/^#define evdns_base_count_nameservers(/;"	d	file:
evdns_base_new	src/or/dns.c	/^#define evdns_base_new(/;"	d	file:
evdns_base_resolv_conf_parse	src/or/dns.c	/^#define evdns_base_resolv_conf_parse(/;"	d	file:
evdns_base_resolve_ipv4	src/or/dns.c	/^#define evdns_base_resolve_ipv4(/;"	d	file:
evdns_base_resolve_ipv6	src/or/dns.c	/^#define evdns_base_resolve_ipv6(/;"	d	file:
evdns_base_resolve_reverse	src/or/dns.c	/^#define evdns_base_resolve_reverse(/;"	d	file:
evdns_base_resolve_reverse_ipv6	src/or/dns.c	/^#define evdns_base_resolve_reverse_ipv6(/;"	d	file:
evdns_base_resume	src/or/dns.c	/^#define evdns_base_resume(/;"	d	file:
evdns_base_search_clear	src/or/dns.c	/^#define evdns_base_search_clear(/;"	d	file:
evdns_base_set_default_outgoing_bind_address	src/or/dns.c	/^#define evdns_base_set_default_outgoing_bind_address(/;"	d	file:
evdns_base_set_option_	src/or/dns.c	/^#define evdns_base_set_option_ /;"	d	file:
evdns_base_set_option_	src/or/dns.c	/^#define evdns_base_set_option_(/;"	d	file:
evdns_callback	src/or/dns.c	/^evdns_callback(int result, char type, int count, int ttl, void *addresses,$/;"	f	file:
evdns_callback_type	src/ext/eventdns.h	/^typedef void (*evdns_callback_type) (int result, char type, int count, int ttl, void *addresses, void *arg);$/;"	t
evdns_debug_log_fn_type	src/ext/eventdns.h	/^typedef void (*evdns_debug_log_fn_type)(int is_warning, const char *msg);$/;"	t
evdns_err_is_transient	src/or/dns.c	/^evdns_err_is_transient(int err)$/;"	f	file:
evdns_get_orig_address	src/or/dnsserv.c	/^evdns_get_orig_address(const struct evdns_server_request *req,$/;"	f	file:
evdns_log_cb	src/or/dns.c	/^evdns_log_cb(int warn, const char *msg)$/;"	f	file:
evdns_request_callback_fn_type	src/ext/eventdns.h	/^typedef void (*evdns_request_callback_fn_type)(struct evdns_server_request *, void *);$/;"	t
evdns_server_callback	src/or/dnsserv.c	/^evdns_server_callback(struct evdns_server_request *req, void *data_)$/;"	f	file:
evdns_server_question	src/ext/eventdns.h	/^struct evdns_server_question {$/;"	s
evdns_server_request	src/ext/eventdns.h	/^struct evdns_server_request {$/;"	s
evdns_wildcard_check_callback	src/or/dns.c	/^evdns_wildcard_check_callback(int result, char type, int count, int ttl,$/;"	f	file:
event	src/or/control.c	/^  uint16_t event;$/;"	m	struct:queued_event_s	file:
event_code	src/or/control.c	/^  uint16_t event_code;$/;"	m	struct:control_event_t	file:
event_mask	src/or/or.h	/^  uint64_t event_mask; \/**< Bitfield: which events does this controller$/;"	m	struct:control_connection_t
event_mask_t	src/or/control.c	/^typedef uint64_t event_mask_t;$/;"	t	file:
event_name	src/or/control.c	/^  const char *event_name;$/;"	m	struct:control_event_t	file:
event_to_log_severity	src/or/control.c	/^event_to_log_severity(int event)$/;"	f	file:
eventfd_alert	src/common/compat_threads.c	/^eventfd_alert(int fd)$/;"	f	file:
eventfd_drain	src/common/compat_threads.c	/^eventfd_drain(int fd)$/;"	f	file:
evp	src/common/aes.c	/^    EVP_CIPHER_CTX evp;$/;"	m	union:aes_cnt_cipher::__anon106	file:
evp	src/common/aes.c	/^  EVP_CIPHER_CTX evp;$/;"	m	struct:aes_cnt_cipher	file:
evp_block128_fn	src/common/aes.c	/^evp_block128_fn(const uint8_t in[16],$/;"	f	file:
evutil_socket_t	src/common/compat_libevent.h	/^#define evutil_socket_t /;"	d
ewma_alloc_circ_data	src/or/circuitmux_ewma.c	/^ewma_alloc_circ_data(circuitmux_t *cmux,$/;"	f	file:
ewma_alloc_cmux_data	src/or/circuitmux_ewma.c	/^ewma_alloc_cmux_data(circuitmux_t *cmux)$/;"	f	file:
ewma_cmp_cmux	src/or/circuitmux_ewma.c	/^ewma_cmp_cmux(circuitmux_t *cmux_1, circuitmux_policy_data_t *pol_data_1,$/;"	f	file:
ewma_enabled	src/or/circuitmux_ewma.c	/^static int ewma_enabled = 0;$/;"	v	file:
ewma_free_circ_data	src/or/circuitmux_ewma.c	/^ewma_free_circ_data(circuitmux_t *cmux,$/;"	f	file:
ewma_free_cmux_data	src/or/circuitmux_ewma.c	/^ewma_free_cmux_data(circuitmux_t *cmux,$/;"	f	file:
ewma_notify_circ_active	src/or/circuitmux_ewma.c	/^ewma_notify_circ_active(circuitmux_t *cmux,$/;"	f	file:
ewma_notify_circ_inactive	src/or/circuitmux_ewma.c	/^ewma_notify_circ_inactive(circuitmux_t *cmux,$/;"	f	file:
ewma_notify_xmit_cells	src/or/circuitmux_ewma.c	/^ewma_notify_xmit_cells(circuitmux_t *cmux,$/;"	f	file:
ewma_pick_active_circuit	src/or/circuitmux_ewma.c	/^ewma_pick_active_circuit(circuitmux_t *cmux,$/;"	f	file:
ewma_policy	src/or/circuitmux_ewma.c	/^circuitmux_policy_t ewma_policy = {$/;"	v
ewma_policy_circ_data_s	src/or/circuitmux_ewma.c	/^struct ewma_policy_circ_data_s {$/;"	s	file:
ewma_policy_circ_data_t	src/or/circuitmux_ewma.c	/^typedef struct ewma_policy_circ_data_s ewma_policy_circ_data_t;$/;"	t	typeref:struct:ewma_policy_circ_data_s	file:
ewma_policy_data_s	src/or/circuitmux_ewma.c	/^struct ewma_policy_data_s {$/;"	s	file:
ewma_policy_data_t	src/or/circuitmux_ewma.c	/^typedef struct ewma_policy_data_s ewma_policy_data_t;$/;"	t	typeref:struct:ewma_policy_data_s	file:
ewma_scale_factor	src/or/circuitmux_ewma.c	/^static double ewma_scale_factor = 0.1;$/;"	v	file:
exit_bytes_read	src/or/rephist.c	/^static uint64_t *exit_bytes_read = NULL;$/;"	v	file:
exit_bytes_written	src/or/rephist.c	/^static uint64_t *exit_bytes_written = NULL;$/;"	v	file:
exit_function	src/or/main.c	/^exit_function(void)$/;"	f	file:
exit_node_mock	src/test/test_connection_edge_ap_handshake.c	/^static node_t *exit_node_mock = NULL;$/;"	v	file:
exit_policy	src/or/or.h	/^  short_policy_t *exit_policy;$/;"	m	struct:microdesc_t
exit_policy	src/or/or.h	/^  smartlist_t *exit_policy; \/**< What streams will this OR permit$/;"	m	struct:__anon45
exit_policy_is_general_exit	src/or/policies.c	/^exit_policy_is_general_exit(smartlist_t *policy)$/;"	f
exit_policy_is_general_exit_helper	src/or/policies.c	/^exit_policy_is_general_exit_helper(smartlist_t *policy, int port)$/;"	f	file:
exit_policy_parser_cfg_t	src/or/policies.h	/^typedef int exit_policy_parser_cfg_t;$/;"	t
exit_policy_remove_redundancies	src/or/policies.c	/^exit_policy_remove_redundancies(smartlist_t *dest)$/;"	f	file:
exit_source	src/or/connection_edge.h	/^  addressmap_entry_source_t exit_source;$/;"	m	struct:__anon85
exit_streams	src/or/rephist.c	/^static uint32_t *exit_streams = NULL;$/;"	v	file:
exitsummary	src/or/or.h	/^  char *exitsummary; \/**< exit policy summary -$/;"	m	struct:routerstatus_t
exitward	src/or/or.h	/^  unsigned int exitward:1; \/**< 0 for app-ward, 1 for exit-ward. *\/$/;"	m	struct:testing_cell_stats_entry_t
exp_field	src/trunnel/ed25519_cert.h	/^  uint32_t exp_field;$/;"	m	struct:ed25519_cert_st
expand256_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^expand256_modm(bignum256modm out, const unsigned char *in, size_t len) {$/;"	f
expand256_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^expand256_modm(bignum256modm out, const unsigned char *in, size_t len) {$/;"	f
expand_filename	src/common/util.c	/^expand_filename(const char *filename)$/;"	f
expand_raw256_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^expand_raw256_modm(bignum256modm out, const unsigned char in[32]) {$/;"	f
expand_raw256_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^expand_raw256_modm(bignum256modm out, const unsigned char in[32]) {$/;"	f
expected_bandwidth_usage	src/or/hibernate.c	/^static uint64_t expected_bandwidth_usage = 0;$/;"	v	file:
expiration	src/trunnel/link_handshake.h	/^  uint32_t expiration;$/;"	m	struct:rsa_ed_crosscert_st
expire	src/or/dns_structs.h	/^  time_t expire; \/**< Remove items from cache after this time. *\/$/;"	m	struct:cached_resolve_t
expires	src/or/addressmap.c	/^  time_t expires;$/;"	m	struct:__anon83	file:
expires	src/or/or.h	/^  time_t expires;$/;"	m	struct:authority_cert_t
expiring_nodes	src/or/rendservice.c	/^  smartlist_t *expiring_nodes;$/;"	m	struct:rend_service_t	file:
expiry_time	src/or/or.h	/^  time_t expiry_time;$/;"	m	struct:__anon53
ext	src/trunnel/ed25519_cert.h	/^  TRUNNEL_DYNARRAY_HEAD(, struct ed25519_cert_extension_st *) ext;$/;"	m	struct:ed25519_cert_st
ext_flags	src/trunnel/ed25519_cert.h	/^  uint8_t ext_flags;$/;"	m	struct:ed25519_cert_extension_st
ext_length	src/trunnel/ed25519_cert.h	/^  uint16_t ext_length;$/;"	m	struct:ed25519_cert_extension_st
ext_or_auth_cookie	src/or/ext_orport.c	/^STATIC uint8_t *ext_or_auth_cookie = NULL;$/;"	v
ext_or_auth_cookie_is_set	src/or/ext_orport.c	/^STATIC int ext_or_auth_cookie_is_set = 0;$/;"	v
ext_or_auth_correct_client_hash	src/or/or.h	/^  char *ext_or_auth_correct_client_hash;$/;"	m	struct:or_connection_t
ext_or_cmd_free	src/or/ext_orport.c	/^ext_or_cmd_free(ext_or_cmd_t *cmd)$/;"	f
ext_or_cmd_new	src/or/ext_orport.c	/^ext_or_cmd_new(uint16_t len)$/;"	f
ext_or_cmd_t	src/or/or.h	/^typedef struct ext_or_cmd_t {$/;"	s
ext_or_cmd_t	src/or/or.h	/^} ext_or_cmd_t;$/;"	t	typeref:struct:ext_or_cmd_t
ext_or_conn_id	src/or/or.h	/^  char *ext_or_conn_id;$/;"	m	struct:or_connection_t
ext_or_transport	src/or/or.h	/^  char *ext_or_transport;$/;"	m	struct:or_connection_t
ext_orport_free_all	src/or/ext_orport.c	/^ext_orport_free_all(void)$/;"	f
ext_type	src/trunnel/ed25519_cert.h	/^  uint8_t ext_type;$/;"	m	struct:ed25519_cert_extension_st
extend_cell_format	src/or/onion.c	/^extend_cell_format(uint8_t *command_out, uint16_t *len_out,$/;"	f
extend_cell_parse	src/or/onion.c	/^extend_cell_parse(extend_cell_t *cell_out, const uint8_t command,$/;"	f
extend_cell_t	src/or/onion.h	/^typedef struct extend_cell_t {$/;"	s
extend_cell_t	src/or/onion.h	/^} extend_cell_t;$/;"	t	typeref:struct:extend_cell_t
extend_info	src/or/or.h	/^  extend_info_t *extend_info; \/**< Extend info of this introduction point. *\/$/;"	m	struct:rend_intro_point_t
extend_info	src/or/or.h	/^  extend_info_t *extend_info;$/;"	m	struct:crypt_path_t
extend_info	src/or/rendservice.h	/^      extend_info_t *extend_info;$/;"	m	struct:rend_intro_cell_s::__anon108::__anon110
extend_info	src/or/rendservice.h	/^      extend_info_t *extend_info;$/;"	m	struct:rend_intro_cell_s::__anon108::__anon111
extend_info_describe	src/or/router.c	/^extend_info_describe(const extend_info_t *ei)$/;"	f
extend_info_dup	src/or/circuitbuild.c	/^extend_info_dup(extend_info_t *info)$/;"	f
extend_info_free	src/or/circuitbuild.c	/^extend_info_free(extend_info_t *info)$/;"	f
extend_info_from_node	src/or/circuitbuild.c	/^extend_info_from_node(const node_t *node, int for_direct_connect)$/;"	f
extend_info_from_router	src/or/router.c	/^extend_info_from_router(const routerinfo_t *r)$/;"	f	file:
extend_info_get_description	src/or/router.c	/^extend_info_get_description(char *buf, const extend_info_t *ei)$/;"	f
extend_info_new	src/or/circuitbuild.c	/^extend_info_new(const char *nickname, const char *digest,$/;"	f
extend_info_t	src/or/or.h	/^typedef struct extend_info_t {$/;"	s
extend_info_t	src/or/or.h	/^} extend_info_t;$/;"	t	typeref:struct:extend_info_t
extended_cell_format	src/or/onion.c	/^extended_cell_format(uint8_t *command_out, uint16_t *len_out,$/;"	f
extended_cell_parse	src/or/onion.c	/^extended_cell_parse(extended_cell_t *cell_out,$/;"	f
extended_cell_t	src/or/onion.h	/^typedef struct extended_cell_t {$/;"	s
extended_cell_t	src/or/onion.h	/^} extended_cell_t;$/;"	t	typeref:struct:extended_cell_t
extorport_tests	src/test/test_extorport.c	/^struct testcase_t extorport_tests[] = {$/;"	v	typeref:struct:testcase_t
extra	src/or/confparse.h	/^  config_var_t *extra;$/;"	m	struct:config_format_t
extra_info_args	src/or/transports.h	/^  char *extra_info_args;$/;"	m	struct:transport_t
extra_info_digest	src/or/or.h	/^  char extra_info_digest[DIGEST_LEN];$/;"	m	struct:signed_descriptor_t
extra_info_digest256	src/or/or.h	/^  char extra_info_digest256[DIGEST256_LEN];$/;"	m	struct:__anon45
extra_info_map	src/or/or.h	/^  struct digest_ei_map_t *extra_info_map;$/;"	m	struct:__anon48	typeref:struct:__anon48::digest_ei_map_t
extract_escaped_string	src/or/control.c	/^extract_escaped_string(const char *start, size_t in_len_max,$/;"	f	file:
extrainfo_dump_to_string	src/or/router.c	/^extrainfo_dump_to_string(char **s_out, extrainfo_t *extrainfo,$/;"	f
extrainfo_free	src/or/routerlist.c	/^extrainfo_free(extrainfo_t *extrainfo)$/;"	f
extrainfo_free_	src/or/routerlist.c	/^extrainfo_free_(void *e)$/;"	f	file:
extrainfo_get_by_descriptor_digest	src/or/routerlist.c	/^extrainfo_get_by_descriptor_digest(const char *digest)$/;"	f
extrainfo_is_bogus	src/or/or.h	/^  unsigned int extrainfo_is_bogus : 1;$/;"	m	struct:signed_descriptor_t
extrainfo_parse_entry_from_string	src/or/routerparse.c	/^extrainfo_parse_entry_from_string(const char *s, const char *end,$/;"	f
extrainfo_store	src/or/or.h	/^  desc_store_t extrainfo_store;$/;"	m	struct:__anon48
extrainfo_t	src/or/or.h	/^typedef struct extrainfo_t {$/;"	s
extrainfo_t	src/or/or.h	/^} extrainfo_t;$/;"	t	typeref:struct:extrainfo_t
extrainfo_token_table	src/or/routerparse.c	/^static token_rule_t extrainfo_token_table[] = {$/;"	v	file:
f_crypto	src/or/or.h	/^  crypto_cipher_t *f_crypto;$/;"	m	struct:crypt_path_t
f_digest	src/or/or.h	/^  crypto_digest_t *f_digest; \/* for integrity checking *\/$/;"	m	struct:crypt_path_t
failure_count	src/or/or.h	/^  int failure_count;$/;"	m	struct:__anon53
failure_type	src/or/rendcache.h	/^  rend_intro_point_failure_t failure_type;$/;"	m	struct:rend_cache_failure_intro_t
fake_get_remote_descr	src/test/test_relay.c	/^fake_get_remote_descr(channel_t *conn, int flags)$/;"	f
fake_getsockname	src/test/test_address.c	/^fake_getsockname(tor_socket_t socket, struct sockaddr *address,$/;"	f	file:
fake_network	src/test/test_entrynodes.c	/^static const struct testcase_setup_t fake_network = {$/;"	v	typeref:struct:testcase_setup_t	file:
fake_network_cleanup	src/test/test_entrynodes.c	/^fake_network_cleanup(const struct testcase_t *testcase, void *ptr)$/;"	f	file:
fake_network_setup	src/test/test_entrynodes.c	/^fake_network_setup(const struct testcase_t *testcase)$/;"	f	file:
fake_open_socket	src/test/test_address.c	/^fake_open_socket(int domain, int type, int protocol)$/;"	f	file:
fake_status	src/or/or.h	/^  routerstatus_t fake_status; \/**< Used when we need to pass this trusted$/;"	m	struct:dir_server_t
fake_tortls	src/test/test_channeltls.c	/^static int fake_tortls = 0; \/* Bleh... *\/$/;"	v	file:
fallback_dir_server_new	src/or/routerlist.c	/^fallback_dir_server_new(const tor_addr_t *addr,$/;"	f
fallback_dir_servers	src/or/routerlist.c	/^static smartlist_t *fallback_dir_servers = NULL;$/;"	v	file:
family	src/common/address.h	/^  sa_family_t family;$/;"	m	struct:tor_addr_t
family	src/common/sandbox.c	/^  int family;$/;"	m	struct:cached_getaddrinfo_item_t	file:
family	src/or/or.h	/^  smartlist_t *family;$/;"	m	struct:microdesc_t
fascist_firewall_allows_address_dir	src/or/policies.c	/^fascist_firewall_allows_address_dir(const tor_addr_t *addr, uint16_t port)$/;"	f
fascist_firewall_allows_address_or	src/or/policies.c	/^fascist_firewall_allows_address_or(const tor_addr_t *addr, uint16_t port)$/;"	f
fascist_firewall_allows_node	src/or/policies.c	/^fascist_firewall_allows_node(const node_t *node)$/;"	f
fascist_firewall_allows_or	src/or/policies.c	/^fascist_firewall_allows_or(const routerinfo_t *ri)$/;"	f
fast	src/or/or.h	/^    struct fast_handshake_state_t *fast;$/;"	m	union:__anon50::__anon51	typeref:struct:__anon50::__anon51::fast_handshake_state_t
fast_bandwidth_kb	src/or/dirserv.c	/^static uint32_t fast_bandwidth_kb = 0;$/;"	v	file:
fast_client_handshake	src/or/onion_fast.c	/^fast_client_handshake(const fast_handshake_state_t *handshake_state,$/;"	f
fast_handshake_state_free	src/or/onion_fast.c	/^fast_handshake_state_free(fast_handshake_state_t *victim)$/;"	f
fast_handshake_state_t	src/or/onion_fast.h	/^typedef struct fast_handshake_state_t {$/;"	s
fast_handshake_state_t	src/or/onion_fast.h	/^} fast_handshake_state_t;$/;"	t	typeref:struct:fast_handshake_state_t
fast_handshake_tests	src/test/test_fast_handshake.c	/^struct testcase_t fast_handshake_tests[] = {$/;"	v	typeref:struct:testcase_t
fast_memcmp	src/common/di_ops.h	/^#define fast_memcmp(/;"	d
fast_memcmpstart	src/common/util.c	/^fast_memcmpstart(const void *mem, size_t memlen,$/;"	f
fast_memeq	src/common/di_ops.h	/^#define fast_memeq(/;"	d
fast_memneq	src/common/di_ops.h	/^#define fast_memneq(/;"	d
fast_onionskin_create	src/or/onion_fast.c	/^fast_onionskin_create(fast_handshake_state_t **handshake_state_out,$/;"	f
fast_server_handshake	src/or/onion_fast.c	/^fast_server_handshake(const uint8_t *key_in, \/* DIGEST_LEN bytes *\/$/;"	f
fcontract	src/ext/curve25519_donna/curve25519-donna-c64.c	/^fcontract(u8 *output, const felem input) {$/;"	f	file:
fd	src/common/compat.c	/^  int fd;$/;"	m	struct:tor_lockfile_t	file:
fd	src/common/log.c	/^  int fd; \/**< fd to receive log messages, or -1 for none. *\/$/;"	m	struct:logfile_t	file:
fd	src/common/util.c	/^  int fd; \/**< fd for the open file. *\/$/;"	m	struct:open_file_t	file:
fd_is_cloexec	src/test/test_util.c	/^fd_is_cloexec(tor_socket_t fd)$/;"	f	file:
fd_is_nonblocking	src/test/test_util.c	/^fd_is_nonblocking(tor_socket_t fd)$/;"	f	file:
fdifference_backwards	src/ext/curve25519_donna/curve25519-donna-c64.c	/^fdifference_backwards(felem out, const felem in) {$/;"	f	file:
fdopen_file	src/common/util.c	/^fdopen_file(open_file_t *file_data)$/;"	f
fe	src/ext/ed25519/ref10/fe.h	/^typedef crypto_int32 fe[10];$/;"	t
fe_0	src/ext/ed25519/ref10/fe.h	/^#define fe_0 /;"	d
fe_0	src/ext/ed25519/ref10/fe_0.c	/^void fe_0(fe h)$/;"	f
fe_1	src/ext/ed25519/ref10/fe.h	/^#define fe_1 /;"	d
fe_1	src/ext/ed25519/ref10/fe_1.c	/^void fe_1(fe h)$/;"	f
fe_add	src/ext/ed25519/ref10/fe.h	/^#define fe_add /;"	d
fe_add	src/ext/ed25519/ref10/fe_add.c	/^void fe_add(fe h,const fe f,const fe g)$/;"	f
fe_cmov	src/ext/ed25519/ref10/fe.h	/^#define fe_cmov /;"	d
fe_cmov	src/ext/ed25519/ref10/fe_cmov.c	/^void fe_cmov(fe f,const fe g,unsigned int b)$/;"	f
fe_copy	src/ext/ed25519/ref10/fe.h	/^#define fe_copy /;"	d
fe_copy	src/ext/ed25519/ref10/fe_copy.c	/^void fe_copy(fe h,const fe f)$/;"	f
fe_cswap	src/ext/ed25519/ref10/fe.h	/^#define fe_cswap /;"	d
fe_frombytes	src/ext/ed25519/ref10/fe.h	/^#define fe_frombytes /;"	d
fe_frombytes	src/ext/ed25519/ref10/fe_frombytes.c	/^void fe_frombytes(fe h,const unsigned char *s)$/;"	f
fe_invert	src/ext/ed25519/ref10/fe.h	/^#define fe_invert /;"	d
fe_invert	src/ext/ed25519/ref10/fe_invert.c	/^void fe_invert(fe out,const fe z)$/;"	f
fe_isnegative	src/ext/ed25519/ref10/fe.h	/^#define fe_isnegative /;"	d
fe_isnegative	src/ext/ed25519/ref10/fe_isnegative.c	/^int fe_isnegative(const fe f)$/;"	f
fe_isnonzero	src/ext/ed25519/ref10/fe.h	/^#define fe_isnonzero /;"	d
fe_isnonzero	src/ext/ed25519/ref10/fe_isnonzero.c	/^int fe_isnonzero(const fe f)$/;"	f
fe_mul	src/ext/ed25519/ref10/fe.h	/^#define fe_mul /;"	d
fe_mul	src/ext/ed25519/ref10/fe_mul.c	/^void fe_mul(fe h,const fe f,const fe g)$/;"	f
fe_mul121666	src/ext/ed25519/ref10/fe.h	/^#define fe_mul121666 /;"	d
fe_neg	src/ext/ed25519/ref10/fe.h	/^#define fe_neg /;"	d
fe_neg	src/ext/ed25519/ref10/fe_neg.c	/^void fe_neg(fe h,const fe f)$/;"	f
fe_pow22523	src/ext/ed25519/ref10/fe.h	/^#define fe_pow22523 /;"	d
fe_pow22523	src/ext/ed25519/ref10/fe_pow22523.c	/^void fe_pow22523(fe out,const fe z)$/;"	f
fe_sq	src/ext/ed25519/ref10/fe.h	/^#define fe_sq /;"	d
fe_sq	src/ext/ed25519/ref10/fe_sq.c	/^void fe_sq(fe h,const fe f)$/;"	f
fe_sq2	src/ext/ed25519/ref10/fe.h	/^#define fe_sq2 /;"	d
fe_sq2	src/ext/ed25519/ref10/fe_sq2.c	/^void fe_sq2(fe h,const fe f)$/;"	f
fe_sub	src/ext/ed25519/ref10/fe.h	/^#define fe_sub /;"	d
fe_sub	src/ext/ed25519/ref10/fe_sub.c	/^void fe_sub(fe h,const fe f,const fe g)$/;"	f
fe_tobytes	src/ext/ed25519/ref10/fe.h	/^#define fe_tobytes /;"	d
fe_tobytes	src/ext/ed25519/ref10/fe_tobytes.c	/^void fe_tobytes(unsigned char *s,const fe h)$/;"	f
felem	src/ext/curve25519_donna/curve25519-donna-c64.c	/^typedef limb felem[5];$/;"	t	file:
fetch_bridge_descriptors	src/or/entrynodes.c	/^fetch_bridge_descriptors(const or_options_t *options, time_t now)$/;"	f
fetch_ext_or_command_from_buf	src/or/buffers.c	/^fetch_ext_or_command_from_buf(buf_t *buf, ext_or_cmd_t **out)$/;"	f
fetch_ext_or_command_from_evbuffer	src/or/buffers.c	/^fetch_ext_or_command_from_evbuffer(struct evbuffer *buf, ext_or_cmd_t **out)$/;"	f
fetch_from_buf	src/or/buffers.c	/^fetch_from_buf(char *string, size_t string_len, buf_t *buf)$/;"	f
fetch_from_buf_http	src/or/buffers.c	/^fetch_from_buf_http(buf_t *buf,$/;"	f
fetch_from_buf_line	src/or/buffers.c	/^fetch_from_buf_line(buf_t *buf, char *data_out, size_t *data_len)$/;"	f
fetch_from_buf_socks	src/or/buffers.c	/^fetch_from_buf_socks(buf_t *buf, socks_request_t *req,$/;"	f
fetch_from_buf_socks_client	src/or/buffers.c	/^fetch_from_buf_socks_client(buf_t *buf, int state, char **reason)$/;"	f
fetch_from_evbuffer_http	src/or/buffers.c	/^fetch_from_evbuffer_http(struct evbuffer *buf,$/;"	f
fetch_from_evbuffer_socks	src/or/buffers.c	/^fetch_from_evbuffer_socks(struct evbuffer *buf, socks_request_t *req,$/;"	f
fetch_from_evbuffer_socks_client	src/or/buffers.c	/^fetch_from_evbuffer_socks_client(struct evbuffer *buf, int state,$/;"	f
fetch_missing_signatures	src/or/dirvote.c	/^  time_t fetch_missing_signatures;$/;"	m	struct:__anon99	file:
fetch_missing_votes	src/or/dirvote.c	/^  time_t fetch_missing_votes;$/;"	m	struct:__anon99	file:
fetch_status	src/or/entrynodes.c	/^  download_status_t fetch_status;$/;"	m	struct:__anon32	file:
fetch_v2_desc_by_addr	src/or/rendclient.c	/^fetch_v2_desc_by_addr(rend_data_t *query, smartlist_t *hsdirs)$/;"	f	file:
fetch_v2_desc_by_descid	src/or/rendclient.c	/^fetch_v2_desc_by_descid(const char *desc_id, const rend_data_t *rend_query,$/;"	f	file:
fetch_var_cell_from_buf	src/or/buffers.c	/^fetch_var_cell_from_buf(buf_t *buf, var_cell_t **out, int linkproto)$/;"	f
fetch_var_cell_from_evbuffer	src/or/buffers.c	/^fetch_var_cell_from_evbuffer(struct evbuffer *buf, var_cell_t **out,$/;"	f
fexpand	src/ext/curve25519_donna/curve25519-donna-c64.c	/^fexpand(limb *output, const u8 *in) {$/;"	f	file:
file_status	src/common/util.c	/^file_status(const char *fname)$/;"	f
file_status_t	src/common/util.h	/^typedef enum { FN_ERROR, FN_NOENT, FN_FILE, FN_DIR, FN_EMPTY } file_status_t;$/;"	t	typeref:enum:__anon114
filename	src/common/compat.c	/^  char *filename;$/;"	m	struct:tor_lockfile_t	file:
filename	src/common/log.c	/^  char *filename; \/**< Filename to open. *\/$/;"	m	struct:logfile_t	file:
filename	src/common/util.c	/^  char *filename; \/**< Name of the original file. *\/$/;"	m	struct:open_file_t	file:
fill_a_buffer_memset	src/test/test-memwipe.c	/^fill_a_buffer_memset(void)$/;"	f	file:
fill_a_buffer_memwipe	src/test/test-memwipe.c	/^fill_a_buffer_memwipe(void)$/;"	f	file:
fill_a_buffer_nothing	src/test/test-memwipe.c	/^fill_a_buffer_nothing(void)$/;"	f	file:
fill_fn	src/test/test-memwipe.c	/^    (*fill_fn)(void);$/;"	m	struct:testcase	file:
fill_heap_buffer_memset	src/test/test-memwipe.c	/^fill_heap_buffer_memset(void)$/;"	f	file:
fill_heap_buffer_memwipe	src/test/test-memwipe.c	/^fill_heap_buffer_memwipe(void)$/;"	f	file:
fill_heap_buffer_nothing	src/test/test-memwipe.c	/^fill_heap_buffer_nothing(void)$/;"	f	file:
filter_dynamic	src/common/sandbox.c	/^static sandbox_cfg_t *filter_dynamic = NULL;$/;"	v	file:
filter_dynamic	src/common/sandbox.h	/^  sandbox_cfg_t *filter_dynamic;$/;"	m	struct:__anon76
filter_func	src/common/sandbox.c	/^static sandbox_filter_func_t filter_func[] = {$/;"	v	file:
filter_func	src/common/sandbox.h	/^  sandbox_filter_func_t *filter_func;$/;"	m	struct:__anon76
filter_nopar_gen	src/common/sandbox.c	/^static int filter_nopar_gen[] = {$/;"	v	file:
find_all_by_keyword	src/or/routerparse.c	/^find_all_by_keyword(smartlist_t *s, directory_keyword k)$/;"	f	file:
find_all_exitpolicy	src/or/routerparse.c	/^find_all_exitpolicy(smartlist_t *s)$/;"	f	file:
find_benchmark	src/test/bench.c	/^find_benchmark(const char *name)$/;"	f	file:
find_bridge_by_digest	src/or/entrynodes.c	/^find_bridge_by_digest(const char *digest)$/;"	f	file:
find_by_keyword	src/or/routerparse.c	/^#define find_by_keyword(/;"	d	file:
find_by_keyword_	src/or/routerparse.c	/^find_by_keyword_(smartlist_t *s, directory_keyword keyword,$/;"	f	file:
find_cipher_by_id	src/common/tortls.c	/^find_cipher_by_id(const SSL *ssl, const SSL_METHOD *m, uint16_t cipher)$/;"	f	file:
find_dl_schedule_and_len	src/or/directory.c	/^find_dl_schedule_and_len(download_status_t *dls, int server)$/;"	f
find_element_starting_with	src/or/control.c	/^find_element_starting_with(smartlist_t *sl, int start_at, const char *prefix)$/;"	f	file:
find_expiring_intro_point	src/or/rendservice.c	/^find_expiring_intro_point(rend_service_t *service, origin_circuit_t *circ)$/;"	f	file:
find_intro_circuit	src/or/rendservice.c	/^find_intro_circuit(rend_intro_point_t *intro, const char *pk_digest)$/;"	f	file:
find_intro_point	src/or/rendservice.c	/^find_intro_point(origin_circuit_t *circ)$/;"	f	file:
find_largest_max	src/or/rephist.c	/^find_largest_max(bw_array_t *b)$/;"	f	file:
find_next_with	src/or/rephist.c	/^find_next_with(smartlist_t *sl, int i, const char *prefix)$/;"	f	file:
find_opt_by_keyword	src/or/routerparse.c	/^find_opt_by_keyword(smartlist_t *s, directory_keyword keyword)$/;"	f	file:
find_rp_for_intro	src/or/rendservice.c	/^find_rp_for_intro(const rend_intro_cell_t *intro,$/;"	f	file:
find_single_ipv6_orport	src/or/routerparse.c	/^find_single_ipv6_orport(const smartlist_t *list,$/;"	f	file:
find_start_of_next_microdesc	src/or/routerparse.c	/^find_start_of_next_microdesc(const char *s, const char *eos)$/;"	f	file:
find_start_of_next_router_or_extrainfo	src/or/routerparse.c	/^find_start_of_next_router_or_extrainfo(const char **s_ptr,$/;"	f	file:
find_start_of_next_routerstatus	src/or/routerparse.c	/^find_start_of_next_routerstatus(const char *s)$/;"	f	file:
find_str_at_start_of_line	src/common/util.c	/^find_str_at_start_of_line(const char *haystack, const char *needle)$/;"	f
find_torrc_filename	src/or/config.c	/^find_torrc_filename(config_line_t *cmd_arg,$/;"	f	file:
find_transport_name_by_bridge_addrport	src/or/entrynodes.c	/^find_transport_name_by_bridge_addrport(const tor_addr_t *addr, uint16_t port)$/;"	f
find_whitespace	src/common/util.c	/^find_whitespace(const char *s)$/;"	f
find_whitespace_eos	src/common/util.c	/^find_whitespace_eos(const char *s, const char *eos)$/;"	f
fingerprint_list	src/or/dirserv.c	/^static authdir_config_t *fingerprint_list = NULL;$/;"	v	file:
fingerprint_stack	src/or/or.h	/^  smartlist_t *fingerprint_stack;$/;"	m	struct:dir_connection_t
finish_daemon	src/common/util.c	/^finish_daemon(const char *cp)$/;"	f
finish_daemon	src/test/test_config.c	/^NS(finish_daemon)(const char *desired_cwd)$/;"	f
finish_daemon_called	src/common/util.c	/^static int finish_daemon_called = 0;$/;"	v	file:
finish_writing_to_file	src/common/util.c	/^finish_writing_to_file(open_file_t *file_data)$/;"	f
finish_writing_to_file_impl	src/common/util.c	/^finish_writing_to_file_impl(open_file_t *file_data, int abort_write)$/;"	f	file:
finished_channels	src/or/channel.c	/^static smartlist_t *finished_channels = NULL;$/;"	v	file:
finished_listeners	src/or/channel.c	/^static smartlist_t *finished_listeners = NULL;$/;"	v	file:
firewall_is_fascist_or	src/or/policies.c	/^firewall_is_fascist_or(void)$/;"	f
first	src/common/memarea.c	/^  memarea_chunk_t *first; \/**< Top of the chunk stack: never NULL. *\/$/;"	m	struct:memarea_t	file:
first	src/or/or.h	/^  char first[DIGEST_LEN];$/;"	m	struct:__anon65
fixed	src/or/channel.h	/^    } fixed;$/;"	m	union:cell_queue_entry_s::__anon92	typeref:struct:cell_queue_entry_s::__anon92::__anon93
fixed_circuit_finish_handshake	src/test/test_relay.c	/^fixed_circuit_finish_handshake(origin_circuit_t *circ, const created_cell_t *reply)$/;"	f	file:
fixed_circuit_finish_handshake_result	src/test/test_relay.c	/^static int fixed_circuit_finish_handshake_result = 0;$/;"	v	file:
fixed_circuit_send_next_onion_skin	src/test/test_relay.c	/^fixed_circuit_send_next_onion_skin(origin_circuit_t *circ)$/;"	f	file:
fixed_circuit_send_next_onion_skin_result	src/test/test_relay.c	/^static int fixed_circuit_send_next_onion_skin_result = 0;$/;"	v	file:
fixed_get_uname	src/test/test_options.c	/^fixed_get_uname(void)$/;"	f	file:
fixed_get_uname_result	src/test/test_options.c	/^static char *fixed_get_uname_result = NULL;$/;"	v	file:
fixed_networkstatus_get_latest_consensus	src/test/test_relay.c	/^fixed_networkstatus_get_latest_consensus(void)$/;"	f	file:
fixed_networkstatus_get_latest_consensus_result	src/test/test_relay.c	/^static networkstatus_t *fixed_networkstatus_get_latest_consensus_result = NULL;$/;"	v	file:
fixed_pub_cmp	src/test/test_tortls.c	/^fixed_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)$/;"	f	file:
fixed_ssl_pending	src/test/test_tortls.c	/^fixed_ssl_pending(const SSL *ignored)$/;"	f	file:
fixed_ssl_pending_result	src/test/test_tortls.c	/^static int fixed_ssl_pending_result = 0;$/;"	v	file:
fixed_try_to_extract_certs_from_tls	src/test/test_tortls.c	/^fixed_try_to_extract_certs_from_tls(int severity, tor_tls_t *tls, X509 **cert_out, X509 **id_cert_out)$/;"	f	file:
fixed_try_to_extract_certs_from_tls_cert_out_result	src/test/test_tortls.c	/^static X509 *fixed_try_to_extract_certs_from_tls_cert_out_result = NULL;$/;"	v	file:
fixed_try_to_extract_certs_from_tls_id_cert_out_result	src/test/test_tortls.c	/^static X509 *fixed_try_to_extract_certs_from_tls_id_cert_out_result = NULL;$/;"	v	file:
fixedbytes0	src/trunnel/pwbox.h	/^  uint32_t fixedbytes0;$/;"	m	struct:pwbox_encoded_st
fixedbytes1	src/trunnel/pwbox.h	/^  uint32_t fixedbytes1;$/;"	m	struct:pwbox_encoded_st
flags	src/ext/eventdns.h	/^	int flags;$/;"	m	struct:evdns_server_request
flags	src/ext/tinytest.h	/^	unsigned long flags; \/**< Bitfield of TT_* flags. *\/$/;"	m	struct:testcase_t
flags	src/or/connection_edge.h	/^  uint32_t flags;$/;"	m	struct:begin_cell_t
flags	src/or/or.h	/^  uint64_t flags; \/**< Bit-field for all recognized flags; index into$/;"	m	struct:vote_routerstatus_t
flavor	src/or/or.h	/^  consensus_flavor_t flavor; \/**< If a consensus, what kind? *\/$/;"	m	struct:networkstatus_t
flush_buf	src/or/buffers.c	/^flush_buf(tor_socket_t s, buf_t *buf, size_t sz, size_t *buf_flushlen)$/;"	f
flush_buf_tls	src/or/buffers.c	/^flush_buf_tls(tor_tls_t *tls, buf_t *buf, size_t flushlen,$/;"	f
flush_chunk	src/or/buffers.c	/^flush_chunk(tor_socket_t s, buf_t *buf, chunk_t *chunk, size_t sz,$/;"	f	file:
flush_chunk_tls	src/or/buffers.c	/^flush_chunk_tls(tor_tls_t *tls, buf_t *buf, chunk_t *chunk,$/;"	f	file:
flush_log_messages_from_startup	src/common/log.c	/^flush_log_messages_from_startup(void)$/;"	f
flush_mock_channel_t	src/test/test_scheduler.c	/^} flush_mock_channel_t;$/;"	t	typeref:struct:__anon113	file:
flush_pending_log_callbacks	src/common/log.c	/^flush_pending_log_callbacks(void)$/;"	f
flush_queued_event_pending	src/or/control.c	/^static int flush_queued_event_pending = 0;$/;"	v	file:
flush_queued_events_cb	src/or/control.c	/^flush_queued_events_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	file:
flush_queued_events_event	src/or/control.c	/^static struct event *flush_queued_events_event = NULL;$/;"	v	typeref:struct:event	file:
fmonty	src/ext/curve25519_donna/curve25519-donna-c64.c	/^fmonty(limb *x2, limb *z2, \/* output 2Q *\/$/;"	f	file:
fmt_addr	src/common/address.h	/^#define fmt_addr(/;"	d
fmt_addr32	src/common/address.c	/^fmt_addr32(uint32_t addr)$/;"	f
fmt_addr_impl	src/common/address.c	/^fmt_addr_impl(const tor_addr_t *addr, int decorate)$/;"	f
fmt_addrport	src/common/address.c	/^fmt_addrport(const tor_addr_t *addr, uint16_t port)$/;"	f
fmt_and_decorate_addr	src/common/address.h	/^#define fmt_and_decorate_addr(/;"	d
fmul	src/ext/curve25519_donna/curve25519-donna-c64.c	/^fmul(felem output, const felem in2, const felem in) {$/;"	f	file:
fn	src/common/workqueue.c	/^  workqueue_reply_t (*fn)(void *state, void *arg);$/;"	m	struct:workqueue_entry_s	file:
fn	src/ext/tinytest.h	/^	testcase_fn fn; \/**< The function to run to implement this case. *\/$/;"	m	struct:testcase_t
fn	src/or/control.c	/^  getinfo_helper_t fn; \/**< The function that knows the answer: NULL if$/;"	m	struct:getinfo_item_t	file:
fn	src/test/bench.c	/^  bench_fn fn;$/;"	m	struct:benchmark_t	file:
fname_base	src/or/or.h	/^  const char *fname_base;$/;"	m	struct:desc_store_t
force_inline	src/ext/curve25519_donna/curve25519-donna-c64.c	/^#define force_inline /;"	d	file:
force_inline	src/ext/curve25519_donna/curve25519-donna-c64.c	/^#undef force_inline$/;"	d	file:
format_bridge_stats_controller	src/or/geoip.c	/^format_bridge_stats_controller(time_t now)$/;"	f	file:
format_cell_stats	src/or/control.c	/^format_cell_stats(char **event_string, circuit_t *circ,$/;"	f
format_client_stats_heartbeat	src/or/geoip.c	/^format_client_stats_heartbeat(time_t now)$/;"	f
format_dec_number_sigsafe	src/common/util.c	/^format_dec_number_sigsafe(unsigned long x, char *buf, int buf_len)$/;"	f
format_helper_exit_status	src/common/util.c	/^format_helper_exit_status(unsigned char child_state, int saved_errno,$/;"	f
format_hex_number_sigsafe	src/common/util.c	/^format_hex_number_sigsafe(unsigned long x, char *buf, int buf_len)$/;"	f
format_iso_time	src/common/util.c	/^format_iso_time(char *buf, time_t t)$/;"	f
format_iso_time_nospace	src/common/util.c	/^format_iso_time_nospace(char *buf, time_t t)$/;"	f
format_iso_time_nospace_usec	src/common/util.c	/^format_iso_time_nospace_usec(char *buf, const struct timeval *tv)$/;"	f
format_local_iso_time	src/common/util.c	/^format_local_iso_time(char *buf, time_t t)$/;"	f
format_msg	src/common/log.c	/^format_msg(char *buf, size_t buf_len,$/;"	f	file:
format_networkstatus_vote	src/or/dirvote.c	/^format_networkstatus_vote(crypto_pk_t *private_signing_key,$/;"	f
format_node_description	src/or/router.c	/^format_node_description(char *buf,$/;"	f
format_number_sigsafe	src/common/util.c	/^format_number_sigsafe(unsigned long x, char *buf, int buf_len,$/;"	f	file:
format_rfc1123_time	src/common/util.c	/^format_rfc1123_time(char *buf, time_t t)$/;"	f
format_time_interval	src/common/util.c	/^format_time_interval(char *out, size_t out_len, long interval)$/;"	f
format_versions_list	src/or/dirserv.c	/^format_versions_list(config_line_t *ln)$/;"	f	file:
format_win32_error	src/common/compat.c	/^format_win32_error(DWORD err)$/;"	f
format_win_cmdline_argument	src/common/util.c	/^format_win_cmdline_argument(const char *arg)$/;"	f	file:
fourP0	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^static const uint32_t fourP0      = 0x0fffffb4;$/;"	v
fourP0	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^static const uint64_t fourP0     = 0x1fffffffffffb4;$/;"	v
fourP1234	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^static const uint64_t fourP1234  = 0x1ffffffffffffc;$/;"	v
fourP13579	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^static const uint32_t fourP13579  = 0x07fffffc;$/;"	v
fourP2468	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^static const uint32_t fourP2468   = 0x0ffffffc;$/;"	v
fp_by_name	src/or/dirserv.c	/^  strmap_t *fp_by_name; \/**< Map from lc nickname to fingerprint. *\/$/;"	m	struct:authdir_config_t	file:
fp_pair_map_assert_ok	src/or/fp_pair.c	/^fp_pair_map_assert_ok(const fp_pair_map_t *map)$/;"	f
fp_pair_map_entries_eq	src/or/fp_pair.c	/^fp_pair_map_entries_eq(const fp_pair_map_entry_t *a,$/;"	f	file:
fp_pair_map_entry_hash	src/or/fp_pair.c	/^fp_pair_map_entry_hash(const fp_pair_map_entry_t *a)$/;"	f	file:
fp_pair_map_entry_s	src/or/fp_pair.c	/^struct fp_pair_map_entry_s {$/;"	s	file:
fp_pair_map_entry_t	src/or/fp_pair.h	/^typedef struct fp_pair_map_entry_s fp_pair_map_entry_t;$/;"	t	typeref:struct:fp_pair_map_entry_s
fp_pair_map_free	src/or/fp_pair.c	/^fp_pair_map_free(fp_pair_map_t *map, void (*free_val)(void*))$/;"	f
fp_pair_map_get	src/or/fp_pair.c	/^fp_pair_map_get(const fp_pair_map_t *map, const fp_pair_t *key)$/;"	f
fp_pair_map_get_by_digests	src/or/fp_pair.c	/^fp_pair_map_get_by_digests(const fp_pair_map_t *map,$/;"	f
fp_pair_map_isempty	src/or/fp_pair.c	/^fp_pair_map_isempty(const fp_pair_map_t *map)$/;"	f
fp_pair_map_iter_done	src/or/fp_pair.c	/^fp_pair_map_iter_done(fp_pair_map_iter_t *iter)$/;"	f
fp_pair_map_iter_get	src/or/fp_pair.c	/^fp_pair_map_iter_get(fp_pair_map_iter_t *iter,$/;"	f
fp_pair_map_iter_init	src/or/fp_pair.c	/^fp_pair_map_iter_init(fp_pair_map_t *map)$/;"	f
fp_pair_map_iter_next	src/or/fp_pair.c	/^fp_pair_map_iter_next(fp_pair_map_t *map, fp_pair_map_iter_t *iter)$/;"	f
fp_pair_map_iter_next_rmv	src/or/fp_pair.c	/^fp_pair_map_iter_next_rmv(fp_pair_map_t *map, fp_pair_map_iter_t *iter)$/;"	f
fp_pair_map_iter_t	src/or/fp_pair.h	/^typedef fp_pair_map_entry_t *fp_pair_map_iter_t;$/;"	t
fp_pair_map_remove	src/or/fp_pair.c	/^fp_pair_map_remove(fp_pair_map_t *map, const fp_pair_t *key)$/;"	f
fp_pair_map_s	src/or/fp_pair.c	/^struct fp_pair_map_s {$/;"	s	file:
fp_pair_map_set	src/or/fp_pair.c	/^fp_pair_map_set(fp_pair_map_t *map, const fp_pair_t *key, void *val)$/;"	f
fp_pair_map_set_by_digests	src/or/fp_pair.c	/^fp_pair_map_set_by_digests(fp_pair_map_t *map,$/;"	f
fp_pair_map_size	src/or/fp_pair.c	/^fp_pair_map_size(const fp_pair_map_t *map)$/;"	f
fp_pair_map_t	src/or/fp_pair.h	/^typedef struct fp_pair_map_s fp_pair_map_t;$/;"	t	typeref:struct:fp_pair_map_s
fp_pair_t	src/or/or.h	/^} fp_pair_t;$/;"	t	typeref:struct:__anon65
frac_nodes_with_descriptors	src/or/routerlist.c	/^frac_nodes_with_descriptors(const smartlist_t *sl,$/;"	f
fragile	src/or/or.h	/^  unsigned int fragile:1;$/;"	m	struct:config_line_t
free	src/or/channel.h	/^  void (*free)(channel_listener_t *);$/;"	m	struct:channel_listener_s
free	src/or/channel.h	/^  void (*free)(channel_t *);$/;"	m	struct:channel_s
free_cached_dir_	src/or/dirserv.c	/^free_cached_dir_(void *_d)$/;"	f	file:
free_cached_resolve_	src/or/dns.c	/^free_cached_resolve_(cached_resolve_t *r)$/;"	f	file:
free_circ_data	src/or/circuitmux.h	/^  void (*free_circ_data)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
free_cmux_data	src/or/circuitmux.h	/^  void (*free_cmux_data)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
free_execve_args	src/or/transports.c	/^free_execve_args(char **arg)$/;"	f
free_fake_channel	src/test/test_channel.c	/^free_fake_channel(channel_t *chan)$/;"	f
free_link_history_	src/or/rephist.c	/^free_link_history_(void *val)$/;"	f	file:
free_options_test_data	src/test/test_options.c	/^free_options_test_data(options_test_data_t *td)$/;"	f	file:
free_or_history	src/or/rephist.c	/^free_or_history(void *_hist)$/;"	f	file:
free_pregenerated_keys	src/test/testing_common.c	/^free_pregenerated_keys(void)$/;"	f	file:
free_state	src/test/test_workqueue.c	/^free_state(void *arg)$/;"	f	file:
free_thread_state_fn	src/common/workqueue.c	/^  void (*free_thread_state_fn)(void*);$/;"	m	struct:threadpool_s	file:
free_update_arg_fn	src/common/workqueue.c	/^  void (*free_update_arg_fn)(void *);$/;"	m	struct:threadpool_s	file:
freelist	src/common/memarea.c	/^static memarea_chunk_t *freelist = NULL;$/;"	v	file:
freelist_len	src/common/memarea.c	/^static int freelist_len=0;$/;"	v	file:
fresh_until	src/or/or.h	/^  time_t fresh_until; \/**< Time before which this is the most recent vote or$/;"	m	struct:networkstatus_t
fresh_until	src/or/or.h	/^  time_t fresh_until;$/;"	m	struct:ns_detached_signatures_t
fscalar_product	src/ext/curve25519_donna/curve25519-donna-c64.c	/^fscalar_product(felem output, const felem in, const limb scalar) {$/;"	f	file:
fsquare_times	src/ext/curve25519_donna/curve25519-donna-c64.c	/^fsquare_times(felem output, const felem in, limb count) {$/;"	f	file:
fsum	src/ext/curve25519_donna/curve25519-donna-c64.c	/^fsum(limb *output, const limb *in) {$/;"	f	file:
full	src/or/confparse.h	/^  const char *full;$/;"	m	struct:config_abbrev_t
fullmsg	src/common/log.c	/^  char *fullmsg; \/**< The message, with all decorations *\/$/;"	m	struct:pending_log_message_t	file:
func	src/common/compat_pthreads.c	/^  void (*func)(void *);$/;"	m	struct:tor_pthread_data_t	file:
ge25519	src/ext/ed25519/donna/ed25519-donna.h	/^} ge25519;$/;"	t	typeref:struct:ge25519_t
ge25519_add	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_add(ge25519 *r, const ge25519 *p,  const ge25519 *q) {$/;"	f
ge25519_add	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_add(ge25519 *r, const ge25519 *p, const ge25519 *q) {$/;"	f
ge25519_add_p1p1	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_add_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519 *q) {$/;"	f
ge25519_add_p1p1	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_add_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519 *q) {$/;"	f
ge25519_basepoint	src/ext/ed25519/donna/ed25519-donna-64bit-tables.h	/^static const ge25519 ge25519_basepoint = {$/;"	v
ge25519_double	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_double(ge25519 *r, const ge25519 *p) {$/;"	f
ge25519_double	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_double(ge25519 *r, const ge25519 *p) {$/;"	f
ge25519_double_p1p1	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_double_p1p1(ge25519_p1p1 *r, const ge25519 *p) {$/;"	f
ge25519_double_p1p1	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_double_p1p1(ge25519_p1p1 *r, const ge25519 *p) {$/;"	f
ge25519_double_partial	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_double_partial(ge25519 *r, const ge25519 *p) {$/;"	f
ge25519_double_partial	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_double_partial(ge25519 *r, const ge25519 *p) {$/;"	f
ge25519_double_scalarmult_vartime	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_double_scalarmult_vartime(ge25519 *r, const ge25519 *p1, const bignum256modm s1, const bignum256modm s2) {$/;"	f
ge25519_double_scalarmult_vartime	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_double_scalarmult_vartime(ge25519 *r, const ge25519 *p1, const bignum256modm s1, const bignum256modm s2) {$/;"	f
ge25519_ec2d	src/ext/ed25519/donna/ed25519-donna-64bit-tables.h	/^static const bignum25519 ge25519_ec2d = {$/;"	v
ge25519_ecd	src/ext/ed25519/donna/ed25519-donna-64bit-tables.h	/^static const bignum25519 ge25519_ecd = {$/;"	v
ge25519_full_to_pniels	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_full_to_pniels(ge25519_pniels *p, const ge25519 *r) {$/;"	f
ge25519_full_to_pniels	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_full_to_pniels(ge25519_pniels *p, const ge25519 *r) {$/;"	f
ge25519_is_neutral_vartime	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^ge25519_is_neutral_vartime(const ge25519 *p) {$/;"	f
ge25519_multi_scalarmult_vartime	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^ge25519_multi_scalarmult_vartime(ge25519 *r, batch_heap *heap, size_t count) {$/;"	f
ge25519_multi_scalarmult_vartime_final	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^ge25519_multi_scalarmult_vartime_final(ge25519 *r, ge25519 *point, bignum256modm scalar) {$/;"	f
ge25519_niels	src/ext/ed25519/donna/ed25519-donna.h	/^} ge25519_niels;$/;"	t	typeref:struct:ge25519_niels_t
ge25519_niels_sliding_multiples	src/ext/ed25519/donna/ed25519-donna-64bit-tables.h	/^static const ge25519_niels ge25519_niels_sliding_multiples[32] = {$/;"	v
ge25519_niels_t	src/ext/ed25519/donna/ed25519-donna.h	/^typedef struct ge25519_niels_t {$/;"	s
ge25519_nielsadd2	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_nielsadd2(ge25519 *r, const ge25519_niels *q) {$/;"	f
ge25519_nielsadd2	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_nielsadd2(ge25519 *r, const ge25519_niels *q) {$/;"	f
ge25519_nielsadd2_p1p1	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_nielsadd2_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519_niels *q, unsigned char signbit) {$/;"	f
ge25519_nielsadd2_p1p1	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_nielsadd2_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519_niels *q, unsigned char signbit) {$/;"	f
ge25519_p1p1	src/ext/ed25519/donna/ed25519-donna.h	/^} ge25519_p1p1;$/;"	t	typeref:struct:ge25519_p1p1_t
ge25519_p1p1_t	src/ext/ed25519/donna/ed25519-donna.h	/^typedef struct ge25519_p1p1_t {$/;"	s
ge25519_p1p1_to_full	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_p1p1_to_full(ge25519 *r, const ge25519_p1p1 *p) {$/;"	f
ge25519_p1p1_to_full	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_p1p1_to_full(ge25519 *r, const ge25519_p1p1 *p) {$/;"	f
ge25519_p1p1_to_partial	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_p1p1_to_partial(ge25519 *r, const ge25519_p1p1 *p) {$/;"	f
ge25519_p1p1_to_partial	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_p1p1_to_partial(ge25519 *r, const ge25519_p1p1 *p) {$/;"	f
ge25519_pack	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_pack(unsigned char r[32], const ge25519 *p) {$/;"	f
ge25519_pack	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_pack(unsigned char r[32], const ge25519 *p) {$/;"	f
ge25519_pniels	src/ext/ed25519/donna/ed25519-donna.h	/^} ge25519_pniels;$/;"	t	typeref:struct:ge25519_pniels_t
ge25519_pniels_t	src/ext/ed25519/donna/ed25519-donna.h	/^typedef struct ge25519_pniels_t {$/;"	s
ge25519_pnielsadd	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_pnielsadd(ge25519_pniels *r, const ge25519 *p, const ge25519_pniels *q) {$/;"	f
ge25519_pnielsadd	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_pnielsadd(ge25519_pniels *r, const ge25519 *p, const ge25519_pniels *q) {$/;"	f
ge25519_pnielsadd_p1p1	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_pnielsadd_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519_pniels *q, unsigned char signbit) {$/;"	f
ge25519_pnielsadd_p1p1	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_pnielsadd_p1p1(ge25519_p1p1 *r, const ge25519 *p, const ge25519_pniels *q, unsigned char signbit) {$/;"	f
ge25519_scalarmult_base_choose_niels	src/ext/ed25519/donna/ed25519-donna-32bit-sse2.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	src/ext/ed25519/donna/ed25519-donna-64bit-sse2.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	src/ext/ed25519/donna/ed25519-donna-64bit-x86-32bit.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	src/ext/ed25519/donna/ed25519-donna-64bit-x86.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_choose_niels	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_scalarmult_base_choose_niels(ge25519_niels *t, const uint8_t table[256][96], uint32_t pos, signed char b) {$/;"	f
ge25519_scalarmult_base_niels	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_scalarmult_base_niels(ge25519 *r, const uint8_t basepoint_table[256][96], const bignum256modm s) {$/;"	f
ge25519_scalarmult_base_niels	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_scalarmult_base_niels(ge25519 *r, const uint8_t table[256][96], const bignum256modm s) {$/;"	f
ge25519_sqrtneg1	src/ext/ed25519/donna/ed25519-donna-64bit-tables.h	/^static const bignum25519 ge25519_sqrtneg1 = {$/;"	v
ge25519_t	src/ext/ed25519/donna/ed25519-donna.h	/^typedef struct ge25519_t {$/;"	s
ge25519_unpack_negative_vartime	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_unpack_negative_vartime(ge25519 *r, const unsigned char p[32]) {$/;"	f
ge25519_unpack_negative_vartime	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_unpack_negative_vartime(ge25519 *r, const unsigned char p[32]) {$/;"	f
ge25519_windowb_equal	src/ext/ed25519/donna/ed25519-donna-impl-base.h	/^ge25519_windowb_equal(uint32_t b, uint32_t c) {$/;"	f
ge25519_windowb_equal	src/ext/ed25519/donna/ed25519-donna-impl-sse2.h	/^ge25519_windowb_equal(uint32_t b, uint32_t c) {$/;"	f
ge_add	src/ext/ed25519/ref10/ge.h	/^#define ge_add /;"	d
ge_add	src/ext/ed25519/ref10/ge_add.c	/^void ge_add(ge_p1p1 *r,const ge_p3 *p,const ge_cached *q)$/;"	f
ge_cached	src/ext/ed25519/ref10/ge.h	/^} ge_cached;$/;"	t	typeref:struct:__anon105
ge_double_scalarmult_vartime	src/ext/ed25519/ref10/ge.h	/^#define ge_double_scalarmult_vartime /;"	d
ge_double_scalarmult_vartime	src/ext/ed25519/ref10/ge_double_scalarmult.c	/^void ge_double_scalarmult_vartime(ge_p2 *r,const unsigned char *a,const ge_p3 *A,const unsigned char *b)$/;"	f
ge_frombytes_negate_vartime	src/ext/ed25519/ref10/ge.h	/^#define ge_frombytes_negate_vartime /;"	d
ge_frombytes_negate_vartime	src/ext/ed25519/ref10/ge_frombytes.c	/^int ge_frombytes_negate_vartime(ge_p3 *h,const unsigned char *s)$/;"	f
ge_madd	src/ext/ed25519/ref10/ge.h	/^#define ge_madd /;"	d
ge_madd	src/ext/ed25519/ref10/ge_madd.c	/^void ge_madd(ge_p1p1 *r,const ge_p3 *p,const ge_precomp *q)$/;"	f
ge_msub	src/ext/ed25519/ref10/ge.h	/^#define ge_msub /;"	d
ge_msub	src/ext/ed25519/ref10/ge_msub.c	/^void ge_msub(ge_p1p1 *r,const ge_p3 *p,const ge_precomp *q)$/;"	f
ge_p1p1	src/ext/ed25519/ref10/ge.h	/^} ge_p1p1;$/;"	t	typeref:struct:__anon103
ge_p1p1_to_p2	src/ext/ed25519/ref10/ge.h	/^#define ge_p1p1_to_p2 /;"	d
ge_p1p1_to_p2	src/ext/ed25519/ref10/ge_p1p1_to_p2.c	/^extern void ge_p1p1_to_p2(ge_p2 *r,const ge_p1p1 *p)$/;"	f
ge_p1p1_to_p3	src/ext/ed25519/ref10/ge.h	/^#define ge_p1p1_to_p3 /;"	d
ge_p1p1_to_p3	src/ext/ed25519/ref10/ge_p1p1_to_p3.c	/^extern void ge_p1p1_to_p3(ge_p3 *r,const ge_p1p1 *p)$/;"	f
ge_p2	src/ext/ed25519/ref10/ge.h	/^} ge_p2;$/;"	t	typeref:struct:__anon101
ge_p2_0	src/ext/ed25519/ref10/ge.h	/^#define ge_p2_0 /;"	d
ge_p2_0	src/ext/ed25519/ref10/ge_p2_0.c	/^void ge_p2_0(ge_p2 *h)$/;"	f
ge_p2_dbl	src/ext/ed25519/ref10/ge.h	/^#define ge_p2_dbl /;"	d
ge_p2_dbl	src/ext/ed25519/ref10/ge_p2_dbl.c	/^void ge_p2_dbl(ge_p1p1 *r,const ge_p2 *p)$/;"	f
ge_p3	src/ext/ed25519/ref10/ge.h	/^} ge_p3;$/;"	t	typeref:struct:__anon102
ge_p3_0	src/ext/ed25519/ref10/ge.h	/^#define ge_p3_0 /;"	d
ge_p3_0	src/ext/ed25519/ref10/ge_p3_0.c	/^void ge_p3_0(ge_p3 *h)$/;"	f
ge_p3_dbl	src/ext/ed25519/ref10/ge.h	/^#define ge_p3_dbl /;"	d
ge_p3_dbl	src/ext/ed25519/ref10/ge_p3_dbl.c	/^void ge_p3_dbl(ge_p1p1 *r,const ge_p3 *p)$/;"	f
ge_p3_to_cached	src/ext/ed25519/ref10/ge.h	/^#define ge_p3_to_cached /;"	d
ge_p3_to_cached	src/ext/ed25519/ref10/ge_p3_to_cached.c	/^extern void ge_p3_to_cached(ge_cached *r,const ge_p3 *p)$/;"	f
ge_p3_to_p2	src/ext/ed25519/ref10/ge.h	/^#define ge_p3_to_p2 /;"	d
ge_p3_to_p2	src/ext/ed25519/ref10/ge_p3_to_p2.c	/^extern void ge_p3_to_p2(ge_p2 *r,const ge_p3 *p)$/;"	f
ge_p3_tobytes	src/ext/ed25519/ref10/ge.h	/^#define ge_p3_tobytes /;"	d
ge_p3_tobytes	src/ext/ed25519/ref10/ge_p3_tobytes.c	/^void ge_p3_tobytes(unsigned char *s,const ge_p3 *h)$/;"	f
ge_precomp	src/ext/ed25519/ref10/ge.h	/^} ge_precomp;$/;"	t	typeref:struct:__anon104
ge_precomp_0	src/ext/ed25519/ref10/ge.h	/^#define ge_precomp_0 /;"	d
ge_precomp_0	src/ext/ed25519/ref10/ge_precomp_0.c	/^void ge_precomp_0(ge_precomp *h)$/;"	f
ge_scalarmult_base	src/ext/ed25519/ref10/ge.h	/^#define ge_scalarmult_base /;"	d
ge_scalarmult_base	src/ext/ed25519/ref10/ge_scalarmult_base.c	/^void ge_scalarmult_base(ge_p3 *h,const unsigned char *a)$/;"	f
ge_sub	src/ext/ed25519/ref10/ge.h	/^#define ge_sub /;"	d
ge_sub	src/ext/ed25519/ref10/ge_sub.c	/^void ge_sub(ge_p1p1 *r,const ge_p3 *p,const ge_cached *q)$/;"	f
ge_tobytes	src/ext/ed25519/ref10/ge.h	/^#define ge_tobytes /;"	d
ge_tobytes	src/ext/ed25519/ref10/ge_tobytes.c	/^void ge_tobytes(unsigned char *s,const ge_p2 *h)$/;"	f
gen_routerstatus_for_umbw	src/test/test_dir.c	/^gen_routerstatus_for_umbw(int idx, time_t now)$/;"	f	file:
gen_routerstatus_for_v3ns	src/test/test_dir.c	/^gen_routerstatus_for_v3ns(int idx, time_t now)$/;"	f	file:
gen_vote_routerstatus_for_tests	src/test/test_guardfraction.c	/^gen_vote_routerstatus_for_tests(const char *digest_in_hex, int is_guard)$/;"	f	file:
generate_certificate	src/tools/tor-gencert.c	/^generate_certificate(void)$/;"	f	file:
generate_desc	src/test/rend_test_helpers.c	/^generate_desc(int time_diff, rend_encoded_v2_service_descriptor_t **desc, char **service_id, int intro_points)$/;"	f
generate_ed_link_cert	src/or/routerkeys.c	/^generate_ed_link_cert(const or_options_t *options, time_t now)$/;"	f
generate_key	src/tools/tor-gencert.c	/^generate_key(int bits)$/;"	f	file:
generate_ri_from_rs	src/test/test_dir.c	/^generate_ri_from_rs(const vote_routerstatus_t *vrs)$/;"	f	file:
generate_signing_key	src/tools/tor-gencert.c	/^generate_signing_key(void)$/;"	f	file:
generation	src/common/workqueue.c	/^  unsigned generation;$/;"	m	struct:threadpool_s	file:
generation	src/common/workqueue.c	/^  unsigned generation;$/;"	m	struct:workerthread_s	file:
generation	src/or/cpuworker.c	/^  int generation;$/;"	m	struct:worker_state_s	file:
generic_buffer_add	src/or/buffers.h	/^#define generic_buffer_add(/;"	d
generic_buffer_clear	src/or/buffers.h	/^#define generic_buffer_clear(/;"	d
generic_buffer_fetch_ext_or_cmd	src/or/buffers.h	/^#define generic_buffer_fetch_ext_or_cmd(/;"	d
generic_buffer_free	src/or/buffers.h	/^#define generic_buffer_free(/;"	d
generic_buffer_get	src/or/buffers.h	/^#define generic_buffer_get(/;"	d
generic_buffer_len	src/or/buffers.h	/^#define generic_buffer_len(/;"	d
generic_buffer_new	src/or/buffers.h	/^#define generic_buffer_new(/;"	d
generic_buffer_set_to_copy	src/or/buffers.c	/^generic_buffer_set_to_copy(generic_buffer_t **output,$/;"	f
generic_buffer_t	src/or/or.h	/^#define generic_buffer_t /;"	d
geoip6_digest	src/or/geoip.c	/^static char geoip6_digest[DIGEST_LEN];$/;"	v	file:
geoip_add_entry	src/or/geoip.c	/^geoip_add_entry(const tor_addr_t *low, const tor_addr_t *high,$/;"	f	file:
geoip_bridge_stats_init	src/or/geoip.c	/^geoip_bridge_stats_init(time_t now)$/;"	f
geoip_bridge_stats_term	src/or/geoip.c	/^geoip_bridge_stats_term(void)$/;"	f
geoip_bridge_stats_write	src/or/geoip.c	/^geoip_bridge_stats_write(time_t now)$/;"	f
geoip_change_dirreq_state	src/or/geoip.c	/^geoip_change_dirreq_state(uint64_t dirreq_id, dirreq_type_t type,$/;"	f
geoip_client_action_t	src/or/or.h	/^} geoip_client_action_t;$/;"	t	typeref:enum:__anon67
geoip_countries	src/or/geoip.c	/^static smartlist_t *geoip_countries = NULL;$/;"	v	file:
geoip_country_t	src/or/geoip.c	/^typedef struct geoip_country_t {$/;"	s	file:
geoip_country_t	src/or/geoip.c	/^} geoip_country_t;$/;"	t	typeref:struct:geoip_country_t	file:
geoip_db_digest	src/or/geoip.c	/^geoip_db_digest(sa_family_t family)$/;"	f
geoip_digest	src/or/geoip.c	/^static char geoip_digest[DIGEST_LEN];$/;"	v	file:
geoip_dirreq_stats_init	src/or/geoip.c	/^geoip_dirreq_stats_init(time_t now)$/;"	f
geoip_dirreq_stats_term	src/test/test_config.c	/^NS(geoip_dirreq_stats_term)(void)$/;"	f	file:
geoip_dirreq_stats_write	src/or/geoip.c	/^geoip_dirreq_stats_write(time_t now)$/;"	f
geoip_entry_stats_init	src/or/geoip.c	/^geoip_entry_stats_init(time_t now)$/;"	f
geoip_entry_stats_term	src/or/geoip.c	/^geoip_entry_stats_term(void)$/;"	f
geoip_entry_stats_write	src/or/geoip.c	/^geoip_entry_stats_write(time_t now)$/;"	f
geoip_format_bridge_stats	src/or/geoip.c	/^geoip_format_bridge_stats(time_t now)$/;"	f
geoip_format_dirreq_stats	src/or/geoip.c	/^geoip_format_dirreq_stats(time_t now)$/;"	f
geoip_format_entry_stats	src/or/geoip.c	/^geoip_format_entry_stats(time_t now)$/;"	f
geoip_free_all	src/or/geoip.c	/^geoip_free_all(void)$/;"	f
geoip_get_bridge_stats_controller	src/or/geoip.c	/^geoip_get_bridge_stats_controller(time_t now)$/;"	f
geoip_get_bridge_stats_extrainfo	src/or/geoip.c	/^geoip_get_bridge_stats_extrainfo(time_t now)$/;"	f
geoip_get_client_history	src/or/geoip.c	/^geoip_get_client_history(geoip_client_action_t action,$/;"	f
geoip_get_country	src/test/test_options.c	/^NS(geoip_get_country)(const char *countrycode)$/;"	f	file:
geoip_get_country	src/test/test_routerset.c	/^NS(geoip_get_country)(const char *country)$/;"	f
geoip_get_country	src/test/test_routerset.c	/^NS(geoip_get_country)(const char *countrycode)$/;"	f	file:
geoip_get_country_by_addr	src/test/test_dir_handle_get.c	/^NS(geoip_get_country_by_addr)(const tor_addr_t *addr)$/;"	f
geoip_get_country_by_addr	src/test/test_routerset.c	/^NS(geoip_get_country_by_addr)(const tor_addr_t *addr)$/;"	f
geoip_get_country_by_ipv4	src/or/geoip.c	/^geoip_get_country_by_ipv4(uint32_t ipaddr)$/;"	f
geoip_get_country_by_ipv6	src/or/geoip.c	/^geoip_get_country_by_ipv6(const struct in6_addr *addr)$/;"	f
geoip_get_country_name	src/or/geoip.c	/^geoip_get_country_name(country_t num)$/;"	f
geoip_get_dirreq_history	src/or/geoip.c	/^geoip_get_dirreq_history(dirreq_type_t type)$/;"	f	file:
geoip_get_n_countries	src/test/test_routerset.c	/^NS(geoip_get_n_countries)(void)$/;"	f	file:
geoip_get_request_history	src/or/geoip.c	/^geoip_get_request_history(void)$/;"	f
geoip_get_transport_history	src/or/geoip.c	/^geoip_get_transport_history(void)$/;"	f
geoip_ipv4_compare_entries_	src/or/geoip.c	/^geoip_ipv4_compare_entries_(const void **_a, const void **_b)$/;"	f	file:
geoip_ipv4_compare_key_to_entry_	src/or/geoip.c	/^geoip_ipv4_compare_key_to_entry_(const void *_key, const void **_member)$/;"	f	file:
geoip_ipv4_entries	src/or/geoip.c	/^static smartlist_t *geoip_ipv4_entries = NULL, *geoip_ipv6_entries = NULL;$/;"	v	file:
geoip_ipv4_entry_t	src/or/geoip.c	/^typedef struct geoip_ipv4_entry_t {$/;"	s	file:
geoip_ipv4_entry_t	src/or/geoip.c	/^} geoip_ipv4_entry_t;$/;"	t	typeref:struct:geoip_ipv4_entry_t	file:
geoip_ipv6_compare_entries_	src/or/geoip.c	/^geoip_ipv6_compare_entries_(const void **_a, const void **_b)$/;"	f	file:
geoip_ipv6_compare_key_to_entry_	src/or/geoip.c	/^geoip_ipv6_compare_key_to_entry_(const void *_key, const void **_member)$/;"	f	file:
geoip_ipv6_entries	src/or/geoip.c	/^static smartlist_t *geoip_ipv4_entries = NULL, *geoip_ipv6_entries = NULL;$/;"	v	file:
geoip_ipv6_entry_t	src/or/geoip.c	/^typedef struct geoip_ipv6_entry_t {$/;"	s	file:
geoip_ipv6_entry_t	src/or/geoip.c	/^} geoip_ipv6_entry_t;$/;"	t	typeref:struct:geoip_ipv6_entry_t	file:
geoip_is_loaded	src/test/test_config.c	/^NS(geoip_is_loaded)(sa_family_t family)$/;"	f	file:
geoip_is_loaded	src/test/test_routerset.c	/^NS(geoip_is_loaded)(sa_family_t family)$/;"	f
geoip_is_loaded	src/test/test_routerset.c	/^NS(geoip_is_loaded)(sa_family_t family)$/;"	f	file:
geoip_load_file	src/or/geoip.c	/^geoip_load_file(sa_family_t family, const char *filename)$/;"	f
geoip_note_client_seen	src/or/geoip.c	/^geoip_note_client_seen(geoip_client_action_t action,$/;"	f
geoip_note_ns_response	src/or/geoip.c	/^geoip_note_ns_response(geoip_ns_response_t response)$/;"	f
geoip_ns_response_t	src/or/or.h	/^} geoip_ns_response_t;$/;"	t	typeref:enum:__anon68
geoip_parse_entry	src/or/geoip.c	/^geoip_parse_entry(const char *line, sa_family_t family)$/;"	f
geoip_remove_old_clients	src/or/geoip.c	/^geoip_remove_old_clients(time_t cutoff)$/;"	f
geoip_reset_dirreq_stats	src/or/geoip.c	/^geoip_reset_dirreq_stats(time_t now)$/;"	f
geoip_reset_entry_stats	src/or/geoip.c	/^geoip_reset_entry_stats(time_t now)$/;"	f
geoip_start_dirreq	src/or/geoip.c	/^geoip_start_dirreq(uint64_t dirreq_id, size_t response_size,$/;"	f
get_accounting_bytes	src/or/hibernate.c	/^get_accounting_bytes(void)$/;"	f	file:
get_bindaddr_for_server_proxy	src/or/transports.c	/^get_bindaddr_for_server_proxy(const managed_proxy_t *mp)$/;"	f	file:
get_bindaddr_from_transport_listen_line	src/or/config.c	/^get_bindaddr_from_transport_listen_line(const char *line,const char *transport)$/;"	f	file:
get_block_event_queue	src/or/control.c	/^get_block_event_queue(void)$/;"	f	file:
get_bw_samples	src/or/control.c	/^get_bw_samples(void)$/;"	f
get_bytes_read	src/test/test_status.c	/^NS(get_bytes_read)(void)$/;"	f	file:
get_bytes_written	src/test/test_status.c	/^NS(get_bytes_written)(void)$/;"	f	file:
get_cached_network_liveness	src/or/control.c	/^get_cached_network_liveness(void)$/;"	f	file:
get_cell_network_size	src/or/or.h	/^static INLINE int get_cell_network_size(int wide_circ_ids)$/;"	f
get_cert_list	src/or/routerlist.c	/^get_cert_list(const char *id_digest)$/;"	f	file:
get_cipher_by_id	src/test/test_tortls.c	/^get_cipher_by_id(uint16_t id)$/;"	f	file:
get_cipher_by_name	src/test/test_tortls.c	/^get_cipher_by_name(char *name)$/;"	f	file:
get_circ	src/or/control.c	/^get_circ(const char *id)$/;"	f	file:
get_circ_id_size	src/or/or.h	/^static INLINE int get_circ_id_size(int wide_circ_ids)$/;"	f
get_circuit_build_close_time_ms	src/or/circuitstats.c	/^get_circuit_build_close_time_ms(void)$/;"	f
get_circuit_build_timeout_ms	src/or/circuitstats.c	/^get_circuit_build_timeout_ms(void)$/;"	f
get_circuit_build_times	src/or/circuitstats.c	/^get_circuit_build_times(void)$/;"	f
get_circuit_build_times_mutable	src/or/circuitstats.c	/^get_circuit_build_times_mutable(void)$/;"	f
get_configured_bridge_by_addr_port_digest	src/or/entrynodes.c	/^get_configured_bridge_by_addr_port_digest(const tor_addr_t *addr,$/;"	f	file:
get_configured_bridge_by_orports_digest	src/or/entrynodes.c	/^get_configured_bridge_by_orports_digest(const char *digest,$/;"	f	file:
get_configured_bridge_by_routerinfo	src/or/entrynodes.c	/^get_configured_bridge_by_routerinfo(const routerinfo_t *ri)$/;"	f	file:
get_configured_ports	src/or/config.c	/^get_configured_ports(void)$/;"	f
get_connection_array	src/or/main.c	/^get_connection_array(void)$/;"	f
get_controller_cookie_file_name	src/or/control.c	/^get_controller_cookie_file_name(void)$/;"	f
get_current_auth_key_cert	src/or/routerkeys.c	/^get_current_auth_key_cert(void)$/;"	f
get_current_auth_keypair	src/or/routerkeys.c	/^get_current_auth_keypair(void)$/;"	f
get_current_curve25519_keypair	src/or/router.c	/^get_current_curve25519_keypair(void)$/;"	f	file:
get_current_link_cert_cert	src/or/routerkeys.c	/^get_current_link_cert_cert(void)$/;"	f
get_current_process_environment_variables	src/common/util.c	/^get_current_process_environment_variables(void)$/;"	f
get_datadir_fname	src/or/config.h	/^#define get_datadir_fname(/;"	d
get_datadir_fname2	src/or/config.h	/^#define get_datadir_fname2(/;"	d
get_datadir_fname2_suffix	src/or/config.h	/^#define get_datadir_fname2_suffix(/;"	d
get_datadir_fname_suffix	src/or/config.h	/^#define get_datadir_fname_suffix(/;"	d
get_default_conf_file	src/or/config.c	/^get_default_conf_file(int defaults_file)$/;"	f	file:
get_desc_id_from_query	src/or/control.c	/^get_desc_id_from_query(const rend_data_t *rend_data, const char *hsdir_fp)$/;"	f	file:
get_detached_signatures_from_pending_consensuses	src/or/dirvote.c	/^get_detached_signatures_from_pending_consensuses(pending_consensus_t *pending,$/;"	f	file:
get_detached_sigs	src/test/test_dir.c	/^get_detached_sigs(networkstatus_t *ns, networkstatus_t *ns2)$/;"	f	file:
get_digest	src/tools/tor-gencert.c	/^get_digest(EVP_PKEY *pkey, char *out)$/;"	f	file:
get_dir_info_status_string	src/or/nodelist.c	/^get_dir_info_status_string(void)$/;"	f
get_ed_impl	src/common/crypto_ed25519.c	/^get_ed_impl(void)$/;"	f	file:
get_effective_bwburst	src/or/config.c	/^get_effective_bwburst(const or_options_t *options)$/;"	f
get_effective_bwrate	src/or/config.c	/^get_effective_bwrate(const or_options_t *options)$/;"	f
get_entry_guards	src/or/entrynodes.c	/^get_entry_guards(void)$/;"	f
get_environment	src/common/compat.c	/^get_environment(void)$/;"	f
get_escaped_string_length	src/or/control.c	/^get_escaped_string_length(const char *start, size_t in_len_max,$/;"	f	file:
get_ext_or_auth_cookie_file_name	src/or/ext_orport.c	/^get_ext_or_auth_cookie_file_name(void)$/;"	f
get_fingerprint	src/tools/tor-gencert.c	/^get_fingerprint(EVP_PKEY *pkey, char *out)$/;"	f	file:
get_first_advertised_port_by_type_af	src/or/config.c	/^get_first_advertised_port_by_type_af(int listener_type, int address_family)$/;"	f
get_first_listener_addrport_string	src/or/config.c	/^get_first_listener_addrport_string(int listener_type)$/;"	f
get_fname	src/test/testing_common.c	/^get_fname(const char *name)$/;"	f
get_frac_paths_needed_for_circs	src/or/nodelist.c	/^get_frac_paths_needed_for_circs(const or_options_t *options,$/;"	f	file:
get_frequent_members	src/or/dirvote.c	/^get_frequent_members(smartlist_t *out, smartlist_t *in, int min)$/;"	f	file:
get_interface_address6_failure	src/test/test_config.c	/^get_interface_address6_failure(int severity, sa_family_t family,$/;"	f	file:
get_interface_address6_replacement	src/test/test_config.c	/^get_interface_address6_replacement(int severity, sa_family_t family,$/;"	f	file:
get_interface_address6_via_udp_socket_hack	src/common/address.c	/^get_interface_address6_via_udp_socket_hack(int severity,$/;"	f
get_interface_address_08080808	src/test/test_config.c	/^get_interface_address_08080808(int severity, uint32_t *addr)$/;"	f	file:
get_interface_address_failure	src/test/test_config.c	/^get_interface_address_failure(int severity, uint32_t *addr)$/;"	f	file:
get_interface_addresses_ifaddrs	src/common/address.c	/^get_interface_addresses_ifaddrs(int severity)$/;"	f
get_interface_addresses_ioctl	src/common/address.c	/^get_interface_addresses_ioctl(int severity)$/;"	f
get_interface_addresses_raw	src/common/address.c	/^get_interface_addresses_raw(int severity)$/;"	f
get_interface_addresses_win32	src/common/address.c	/^get_interface_addresses_win32(int severity)$/;"	f
get_last_hid_serv_requests	src/or/rendclient.c	/^get_last_hid_serv_requests(void)$/;"	f	file:
get_last_resolved_addr	src/or/config.c	/^get_last_resolved_addr(void)$/;"	f
get_link_history	src/or/rephist.c	/^get_link_history(const char *from_id, const char *to_id)$/;"	f	file:
get_list_of_ports_to_forward	src/or/config.c	/^get_list_of_ports_to_forward(void)$/;"	f
get_managed_proxy_by_argv_and_type	src/or/transports.c	/^get_managed_proxy_by_argv_and_type(char **proxy_argv, int is_server)$/;"	f	file:
get_master_identity_key	src/or/routerkeys.c	/^get_master_identity_key(void)$/;"	f
get_master_rsa_crosscert	src/or/routerkeys.c	/^get_master_rsa_crosscert(const uint8_t **cert_out,$/;"	f
get_master_signing_key_cert	src/or/routerkeys.c	/^get_master_signing_key_cert(void)$/;"	f
get_master_signing_keypair	src/or/routerkeys.c	/^get_master_signing_keypair(void)$/;"	f
get_max_sockets	src/common/compat.c	/^get_max_sockets(void)$/;"	f
get_memlevel	src/common/torgzip.c	/^get_memlevel(zlib_compression_level_t level)$/;"	f	file:
get_microdesc_cache	src/or/microdesc.c	/^get_microdesc_cache(void)$/;"	f
get_microdesc_cache_noload	src/or/microdesc.c	/^get_microdesc_cache_noload(void)$/;"	f	file:
get_min_log_level	src/common/log.c	/^get_min_log_level(void)$/;"	f
get_mock_scheduler_has_waiting_cells_count	src/test/test_channel.c	/^get_mock_scheduler_has_waiting_cells_count(void)$/;"	f
get_mock_scheduler_release_channel_count	src/test/test_channel.c	/^get_mock_scheduler_release_channel_count(void)$/;"	f
get_most_frequent_member	src/or/dirvote.c	/^#define get_most_frequent_member(/;"	d	file:
get_my_v3_authority_cert_m	src/test/test_dir_handle_get.c	/^get_my_v3_authority_cert_m(void)$/;"	f	file:
get_my_v3_authority_signing_key	src/or/router.c	/^get_my_v3_authority_signing_key(void)$/;"	f
get_my_v3_legacy_cert	src/or/router.c	/^get_my_v3_legacy_cert(void)$/;"	f
get_my_v3_legacy_signing_key	src/or/router.c	/^get_my_v3_legacy_signing_key(void)$/;"	f
get_n_authorities	src/or/routerlist.c	/^get_n_authorities(dirinfo_type_t type)$/;"	f
get_n_open_sockets	src/common/compat.c	/^get_n_open_sockets(void)$/;"	f
get_net_param_from_list	src/or/networkstatus.c	/^get_net_param_from_list(smartlist_t *net_params, const char *param_name,$/;"	f	file:
get_next_token	src/or/routerparse.c	/^get_next_token(memarea_t *area,$/;"	f	file:
get_num_cpus	src/or/config.c	/^get_num_cpus(const or_options_t *options)$/;"	f
get_onion_key	src/or/router.c	/^get_onion_key(void)$/;"	f
get_onion_key_set_at	src/or/router.c	/^get_onion_key_set_at(void)$/;"	f
get_options_for_server_transport	src/or/config.c	/^get_options_for_server_transport(const char *transport)$/;"	f
get_options_from_transport_options_line	src/or/config.c	/^get_options_from_transport_options_line(const char *line,const char *transport)$/;"	f
get_options_mock	src/test/test_connection_edge_ap_handshake.c	/^get_options_mock(void)$/;"	f	file:
get_options_mock	src/test/test_main.c	/^get_options_mock(void)$/;"	f	file:
get_options_test_data	src/test/test_options.c	/^get_options_test_data(char *conf)$/;"	f	file:
get_or_history	src/or/rephist.c	/^get_or_history(const char* id)$/;"	f	file:
get_or_state	src/test/test_accounting.c	/^NS(get_or_state)(void)$/;"	f	file:
get_or_state	src/test/test_status.c	/^NS(get_or_state)(void)$/;"	f	file:
get_or_state_mock	src/test/test_main.c	/^get_or_state_mock(void)$/;"	f	file:
get_or_state_replacement	src/test/test_entrynodes.c	/^get_or_state_replacement(void)$/;"	f	file:
get_or_state_replacement	src/test/test_pt.c	/^get_or_state_replacement(void)$/;"	f	file:
get_overhead_estimate	src/or/channel.h	/^  double (*get_overhead_estimate)(channel_t *);$/;"	m	struct:channel_s
get_overhead_for_onionskins	src/or/cpuworker.c	/^get_overhead_for_onionskins(uint32_t *usec_out, double *frac_out,$/;"	f	file:
get_parent_directory	src/common/compat.c	/^get_parent_directory(char *fname)$/;"	f
get_pf_socket	src/or/connection_edge.c	/^get_pf_socket(void)$/;"	f
get_platform_str	src/or/router.c	/^get_platform_str(char *platform, size_t len)$/;"	f
get_possible_sybil_list	src/or/dirserv.c	/^get_possible_sybil_list(const smartlist_t *routers)$/;"	f	file:
get_primary_dir_port	src/or/config.h	/^#define get_primary_dir_port(/;"	d
get_primary_or_port	src/or/config.h	/^#define get_primary_or_port(/;"	d
get_proxy_addrport	src/or/connection.c	/^get_proxy_addrport(tor_addr_t *addr, uint16_t *port, int *proxy_type,$/;"	f
get_proxy_type	src/or/connection.c	/^get_proxy_type(void)$/;"	f	file:
get_pt_proxy_uri	src/or/transports.c	/^get_pt_proxy_uri(void)$/;"	f
get_random_virtual_addr	src/or/addressmap.c	/^get_random_virtual_addr(const virtual_addr_conf_t *conf, tor_addr_t *addr_out)$/;"	f
get_remote_addr	src/or/channel.h	/^  int (*get_remote_addr)(channel_t *, tor_addr_t *);$/;"	m	struct:channel_s
get_remote_descr	src/or/channel.h	/^  const char * (*get_remote_descr)(channel_t *, int);$/;"	m	struct:channel_s
get_scale_factor	src/or/circuitmux_ewma.c	/^get_scale_factor(unsigned from_tick, unsigned to_tick)$/;"	f	file:
get_seconds_valid	src/or/rendcommon.c	/^get_seconds_valid(time_t now, const char *service_id)$/;"	f	file:
get_secret_id_part_bytes	src/or/rendcommon.c	/^get_secret_id_part_bytes(char *secret_id_part, uint32_t time_period,$/;"	f
get_server_identity_key	src/or/router.c	/^get_server_identity_key(void)$/;"	f
get_short_version	src/or/config.c	/^get_short_version(void)$/;"	f
get_signed_descriptor_by_fp	src/or/dirserv.c	/^get_signed_descriptor_by_fp(const char *fp, int extrainfo,$/;"	f	file:
get_signewnym_epoch	src/or/main.c	/^get_signewnym_epoch(void)$/;"	f
get_socks_args_by_bridge_addrport	src/or/entrynodes.c	/^get_socks_args_by_bridge_addrport(const tor_addr_t *addr, uint16_t port)$/;"	f
get_stability	src/or/rephist.c	/^get_stability(or_history_t *hist, time_t when)$/;"	f	file:
get_stored_bindaddr_for_server_transport	src/or/statefile.c	/^get_stored_bindaddr_for_server_transport(const char *transport)$/;"	f
get_stream	src/or/control.c	/^get_stream(const char *id)$/;"	f	file:
get_string_from_pipe	src/common/util.c	/^get_string_from_pipe(FILE *stream, char *buf_out, size_t count)$/;"	f
get_syscall_name	src/common/sandbox.c	/^get_syscall_name(int syscall_num)$/;"	f	file:
get_ticks	src/ext/ed25519/donna/test-ticks.h	/^get_ticks(void) {$/;"	f
get_time_period	src/or/rendcommon.c	/^get_time_period(time_t now, uint8_t deviation, const char *service_id)$/;"	f
get_tlsclient_identity_key	src/or/router.c	/^get_tlsclient_identity_key(void)$/;"	f
get_token_arguments	src/or/routerparse.c	/^get_token_arguments(memarea_t *area, directory_token_t *tok,$/;"	f	file:
get_torrc_fname	src/or/config.c	/^get_torrc_fname(int defaults_fname)$/;"	f
get_total_system_memory	src/common/compat.c	/^get_total_system_memory(size_t *mem_out)$/;"	f
get_total_system_memory_impl	src/common/compat.c	/^get_total_system_memory_impl(void)$/;"	f	file:
get_total_weighted_time	src/or/rephist.c	/^get_total_weighted_time(or_history_t *hist, time_t when)$/;"	f	file:
get_transport_bindaddr	src/or/statefile.c	/^get_transport_bindaddr(const char *line, const char *transport)$/;"	f	file:
get_transport_bindaddr_from_config	src/or/config.c	/^get_transport_bindaddr_from_config(const char *transport)$/;"	f
get_transport_by_bridge_addrport	src/or/entrynodes.c	/^get_transport_by_bridge_addrport(const tor_addr_t *addr, uint16_t port,$/;"	f
get_transport_in_state_by_name	src/or/statefile.c	/^get_transport_in_state_by_name(const char *transport)$/;"	f
get_transport_name	src/or/channel.h	/^  int (*get_transport_name)(channel_t *chan, char **transport_out);$/;"	m	struct:channel_s
get_transport_options_for_server_proxy	src/or/transports.c	/^get_transport_options_for_server_proxy(const managed_proxy_t *mp)$/;"	f
get_transport_proxy_ports	src/or/transports.c	/^get_transport_proxy_ports(void)$/;"	f
get_uint16	src/common/compat.c	/^get_uint16(const void *cp)$/;"	f
get_uint32	src/common/compat.c	/^get_uint32(const void *cp)$/;"	f
get_uint64	src/common/compat.c	/^get_uint64(const void *cp)$/;"	f
get_uint8	src/common/compat.h	/^#define get_uint8(/;"	d
get_unique_circ_id_by_chan	src/or/circuitbuild.c	/^get_unique_circ_id_by_chan(channel_t *chan)$/;"	f
get_unique_stream_id_by_circ	src/or/connection_edge.c	/^get_unique_stream_id_by_circ(origin_circuit_t *circ)$/;"	f
get_uptime	src/test/test_status.c	/^NS(get_uptime)(void)$/;"	f	file:
get_user_homedir	src/common/compat.c	/^get_user_homedir(const char *username)$/;"	f
get_var_cell_header_size	src/or/or.h	/^static INLINE int get_var_cell_header_size(int wide_circ_ids)$/;"	f
get_version	src/or/config.c	/^get_version(void)$/;"	f
get_voter	src/or/dirvote.c	/^get_voter(const networkstatus_t *vote)$/;"	f	file:
get_weighted_fractional_uptime	src/or/rephist.c	/^get_weighted_fractional_uptime(or_history_t *hist, time_t when)$/;"	f	file:
get_windows_conf_root	src/or/config.c	/^get_windows_conf_root(void)$/;"	f	file:
get_yesterday_date_str	src/test/test_helpers.c	/^get_yesterday_date_str(void)$/;"	f
getargs_helper	src/or/control.c	/^getargs_helper(const char *command, control_connection_t *conn,$/;"	f	file:
getinfo_helper_accounting	src/or/hibernate.c	/^getinfo_helper_accounting(control_connection_t *conn,$/;"	f
getinfo_helper_config	src/or/config.c	/^getinfo_helper_config(control_connection_t *conn,$/;"	f
getinfo_helper_dir	src/or/control.c	/^getinfo_helper_dir(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_entry_guards	src/or/entrynodes.c	/^getinfo_helper_entry_guards(control_connection_t *conn,$/;"	f
getinfo_helper_events	src/or/control.c	/^getinfo_helper_events(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_geoip	src/or/geoip.c	/^getinfo_helper_geoip(control_connection_t *control_conn,$/;"	f
getinfo_helper_listeners	src/or/control.c	/^getinfo_helper_listeners(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_liveness	src/or/control.c	/^getinfo_helper_liveness(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_misc	src/or/control.c	/^getinfo_helper_misc(control_connection_t *conn, const char *question,$/;"	f	file:
getinfo_helper_networkstatus	src/or/networkstatus.c	/^getinfo_helper_networkstatus(control_connection_t *conn,$/;"	f
getinfo_helper_onions	src/or/control.c	/^getinfo_helper_onions(control_connection_t *control_conn,$/;"	f	file:
getinfo_helper_policies	src/or/policies.c	/^getinfo_helper_policies(control_connection_t *conn,$/;"	f
getinfo_helper_t	src/or/control.c	/^typedef int (*getinfo_helper_t)(control_connection_t *,$/;"	t	file:
getinfo_item_t	src/or/control.c	/^typedef struct getinfo_item_t {$/;"	s	file:
getinfo_item_t	src/or/control.c	/^} getinfo_item_t;$/;"	t	typeref:struct:getinfo_item_t	file:
getinfo_items	src/or/control.c	/^static const getinfo_item_t getinfo_items[] = {$/;"	v	file:
gettweak	src/ext/ed25519/donna/ed25519_tor.c	/^gettweak(unsigned char *out, const unsigned char *param)$/;"	f	file:
gettweak	src/ext/ed25519/ref10/blinding.c	/^gettweak(unsigned char *out, const unsigned char *param)$/;"	f	file:
git_tag	src/or/or.h	/^  char git_tag[DIGEST_LEN];$/;"	m	struct:tor_version_t
git_tag_len	src/or/or.h	/^  int git_tag_len;$/;"	m	struct:tor_version_t
global_circuitlist	src/or/circuitlist.c	/^static smartlist_t *global_circuitlist = NULL;$/;"	v	file:
global_circuitlist_idx	src/or/or.h	/^  int global_circuitlist_idx;$/;"	m	struct:circuit_t
global_cmdline_only_options	src/or/config.c	/^static config_line_t *global_cmdline_only_options = NULL;$/;"	v	file:
global_cmdline_options	src/or/config.c	/^static config_line_t *global_cmdline_options = NULL;$/;"	v	file:
global_default_options	src/or/config.c	/^static or_options_t *global_default_options = NULL;$/;"	v	file:
global_destroy_ctr	src/or/circuitmux.c	/^static int64_t global_destroy_ctr = 0;$/;"	v	file:
global_dirfrontpagecontents	src/or/config.c	/^static char *global_dirfrontpagecontents = NULL;$/;"	v	file:
global_event_mask	src/or/control.c	/^static event_mask_t global_event_mask = 0;$/;"	v	file:
global_identifier	src/or/channel.h	/^  uint64_t global_identifier;$/;"	m	struct:channel_listener_s
global_identifier	src/or/channel.h	/^  uint64_t global_identifier;$/;"	m	struct:channel_s
global_identifier	src/or/or.h	/^  uint32_t global_identifier;$/;"	m	struct:origin_circuit_t
global_identifier	src/or/or.h	/^  uint64_t global_identifier;$/;"	m	struct:connection_t
global_options	src/or/config.c	/^static or_options_t *global_options = NULL;$/;"	v	file:
global_rate_limit	src/or/connection.c	/^static struct bufferevent_rate_limit_group *global_rate_limit = NULL;$/;"	v	typeref:struct:bufferevent_rate_limit_group	file:
global_read_bucket	src/or/main.c	/^int global_read_bucket; \/**< Max number of bytes I can read this second. *\/$/;"	v
global_read_emptied	src/or/connection.c	/^                global_read_emptied = 0,$/;"	v	file:
global_relayed_read_bucket	src/or/main.c	/^int global_relayed_read_bucket;$/;"	v
global_relayed_read_emptied	src/or/connection.c	/^static uint32_t global_relayed_read_emptied = 0,$/;"	v	file:
global_relayed_write_bucket	src/or/main.c	/^int global_relayed_write_bucket;$/;"	v
global_relayed_write_emptied	src/or/connection.c	/^                global_relayed_write_emptied = 0,$/;"	v	file:
global_state	src/or/statefile.c	/^static or_state_t *global_state = NULL;$/;"	v	file:
global_write_bucket	src/or/main.c	/^int global_write_bucket; \/**< Max number of bytes I can write this second. *\/$/;"	v
global_write_bucket_low	src/or/connection.c	/^global_write_bucket_low(connection_t *conn, size_t attempt, int priority)$/;"	f
global_write_emptied	src/or/connection.c	/^                global_write_emptied = 0;$/;"	v	file:
good_bridge_line_test	src/test/test_config.c	/^good_bridge_line_test(const char *string, const char *test_addrport,$/;"	f	file:
good_signature	src/or/or.h	/^  unsigned int good_signature : 1; \/**< Set to true if we've verified the sig$/;"	m	struct:document_signature_t
got_auth	src/or/or.h	/^  unsigned int got_auth : 1; \/**< Have we received any authentication data? *\/$/;"	m	struct:socks_request_t
got_libevent_error	src/or/main.c	/^got_libevent_error(void)$/;"	f	file:
got_renegotiate	src/common/tortls.h	/^  unsigned int got_renegotiate:1;$/;"	m	struct:tor_tls_t
gt_i64_timei	src/or/routerlist.c	/^#define gt_i64_timei(/;"	d	file:
gt_i64_timei	src/or/routerlist.c	/^gt_i64_timei(uint64_t a, uint64_t b)$/;"	f	file:
guard_bandwidth_excluding_exits_kb	src/or/dirserv.c	/^static uint32_t guard_bandwidth_excluding_exits_kb = 0;$/;"	v	file:
guard_bandwidth_including_exits_kb	src/or/dirserv.c	/^static uint32_t guard_bandwidth_including_exits_kb = 0;$/;"	v	file:
guard_bw	src/or/entrynodes.h	/^  int guard_bw;$/;"	m	struct:guardfraction_bandwidth_t
guard_get_guardfraction_bandwidth	src/or/entrynodes.c	/^guard_get_guardfraction_bandwidth(guardfraction_bandwidth_t *guardfraction_bw,$/;"	f
guard_tk	src/or/dirserv.c	/^static long guard_tk = 0;$/;"	v	file:
guard_wfu	src/or/dirserv.c	/^static double guard_wfu = 0.0;$/;"	v	file:
guardfraction_bandwidth_t	src/or/entrynodes.h	/^typedef struct guardfraction_bandwidth_t {$/;"	s
guardfraction_bandwidth_t	src/or/entrynodes.h	/^} guardfraction_bandwidth_t;$/;"	t	typeref:struct:guardfraction_bandwidth_t
guardfraction_file_parse_guard_line	src/or/dirserv.c	/^guardfraction_file_parse_guard_line(const char *guard_line,$/;"	f	file:
guardfraction_file_parse_inputs_line	src/or/dirserv.c	/^guardfraction_file_parse_inputs_line(const char *inputs_line,$/;"	f	file:
guardfraction_line_apply	src/or/dirserv.c	/^guardfraction_line_apply(const char *guard_id,$/;"	f	file:
guardfraction_percentage	src/or/or.h	/^  uint32_t guardfraction_percentage;$/;"	m	struct:routerstatus_t
guardfraction_tests	src/test/test_guardfraction.c	/^struct testcase_t guardfraction_tests[] = {$/;"	v	typeref:struct:testcase_t
guards_get_lifetime	src/or/entrynodes.c	/^guards_get_lifetime(void)$/;"	f	file:
gzip_is_supported	src/common/torgzip.c	/^static int gzip_is_supported = -1;$/;"	v	file:
h_tweak	src/or/onion_ntor.c	/^h_tweak(uint8_t *out,$/;"	f	file:
handle_client_auth_nonce	src/or/ext_orport.c	/^handle_client_auth_nonce(const char *client_nonce, size_t client_nonce_len,$/;"	f
handle_control_add_onion	src/or/control.c	/^handle_control_add_onion(control_connection_t *conn,$/;"	f	file:
handle_control_attachstream	src/or/control.c	/^handle_control_attachstream(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_authchallenge	src/or/control.c	/^handle_control_authchallenge(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_authenticate	src/or/control.c	/^handle_control_authenticate(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_closecircuit	src/or/control.c	/^handle_control_closecircuit(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_closestream	src/or/control.c	/^handle_control_closestream(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_del_onion	src/or/control.c	/^handle_control_del_onion(control_connection_t *conn,$/;"	f	file:
handle_control_dropguards	src/or/control.c	/^handle_control_dropguards(control_connection_t *conn,$/;"	f	file:
handle_control_extendcircuit	src/or/control.c	/^handle_control_extendcircuit(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_getconf	src/or/control.c	/^handle_control_getconf(control_connection_t *conn, uint32_t body_len,$/;"	f	file:
handle_control_getinfo	src/or/control.c	/^handle_control_getinfo(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_hsfetch	src/or/control.c	/^handle_control_hsfetch(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_hspost	src/or/control.c	/^handle_control_hspost(control_connection_t *conn,$/;"	f	file:
handle_control_loadconf	src/or/control.c	/^handle_control_loadconf(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_mapaddress	src/or/control.c	/^handle_control_mapaddress(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_postdescriptor	src/or/control.c	/^handle_control_postdescriptor(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_protocolinfo	src/or/control.c	/^handle_control_protocolinfo(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_redirectstream	src/or/control.c	/^handle_control_redirectstream(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_resetconf	src/or/control.c	/^handle_control_resetconf(control_connection_t *conn, uint32_t len, char *body)$/;"	f	file:
handle_control_resolve	src/or/control.c	/^handle_control_resolve(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_saveconf	src/or/control.c	/^handle_control_saveconf(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_setcircuitpurpose	src/or/control.c	/^handle_control_setcircuitpurpose(control_connection_t *conn,$/;"	f	file:
handle_control_setconf	src/or/control.c	/^handle_control_setconf(control_connection_t *conn, uint32_t len, char *body)$/;"	f	file:
handle_control_setevents	src/or/control.c	/^handle_control_setevents(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_signal	src/or/control.c	/^handle_control_signal(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_takeownership	src/or/control.c	/^handle_control_takeownership(control_connection_t *conn, uint32_t len,$/;"	f	file:
handle_control_usefeature	src/or/control.c	/^handle_control_usefeature(control_connection_t *conn,$/;"	f	file:
handle_finished_proxy	src/or/transports.c	/^handle_finished_proxy(managed_proxy_t *mp)$/;"	f	file:
handle_fw_helper_line	src/common/util.c	/^handle_fw_helper_line(const char *executable, const char *line)$/;"	f	file:
handle_fw_helper_output	src/common/util.c	/^handle_fw_helper_output(const char *executable,$/;"	f	file:
handle_getinfo_helper	src/or/control.c	/^handle_getinfo_helper(control_connection_t *control_conn,$/;"	f	file:
handle_methods_done	src/or/transports.c	/^handle_methods_done(const managed_proxy_t *mp)$/;"	f	file:
handle_proxy_line	src/or/transports.c	/^handle_proxy_line(const char *line, managed_proxy_t *mp)$/;"	f
handle_reply	src/test/test_workqueue.c	/^handle_reply(void *arg)$/;"	f	file:
handle_reply_shutdown	src/test/test_workqueue.c	/^handle_reply_shutdown(void *arg)$/;"	f	file:
handle_signals	src/or/main.c	/^handle_signals(int is_parent)$/;"	f
handled	src/test/test_workqueue.c	/^bitarray_t *handled;$/;"	v
handled_len	src/test/test_workqueue.c	/^int handled_len;$/;"	v
handshake_len	src/or/onion.h	/^  uint16_t handshake_len;$/;"	m	struct:create_cell_t
handshake_len	src/or/onion.h	/^  uint16_t handshake_len;$/;"	m	struct:created_cell_t
handshake_start	src/test/test_extorport.c	/^handshake_start(or_connection_t *conn, int receiving)$/;"	f	file:
handshake_start_called	src/test/test_extorport.c	/^static int handshake_start_called = 0;$/;"	v	file:
handshake_state	src/or/or.h	/^  onion_handshake_state_t handshake_state;$/;"	m	struct:crypt_path_t
handshake_state	src/or/or.h	/^  or_handshake_state_t *handshake_state; \/**< If we are setting this connection$/;"	m	struct:or_connection_t
handshake_type	src/or/cpuworker.c	/^  uint16_t handshake_type;$/;"	m	struct:cpuworker_reply_t	file:
handshake_type	src/or/onion.c	/^  uint16_t handshake_type;$/;"	m	struct:onion_queue_t	file:
handshake_type	src/or/onion.h	/^  uint16_t handshake_type;$/;"	m	struct:create_cell_t
has_accepted_serverdesc	src/or/or.h	/^  unsigned int has_accepted_serverdesc:1;$/;"	m	struct:dir_server_t
has_bandwidth	src/or/or.h	/^  unsigned int has_bandwidth:1; \/**< The vote\/consensus had bw info *\/$/;"	m	struct:routerstatus_t
has_been_open	src/or/channel.h	/^  unsigned int has_been_open:1;$/;"	m	struct:channel_s
has_dns_init_failed	src/or/dns.c	/^has_dns_init_failed(void)$/;"	f
has_ed25519_listing	src/or/or.h	/^  unsigned int has_ed25519_listing:1; \/** DOCDOC *\/$/;"	m	struct:vote_routerstatus_t
has_exitsummary	src/or/or.h	/^  unsigned int has_exitsummary:1; \/**< The vote\/consensus had exit summaries *\/$/;"	m	struct:routerstatus_t
has_finished	src/or/or.h	/^  unsigned int has_finished : 1; \/**< Has the SOCKS handshake finished? Used to$/;"	m	struct:socks_request_t
has_guardfraction	src/or/or.h	/^  unsigned int has_guardfraction:1;$/;"	m	struct:routerstatus_t
has_measured_bw	src/or/or.h	/^  unsigned int has_measured_bw:1; \/**< The vote had a measured bw *\/$/;"	m	struct:vote_routerstatus_t
has_measured_bws	src/or/or.h	/^  unsigned int has_measured_bws : 1;\/**< True iff this networkstatus contains$/;"	m	struct:networkstatus_t
has_opened	src/or/or.h	/^  unsigned int has_opened : 1;$/;"	m	struct:origin_circuit_t
has_queued_writes	src/or/channel.h	/^  int (*has_queued_writes)(channel_t *);$/;"	m	struct:channel_s
has_queued_writes	src/test/test_circuitmux.c	/^has_queued_writes(channel_t *c)$/;"	f	file:
hash_512bits	src/ext/ed25519/donna/ed25519-donna.h	/^typedef unsigned char hash_512bits[64];$/;"	t
have_been_under_memory_pressure	src/or/relay.c	/^have_been_under_memory_pressure(void)$/;"	f
have_built_consensus	src/or/dirvote.c	/^  int have_built_consensus;$/;"	m	struct:__anon99	file:
have_completed_a_circuit	src/test/test_config.c	/^NS(have_completed_a_circuit)(void)$/;"	f
have_computed_timeout	src/or/circuitstats.h	/^  int have_computed_timeout;$/;"	m	struct:circuit_build_times_s
have_consensus_path	src/or/nodelist.c	/^static consensus_path_type_t have_consensus_path = CONSENSUS_PATH_UNKNOWN;$/;"	v	file:
have_enough_path_info	src/or/circuituse.c	/^have_enough_path_info(int need_exit)$/;"	f	file:
have_fetched_missing_signatures	src/or/dirvote.c	/^  int have_fetched_missing_signatures;$/;"	m	struct:__anon99	file:
have_fetched_missing_votes	src/or/dirvote.c	/^  int have_fetched_missing_votes;$/;"	m	struct:__anon99	file:
have_lockfile	src/test/test_config.c	/^NS(have_lockfile)(void)$/;"	f
have_min_dir_info	src/or/nodelist.c	/^static int have_min_dir_info = 0;$/;"	v	file:
have_noted_bootstrap_problem	src/or/or.h	/^  unsigned int have_noted_bootstrap_problem:1;$/;"	m	struct:or_connection_t
have_parsed_cmdline	src/or/config.c	/^static int have_parsed_cmdline = 0;$/;"	v	file:
have_performed_bandwidth_test	src/or/circuituse.c	/^static int have_performed_bandwidth_test = 0;$/;"	v	file:
have_published_consensus	src/or/dirvote.c	/^  int have_published_consensus;$/;"	m	struct:__anon99	file:
have_room_for_onionskin	src/or/onion.c	/^have_room_for_onionskin(uint16_t type)$/;"	f	file:
have_sent_protocolinfo	src/or/or.h	/^  unsigned int have_sent_protocolinfo:1;$/;"	m	struct:control_connection_t
have_voted	src/or/dirvote.c	/^  int have_voted;$/;"	m	struct:__anon99	file:
have_warned_about_new_version	src/or/networkstatus.c	/^static int have_warned_about_new_version = 0;$/;"	v	file:
have_warned_about_old_version	src/or/networkstatus.c	/^static int have_warned_about_old_version = 0;$/;"	v	file:
head	src/or/buffers.h	/^  chunk_t *head; \/**< First chunk in the list, or NULL for none. *\/$/;"	m	struct:buf_t
head	src/or/or.h	/^  TOR_SIMPLEQ_HEAD(cell_simpleq, packed_cell_t) head;$/;"	m	struct:cell_queue_t
header_len	src/trunnel/pwbox.h	/^  uint8_t header_len;$/;"	m	struct:pwbox_encoded_st
heap	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^	heap_index_t heap[heap_batch_size];$/;"	m	struct:batch_heap_t
heap_batch_size	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^#define heap_batch_size /;"	d
heap_buf	src/test/test-memwipe.c	/^static char *heap_buf = NULL;$/;"	v	file:
heap_build	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^heap_build(batch_heap *heap, size_t count) {$/;"	f
heap_extend	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^heap_extend(batch_heap *heap, size_t new_count) {$/;"	f
heap_get_top2	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^heap_get_top2(batch_heap *heap, heap_index_t *max1, heap_index_t *max2, size_t limbsize) {$/;"	f
heap_index	src/or/circuitmux_ewma.c	/^  int heap_index;$/;"	m	struct:cell_ewma_s	file:
heap_index_t	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^typedef size_t heap_index_t;$/;"	t
heap_insert_next	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^heap_insert_next(batch_heap *heap) {$/;"	f
heap_swap	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^heap_swap(heap_index_t *heap, size_t a, size_t b) {$/;"	f
heap_updated_root	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^heap_updated_root(batch_heap *heap, size_t limbsize) {$/;"	f
held_by_nodes	src/or/or.h	/^  unsigned int held_by_nodes;$/;"	m	struct:microdesc_t
held_in_map	src/or/or.h	/^  unsigned int held_in_map : 1;$/;"	m	struct:microdesc_t
help	src/test/test_workqueue.c	/^help(void)$/;"	f	file:
help_test_bucket_note_empty	src/test/test_controller_events.c	/^help_test_bucket_note_empty(uint32_t expected_msec_since_midnight,$/;"	f	file:
helper_setup_fake_routerlist	src/test/test_helpers.c	/^helper_setup_fake_routerlist(void)$/;"	f
hex_decode_digit	src/common/util_format.c	/^hex_decode_digit(char c)$/;"	f
hex_decode_digit_	src/common/util_format.c	/^hex_decode_digit_(char c)$/;"	f	file:
hex_digest_nickname_decode	src/or/routerlist.c	/^hex_digest_nickname_decode(const char *hexdigest,$/;"	f
hex_digest_nickname_matches	src/or/routerlist.c	/^hex_digest_nickname_matches(const char *hexdigest, const char *identity_digest,$/;"	f
hex_str	src/common/util.c	/^hex_str(const char *from, size_t fromlen)$/;"	f
hexdigest_to_digest	src/or/routerlist.c	/^hexdigest_to_digest(const char *hexdigest, char *digest)$/;"	f
hi	src/ext/ed25519/donna/ed25519-donna-portable.h	/^				uint64_t lo, hi;$/;"	m	struct:uint128_t
hi	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			uint64_t lo, hi;$/;"	m	struct:uint128_t
hi128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define hi128(/;"	d
hi128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define hi128(/;"	d
hibernate_begin	src/or/hibernate.c	/^hibernate_begin(hibernate_state_t new_state, time_t now)$/;"	f	file:
hibernate_begin_shutdown	src/or/hibernate.c	/^hibernate_begin_shutdown(void)$/;"	f
hibernate_end	src/or/hibernate.c	/^hibernate_end(hibernate_state_t new_state)$/;"	f	file:
hibernate_end_time	src/or/hibernate.c	/^static time_t hibernate_end_time = 0;$/;"	v	file:
hibernate_end_time_elapsed	src/or/hibernate.c	/^hibernate_end_time_elapsed(time_t now)$/;"	f	file:
hibernate_go_dormant	src/or/hibernate.c	/^hibernate_go_dormant(time_t now)$/;"	f	file:
hibernate_hard_limit_reached	src/or/hibernate.c	/^hibernate_hard_limit_reached(void)$/;"	f	file:
hibernate_set_state_for_testing_	src/or/hibernate.c	/^hibernate_set_state_for_testing_(hibernate_state_t newstate)$/;"	f
hibernate_soft_limit_reached	src/or/hibernate.c	/^hibernate_soft_limit_reached(void)$/;"	f	file:
hibernate_state	src/or/hibernate.c	/^static hibernate_state_t hibernate_state = HIBERNATE_STATE_INITIAL;$/;"	v	file:
hibernate_state_t	src/or/hibernate.h	/^} hibernate_state_t;$/;"	t	typeref:enum:__anon31
hid_serv_acting_as_directory	src/or/routerlist.c	/^hid_serv_acting_as_directory(void)$/;"	f
hid_serv_get_responsible_directories	src/or/routerlist.c	/^hid_serv_get_responsible_directories(smartlist_t *responsible_dirs,$/;"	f
hid_serv_responsible_for_desc_id	src/test/test_dir_handle_get.c	/^NS(hid_serv_responsible_for_desc_id)(const char *id)$/;"	f	file:
hid_serv_responsible_for_desc_id	src/test/test_rendcache.c	/^NS(hid_serv_responsible_for_desc_id)(const char *id)$/;"	f	file:
hid_serv_responsible_for_desc_id_response	src/test/test_dir_handle_get.c	/^static int hid_serv_responsible_for_desc_id_response;$/;"	v	file:
hid_serv_responsible_for_desc_id_response	src/test/test_rendcache.c	/^static int hid_serv_responsible_for_desc_id_response;$/;"	v	file:
high	src/or/dirvote.c	/^  int high;$/;"	m	struct:consensus_method_range_t	file:
high	src/or/dirvote.c	/^  int high;$/;"	m	struct:microdesc_vote_line_t	file:
history_map	src/or/rephist.c	/^static digestmap_t *history_map = NULL;$/;"	v	file:
hmac	src/trunnel/pwbox.h	/^  uint8_t hmac[32];$/;"	m	struct:pwbox_encoded_st
hold_open_until_flushed	src/or/or.h	/^  unsigned int hold_open_until_flushed:1; \/**< Despite this connection's being$/;"	m	struct:connection_t
horizon	src/or/replaycache.h	/^  time_t horizon;$/;"	m	struct:replaycache_s
hostname	src/or/dns_structs.h	/^    char *hostname; \/** A hostname, if PTR lookup happened successfully*\/$/;"	m	union:cached_resolve_t::__anon14
hostname	src/or/relay.h	/^  char *hostname;$/;"	m	struct:address_ttl_s
hostname_address	src/or/addressmap.c	/^  char *hostname_address;$/;"	m	struct:__anon84	file:
hostname_in_track_host_exits	src/or/circuituse.c	/^hostname_in_track_host_exits(const or_options_t *options, const char *address)$/;"	f
hostname_type_t	src/or/connection_edge.h	/^typedef enum hostname_type_t {$/;"	g
hostname_type_t	src/or/connection_edge.h	/^} hostname_type_t;$/;"	t	typeref:enum:hostname_type_t
hproc	src/common/procmon.c	/^  HANDLE hproc;$/;"	m	struct:tor_process_monitor_t	file:
hs_circ_has_timed_out	src/or/or.h	/^  unsigned int hs_circ_has_timed_out : 1;$/;"	m	struct:origin_circuit_t
hs_desc_content	src/test/test_hs.c	/^static const char *hs_desc_content = "\\$/;"	v	file:
hs_service_side_rend_circ_has_been_relaunched	src/or/or.h	/^  unsigned int hs_service_side_rend_circ_has_been_relaunched : 1;$/;"	m	struct:origin_circuit_t
hs_stats	src/or/rephist.c	/^static hs_stats_t *hs_stats = NULL;$/;"	v	file:
hs_stats_free	src/or/rephist.c	/^hs_stats_free(hs_stats_t *hs_stats)$/;"	f	file:
hs_stats_new	src/or/rephist.c	/^hs_stats_new(void)$/;"	f	file:
hs_stats_t	src/or/rephist.c	/^typedef struct hs_stats_t {$/;"	s	file:
hs_stats_t	src/or/rephist.c	/^} hs_stats_t;$/;"	t	typeref:struct:hs_stats_t	file:
hs_tests	src/test/test_hs.c	/^struct testcase_t hs_tests[] = {$/;"	v	typeref:struct:testcase_t
hsdirs_fp	src/or/or.h	/^  smartlist_t *hsdirs_fp;$/;"	m	struct:rend_data_t
ht_ent	src/or/or.h	/^  HT_ENTRY(node_t) ht_ent;$/;"	m	struct:node_t
ht_improve_hash	src/ext/ht.h	/^ht_improve_hash(unsigned h)$/;"	f
http_get_header	src/or/directory.c	/^http_get_header(const char *headers, const char *which)$/;"	f	file:
http_set_address_origin	src/or/directory.c	/^http_set_address_origin(const char *headers, connection_t *conn)$/;"	f	file:
id_cert	src/or/or.h	/^  tor_x509_cert_t *id_cert;$/;"	m	struct:or_handshake_state_t
identity	src/or/entrynodes.c	/^  char identity[DIGEST_LEN];$/;"	m	struct:__anon32	file:
identity	src/or/entrynodes.h	/^  char identity[DIGEST_LEN];$/;"	m	struct:entry_guard_t
identity	src/or/or.h	/^  char identity[DIGEST_LEN];$/;"	m	struct:node_t
identity_digest	src/or/channel.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:channel_s
identity_digest	src/or/or.h	/^  char identity_digest[DIGEST_LEN]; \/**< Digest of the router's identity$/;"	m	struct:routerstatus_t
identity_digest	src/or/or.h	/^  char identity_digest[DIGEST_LEN]; \/**< Hash of the public RSA key for$/;"	m	struct:dir_connection_t
identity_digest	src/or/or.h	/^  char identity_digest[DIGEST_LEN]; \/**< Hash of this router's identity key. *\/$/;"	m	struct:extend_info_t
identity_digest	src/or/or.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:document_signature_t
identity_digest	src/or/or.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:networkstatus_voter_info_t
identity_digest	src/or/or.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:or_connection_t
identity_digest	src/or/or.h	/^  char identity_digest[DIGEST_LEN];$/;"	m	struct:signed_descriptor_t
identity_key	src/or/or.h	/^  crypto_pk_t *identity_key;$/;"	m	struct:authority_cert_t
identity_key	src/tools/tor-gencert.c	/^EVP_PKEY *identity_key = NULL;$/;"	v
identity_key_file	src/tools/tor-gencert.c	/^char *identity_key_file = NULL;$/;"	v
identity_map	src/or/or.h	/^  struct digest_ri_map_t *identity_map;$/;"	m	struct:__anon48	typeref:struct:__anon48::digest_ri_map_t
identity_pkey	src/or/or.h	/^  crypto_pk_t *identity_pkey;  \/**< Public RSA key for signing. *\/$/;"	m	struct:__anon45
idle_timeout	src/or/or.h	/^  uint16_t idle_timeout; \/**< How long can this connection sit with no$/;"	m	struct:or_connection_t
idx	src/or/routerlist.c	/^  int idx;$/;"	m	struct:duration_idx_t	file:
idx	src/test/test_containers.c	/^  int idx;$/;"	m	struct:pq_entry_t	file:
ifaddrs_to_smartlist	src/common/address.c	/^ifaddrs_to_smartlist(const struct ifaddrs *ifa)$/;"	f
ifreq_to_smartlist	src/common/address.c	/^ifreq_to_smartlist(char *buf, size_t buflen)$/;"	f
ignore_bootstrap_problem	src/test/test_extorport.c	/^ignore_bootstrap_problem(const char *warn, int reason,$/;"	f	file:
ignore_circuit_mark_for_close_	src/test/test_relay.c	/^ignore_circuit_mark_for_close_(circuit_t *circ, int reason, int line, const char *file)$/;"	f	file:
ignoring_connection_mark_for_close_internal_	src/test/test_relay.c	/^ignoring_connection_mark_for_close_internal_(connection_t *conn,$/;"	f	file:
impl_donna	src/common/crypto_ed25519.c	/^static const ed25519_impl_t impl_donna = {$/;"	v	file:
impl_ref10	src/common/crypto_ed25519.c	/^static const ed25519_impl_t impl_ref10 = {$/;"	v	file:
implem	src/common/sandbox.h	/^  SB_IMPL implem;$/;"	m	struct:sandbox_cfg_elem
in6_addr	src/common/address.h	/^    struct in6_addr in6_addr;$/;"	m	union:tor_addr_t::__anon1	typeref:struct:tor_addr_t::__anon1::in6_addr
in6_addr	src/common/compat.h	/^struct in6_addr$/;"	s
in6_u	src/common/compat.h	/^  } in6_u;$/;"	m	struct:in6_addr	typeref:union:in6_addr::__anon27
in_addr	src/common/address.h	/^    struct in_addr in_addr;$/;"	m	union:tor_addr_t::__anon1	typeref:struct:tor_addr_t::__anon1::in_addr
in_connection_handle_write	src/or/or.h	/^  unsigned int in_connection_handle_write:1;$/;"	m	struct:connection_t
in_flushed_some	src/or/or.h	/^  unsigned int in_flushed_some:1;$/;"	m	struct:connection_t
in_main_thread	src/common/compat_threads.c	/^in_main_thread(void)$/;"	f
in_pool	src/common/workqueue.c	/^  struct threadpool_s *in_pool;$/;"	m	struct:workerthread_s	typeref:struct:workerthread_s::threadpool_s	file:
in_tinytest_main	src/ext/tinytest.c	/^static int in_tinytest_main = 0; \/**< true if we're in tinytest_main().*\/$/;"	v	file:
inbuf	src/or/or.h	/^  buf_t *inbuf; \/**< Buffer holding data read over this connection. *\/$/;"	m	struct:connection_t
inbuf_reached_eof	src/or/or.h	/^  unsigned int inbuf_reached_eof:1; \/**< Boolean: did read() return 0 on this$/;"	m	struct:connection_t
incoming_cmd	src/or/or.h	/^  char *incoming_cmd;$/;"	m	struct:control_connection_t
incoming_cmd_cur_len	src/or/or.h	/^  uint32_t incoming_cmd_cur_len;$/;"	m	struct:control_connection_t
incoming_cmd_len	src/or/or.h	/^  uint32_t incoming_cmd_len;$/;"	m	struct:control_connection_t
incoming_list	src/or/channel.h	/^  smartlist_t *incoming_list;$/;"	m	struct:channel_listener_s
incoming_queue	src/or/channel.h	/^  chan_cell_queue_t incoming_queue;$/;"	m	struct:channel_s
index	src/common/compat_threads.h	/^  DWORD index;$/;"	m	struct:tor_threadlocal_s
index	src/common/workqueue.c	/^  int index;$/;"	m	struct:workerthread_s	file:
inform_pending_connections	src/or/dns.c	/^inform_pending_connections(cached_resolve_t *resolve)$/;"	f	file:
inform_testing_reachability	src/test/test_config.c	/^NS(inform_testing_reachability)(void)$/;"	f
init_addrinfo	src/or/main.c	/^init_addrinfo(void)$/;"	f	file:
init_cache_map	src/or/dns.c	/^init_cache_map(void)$/;"	f	file:
init_circuit_base	src/or/circuitlist.c	/^init_circuit_base(circuit_t *circ)$/;"	f	file:
init_connection_lists	src/or/main.c	/^init_connection_lists(void)$/;"	f
init_control_cookie_authentication	src/test/test_config.c	/^NS(init_control_cookie_authentication)(int enabled)$/;"	f	file:
init_cookie_authentication	src/or/config.c	/^init_cookie_authentication(const char *fname, const char *header,$/;"	f
init_curve25519_keypair_from_file	src/or/router.c	/^init_curve25519_keypair_from_file(curve25519_keypair_t *keys_out,$/;"	f	file:
init_dh_param	src/common/crypto.c	/^init_dh_param(void)$/;"	f	file:
init_exit_node_mock	src/test/test_connection_edge_ap_handshake.c	/^init_exit_node_mock()$/;"	f	file:
init_ext_or_cookie_authentication	src/test/test_config.c	/^NS(init_ext_or_cookie_authentication)(int is_enabled)$/;"	f
init_geoip_countries	src/or/geoip.c	/^init_geoip_countries(void)$/;"	f	file:
init_key_from_file	src/or/router.c	/^init_key_from_file(const char *fname, int generate, int severity,$/;"	f
init_keys	src/test/test_config.c	/^NS(init_keys)(void)$/;"	f
init_keys_client	src/or/router.c	/^init_keys_client(void)$/;"	f
init_keys_common	src/or/router.c	/^init_keys_common(void)$/;"	f	file:
init_libevent	src/or/config.c	/^init_libevent(const or_options_t *options)$/;"	f	file:
init_logging	src/common/log.c	/^init_logging(int disable_startup_queue)$/;"	f
init_mark_unattached_ap_mock	src/test/test_connection_edge_ap_handshake.c	/^init_mark_unattached_ap_mock()$/;"	f	file:
init_mock_global_options	src/test/test_config.c	/^init_mock_global_options(void)$/;"	f
init_mock_options	src/test/test_connection_edge_ap_handshake.c	/^init_mock_options()$/;"	f	file:
init_mock_options	src/test/test_dir_handle_get.c	/^init_mock_options(void){$/;"	f	file:
init_mock_options	src/test/test_main.c	/^init_mock_options(void){$/;"	f	file:
init_mock_state	src/test/test_main.c	/^init_mock_state()$/;"	f	file:
init_nodelist	src/or/nodelist.c	/^init_nodelist(void)$/;"	f	file:
init_relay_connection_test_data	src/test/test_relay.c	/^init_relay_connection_test_data()$/;"	f	file:
init_rewrite_mock	src/test/test_connection_edge_ap_handshake.c	/^init_rewrite_mock()$/;"	f	file:
init_v3_authority_keys	src/or/router.c	/^init_v3_authority_keys(void)$/;"	f	file:
initialise_libseccomp_sandbox	src/common/sandbox.c	/^initialise_libseccomp_sandbox(sandbox_cfg_t* cfg)$/;"	f	file:
initvalue	src/or/confparse.h	/^  const char *initvalue; \/**< String (or null) describing initial value. *\/$/;"	m	struct:config_var_t
inline	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#define inline /;"	d
inline	src/ext/ed25519/donna/ed25519-donna-portable.h	/^	#undef inline$/;"	d
inline	src/ext/trunnel/trunnel-impl.h	/^#define inline /;"	d
inline	src/or/eventdns_tor.h	/^#define inline /;"	d
input_so_far	src/common/torgzip.c	/^  size_t input_so_far;$/;"	m	struct:tor_zlib_state_t	file:
inserted_time	src/or/buffers.h	/^  uint32_t inserted_time; \/**< Timestamp in truncated ms since epoch$/;"	m	struct:chunk_t
inserted_time	src/or/or.h	/^  uint32_t inserted_time; \/**< Time (in milliseconds since epoch, with high$/;"	m	struct:packed_cell_t
inspect_evbuffer	src/or/buffers.c	/^inspect_evbuffer(struct evbuffer *buf, char **data_out, size_t n,$/;"	f	file:
install_bt_handler	src/common/backtrace.c	/^install_bt_handler(void)$/;"	f	file:
install_sigsys_debugging	src/common/sandbox.c	/^install_sigsys_debugging(void)$/;"	f	file:
install_syscall_filter	src/common/sandbox.c	/^install_syscall_filter(sandbox_cfg_t* cfg)$/;"	f	file:
int16_t	src/common/torint.h	/^typedef signed int int16_t;$/;"	t
int16_t	src/common/torint.h	/^typedef signed short int16_t;$/;"	t
int16_t	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	typedef signed short int16_t;$/;"	t
int32_t	src/common/torint.h	/^typedef signed int int32_t;$/;"	t
int32_t	src/common/torint.h	/^typedef signed long int32_t;$/;"	t
int32_t	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	typedef signed int int32_t;$/;"	t
int64_t	src/common/torint.h	/^typedef signed __int64 int64_t;$/;"	t
int64_t	src/common/torint.h	/^typedef signed long int64_t;$/;"	t
int64_t	src/common/torint.h	/^typedef signed long long int64_t;$/;"	t
int64_t	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	typedef signed __int64 int64_t;$/;"	t
int8_t	src/common/torint.h	/^typedef signed char int8_t;$/;"	t
int8_t	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	typedef signed char int8_t;$/;"	t
int_array_contains	src/common/log.c	/^int_array_contains(const int *array, int n, int item)$/;"	f	file:
integrity	src/or/or.h	/^  char integrity[4]; \/**< Used to tell whether cell is corrupted. *\/$/;"	m	struct:__anon40
interval_end_time	src/or/hibernate.c	/^static time_t interval_end_time = 0;$/;"	v	file:
interval_start_time	src/or/hibernate.c	/^static time_t interval_start_time = 0;$/;"	v	file:
interval_starts	src/or/dirvote.c	/^  time_t interval_starts;$/;"	m	struct:__anon99	file:
interval_wakeup_time	src/or/hibernate.c	/^static time_t interval_wakeup_time = 0;$/;"	v	file:
intptr_t	src/common/torint.h	/^typedef int32_t intptr_t;$/;"	t
intptr_t	src/common/torint.h	/^typedef int64_t intptr_t;$/;"	t
intro_digest_map	src/or/circuitlist.c	/^static digestmap_t *intro_digest_map = NULL;$/;"	v	file:
intro_failures	src/or/rendcache.h	/^  digestmap_t *intro_failures;$/;"	m	struct:rend_cache_failure_t
intro_key	src/or/or.h	/^  crypto_pk_t *intro_key; \/**< Introduction key that replaces the service$/;"	m	struct:rend_intro_point_t
intro_key	src/or/or.h	/^  crypto_pk_t *intro_key;$/;"	m	struct:origin_circuit_t
intro_nodes	src/or/or.h	/^  smartlist_t *intro_nodes;$/;"	m	struct:rend_service_descriptor_t
intro_nodes	src/or/rendservice.c	/^  smartlist_t *intro_nodes; \/**< List of rend_intro_point_t's we have,$/;"	m	struct:rend_service_t	file:
intro_period_started	src/or/rendservice.c	/^  time_t intro_period_started; \/**< Start of the current period to build$/;"	m	struct:rend_service_t	file:
intro_point_accepted_intro_count	src/or/rendservice.c	/^intro_point_accepted_intro_count(rend_intro_point_t *intro)$/;"	f	file:
intro_point_should_expire_now	src/or/rendservice.c	/^intro_point_should_expire_now(rend_intro_point_t *intro,$/;"	f	file:
intro_version_handlers	src/or/rendservice.c	/^  (*intro_version_handlers[])($/;"	v	file:
introduce_tests	src/test/test_introduce.c	/^struct testcase_t introduce_tests[] = {$/;"	v	typeref:struct:testcase_t
invalid_router_usage_t	src/or/or.h	/^typedef enum invalid_router_usage_t {$/;"	g
invalid_router_usage_t	src/or/or.h	/^} invalid_router_usage_t;$/;"	t	typeref:enum:invalid_router_usage_t
ip_adapter_addresses_to_smartlist	src/common/address.c	/^ip_adapter_addresses_to_smartlist(const IP_ADAPTER_ADDRESSES *addresses)$/;"	f
ip_address_changed	src/test/test_config.c	/^NS(ip_address_changed)(int at_interface)$/;"	f
ip_high	src/or/geoip.c	/^  struct in6_addr ip_high; \/**< The highest IP in the range, in host order *\/$/;"	m	struct:geoip_ipv6_entry_t	typeref:struct:geoip_ipv6_entry_t::in6_addr	file:
ip_high	src/or/geoip.c	/^  uint32_t ip_high; \/**< The highest IP in the range, in host order *\/$/;"	m	struct:geoip_ipv4_entry_t	file:
ip_low	src/or/geoip.c	/^  struct in6_addr ip_low; \/**< The lowest IP in the range, in host order *\/$/;"	m	struct:geoip_ipv6_entry_t	typeref:struct:geoip_ipv6_entry_t::in6_addr	file:
ip_low	src/or/geoip.c	/^  uint32_t ip_low; \/**< The lowest IP in the range, in host order *\/$/;"	m	struct:geoip_ipv4_entry_t	file:
ipo_token_table	src/or/routerparse.c	/^static token_rule_t ipo_token_table[] = {$/;"	v	file:
ipv4_address	src/or/addressmap.c	/^  char *ipv4_address;$/;"	m	struct:__anon84	file:
ipv4_traffic	src/or/or.h	/^  unsigned int ipv4_traffic : 1;$/;"	m	struct:entry_port_cfg_t
ipv6_addr	src/or/or.h	/^  tor_addr_t ipv6_addr; \/**< IPv6 address for this router. *\/$/;"	m	struct:routerstatus_t
ipv6_addr	src/or/or.h	/^  tor_addr_t ipv6_addr;$/;"	m	struct:__anon45
ipv6_addr	src/or/or.h	/^  tor_addr_t ipv6_addr;$/;"	m	struct:microdesc_t
ipv6_address	src/or/addressmap.c	/^  char *ipv6_address;$/;"	m	struct:__anon84	file:
ipv6_exit_policy	src/or/or.h	/^  short_policy_t *ipv6_exit_policy;$/;"	m	struct:microdesc_t
ipv6_exit_policy	src/or/or.h	/^  struct short_policy_t *ipv6_exit_policy;$/;"	m	struct:__anon45	typeref:struct:__anon45::short_policy_t
ipv6_orport	src/or/or.h	/^  uint16_t ipv6_orport; \/**<IPV6 OR port for this router. *\/$/;"	m	struct:routerstatus_t
ipv6_orport	src/or/or.h	/^  uint16_t ipv6_orport;$/;"	m	struct:__anon45
ipv6_orport	src/or/or.h	/^  uint16_t ipv6_orport;$/;"	m	struct:microdesc_t
ipv6_preferred	src/or/or.h	/^  unsigned int ipv6_preferred:1;$/;"	m	struct:node_t
ipv6_traffic	src/or/or.h	/^  unsigned int ipv6_traffic : 1;$/;"	m	struct:entry_port_cfg_t
isServer	src/common/tortls.h	/^  unsigned int isServer:1; \/**< True iff this is a server-side connection *\/$/;"	m	struct:tor_tls_t
is_accept	src/or/or.h	/^  unsigned int is_accept : 1;$/;"	m	struct:short_policy_t
is_ancient	src/or/or.h	/^  unsigned int is_ancient : 1;$/;"	m	struct:origin_circuit_t
is_annotation	src/or/routerparse.c	/^  int is_annotation;$/;"	m	struct:token_rule_t	file:
is_authority	src/or/or.h	/^  unsigned int is_authority:1; \/**< True iff this is a directory authority$/;"	m	struct:dir_server_t
is_authority	src/or/or.h	/^  unsigned int is_authority:1; \/**< True iff this router is an authority. *\/$/;"	m	struct:routerstatus_t
is_bad_exit	src/or/or.h	/^  unsigned int is_bad_exit:1; \/**< Do we think this exit is censored, borked,$/;"	m	struct:node_t
is_bad_exit	src/or/or.h	/^  unsigned int is_bad_exit:1; \/**< True iff this node is a bad choice for$/;"	m	struct:routerstatus_t
is_bad_for_new_circs	src/or/channel.h	/^  unsigned int is_bad_for_new_circs:1;$/;"	m	struct:channel_s
is_begindir	src/or/connection_edge.h	/^  unsigned is_begindir : 1;$/;"	m	struct:begin_cell_t
is_canonical	src/or/channel.h	/^  int (*is_canonical)(channel_t *, int);$/;"	m	struct:channel_s
is_canonical	src/or/or.h	/^  unsigned int is_canonical:1; \/**< True iff this policy is the canonical$/;"	m	struct:addr_policy_t
is_canonical	src/or/or.h	/^  unsigned int is_canonical:1;$/;"	m	struct:or_connection_t
is_client	src/or/channel.h	/^  unsigned int is_client:1;$/;"	m	struct:channel_s
is_collated	src/or/dircollate.h	/^  int is_collated;$/;"	m	struct:dircollator_s
is_compression_bomb	src/common/torgzip.c	/^is_compression_bomb(size_t size_in, size_t size_out)$/;"	f	file:
is_connection_with_client	src/or/or.h	/^  unsigned int is_connection_with_client:1;$/;"	m	struct:or_connection_t
is_destroy_cell	src/or/channel.c	/^is_destroy_cell(channel_t *chan,$/;"	f	file:
is_dir_cache	src/or/entrynodes.h	/^  unsigned int is_dir_cache : 1; \/**< Is this node a directory cache? *\/$/;"	m	struct:entry_guard_t
is_dns_request	src/or/or.h	/^  unsigned int is_dns_request:1;$/;"	m	struct:edge_connection_t
is_ed	src/trunnel/link_handshake.h	/^  uint8_t is_ed;$/;"	m	struct:auth_ctx_st
is_exit	src/or/or.h	/^  unsigned int is_exit:1; \/**< Do we think this is an OK exit? *\/$/;"	m	struct:node_t
is_exit	src/or/or.h	/^  unsigned int is_exit:1; \/**< True iff this router is a good exit. *\/$/;"	m	struct:routerstatus_t
is_extrainfo	src/or/or.h	/^  unsigned int is_extrainfo : 1;$/;"	m	struct:signed_descriptor_t
is_fast	src/or/or.h	/^  unsigned int is_fast:1; \/** Do we think this is a fast OR? *\/$/;"	m	struct:node_t
is_fast	src/or/or.h	/^  unsigned int is_fast:1; \/**< True iff this router has good bandwidth. *\/$/;"	m	struct:routerstatus_t
is_first_hop	src/or/or.h	/^  unsigned int is_first_hop : 1;$/;"	m	struct:or_circuit_t
is_flagged_running	src/or/or.h	/^  unsigned int is_flagged_running:1;$/;"	m	struct:routerstatus_t
is_for_p_chan	src/or/circuitmux_ewma.c	/^  unsigned int is_for_p_chan : 1;$/;"	m	struct:cell_ewma_s	file:
is_group_writable	src/or/or.h	/^  unsigned is_group_writable : 1;$/;"	m	struct:port_cfg_t
is_gzip_supported	src/common/torgzip.c	/^is_gzip_supported(void)$/;"	f
is_hibernating	src/or/or.h	/^  unsigned int is_hibernating:1; \/**< Whether the router claims to be$/;"	m	struct:__anon45
is_hs_dir	src/or/or.h	/^  unsigned int is_hs_dir:1; \/**< True iff this router is a hidden service$/;"	m	struct:node_t
is_hs_dir	src/or/or.h	/^  unsigned int is_hs_dir:1; \/**< True iff this router is a v2-or-later hidden$/;"	m	struct:routerstatus_t
is_incoming	src/or/channel.h	/^  unsigned int is_incoming:1;$/;"	m	struct:channel_s
is_internal	src/or/or.h	/^  unsigned int is_internal : 1;$/;"	m	struct:__anon53
is_keyval_pair	src/or/control.c	/^is_keyval_pair(const char *s)$/;"	f	file:
is_legacy	src/or/dirvote.c	/^  int is_legacy;$/;"	m	struct:dir_src_ent_t	file:
is_legal_hexdigest	src/or/router.c	/^is_legal_hexdigest(const char *s)$/;"	f
is_legal_nickname	src/or/router.c	/^is_legal_nickname(const char *s)$/;"	f
is_legal_nickname_or_hexdigest	src/or/router.c	/^is_legal_nickname_or_hexdigest(const char *s)$/;"	f
is_loaded	src/or/microdesc.c	/^  int is_loaded;$/;"	m	struct:microdesc_cache_t	file:
is_local	src/or/channel.h	/^  unsigned int is_local:1;$/;"	m	struct:channel_s
is_named	src/or/or.h	/^  unsigned int is_named:1; \/**< True iff "nickname" belongs to this router. *\/$/;"	m	struct:routerstatus_t
is_or_protocol_version_known	src/or/connection_or.c	/^is_or_protocol_version_known(uint16_t v)$/;"	f
is_outgoing	src/or/or.h	/^  unsigned int is_outgoing:1;$/;"	m	struct:or_connection_t
is_owning_control_connection	src/or/or.h	/^  unsigned int is_owning_control_connection:1;$/;"	m	struct:control_connection_t
is_possible_guard	src/or/or.h	/^  unsigned int is_possible_guard:1; \/**< Do we think this is an OK guard? *\/$/;"	m	struct:node_t
is_possible_guard	src/or/or.h	/^  unsigned int is_possible_guard:1; \/**< True iff this router would be a good$/;"	m	struct:routerstatus_t
is_prefix	src/or/control.c	/^  int is_prefix; \/** Must varname match exactly, or must it be a prefix? *\/$/;"	m	struct:getinfo_item_t	file:
is_private	src/or/or.h	/^  unsigned int is_private:1; \/**< True iff this is the pseudo-address,$/;"	m	struct:addr_policy_t
is_private_dir	src/test/test_config.c	/^is_private_dir(const char* path)$/;"	f	file:
is_reading	src/test/test_extorport.c	/^static int is_reading = 1;$/;"	v	file:
is_reading	src/test/test_relay.c	/^static int is_reading = 1;$/;"	v	file:
is_rend_circ	src/or/or.h	/^  unsigned is_rend_circ;$/;"	m	struct:or_circuit_rendinfo_s
is_reverse_dns_lookup	src/or/or.h	/^  unsigned int is_reverse_dns_lookup:1;$/;"	m	struct:edge_connection_t
is_running	src/or/or.h	/^  unsigned int is_running:1; \/**< As far as we know, is this OR currently$/;"	m	struct:node_t
is_running	src/or/or.h	/^  unsigned int is_running:1; \/**< True iff we think this server is running. *\/$/;"	m	struct:dir_server_t
is_sensitive_dir_purpose	src/or/directory.c	/^is_sensitive_dir_purpose(uint8_t dir_purpose)$/;"	f	file:
is_server	src/or/transports.h	/^  int is_server; \/* is it a server proxy? *\/$/;"	m	struct:__anon34
is_shutdown	src/test/test_workqueue.c	/^  int is_shutdown;$/;"	m	struct:state_s	file:
is_socks_socket	src/or/or.h	/^  unsigned int is_socks_socket:1;$/;"	m	struct:entry_connection_t
is_stable	src/or/or.h	/^  unsigned int is_stable:1; \/** Do we think this is a stable OR? *\/$/;"	m	struct:node_t
is_stable	src/or/or.h	/^  unsigned int is_stable:1; \/**< True iff this router stays up a long time. *\/$/;"	m	struct:routerstatus_t
is_syslog	src/common/log.c	/^  int is_syslog; \/**< Boolean: send messages to syslog. *\/$/;"	m	struct:logfile_t	file:
is_temporary	src/common/log.c	/^  int is_temporary; \/**< Boolean: close after initializing logging subsystem.*\/$/;"	m	struct:logfile_t	file:
is_test_address	src/or/dns.c	/^is_test_address(const char *address)$/;"	f	file:
is_transparent_ap	src/or/or.h	/^  unsigned int is_transparent_ap:1;$/;"	m	struct:entry_connection_t
is_unix_addr	src/or/or.h	/^  unsigned is_unix_addr : 1; \/**< True iff this is an AF_UNIX address. *\/$/;"	m	struct:port_cfg_t
is_unix_addr	src/or/rendservice.c	/^  unsigned int is_unix_addr:1;$/;"	m	struct:rend_service_port_config_s	file:
is_unnamed	src/or/or.h	/^  unsigned int is_unnamed:1; \/**< True iff "nickname" belongs to another$/;"	m	struct:routerstatus_t
is_valid	src/or/or.h	/^  unsigned int is_valid:1; \/**< Has a trusted dirserver validated this OR?$/;"	m	struct:node_t
is_valid	src/or/or.h	/^  unsigned int is_valid:1; \/**< True iff this router isn't invalid. *\/$/;"	m	struct:routerstatus_t
is_valid_initial_command	src/or/control.c	/^is_valid_initial_command(control_connection_t *conn, const char *cmd)$/;"	f	file:
is_valid_unix_socket_purpose	src/or/connection.c	/^is_valid_unix_socket_purpose(int purpose)$/;"	f	file:
is_world_writable	src/or/or.h	/^  unsigned is_world_writable : 1;$/;"	m	struct:port_cfg_t
isaacp_mix	src/ext/ed25519/donna/ed25519-randombytes.h	/^isaacp_mix(isaacp_state *st) {$/;"	f
isaacp_random	src/ext/ed25519/donna/ed25519-randombytes.h	/^isaacp_random(isaacp_state *st, void *p, size_t len) {$/;"	f
isaacp_state	src/ext/ed25519/donna/ed25519-randombytes.h	/^} isaacp_state;$/;"	t	typeref:struct:isaacp_state_t
isaacp_state_t	src/ext/ed25519/donna/ed25519-randombytes.h	/^typedef struct isaacp_state_t {$/;"	s
isaacp_step	src/ext/ed25519/donna/ed25519-randombytes.h	/^#define isaacp_step(/;"	d
isatmost128bits256_modm_batch	src/ext/ed25519/donna/modm-donna-32bit.h	/^isatmost128bits256_modm_batch(const bignum256modm a) {$/;"	f
isatmost128bits256_modm_batch	src/ext/ed25519/donna/modm-donna-64bit.h	/^isatmost128bits256_modm_batch(const bignum256modm a) {$/;"	f
isolation_any_streams_attached	src/or/or.h	/^  unsigned int isolation_any_streams_attached : 1;$/;"	m	struct:origin_circuit_t
isolation_flags	src/or/or.h	/^  uint8_t isolation_flags; \/**< Zero or more isolation flags *\/$/;"	m	struct:entry_port_cfg_t
isolation_flags_mixed	src/or/or.h	/^  uint8_t isolation_flags_mixed;$/;"	m	struct:origin_circuit_t
isolation_values_set	src/or/or.h	/^  unsigned int isolation_values_set : 1;$/;"	m	struct:origin_circuit_t
isone256_modm_batch	src/ext/ed25519/donna/modm-donna-32bit.h	/^isone256_modm_batch(const bignum256modm a) {$/;"	f
isone256_modm_batch	src/ext/ed25519/donna/modm-donna-64bit.h	/^isone256_modm_batch(const bignum256modm a) {$/;"	f
iszero256_modm_batch	src/ext/ed25519/donna/modm-donna-32bit.h	/^iszero256_modm_batch(const bignum256modm a) {$/;"	f
iszero256_modm_batch	src/ext/ed25519/donna/modm-donna-64bit.h	/^iszero256_modm_batch(const bignum256modm a) {$/;"	f
iv	src/common/crypto.c	/^  char iv[CIPHER_IV_LEN]; \/**< The initial IV. *\/$/;"	m	struct:crypto_cipher_t	file:
iv	src/trunnel/pwbox.h	/^  uint8_t iv[16];$/;"	m	struct:pwbox_encoded_st
journal_fname	src/or/microdesc.c	/^  char *journal_fname;$/;"	m	struct:microdesc_cache_t	file:
journal_len	src/or/microdesc.c	/^  size_t journal_len;$/;"	m	struct:microdesc_cache_t	file:
journal_len	src/or/or.h	/^  size_t journal_len;$/;"	m	struct:desc_store_t
junk_keypair	src/or/onion.h	/^  curve25519_keypair_t *junk_keypair;$/;"	m	struct:server_onion_keys_t
k0	src/ext/siphash.h	/^  uint64_t k0;$/;"	m	struct:sipkey
k1	src/ext/siphash.h	/^  uint64_t k1;$/;"	m	struct:sipkey
kb_to_bytes	src/or/routerlist.c	/^kb_to_bytes(uint32_t bw)$/;"	f	file:
key	src/common/aes.c	/^  } key;$/;"	m	struct:aes_cnt_cipher	typeref:union:aes_cnt_cipher::__anon106	file:
key	src/common/crypto.c	/^  RSA *key; \/**< The key itself *\/$/;"	m	struct:crypto_pk_t	file:
key	src/common/crypto.c	/^  char key[CIPHER_KEY_LEN]; \/**< The raw key. *\/$/;"	m	struct:crypto_cipher_t	file:
key	src/common/di_ops.c	/^  uint8_t key[32];$/;"	m	struct:di_digest256_map_t	file:
key	src/or/fp_pair.c	/^  fp_pair_t key;$/;"	m	struct:fp_pair_map_entry_s	file:
key	src/or/or.h	/^  char *key;$/;"	m	struct:config_line_t
key	src/or/routerparse.c	/^  crypto_pk_t *key;        \/**< For public keys only.  Heap-allocated. *\/$/;"	m	struct:directory_token_t	file:
key1	src/test/test_link_handshake.c	/^  crypto_pk_t *key1, *key2;$/;"	m	struct:authenticate_data_s	file:
key1	src/test/test_link_handshake.c	/^  crypto_pk_t *key1, *key2;$/;"	m	struct:certs_data_s	file:
key2	src/test/test_link_handshake.c	/^  crypto_pk_t *key1, *key2;$/;"	m	struct:authenticate_data_s	file:
key2	src/test/test_link_handshake.c	/^  crypto_pk_t *key1, *key2;$/;"	m	struct:certs_data_s	file:
key_lock	src/or/router.c	/^static tor_mutex_t *key_lock=NULL;$/;"	v	file:
key_to_string	src/tools/tor-gencert.c	/^key_to_string(EVP_PKEY *key)$/;"	f	file:
keygen	src/common/crypto_ed25519.c	/^  int (*keygen)(unsigned char *, unsigned char *);$/;"	m	struct:__anon15	file:
keygen_force_passphrase	src/or/or.h	/^  } keygen_force_passphrase;$/;"	m	struct:__anon55	typeref:enum:__anon55::__anon60
keygen_passphrase_fd	src/or/or.h	/^  int keygen_passphrase_fd;$/;"	m	struct:__anon55
keypin_check	src/or/keypin.c	/^keypin_check(const uint8_t *rsa_id_digest,$/;"	f
keypin_check_and_add	src/or/keypin.c	/^keypin_check_and_add(const uint8_t *rsa_id_digest,$/;"	f
keypin_check_and_add_impl	src/or/keypin.c	/^keypin_check_and_add_impl(const uint8_t *rsa_id_digest,$/;"	f	file:
keypin_check_lone_rsa	src/or/keypin.c	/^keypin_check_lone_rsa(const uint8_t *rsa_id_digest)$/;"	f
keypin_clear	src/or/keypin.c	/^keypin_clear(void)$/;"	f
keypin_close_journal	src/or/keypin.c	/^keypin_close_journal(void)$/;"	f
keypin_ent_hash_ed	src/or/keypin.c	/^keypin_ent_hash_ed(const keypin_ent_t *a)$/;"	f	file:
keypin_ent_hash_rsa	src/or/keypin.c	/^keypin_ent_hash_rsa(const keypin_ent_t *a)$/;"	f	file:
keypin_ent_st	src/or/keypin.h	/^typedef struct keypin_ent_st {$/;"	s
keypin_ent_t	src/or/keypin.h	/^} keypin_ent_t;$/;"	t	typeref:struct:keypin_ent_st
keypin_ents_eq_ed	src/or/keypin.c	/^keypin_ents_eq_ed(const keypin_ent_t *a, const keypin_ent_t *b)$/;"	f	file:
keypin_ents_eq_rsa	src/or/keypin.c	/^keypin_ents_eq_rsa(const keypin_ent_t *a, const keypin_ent_t *b)$/;"	f	file:
keypin_journal_append_entry	src/or/keypin.c	/^keypin_journal_append_entry(const uint8_t *rsa_id_digest,$/;"	f	file:
keypin_journal_fd	src/or/keypin.c	/^static int keypin_journal_fd = -1;$/;"	v	file:
keypin_load_journal	src/or/keypin.c	/^keypin_load_journal(const char *fname)$/;"	f
keypin_load_journal_impl	src/or/keypin.c	/^keypin_load_journal_impl(const char *data, size_t size)$/;"	f
keypin_open_journal	src/or/keypin.c	/^keypin_open_journal(const char *fname)$/;"	f
keypin_parse_journal_line	src/or/keypin.c	/^keypin_parse_journal_line(const char *cp)$/;"	f
keypin_tests	src/test/test_keypin.c	/^struct testcase_t keypin_tests[] = {$/;"	v	typeref:struct:testcase_t
keys	src/or/cpuworker.c	/^  uint8_t keys[CPATH_KEY_MATERIAL_LEN];$/;"	m	struct:cpuworker_reply_t	file:
known_flags	src/or/or.h	/^  smartlist_t *known_flags;$/;"	m	struct:networkstatus_t
last_address6_family	src/test/test_config.c	/^static sa_family_t last_address6_family;$/;"	v	file:
last_adjusted_tick	src/or/circuitmux_ewma.c	/^  unsigned int last_adjusted_tick;$/;"	m	struct:cell_ewma_s	file:
last_allowed	src/common/util.h	/^  time_t last_allowed;$/;"	m	struct:ratelim_t
last_answer_type	src/test/test_dns.c	/^static uint8_t last_answer_type = 0;$/;"	v	file:
last_attempted	src/or/entrynodes.h	/^  time_t last_attempted; \/**< 0 if we can connect to this guard, or the time$/;"	m	struct:entry_guard_t
last_cell_was_destroy	src/or/circuitmux.c	/^  unsigned int last_cell_was_destroy : 1;$/;"	m	struct:circuitmux_s	file:
last_circ_at	src/or/circuitstats.h	/^  time_t last_circ_at;$/;"	m	struct:circuit_build_times_s
last_connected_socket_fd	src/test/test_address.c	/^static int last_connected_socket_fd = 0;$/;"	v	file:
last_curve25519_onion_key	src/or/router.c	/^static curve25519_keypair_t last_curve25519_onion_key;$/;"	v	file:
last_desc_dumped	src/or/routerparse.c	/^static time_t last_desc_dumped = 0;$/;"	v	file:
last_descriptor_download_attempted	src/or/routerlist.c	/^static time_t last_descriptor_download_attempted = 0;$/;"	v	file:
last_dir_503_at	src/or/or.h	/^  time_t last_dir_503_at; \/**< When did this router last tell us that it$/;"	m	struct:routerstatus_t
last_expired_clientside_circuits	src/or/circuituse.c	/^static time_t last_expired_clientside_circuits = 0;$/;"	v	file:
last_freed_conn	src/test/test_dns.c	/^static connection_t *last_freed_conn = NULL;$/;"	v	file:
last_guessed_ip	src/or/router.c	/^static tor_addr_t last_guessed_ip = TOR_ADDR_NULL;$/;"	v	file:
last_hid_serv_requests_	src/or/rendclient.c	/^static strmap_t *last_hid_serv_requests_ = NULL;$/;"	v	file:
last_interface_ipv4	src/or/connection.c	/^static tor_addr_t *last_interface_ipv4 = NULL;$/;"	v	file:
last_interface_ipv6	src/or/connection.c	/^static tor_addr_t *last_interface_ipv6 = NULL;$/;"	v	file:
last_listed	src/or/or.h	/^  time_t last_listed;$/;"	m	struct:microdesc_t
last_listed_as_valid_until	src/or/or.h	/^  time_t last_listed_as_valid_until;$/;"	m	struct:signed_descriptor_t
last_onion_key	src/or/onion.h	/^  crypto_pk_t *last_onion_key;$/;"	m	struct:server_onion_keys_t
last_reachable	src/or/or.h	/^  time_t last_reachable;        \/* IPv4. *\/$/;"	m	struct:node_t
last_reachable6	src/or/or.h	/^  time_t last_reachable6;       \/* IPv6. *\/$/;"	m	struct:node_t
last_reached_addr	src/or/rephist.c	/^  tor_addr_t last_reached_addr;$/;"	m	struct:or_history_t	file:
last_reached_port	src/or/rephist.c	/^  uint16_t last_reached_port;$/;"	m	struct:or_history_t	file:
last_read_count	src/common/tortls.h	/^  unsigned long last_read_count;$/;"	m	struct:tor_tls_t
last_resolved	src/test/test_dns.c	/^static cached_resolve_t *last_resolved;$/;"	v	file:
last_resolved_addr	src/or/config.c	/^static uint32_t last_resolved_addr = 0;$/;"	v	file:
last_resolved_hostname	src/test/test_dns.c	/^static char *last_resolved_hostname = NULL;$/;"	v	file:
last_rotated_x509_certificate	src/or/main.h	/^  time_t last_rotated_x509_certificate;$/;"	m	struct:__anon5
last_seen_in_minutes	src/or/geoip.c	/^  unsigned int last_seen_in_minutes:30;$/;"	m	struct:clientmap_entry_t	file:
last_sent_bootstrap_message	src/or/control.c	/^static char last_sent_bootstrap_message[BOOTSTRAP_MSG_LEN];$/;"	v	file:
last_served	src/or/rendcache.h	/^  time_t last_served; \/**< When did we last write this one to somebody?$/;"	m	struct:rend_cache_entry_t
last_state_file_write_failed	src/or/statefile.c	/^static int last_state_file_write_failed = 0;$/;"	v	file:
last_time_under_memory_pressure	src/or/relay.c	/^static time_t last_time_under_memory_pressure = 0;$/;"	v	file:
last_warned_circ_ids_exhausted	src/or/channel.h	/^  ratelim_t last_warned_circ_ids_exhausted;$/;"	m	struct:channel_s
last_write_count	src/common/tortls.h	/^  unsigned long last_write_count;$/;"	m	struct:tor_tls_t
lastonionkey	src/or/router.c	/^static crypto_pk_t *lastonionkey=NULL;$/;"	v	file:
launch_descriptor_downloads	src/or/routerlist.c	/^launch_descriptor_downloads(int purpose,$/;"	f
launch_direct_bridge_descriptor_fetch	src/or/entrynodes.c	/^launch_direct_bridge_descriptor_fetch(bridge_info_t *bridge)$/;"	f	file:
launch_dummy_descriptor_download_as_needed	src/or/routerlist.c	/^launch_dummy_descriptor_download_as_needed(time_t now,$/;"	f	file:
launch_managed_proxy	src/or/transports.c	/^launch_managed_proxy(managed_proxy_t *mp)$/;"	f	file:
launch_one_resolve	src/or/dns.c	/^launch_one_resolve(const char *address, uint8_t query_type,$/;"	f	file:
launch_reachability_tests	src/or/main.h	/^  time_t launch_reachability_tests;$/;"	m	struct:__anon5
launch_resolve	src/or/dns.c	/^launch_resolve(cached_resolve_t *resolve)$/;"	f	file:
launch_test_addresses	src/or/dns.c	/^launch_test_addresses(evutil_socket_t fd, short event, void *args)$/;"	f	file:
launch_wildcard_check	src/or/dns.c	/^launch_wildcard_check(int min_len, int max_len, int is_ipv6,$/;"	f	file:
layer_hint	src/test/test_relay.c	/^  crypt_path_t *layer_hint;$/;"	m	struct:relay_connection_test_data_t	file:
le_version_t	src/common/compat_libevent.h	/^typedef uint32_t le_version_t;$/;"	t
le_versions_compatibility	src/common/compat_libevent.c	/^le_versions_compatibility(le_version_t v)$/;"	f
learned_bridge_descriptor	src/or/entrynodes.c	/^learned_bridge_descriptor(routerinfo_t *ri, int from_cache)$/;"	f
learned_router_identity	src/or/entrynodes.c	/^learned_router_identity(const tor_addr_t *addr, uint16_t port,$/;"	f
left	src/ext/ed25519/donna/ed25519-randombytes.h	/^	size_t left;$/;"	m	struct:isaacp_state_t
leftover	src/ext/ed25519/donna/ed25519-hash.h	/^	uint32_t leftover;$/;"	m	struct:sha512_state_t
legacy_id_digest	src/or/or.h	/^  char legacy_id_digest[DIGEST_LEN];$/;"	m	struct:networkstatus_voter_info_t
legacy_key_certificate	src/or/router.c	/^static authority_cert_t *legacy_key_certificate = NULL;$/;"	v	file:
legacy_signing_key	src/or/router.c	/^static crypto_pk_t *legacy_signing_key = NULL;$/;"	v	file:
len	src/common/crypto_ed25519.h	/^  size_t len;$/;"	m	struct:__anon21
len	src/common/util.h	/^  size_t len;$/;"	m	struct:sized_chunk_t
len	src/or/or.h	/^  uint16_t len; \/** Body length *\/$/;"	m	struct:ext_or_cmd_t
len	src/or/rendcache.h	/^  size_t len; \/**< Length of <b>desc<\/b> *\/$/;"	m	struct:rend_cache_entry_t
length	src/or/or.h	/^  uint16_t length; \/**< How long is the payload body? *\/$/;"	m	struct:__anon40
length_of_accounting_period_containing	src/or/hibernate.c	/^length_of_accounting_period_containing(time_t now)$/;"	f	file:
libevent_logging_callback	src/common/compat_libevent.c	/^libevent_logging_callback(int severity, const char *msg)$/;"	f
limb	src/ext/curve25519_donna/curve25519-donna-c64.c	/^typedef uint64_t limb;$/;"	t	file:
limb128bits	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^static const size_t limb128bits = (128 + bignum256modm_bits_per_limb - 1) \/ bignum256modm_bits_per_limb;$/;"	v
link_apconn_to_circ	src/or/circuituse.c	/^link_apconn_to_circ(entry_connection_t *apconn, origin_circuit_t *circ,$/;"	f	file:
link_cert_cert	src/or/routerkeys.c	/^static tor_cert_t *link_cert_cert = NULL;$/;"	v	file:
link_handshake_tests	src/test/test_link_handshake.c	/^struct testcase_t link_handshake_tests[] = {$/;"	v	typeref:struct:testcase_t
link_history_map	src/or/rephist.c	/^  digestmap_t *link_history_map;$/;"	m	struct:or_history_t	file:
link_history_t	src/or/rephist.c	/^typedef struct link_history_t {$/;"	s	file:
link_history_t	src/or/rephist.c	/^} link_history_t;$/;"	t	typeref:struct:link_history_t	file:
link_key	src/common/tortls.h	/^  crypto_pk_t *link_key;$/;"	m	struct:tor_tls_context_t
link_proto	src/or/or.h	/^  uint16_t link_proto; \/**< What protocol version are we using? 0 for$/;"	m	struct:or_connection_t
link_proto_count	src/or/rephist.c	/^static uint64_t link_proto_count[MAX_LINK_PROTO_TO_LOG+1][2];$/;"	v	file:
linked	src/or/or.h	/^  unsigned int linked:1; \/**< True if there is, or has been, a linked_conn. *\/$/;"	m	struct:connection_t
linked_conn	src/or/or.h	/^  struct connection_t *linked_conn;$/;"	m	struct:connection_t	typeref:struct:connection_t::connection_t
linked_conn_is_closed	src/or/or.h	/^  unsigned int linked_conn_is_closed:1;$/;"	m	struct:connection_t
linkhandshake_deadcode_dummy__	src/trunnel/link_handshake.c	/^int linkhandshake_deadcode_dummy__ = 0;$/;"	v
list	src/common/container.h	/^  void **list;$/;"	m	struct:smartlist_t
list	src/or/routerset.h	/^  smartlist_t *list;$/;"	m	struct:routerset_t
list_getinfo_options	src/or/control.c	/^list_getinfo_options(void)$/;"	f	file:
list_pending_descriptor_downloads	src/or/routerlist.c	/^list_pending_descriptor_downloads(digestmap_t *result, int extrainfo)$/;"	f	file:
list_pending_downloads	src/or/routerlist.c	/^list_pending_downloads(digestmap_t *result, digest256map_t *result256,$/;"	f	file:
list_pending_fpsk_downloads	src/or/routerlist.c	/^list_pending_fpsk_downloads(fp_pair_map_t *result)$/;"	f	file:
list_pending_microdesc_downloads	src/or/routerlist.c	/^list_pending_microdesc_downloads(digest256map_t *result)$/;"	f
list_server_status_v1	src/or/dirserv.c	/^list_server_status_v1(smartlist_t *routers, char **router_status_out,$/;"	f
list_single_server_status	src/or/dirserv.c	/^list_single_server_status(const routerinfo_t *desc, int is_live)$/;"	f	file:
list_torrc_options	src/or/config.c	/^list_torrc_options(void)$/;"	f	file:
list_v3_auth_ids	src/or/dirvote.c	/^list_v3_auth_ids(void)$/;"	f	file:
listed_in_last_desc	src/or/or.h	/^  unsigned int listed_in_last_desc : 1;$/;"	m	struct:rend_intro_point_t
listen_limit	src/or/connection.c	/^static int listen_limit = INT_MAX;$/;"	v	file:
listener	src/or/channel.h	/^  channel_listener_fn_ptr listener;$/;"	m	struct:channel_listener_s
listener_connection_new	src/or/connection.c	/^listener_connection_new(int type, int socket_family)$/;"	f
listener_connection_t	src/or/or.h	/^typedef struct listener_connection_t {$/;"	s
listener_connection_t	src/or/or.h	/^} listener_connection_t;$/;"	t	typeref:struct:listener_connection_t
listener_type	src/or/or.h	/^  uint8_t listener_type;$/;"	m	struct:socks_request_t
liveness	src/or/circuitstats.h	/^  network_liveness_t liveness;$/;"	m	struct:circuit_build_times_s
lo	src/ext/ed25519/donna/ed25519-donna-portable.h	/^				uint64_t lo, hi;$/;"	m	struct:uint128_t
lo	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			uint64_t lo, hi;$/;"	m	struct:uint128_t
lo128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define lo128(/;"	d
lo128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define lo128(/;"	d
load_3	src/ext/ed25519/ref10/fe_frombytes.c	/^static crypto_uint64 load_3(const unsigned char *in)$/;"	f	file:
load_3	src/ext/ed25519/ref10/sc_muladd.c	/^static crypto_uint64 load_3(const unsigned char *in)$/;"	f	file:
load_3	src/ext/ed25519/ref10/sc_reduce.c	/^static crypto_uint64 load_3(const unsigned char *in)$/;"	f	file:
load_4	src/ext/ed25519/ref10/fe_frombytes.c	/^static crypto_uint64 load_4(const unsigned char *in)$/;"	f	file:
load_4	src/ext/ed25519/ref10/sc_muladd.c	/^static crypto_uint64 load_4(const unsigned char *in)$/;"	f	file:
load_4	src/ext/ed25519/ref10/sc_reduce.c	/^static crypto_uint64 load_4(const unsigned char *in)$/;"	f	file:
load_authority_keyset	src/or/router.c	/^load_authority_keyset(int legacy, crypto_pk_t **key_out,$/;"	f	file:
load_bridge_stats	src/or/geoip.c	/^load_bridge_stats(time_t now)$/;"	f	file:
load_downloaded_routers	src/or/directory.c	/^load_downloaded_routers(const char *body, smartlist_t *which,$/;"	f	file:
load_ed_keys	src/or/routerkeys.c	/^load_ed_keys(const or_options_t *options, time_t now)$/;"	f
load_identity_key	src/tools/tor-gencert.c	/^load_identity_key(void)$/;"	f	file:
load_limb	src/ext/curve25519_donna/curve25519-donna-c64.c	/^load_limb(const u8 *in) {$/;"	f	file:
load_passphrase	src/tools/tor-gencert.c	/^load_passphrase(void)$/;"	f	file:
load_policy_from_option	src/or/policies.c	/^load_policy_from_option(config_line_t *config, const char *option_name,$/;"	f	file:
load_signing_key	src/tools/tor-gencert.c	/^load_signing_key(void)$/;"	f	file:
load_stats_file	src/or/router.c	/^load_stats_file(const char *filename, const char *end_line, time_t now,$/;"	f	file:
load_torrc_from_disk	src/or/config.c	/^load_torrc_from_disk(config_line_t *cmd_arg, int defaults_file)$/;"	f	file:
load_torrc_from_stdin	src/or/config.c	/^load_torrc_from_stdin(void)$/;"	f	file:
load_windows_system_library	src/common/util.c	/^load_windows_system_library(const TCHAR *library_name)$/;"	f
lock	src/common/crypto.c	/^  tor_mutex_t *lock;$/;"	m	struct:CRYPTO_dynlock_value	file:
lock	src/common/workqueue.c	/^  tor_mutex_t lock;$/;"	m	struct:replyqueue_s	file:
lock	src/common/workqueue.c	/^  tor_mutex_t lock;$/;"	m	struct:threadpool_s	file:
lockfile	src/or/main.c	/^static tor_lockfile_t *lockfile = NULL;$/;"	v	file:
log	src/or/circuitstats.c	/^#undef log$/;"	d	file:
log	src/or/routerparse.c	/^#undef log$/;"	d	file:
log_accounting	src/or/status.c	/^log_accounting(const time_t now, const or_options_t *options)$/;"	f	file:
log_addr_has_changed	src/or/router.c	/^log_addr_has_changed(int severity,$/;"	f	file:
log_backtrace	src/common/backtrace.c	/^log_backtrace(int severity, int domain, const char *msg)$/;"	f
log_callback	src/common/torlog.h	/^typedef void (*log_callback)(int severity, uint32_t domain, const char *msg);$/;"	t
log_cback	src/test/test_options.c	/^log_cback(int severity, uint32_t domain, const char *msg)$/;"	f	file:
log_cert_lifetime	src/common/tortls.c	/^log_cert_lifetime(int severity, const X509 *cert, const char *problem)$/;"	f	file:
log_credential_status	src/common/compat.c	/^log_credential_status(void)$/;"	f	file:
log_debug	src/common/torlog.h	/^#define log_debug(/;"	d
log_domain	src/common/procmon.c	/^  log_domain_mask_t log_domain;$/;"	m	struct:tor_process_monitor_t	file:
log_domain_mask_t	src/common/torlog.h	/^typedef uint32_t log_domain_mask_t;$/;"	t
log_domains_are_logged	src/common/log.c	/^static int log_domains_are_logged = 0;$/;"	v	file:
log_engine	src/common/crypto.c	/^log_engine(const char *fn, ENGINE *e)$/;"	f	file:
log_entry_guards	src/or/entrynodes.c	/^log_entry_guards(int severity)$/;"	f	file:
log_err	src/common/torlog.h	/^#define log_err(/;"	d
log_failed_proxy_connection	src/or/connection.c	/^log_failed_proxy_connection(connection_t *conn)$/;"	f
log_fn	src/common/torlog.h	/^#define log_fn(/;"	d
log_fn_	src/common/log.c	/^log_fn_(int severity, log_domain_mask_t domain, const char *fn,$/;"	f
log_fn_ratelim	src/common/torlog.h	/^#define log_fn_ratelim(/;"	d
log_fn_ratelim_	src/common/log.c	/^log_fn_ratelim_(ratelim_t *ratelim, int severity, log_domain_mask_t domain,$/;"	f
log_free	src/common/log.c	/^log_free(logfile_t *victim)$/;"	f	file:
log_from_handle	src/common/util.c	/^log_from_handle(HANDLE *pipe, int severity)$/;"	f	file:
log_from_pipe	src/common/util.c	/^log_from_pipe(FILE *stream, int severity, const char *executable,$/;"	f	file:
log_global_min_severity_	src/common/log.c	/^int log_global_min_severity_ = LOG_NOTICE;$/;"	v
log_heartbeat	src/or/status.c	/^log_heartbeat(time_t now)$/;"	f
log_info	src/common/torlog.h	/^#define log_info(/;"	d
log_level_to_string	src/common/log.c	/^log_level_to_string(int level)$/;"	f
log_mutex	src/common/log.c	/^static tor_mutex_t log_mutex;$/;"	v	file:
log_mutex_initialized	src/common/log.c	/^static int log_mutex_initialized = 0;$/;"	v	file:
log_new_relay_greeting	src/or/router.c	/^log_new_relay_greeting(void)$/;"	f	file:
log_notice	src/common/torlog.h	/^#define log_notice(/;"	d
log_portfw_spawn_error_message	src/common/util.c	/^log_portfw_spawn_error_message(const char *buf,$/;"	f	file:
log_prefix_	src/common/log.c	/^log_prefix_(char *buf, size_t buf_len, int severity)$/;"	f	file:
log_set_application_name	src/common/log.c	/^log_set_application_name(const char *name)$/;"	f
log_severity_list_t	src/common/torlog.h	/^typedef struct log_severity_list_t {$/;"	s
log_severity_list_t	src/common/torlog.h	/^} log_severity_list_t;$/;"	t	typeref:struct:log_severity_list_t
log_severity_to_event	src/or/control.c	/^log_severity_to_event(int severity)$/;"	f	file:
log_sock_error	src/tools/tor-resolve.c	/^#define log_sock_error(/;"	d	file:
log_time_granularity	src/common/log.c	/^static int log_time_granularity = 1;$/;"	v	file:
log_tor_version	src/common/log.c	/^log_tor_version(logfile_t *lf, int reset)$/;"	f	file:
log_unsafe_socks_warning	src/or/buffers.c	/^log_unsafe_socks_warning(int socks_protocol, const char *address,$/;"	f	file:
log_warn	src/common/torlog.h	/^#define log_warn(/;"	d
logfile_deliver	src/common/log.c	/^logfile_deliver(logfile_t *lf, const char *buf, size_t msg_len,$/;"	f	file:
logfile_t	src/common/log.c	/^typedef struct logfile_t {$/;"	s	file:
logfile_t	src/common/log.c	/^} logfile_t;$/;"	t	typeref:struct:logfile_t	file:
logfile_wants_message	src/common/log.c	/^logfile_wants_message(const logfile_t *lf, int severity,$/;"	f	file:
logfiles	src/common/log.c	/^static logfile_t *logfiles = NULL;$/;"	v	file:
logging_tests	src/test/test_logging.c	/^struct testcase_t logging_tests[] = {$/;"	v	typeref:struct:testcase_t
logmsg_t	src/test/test_options.c	/^} logmsg_t;$/;"	t	typeref:struct:__anon10	file:
logs_free_all	src/common/log.c	/^logs_free_all(void)$/;"	f
logs_set_domain_logging	src/common/log.c	/^logs_set_domain_logging(int enabled)$/;"	f
logv	src/test/test_status.c	/^NS(logv)(int severity, log_domain_mask_t domain, const char *funcname,$/;"	f	file:
logv	src/test/test_status.c	/^NS(logv)(int severity, log_domain_mask_t domain,$/;"	f	file:
logv	src/test/test_tortls.c	/^NS(logv)(int severity, log_domain_mask_t domain,$/;"	f	file:
lookup_cached_dir_by_fp	src/or/dirserv.c	/^lookup_cached_dir_by_fp(const char *fp)$/;"	f	file:
lookup_last_hid_serv_request	src/or/rendclient.c	/^lookup_last_hid_serv_request(routerstatus_t *hs_dir,$/;"	f	file:
lost_owning_controller	src/or/control.c	/^lost_owning_controller(const char *owner_type, const char *loss_manner)$/;"	f	file:
low	src/or/dirvote.c	/^  int low;$/;"	m	struct:consensus_method_range_t	file:
low	src/or/dirvote.c	/^  int low;$/;"	m	struct:microdesc_vote_line_t	file:
lt256_modm_batch	src/ext/ed25519/donna/modm-donna-32bit.h	/^lt256_modm_batch(const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
lt256_modm_batch	src/ext/ed25519/donna/modm-donna-64bit.h	/^lt256_modm_batch(const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
lt_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^lt_modm(bignum256modm_element_t a, bignum256modm_element_t b) {$/;"	f
lt_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^lt_modm(bignum256modm_element_t a, bignum256modm_element_t b) {$/;"	f
lte256_modm_batch	src/ext/ed25519/donna/modm-donna-32bit.h	/^lte256_modm_batch(const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
lte256_modm_batch	src/ext/ed25519/donna/modm-donna-64bit.h	/^lte256_modm_batch(const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
m_expand	src/or/onion_ntor.c	/^  const char *m_expand;$/;"	m	struct:tweakset_t	file:
made_contact	src/or/entrynodes.h	/^  unsigned int made_contact : 1; \/**< 0 if we have never connected to this$/;"	m	struct:entry_guard_t
made_placeholder_at	src/or/circuitlist.c	/^  time_t made_placeholder_at;$/;"	m	struct:chan_circid_circuit_map_t	file:
magic	src/common/tortls.h	/^  uint32_t magic;$/;"	m	struct:tor_tls_t
magic	src/or/buffers.h	/^  uint32_t magic; \/**< Magic cookie for debugging: Must be set to$/;"	m	struct:buf_t
magic	src/or/channel.h	/^  uint32_t magic;$/;"	m	struct:channel_s
magic	src/or/circuitmux.h	/^  uint32_t magic;$/;"	m	struct:circuitmux_policy_circ_data_s
magic	src/or/circuitmux.h	/^  uint32_t magic;$/;"	m	struct:circuitmux_policy_data_s
magic	src/or/confparse.h	/^  uint32_t magic; \/**< Required 'magic value' to make sure we have a struct$/;"	m	struct:config_format_t
magic	src/or/cpuworker.c	/^  uint32_t magic;$/;"	m	struct:cpuworker_reply_t	file:
magic	src/or/cpuworker.c	/^  uint32_t magic;$/;"	m	struct:cpuworker_request_t	file:
magic	src/or/dns_structs.h	/^  uint32_t magic;  \/**< Must be CACHED_RESOLVE_MAGIC *\/$/;"	m	struct:cached_resolve_t
magic	src/or/or.h	/^  uint32_t magic; \/**< For memory and type debugging: must equal$/;"	m	struct:circuit_t
magic	src/or/or.h	/^  uint32_t magic; \/**< For memory debugging: must equal one of$/;"	m	struct:connection_t
magic	src/or/or.h	/^  uint32_t magic;$/;"	m	struct:crypt_path_t
magic	src/test/test_workqueue.c	/^  int magic;$/;"	m	struct:state_s	file:
magic_	src/or/or.h	/^  uint32_t magic_;$/;"	m	struct:__anon55
magic_	src/or/or.h	/^  uint32_t magic_;$/;"	m	struct:__anon61
magic_offset	src/or/confparse.h	/^  off_t magic_offset; \/**< Offset of the magic value within the struct. *\/$/;"	m	struct:config_format_t
main	src/or/tor_main.c	/^main(int argc, char *argv[])$/;"	f
main	src/test/bench.c	/^main(int argc, const char **argv)$/;"	f
main	src/test/test-child.c	/^main(int argc, char **argv)$/;"	f
main	src/test/test-memwipe.c	/^main(int argc, char **argv)$/;"	f
main	src/test/test_bt_cl.c	/^main(int argc, char **argv)$/;"	f
main	src/test/test_ntor_cl.c	/^main(int argc, char **argv)$/;"	f
main	src/test/test_workqueue.c	/^main(int argc, char **argv)$/;"	f
main	src/test/testing_common.c	/^main(int c, const char **v)$/;"	f
main	src/tools/tor-checkkey.c	/^main(int c, char **v)$/;"	f
main	src/tools/tor-gencert.c	/^main(int argc, char **argv)$/;"	f
main	src/tools/tor-resolve.c	/^main(int argc, char **argv)$/;"	f
main_tests	src/test/test_main.c	/^struct testcase_t main_tests[] = {$/;"	v	typeref:struct:testcase_t
main_thread_id	src/common/compat_threads.c	/^static unsigned long main_thread_id = -1;$/;"	v	file:
major	src/or/or.h	/^  int major;$/;"	m	struct:tor_version_t
make_consensus_method_list	src/or/dirvote.c	/^make_consensus_method_list(int low, int high, const char *separator)$/;"	f	file:
make_fake_cell	src/test/test_channel.c	/^make_fake_cell(cell_t *c)$/;"	f
make_fake_var_cell	src/test/test_channel.c	/^make_fake_var_cell(var_cell_t *c)$/;"	f
make_intro_from_plaintext	src/test/test_introduce.c	/^make_intro_from_plaintext($/;"	f	file:
make_new_id	src/tools/tor-gencert.c	/^int make_new_id = 0;$/;"	v
make_ntor_onion_key_crosscert	src/or/routerkeys.c	/^make_ntor_onion_key_crosscert(const curve25519_keypair_t *onion_key,$/;"	f
make_path_absolute	src/common/compat.c	/^make_path_absolute(char *fname)$/;"	f
make_pending_resolve_cached	src/or/dns.c	/^make_pending_resolve_cached(cached_resolve_t *resolve)$/;"	f	file:
make_relay_cell	src/test/test_cell_formats.c	/^make_relay_cell(cell_t *out, uint8_t command,$/;"	f	file:
make_socket_reuseable	src/or/connection.c	/^make_socket_reuseable(tor_socket_t sock)$/;"	f	file:
make_specifier	src/common/crypto_s2k.c	/^make_specifier(uint8_t *spec_out, uint8_t type, unsigned flags)$/;"	f	file:
make_tap_onion_key_crosscert	src/or/routerkeys.c	/^make_tap_onion_key_crosscert(const crypto_pk_t *onion_key,$/;"	f
managed_proxy_create	src/or/transports.c	/^managed_proxy_create(const smartlist_t *transport_list,$/;"	f
managed_proxy_destroy	src/or/transports.c	/^managed_proxy_destroy(managed_proxy_t *mp,$/;"	f
managed_proxy_has_argv	src/or/transports.c	/^managed_proxy_has_argv(const managed_proxy_t *mp, char **proxy_argv)$/;"	f	file:
managed_proxy_list	src/or/transports.c	/^static smartlist_t *managed_proxy_list = NULL;$/;"	v	file:
managed_proxy_t	src/or/transports.h	/^} managed_proxy_t;$/;"	t	typeref:struct:__anon34
map_expires	src/or/connection_edge.h	/^  time_t map_expires;$/;"	m	struct:__anon85
mapping_size	src/common/compat.h	/^  size_t mapping_size; \/**< Size of the actual mapping. (This is this file$/;"	m	struct:tor_mmap_t
mark	src/or/circuitmux.c	/^  unsigned int mark:1;$/;"	m	struct:circuit_muxinfo_s	file:
mark_all_dirservers_up	src/or/routerlist.c	/^mark_all_dirservers_up(smartlist_t *server_list)$/;"	f	file:
mark_bridge_list	src/or/entrynodes.c	/^mark_bridge_list(void)$/;"	f
mark_circuit_unusable_for_new_conns	src/or/circuituse.c	/^mark_circuit_unusable_for_new_conns(origin_circuit_t *circ)$/;"	f
mark_handled	src/test/test_workqueue.c	/^mark_handled(int serial)$/;"	f	file:
mark_logs_temp	src/common/log.c	/^mark_logs_temp(void)$/;"	f
mark_my_descriptor_dirty	src/or/router.c	/^mark_my_descriptor_dirty(const char *reason)$/;"	f
mark_my_descriptor_dirty_if_too_old	src/or/router.c	/^mark_my_descriptor_dirty_if_too_old(time_t now)$/;"	f
mark_or_down	src/or/rephist.c	/^mark_or_down(or_history_t *hist, time_t when, int failed)$/;"	f	file:
mark_or_up	src/or/rephist.c	/^mark_or_up(or_history_t *hist, time_t when)$/;"	f	file:
mark_socket_open	src/common/compat.c	/^#define mark_socket_open(/;"	d	file:
mark_socket_open	src/common/compat.c	/^mark_socket_open(tor_socket_t s)$/;"	f	file:
mark_transport_list	src/or/transports.c	/^mark_transport_list(void)$/;"	f
mark_unattached_mock	src/test/test_relaycell.c	/^mark_unattached_mock(entry_connection_t *conn, int endreason,$/;"	f	file:
marked_circuit_free_cells	src/or/circuitlist.c	/^marked_circuit_free_cells(circuit_t *circ)$/;"	f	file:
marked_circuit_free_stream_bytes	src/or/circuitlist.c	/^marked_circuit_free_stream_bytes(circuit_t *c)$/;"	f	file:
marked_circuit_streams_free_bytes	src/or/circuitlist.c	/^marked_circuit_streams_free_bytes(edge_connection_t *stream)$/;"	f	file:
marked_for_close	src/or/or.h	/^  uint16_t marked_for_close; \/**< Should we close this circuit at the end of$/;"	m	struct:circuit_t
marked_for_close	src/or/or.h	/^  uint16_t marked_for_close; \/**< Should we close this conn on the next$/;"	m	struct:connection_t
marked_for_close_file	src/or/or.h	/^  const char *marked_for_close_file; \/**< For debugging: in which file was this$/;"	m	struct:circuit_t
marked_for_close_file	src/or/or.h	/^  const char *marked_for_close_file; \/**< For debugging: in which file were$/;"	m	struct:connection_t
marked_for_removal	src/or/entrynodes.c	/^  unsigned marked_for_removal : 1;$/;"	m	struct:__anon32	file:
marked_for_removal	src/or/transports.h	/^  unsigned int marked_for_removal : 1;$/;"	m	struct:__anon34
marked_for_removal	src/or/transports.h	/^  unsigned marked_for_removal : 1;$/;"	m	struct:transport_t
mask	src/common/container.h	/^  int mask; \/**< One less than the number of bits in <b>ba<\/b>; always one less$/;"	m	struct:__anon79
maskbits	src/or/or.h	/^  maskbits_t maskbits; \/**< Accept\/reject all addresses <b>a<\/b> such that the$/;"	m	struct:addr_policy_t
maskbits_t	src/common/address.h	/^typedef uint8_t maskbits_t;$/;"	t
masks	src/common/torlog.h	/^  log_domain_mask_t masks[LOG_DEBUG-LOG_ERR+1];$/;"	m	struct:log_severity_list_t
master_identity_key	src/or/routerkeys.c	/^static ed25519_keypair_t *master_identity_key = NULL;$/;"	v	file:
master_signing_key	src/or/routerkeys.c	/^static ed25519_keypair_t *master_signing_key = NULL;$/;"	v	file:
matches_extend_info	src/or/channel.h	/^  int (*matches_extend_info)(channel_t *, extend_info_t *);$/;"	m	struct:channel_s
matches_target	src/or/channel.h	/^  int (*matches_target)(channel_t *, const tor_addr_t *);$/;"	m	struct:channel_s
max_args	src/or/routerparse.c	/^  int max_args;$/;"	m	struct:token_rule_t	file:
max_batch_size	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^#define max_batch_size /;"	d
max_cnt	src/or/routerparse.c	/^  int max_cnt;$/;"	m	struct:token_rule_t	file:
max_dl_per_request	src/or/routerlist.c	/^max_dl_per_request(const or_options_t *options, int purpose)$/;"	f	file:
max_introductions	src/or/or.h	/^  int max_introductions;$/;"	m	struct:rend_intro_point_t
max_middle_cells	src/or/or.h	/^  uint32_t max_middle_cells;$/;"	m	struct:or_circuit_t
max_pending_tasks	src/or/cpuworker.c	/^static int max_pending_tasks = 128;$/;"	v	file:
max_port	src/or/or.h	/^  uint16_t min_port, max_port;$/;"	m	struct:short_policy_entry_t
max_socket	src/common/compat.c	/^static int max_socket = -1;$/;"	v	file:
max_sockets	src/common/compat.c	/^static int max_sockets = 1024;$/;"	v	file:
max_streams_close_circuit	src/or/rendservice.c	/^  int max_streams_close_circuit;$/;"	m	struct:rend_service_t	file:
max_streams_per_circuit	src/or/rendservice.c	/^  int max_streams_per_circuit;$/;"	m	struct:rend_service_t	file:
max_total	src/or/rephist.c	/^  uint64_t max_total; \/**< Largest value that total_obs has taken on in the$/;"	m	struct:bw_array_t	file:
maxima	src/or/rephist.c	/^  uint64_t maxima[NUM_TOTALS];$/;"	m	struct:bw_array_t	file:
maxticks	src/ext/ed25519/donna/test-ticks.h	/^#define maxticks /;"	d
may_use_optimistic_data	src/or/or.h	/^  unsigned int may_use_optimistic_data : 1;$/;"	m	struct:entry_connection_t
mbw_cache	src/or/dirserv.c	/^static digestmap_t *mbw_cache = NULL;$/;"	v	file:
mbw_cache_entry_s	src/or/dirserv.c	/^typedef struct mbw_cache_entry_s {$/;"	s	file:
mbw_cache_entry_t	src/or/dirserv.c	/^} mbw_cache_entry_t;$/;"	t	typeref:struct:mbw_cache_entry_s	file:
mbw_kb	src/or/dirserv.c	/^  long mbw_kb;$/;"	m	struct:mbw_cache_entry_s	file:
md	src/or/dirvote.c	/^  microdesc_t *md;$/;"	m	struct:microdesc_vote_line_t	file:
md	src/or/or.h	/^  microdesc_t *md;$/;"	m	struct:node_t
mean_num_cells_in_queue	src/or/rephist.c	/^  double mean_num_cells_in_queue;$/;"	m	struct:circ_buffer_stats_t	file:
mean_time_cells_in_queue	src/or/rephist.c	/^  double mean_time_cells_in_queue;$/;"	m	struct:circ_buffer_stats_t	file:
measured_bw_kb	src/or/or.h	/^  uint32_t measured_bw_kb; \/**< Measured bandwidth (capacity) of the router *\/$/;"	m	struct:vote_routerstatus_t
measured_bw_line_apply	src/or/dirserv.c	/^measured_bw_line_apply(measured_bw_line_t *parsed_line,$/;"	f
measured_bw_line_parse	src/or/dirserv.c	/^measured_bw_line_parse(measured_bw_line_t *out, const char *orig_line)$/;"	f
measured_bw_line_t	src/or/or.h	/^typedef struct measured_bw_line_t {$/;"	s
measured_bw_line_t	src/or/or.h	/^} measured_bw_line_t;$/;"	t	typeref:struct:measured_bw_line_t
median	src/test/test_containers.c	/^#define median(/;"	d	file:
median	src/test/test_containers.c	/^#undef median$/;"	d	file:
median_double	src/common/container.h	/^median_double(double *array, int n_elements)$/;"	f
median_int	src/common/container.h	/^median_int(int *array, int n_elements)$/;"	f
median_int32	src/common/container.h	/^median_int32(int32_t *array, int n_elements)$/;"	f
median_time	src/common/container.h	/^median_time(time_t *array, int n_elements)$/;"	f
median_uint32	src/common/container.h	/^median_uint32(uint32_t *array, int n_elements)$/;"	f
mem	src/common/memarea.c	/^    char mem[1]; \/**< Memory space in this chunk.  *\/$/;"	m	union:memarea_chunk_t::__anon8	file:
mem	src/common/memarea.c	/^  char mem[FLEXIBLE_ARRAY_MEMBER] __attribute__((aligned(MEMAREA_ALIGN)));$/;"	m	struct:memarea_chunk_t	file:
mem	src/or/buffers.h	/^  char mem[FLEXIBLE_ARRAY_MEMBER]; \/**< The actual memory used for storage in$/;"	m	struct:chunk_t
mem_size	src/common/memarea.c	/^  size_t mem_size; \/**< How much RAM is available in mem, total? *\/$/;"	m	struct:memarea_chunk_t	file:
memarea_alloc	src/common/memarea.c	/^memarea_alloc(memarea_t *area, size_t sz)$/;"	f
memarea_alloc_zero	src/common/memarea.c	/^memarea_alloc_zero(memarea_t *area, size_t sz)$/;"	f
memarea_assert_ok	src/common/memarea.c	/^memarea_assert_ok(memarea_t *area)$/;"	f
memarea_chunk_t	src/common/memarea.c	/^typedef struct memarea_chunk_t {$/;"	s	file:
memarea_chunk_t	src/common/memarea.c	/^} memarea_chunk_t;$/;"	t	typeref:struct:memarea_chunk_t	file:
memarea_clear	src/common/memarea.c	/^memarea_clear(memarea_t *area)$/;"	f
memarea_clear_freelist	src/common/memarea.c	/^memarea_clear_freelist(void)$/;"	f
memarea_drop_all	src/common/memarea.c	/^memarea_drop_all(memarea_t *area)$/;"	f
memarea_get_stats	src/common/memarea.c	/^memarea_get_stats(memarea_t *area, size_t *allocated_out, size_t *used_out)$/;"	f
memarea_memdup	src/common/memarea.c	/^memarea_memdup(memarea_t *area, const void *s, size_t n)$/;"	f
memarea_new	src/common/memarea.c	/^memarea_new(void)$/;"	f
memarea_owns_ptr	src/common/memarea.c	/^memarea_owns_ptr(const memarea_t *area, const void *p)$/;"	f
memarea_strdup	src/common/memarea.c	/^memarea_strdup(memarea_t *area, const char *s)$/;"	f
memarea_strndup	src/common/memarea.c	/^memarea_strndup(memarea_t *area, const char *s, size_t n)$/;"	f
memarea_t	src/common/memarea.c	/^struct memarea_t {$/;"	s	file:
memarea_t	src/common/memarea.h	/^typedef struct memarea_t memarea_t;$/;"	t	typeref:struct:memarea_t
memeq_opt	src/or/connection_edge.c	/^memeq_opt(const char *a, size_t alen, const char *b, size_t blen)$/;"	f	file:
memlen	src/or/buffers.h	/^  size_t memlen; \/**< The number of usable bytes of storage in <b>mem<\/b>. *\/$/;"	m	struct:chunk_t
memory_units	src/or/confparse.c	/^static struct unit_table_t memory_units[] = {$/;"	v	typeref:struct:unit_table_t	file:
memwipe	src/common/crypto.c	/^memwipe(void *mem, uint8_t byte, size_t sz)$/;"	f
mess_with_connection	src/test/test_relay.c	/^mess_with_connection(connection_t *conn)$/;"	f	file:
messages	src/test/test_options.c	/^static smartlist_t *messages = NULL;$/;"	v	file:
method_bits	src/common/torgzip.c	/^method_bits(compress_method_t method, zlib_compression_level_t level)$/;"	f	file:
methods	src/trunnel/link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint16_t) methods;$/;"	m	struct:auth_challenge_cell_st
micro	src/or/or.h	/^  int micro;$/;"	m	struct:tor_version_t
microdesc	src/or/or.h	/^  vote_microdesc_hash_t *microdesc;$/;"	m	struct:vote_routerstatus_t
microdesc	src/test/test_dir_handle_get.c	/^static const char microdesc[] =$/;"	v	file:
microdesc_average_size	src/or/microdesc.c	/^microdesc_average_size(microdesc_cache_t *cache)$/;"	f
microdesc_cache_clean	src/or/microdesc.c	/^microdesc_cache_clean(microdesc_cache_t *cache, time_t cutoff, int force)$/;"	f
microdesc_cache_clear	src/or/microdesc.c	/^microdesc_cache_clear(microdesc_cache_t *cache)$/;"	f
microdesc_cache_lookup_by_digest256	src/or/microdesc.c	/^microdesc_cache_lookup_by_digest256(microdesc_cache_t *cache, const char *d)$/;"	f
microdesc_cache_rebuild	src/or/microdesc.c	/^microdesc_cache_rebuild(microdesc_cache_t *cache, int force)$/;"	f
microdesc_cache_reload	src/or/microdesc.c	/^microdesc_cache_reload(microdesc_cache_t *cache)$/;"	f
microdesc_cache_t	src/or/microdesc.c	/^struct microdesc_cache_t {$/;"	s	file:
microdesc_cache_t	src/or/or.h	/^typedef struct microdesc_cache_t microdesc_cache_t;$/;"	t	typeref:struct:microdesc_cache_t
microdesc_check_counts	src/or/microdesc.c	/^microdesc_check_counts(void)$/;"	f
microdesc_consensus_methods	src/or/dirvote.c	/^} microdesc_consensus_methods[] = {$/;"	v	typeref:struct:consensus_method_range_t	file:
microdesc_eq_	src/or/microdesc.c	/^microdesc_eq_(microdesc_t *a, microdesc_t *b)$/;"	f	file:
microdesc_free	src/or/microdesc.h	/^#define microdesc_free(/;"	d
microdesc_free_	src/or/microdesc.c	/^microdesc_free_(microdesc_t *md, const char *fname, int lineno)$/;"	f
microdesc_free_all	src/or/microdesc.c	/^microdesc_free_all(void)$/;"	f
microdesc_hash_	src/or/microdesc.c	/^microdesc_hash_(microdesc_t *md)$/;"	f	file:
microdesc_hash_line	src/or/or.h	/^  char *microdesc_hash_line;$/;"	m	struct:vote_microdesc_hash_t
microdesc_list_missing_digest256	src/or/microdesc.c	/^microdesc_list_missing_digest256(networkstatus_t *ns, microdesc_cache_t *cache,$/;"	f
microdesc_t	src/or/or.h	/^typedef struct microdesc_t {$/;"	s
microdesc_t	src/or/or.h	/^} microdesc_t;$/;"	t	typeref:struct:microdesc_t
microdesc_tests	src/test/test_microdesc.c	/^struct testcase_t microdesc_tests[] = {$/;"	v	typeref:struct:testcase_t
microdesc_token_table	src/or/routerparse.c	/^static token_rule_t microdesc_token_table[] = {$/;"	v	file:
microdesc_vote_line_t	src/or/dirvote.c	/^typedef struct microdesc_vote_line_t {$/;"	s	file:
microdesc_vote_line_t	src/or/dirvote.c	/^} microdesc_vote_line_t;$/;"	t	typeref:struct:microdesc_vote_line_t	file:
microdesc_wipe_body	src/or/microdesc.c	/^microdesc_wipe_body(microdesc_t *md)$/;"	f	file:
microdescs_add_list_to_cache	src/or/microdesc.c	/^microdescs_add_list_to_cache(microdesc_cache_t *cache,$/;"	f
microdescs_add_to_cache	src/or/microdesc.c	/^microdescs_add_to_cache(microdesc_cache_t *cache,$/;"	f
microdescs_parse_from_string	src/or/routerparse.c	/^microdescs_parse_from_string(const char *s, const char *eos,$/;"	f
min_args	src/or/routerparse.c	/^  int min_args;$/;"	m	struct:token_rule_t	file:
min_cnt	src/or/routerparse.c	/^  int min_cnt;$/;"	m	struct:token_rule_t	file:
min_port	src/or/or.h	/^  uint16_t min_port, max_port;$/;"	m	struct:short_policy_entry_t
minheap_idx	src/or/dns_structs.h	/^  int minheap_idx;$/;"	m	struct:cached_resolve_t
minor	src/or/or.h	/^  int minor;$/;"	m	struct:tor_version_t
mkdir	src/test/test_checkdir.c	/^#define mkdir(/;"	d	file:
mmap	src/or/or.h	/^  tor_mmap_t *mmap; \/**< A mmap for the main file in the store. *\/$/;"	m	struct:desc_store_t
mmap_handle	src/common/compat.h	/^  HANDLE mmap_handle;$/;"	m	struct:tor_mmap_t
mock_addent	src/test/test_keypin.c	/^mock_addent(keypin_ent_t *ent)$/;"	f	file:
mock_addent_got	src/test/test_keypin.c	/^static smartlist_t *mock_addent_got = NULL;$/;"	v	file:
mock_addr	src/test/test_address.c	/^static struct sockaddr *mock_addr = NULL;$/;"	v	typeref:struct:sockaddr	file:
mock_ccm_tgt_1	src/test/test_scheduler.c	/^static circuitmux_t *mock_ccm_tgt_1 = NULL;$/;"	v	file:
mock_ccm_tgt_2	src/test/test_scheduler.c	/^static circuitmux_t *mock_ccm_tgt_2 = NULL;$/;"	v	file:
mock_cert	src/test/test_dir_handle_get.c	/^static authority_cert_t * mock_cert = NULL;$/;"	v	file:
mock_cgp_tgt_1	src/test/test_scheduler.c	/^static circuitmux_t *mock_cgp_tgt_1 = NULL;$/;"	v	file:
mock_cgp_tgt_2	src/test/test_scheduler.c	/^static circuitmux_t *mock_cgp_tgt_2 = NULL;$/;"	v	file:
mock_cgp_val_1	src/test/test_scheduler.c	/^static circuitmux_policy_t *mock_cgp_val_1 = NULL;$/;"	v	file:
mock_cgp_val_2	src/test/test_scheduler.c	/^static circuitmux_policy_t *mock_cgp_val_2 = NULL;$/;"	v	file:
mock_clean_saved_logs	src/test/log_test_helpers.c	/^mock_clean_saved_logs(void)$/;"	f
mock_close_called	src/test/test_link_handshake.c	/^static int mock_close_called = 0;$/;"	v	file:
mock_close_for_err	src/test/test_link_handshake.c	/^mock_close_for_err(or_connection_t *orconn, int flush)$/;"	f	file:
mock_config_line	src/test/test_config.c	/^mock_config_line(const char *key, const char *val)$/;"	f	file:
mock_ei_insert	src/test/test_dir.c	/^mock_ei_insert(routerlist_t *rl, extrainfo_t *ei, int warn_if_incompatible)$/;"	f	file:
mock_ei_insert_list	src/test/test_dir.c	/^static smartlist_t *mock_ei_insert_list = NULL;$/;"	v	file:
mock_event_base	src/test/test_scheduler.c	/^static struct event_base *mock_event_base = NULL;$/;"	v	typeref:struct:event_base	file:
mock_event_free_all	src/test/test_scheduler.c	/^mock_event_free_all(void)$/;"	f	file:
mock_event_init	src/test/test_scheduler.c	/^mock_event_init(void)$/;"	f	file:
mock_get_by_ei_dd_calls	src/test/test_dir.c	/^static int mock_get_by_ei_dd_calls = 0;$/;"	v	file:
mock_get_by_ei_dd_unrecognized	src/test/test_dir.c	/^static int mock_get_by_ei_dd_unrecognized = 0;$/;"	v	file:
mock_get_by_ei_desc_digest	src/test/test_dir.c	/^mock_get_by_ei_desc_digest(const char *d)$/;"	f	file:
mock_get_dirportfrontpage	src/test/test_dir_handle_get.c	/^mock_get_dirportfrontpage(void){$/;"	f	file:
mock_get_from_dirserver	src/test/test_routerlist.c	/^mock_get_from_dirserver(uint8_t dir_purpose, uint8_t router_purpose,$/;"	f	file:
mock_get_options	src/test/test_dir.c	/^mock_get_options(void)$/;"	f	file:
mock_get_options	src/test/test_dir_handle_get.c	/^mock_get_options(void)$/;"	f	file:
mock_get_options_calls	src/test/test_dir.c	/^static int mock_get_options_calls = 0;$/;"	v	file:
mock_get_options_mutable	src/test/test_config.c	/^mock_get_options_mutable(void)$/;"	f
mock_get_peer_cert	src/test/test_link_handshake.c	/^mock_get_peer_cert(tor_tls_t *tls)$/;"	f	file:
mock_get_tlssecrets	src/test/test_link_handshake.c	/^mock_get_tlssecrets(tor_tls_t *tls, uint8_t *secrets_out)$/;"	f	file:
mock_global_circuitlist	src/test/test_status.c	/^static smartlist_t * mock_global_circuitlist = NULL;$/;"	v	file:
mock_global_options	src/test/test_config.c	/^static or_options_t * mock_global_options = NULL;$/;"	v	file:
mock_got_var_cell	src/test/test_link_handshake.c	/^var_cell_t *mock_got_var_cell = NULL;$/;"	v
mock_initiate_descriptor_downloads	src/test/test_routerlist.c	/^mock_initiate_descriptor_downloads(const routerstatus_t *source,$/;"	f	file:
mock_ns_get_by_flavor	src/test/test_dir_handle_get.c	/^mock_ns_get_by_flavor(consensus_flavor_t f)$/;"	f	file:
mock_ns_get_by_flavor	src/test/test_microdesc.c	/^mock_ns_get_by_flavor(consensus_flavor_t f)$/;"	f	file:
mock_ns_val	src/test/test_dir_handle_get.c	/^static networkstatus_t *mock_ns_val = NULL;$/;"	v	file:
mock_ns_val	src/test/test_microdesc.c	/^static networkstatus_t *mock_ns_val = NULL;$/;"	v	file:
mock_options	src/test/test_dir.c	/^static or_options_t *mock_options = NULL;$/;"	v	file:
mock_options	src/test/test_dir_handle_get.c	/^static or_options_t *mock_options = NULL;$/;"	v	file:
mock_options	src/test/test_main.c	/^static or_options_t *mock_options = NULL;$/;"	v	file:
mock_options	src/test/test_status.c	/^static or_options_t * NS(mock_options) = NULL;$/;"	v	file:
mock_peer_cert	src/test/test_link_handshake.c	/^static tor_x509_cert_t *mock_peer_cert = NULL;$/;"	v	file:
mock_rend_data	src/test/test_rendcache.c	/^mock_rend_data(char *onion_address)$/;"	f	file:
mock_rgsbd_called	src/test/test_microdesc.c	/^static int mock_rgsbd_called = 0;$/;"	v	file:
mock_rgsbd_val_a	src/test/test_microdesc.c	/^static routerstatus_t *mock_rgsbd_val_a = NULL;$/;"	v	file:
mock_rgsbd_val_b	src/test/test_microdesc.c	/^static routerstatus_t *mock_rgsbd_val_b = NULL;$/;"	v	file:
mock_router_get_dl_status	src/test/test_dir.c	/^mock_router_get_dl_status(const char *d)$/;"	f	file:
mock_router_get_dl_status_calls	src/test/test_dir.c	/^static int mock_router_get_dl_status_calls = 0;$/;"	v	file:
mock_router_get_dl_status_unrecognized	src/test/test_dir.c	/^static int mock_router_get_dl_status_unrecognized = 0;$/;"	v	file:
mock_router_get_status_by_digest	src/test/test_microdesc.c	/^mock_router_get_status_by_digest(networkstatus_t *c, const char *d)$/;"	f	file:
mock_routerinfo	src/test/test_dir_handle_get.c	/^static routerinfo_t *mock_routerinfo;$/;"	v	file:
mock_routerinfo	src/test/test_rendcache.c	/^static routerinfo_t *mock_routerinfo;$/;"	v	file:
mock_routerinfo	src/test/test_status.c	/^static routerinfo_t *mock_routerinfo;$/;"	v	file:
mock_saved_log_at	src/test/log_test_helpers.c	/^mock_saved_log_at(int ix)$/;"	f
mock_saved_log_number	src/test/log_test_helpers.c	/^mock_saved_log_number(void)$/;"	f
mock_saved_logs	src/test/log_test_helpers.c	/^mock_saved_logs(void)$/;"	f
mock_saved_severity_at	src/test/log_test_helpers.c	/^mock_saved_severity_at(int ix)$/;"	f
mock_saving_logv	src/test/log_test_helpers.c	/^mock_saving_logv(int severity, log_domain_mask_t domain, const char *funcname, const char *suffix, const char *format, va_list ap)$/;"	f
mock_send_authenticate	src/test/test_link_handshake.c	/^mock_send_authenticate(or_connection_t *conn, int type)$/;"	f	file:
mock_send_authenticate_called	src/test/test_link_handshake.c	/^static int mock_send_authenticate_called = 0;$/;"	v	file:
mock_send_netinfo	src/test/test_link_handshake.c	/^mock_send_netinfo(or_connection_t *conn)$/;"	f	file:
mock_send_netinfo_called	src/test/test_link_handshake.c	/^static int mock_send_netinfo_called = 0;$/;"	v	file:
mock_set_circid_type	src/test/test_link_handshake.c	/^mock_set_circid_type(channel_t *chan,$/;"	f	file:
mock_state	src/test/test_main.c	/^static or_state_t *mock_state = NULL;$/;"	v	file:
mock_state	src/test/test_status.c	/^static or_state_t * NS(mock_state) = NULL;$/;"	v	file:
mock_tls_cert_matches_key	src/test/test_link_handshake.c	/^mock_tls_cert_matches_key(const tor_tls_t *tls, const tor_x509_cert_t *cert)$/;"	f	file:
mock_tls_cert_matches_key	src/test/test_tortls.c	/^mock_tls_cert_matches_key(const tor_tls_t *tls, const tor_x509_cert_t *cert)$/;"	f	file:
mock_tls_read	src/test/test_buffers.c	/^mock_tls_read(tor_tls_t *tls, char *cp, size_t len)$/;"	f	file:
mock_write_var_cell	src/test/test_link_handshake.c	/^mock_write_var_cell(const var_cell_t *vc, or_connection_t *conn)$/;"	f	file:
mocked_circuit_mark_for_close_	src/test/test_relay.c	/^static void mocked_circuit_mark_for_close_(circuit_t *circ, int reason, int line,$/;"	f	file:
mocked_relay_send_command_from_edge_	src/test/test_relay.c	/^mocked_relay_send_command_from_edge_(streamid_t stream_id, circuit_t *circ,$/;"	f	file:
modm_m	src/ext/ed25519/donna/modm-donna-32bit.h	/^static const bignum256modm modm_m = {$/;"	v
modm_m	src/ext/ed25519/donna/modm-donna-64bit.h	/^static const bignum256modm modm_m = {$/;"	v
modm_mu	src/ext/ed25519/donna/modm-donna-32bit.h	/^static const bignum256modm modm_mu = {$/;"	v
modm_mu	src/ext/ed25519/donna/modm-donna-64bit.h	/^static const bignum256modm modm_mu = {$/;"	v
monitor_owning_controller_process	src/or/control.c	/^monitor_owning_controller_process(const char *process_spec)$/;"	f
months_lifetime	src/tools/tor-gencert.c	/^int months_lifetime = DEFAULT_LIFETIME;$/;"	v
mostly_read	src/or/rephist.c	/^static uint32_t mostly_read = 0;$/;"	v	file:
mostly_written	src/or/rephist.c	/^static uint32_t mostly_written = 0;$/;"	v	file:
move_buf_to_buf	src/or/buffers.c	/^move_buf_to_buf(buf_t *buf_out, buf_t *buf_in, size_t *buf_flushlen)$/;"	f
msec_per_tick	src/common/compat_libevent.h	/^  int msec_per_tick;$/;"	m	struct:tor_libevent_cfg
msec_since_midnight	src/or/connection.c	/^msec_since_midnight(const struct timeval *tvnow)$/;"	f	file:
msg	src/common/compat.c	/^struct { int code; const char *msg; } windows_socket_errors[] = {$/;"	m	struct:__anon25	file:
msg	src/common/crypto_ed25519.h	/^  const uint8_t *msg;$/;"	m	struct:__anon21
msg	src/common/log.c	/^  char *msg; \/**< The content of the message *\/$/;"	m	struct:pending_log_message_t	file:
msg	src/or/control.c	/^  char *msg;$/;"	m	struct:queued_event_s	file:
msg	src/test/test_options.c	/^  char *msg;$/;"	m	struct:__anon10	file:
msg	src/test/test_workqueue.c	/^    uint8_t msg[32];$/;"	m	union:ecdh_work_s::__anon87	file:
msg	src/test/test_workqueue.c	/^  uint8_t msg[128];$/;"	m	struct:rsa_work_s	file:
msglen	src/test/test_workqueue.c	/^  uint8_t msglen;$/;"	m	struct:rsa_work_s	file:
mul256_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^mul256_modm(bignum256modm r, const bignum256modm x, const bignum256modm y) {$/;"	f
mul256_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^mul256_modm(bignum256modm r, const bignum256modm x, const bignum256modm y) {$/;"	f
mul32x32_64	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define mul32x32_64(/;"	d
mul32x32_64	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#undef mul32x32_64	/;"	d
mul32x32_64	src/ext/ed25519/donna/ed25519-donna-portable.h	/^#define mul32x32_64(/;"	d
mul64x64_128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define mul64x64_128(/;"	d
mul64x64_128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define mul64x64_128(/;"	d
multiplier	src/or/confparse.c	/^  uint64_t multiplier; \/**< How many of the base unit appear in this unit *\/$/;"	m	struct:unit_table_t	file:
mum_conn	src/test/test_relaycell.c	/^static entry_connection_t *mum_conn;$/;"	v	file:
mum_endreason	src/test/test_relaycell.c	/^static int mum_endreason;$/;"	v	file:
mum_ncalls	src/test/test_relaycell.c	/^static int mum_ncalls;$/;"	v	file:
munge_extrainfo_into_routerinfo	src/or/control.c	/^munge_extrainfo_into_routerinfo(const char *ri_body,$/;"	f	file:
mutex	src/common/compat_threads.h	/^  CRITICAL_SECTION mutex;$/;"	m	struct:tor_mutex_t
mutex	src/test/test_threads.c	/^  tor_mutex_t *mutex;$/;"	m	struct:cv_testinfo_s	file:
muxinfo	src/or/circuitmux.c	/^  circuit_muxinfo_t muxinfo;$/;"	m	struct:chanid_circid_muxinfo_t	file:
my_auth_cert	src/common/tortls.h	/^  tor_x509_cert_t *my_auth_cert;$/;"	m	struct:tor_tls_context_t
my_id_cert	src/common/tortls.h	/^  tor_x509_cert_t *my_id_cert;$/;"	m	struct:tor_tls_context_t
my_identity	src/or/onion.h	/^  uint8_t my_identity[DIGEST_LEN];$/;"	m	struct:server_onion_keys_t
my_link_cert	src/common/tortls.h	/^  tor_x509_cert_t *my_link_cert;$/;"	m	struct:tor_tls_context_t
n	src/or/or.h	/^  int n; \/**< The number of cells in the queue. *\/$/;"	m	struct:cell_queue_t
n_accepted	src/or/channel.h	/^  uint64_t n_accepted;$/;"	m	struct:channel_listener_s
n_active_circuits	src/or/circuitmux.c	/^  unsigned int n_circuits, n_active_circuits;$/;"	m	struct:circuitmux_s	file:
n_add_default_fallback_dir_servers_known_default	src/test/test_config.c	/^static int n_add_default_fallback_dir_servers_known_default = 0;$/;"	v	file:
n_args	src/or/routerparse.c	/^  int n_args:30;               \/**< Number of elements in args *\/$/;"	m	struct:directory_token_t	file:
n_authorities	src/or/dircollate.h	/^  int n_authorities;$/;"	m	struct:dircollator_s
n_bad	src/ext/tinytest.c	/^static int n_bad = 0; \/**< Number of tests that have failed. *\/$/;"	v	file:
n_bits_set_u8	src/common/util.c	/^n_bits_set_u8(uint8_t v)$/;"	f
n_bogus_times	src/or/rephist.c	/^static int n_bogus_times = 0;$/;"	v	file:
n_bytes_at_soft_limit	src/or/hibernate.c	/^static uint64_t n_bytes_at_soft_limit = 0;$/;"	v	file:
n_bytes_read_in_interval	src/or/hibernate.c	/^static uint64_t n_bytes_read_in_interval = 0;$/;"	v	file:
n_bytes_recved	src/or/channel.h	/^  uint64_t n_cells_recved, n_bytes_recved;$/;"	m	struct:channel_s
n_bytes_written_in_interval	src/or/hibernate.c	/^static uint64_t n_bytes_written_in_interval = 0;$/;"	v	file:
n_bytes_xmitted	src/or/channel.h	/^  uint64_t n_cells_xmitted, n_bytes_xmitted;$/;"	m	struct:channel_s
n_calls_since_last_time	src/common/util.h	/^  int n_calls_since_last_time;$/;"	m	struct:ratelim_t
n_cells	src/or/circuitmux.c	/^  unsigned int n_cells;$/;"	m	struct:circuitmux_s	file:
n_cells_in_circ_queues	src/or/circuitlist.c	/^n_cells_in_circ_queues(const circuit_t *c)$/;"	f
n_cells_recved	src/or/channel.h	/^  uint64_t n_cells_recved, n_bytes_recved;$/;"	m	struct:channel_s
n_cells_xmitted	src/or/channel.h	/^  uint64_t n_cells_xmitted, n_bytes_xmitted;$/;"	m	struct:channel_s
n_certs	src/trunnel/link_handshake.h	/^  uint8_t n_certs;$/;"	m	struct:certs_cell_st
n_chan	src/or/or.h	/^  channel_t *n_chan;$/;"	m	struct:circuit_t
n_chan_cells	src/or/or.h	/^  cell_queue_t n_chan_cells;$/;"	m	struct:circuit_t
n_chan_create_cell	src/or/or.h	/^  struct create_cell_t *n_chan_create_cell;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::create_cell_t
n_channel_bytes_in_queues	src/or/channel.c	/^static uint64_t n_channel_bytes_in_queues = 0;$/;"	v	file:
n_channel_bytes_passed_to_lower_layer	src/or/channel.c	/^static uint64_t n_channel_bytes_passed_to_lower_layer = 0;$/;"	v	file:
n_channel_bytes_queued	src/or/channel.c	/^static uint64_t n_channel_bytes_queued = 0;$/;"	v	file:
n_channel_cells_in_queues	src/or/channel.c	/^static uint64_t n_channel_cells_in_queues = 0;$/;"	v	file:
n_channel_cells_passed_to_lower_layer	src/or/channel.c	/^static uint64_t n_channel_cells_passed_to_lower_layer = 0;$/;"	v	file:
n_channel_cells_queued	src/or/channel.c	/^static uint64_t n_channel_cells_queued = 0;$/;"	v	file:
n_channels_allocated	src/or/channel.c	/^static uint64_t n_channels_allocated = 0;$/;"	v	file:
n_circ_id	src/or/or.h	/^  circid_t n_circ_id;$/;"	m	struct:circuit_t
n_circuit_failures	src/or/circuituse.c	/^static int n_circuit_failures = 0;$/;"	v	file:
n_circuits	src/or/circuitmux.c	/^  unsigned int n_circuits, n_active_circuits;$/;"	m	struct:circuitmux_s	file:
n_conn_fail	src/or/rephist.c	/^  unsigned long n_conn_fail;$/;"	m	struct:or_history_t	file:
n_conn_ok	src/or/rephist.c	/^  unsigned long n_conn_ok;$/;"	m	struct:or_history_t	file:
n_connection_free	src/test/test_dns.c	/^static int n_connection_free = 0;$/;"	v	file:
n_countries	src/or/routerset.h	/^  int n_countries;$/;"	m	struct:routerset_t
n_crypto	src/or/or.h	/^  crypto_cipher_t *n_crypto;$/;"	m	struct:or_circuit_t
n_default_authorities	src/test/test_config.c	/^#define n_default_authorities /;"	d	file:
n_delete_pending	src/or/or.h	/^  unsigned int n_delete_pending : 1;$/;"	m	struct:circuit_t
n_digest	src/or/or.h	/^  crypto_digest_t *n_digest;$/;"	m	struct:or_circuit_t
n_dns_cancel_pending_resolve_replacement	src/test/test_dns.c	/^static int n_dns_cancel_pending_resolve_replacement = 0;$/;"	v	file:
n_download_failures	src/or/or.h	/^  uint8_t n_download_failures; \/**< Number of failures trying to download the$/;"	m	struct:download_status_t
n_entries	src/or/or.h	/^  unsigned int n_entries : 31;$/;"	m	struct:short_policy_t
n_extend_fail	src/or/rephist.c	/^  unsigned long n_extend_fail;$/;"	m	struct:link_history_t	file:
n_extend_ok	src/or/rephist.c	/^  unsigned long n_extend_ok;$/;"	m	struct:link_history_t	file:
n_extensions	src/trunnel/ed25519_cert.h	/^  uint8_t n_extensions;$/;"	m	struct:ed25519_cert_st
n_failed_cancel	src/test/test_workqueue.c	/^static int n_failed_cancel = 0;$/;"	v	file:
n_fake_impl	src/test/test_dns.c	/^static int n_fake_impl = 0;$/;"	v	file:
n_get_interface_address	src/test/test_config.c	/^static int n_get_interface_address = 0;$/;"	v	file:
n_get_interface_address6	src/test/test_config.c	/^static int n_get_interface_address6 = 0;$/;"	v	file:
n_get_interface_address6_failure	src/test/test_config.c	/^static int n_get_interface_address6_failure = 0;$/;"	v	file:
n_get_interface_address_failure	src/test/test_config.c	/^static int n_get_interface_address_failure = 0;$/;"	v	file:
n_gethostname_failure	src/test/test_config.c	/^static int n_gethostname_failure = 0;$/;"	v	file:
n_gethostname_localhost	src/test/test_config.c	/^static int n_gethostname_localhost = 0;$/;"	v	file:
n_gethostname_replacement	src/test/test_config.c	/^static int n_gethostname_replacement = 0;$/;"	v	file:
n_handled	src/test/test_workqueue.c	/^  int n_handled;$/;"	m	struct:state_s	file:
n_hop	src/or/or.h	/^  extend_info_t *n_hop;$/;"	m	struct:circuit_t
n_hostname_01010101	src/test/test_config.c	/^static int n_hostname_01010101 = 0;$/;"	v	file:
n_hostname_failure	src/test/test_config.c	/^static int n_hostname_failure = 0;$/;"	v	file:
n_hostname_localhost	src/test/test_config.c	/^static int n_hostname_localhost = 0;$/;"	v	file:
n_intervals_valid	src/or/or.h	/^  int n_intervals_valid;$/;"	m	struct:vote_timing_t
n_intro_circuits_launched	src/or/rendservice.c	/^  int n_intro_circuits_launched; \/**< Count of intro circuits we have$/;"	m	struct:rend_service_t	file:
n_intro_points_wanted	src/or/rendservice.c	/^  unsigned int n_intro_points_wanted; \/**< Number of intro points this$/;"	m	struct:rend_service_t	file:
n_ipv6_requests_made	src/or/dns.c	/^static uint64_t n_ipv6_requests_made = 0;$/;"	v	file:
n_ipv6_timeouts	src/or/dns.c	/^static uint64_t n_ipv6_timeouts = 0;$/;"	v	file:
n_leapdays	src/common/util.c	/^n_leapdays(int y1, int y2)$/;"	f	file:
n_libevent_errors	src/or/main.c	/^static int n_libevent_errors = 0;$/;"	v	file:
n_measurements	src/or/control.c	/^static int n_measurements = 0;$/;"	v	file:
n_methods	src/trunnel/link_handshake.h	/^  uint16_t n_methods;$/;"	m	struct:auth_challenge_cell_st
n_msgs	src/test/test_status.c	/^static int NS(n_msgs) = 0;$/;"	v	file:
n_mux	src/or/or.h	/^  circuitmux_t *n_mux;$/;"	m	struct:circuit_t
n_ok	src/ext/tinytest.c	/^static int n_ok = 0; \/**< Number of tests that have passed *\/$/;"	v	file:
n_onionskins_decrypted	src/or/rephist.c	/^  unsigned long n_onionskins_decrypted;$/;"	m	struct:__anon86	file:
n_onionskins_encrypted	src/or/rephist.c	/^  unsigned long n_onionskins_encrypted;$/;"	m	struct:__anon86	file:
n_openssl_mutexes_	src/common/crypto.c	/^static int n_openssl_mutexes_ = 0;$/;"	v	file:
n_or_protocol_versions	src/or/connection_or.c	/^static const int n_or_protocol_versions =$/;"	v	file:
n_read	src/or/control.c	/^  uint32_t n_read;$/;"	m	struct:cached_bw_event_s	file:
n_read	src/or/or.h	/^  uint32_t n_read;$/;"	m	struct:edge_connection_t
n_read_circ_bw	src/or/or.h	/^  uint32_t n_read_circ_bw;$/;"	m	struct:origin_circuit_t
n_read_conn_bw	src/or/or.h	/^  uint32_t n_read_conn_bw;$/;"	m	struct:connection_t
n_received	src/test/test_workqueue.c	/^static int n_received = 0;$/;"	v	file:
n_remaining	src/test/test_buffers.c	/^int n_remaining;$/;"	v
n_rend_client_ops	src/or/rephist.c	/^  unsigned long n_rend_client_ops;$/;"	m	struct:__anon86	file:
n_rend_mid_ops	src/or/rephist.c	/^  unsigned long n_rend_mid_ops;$/;"	m	struct:__anon86	file:
n_rend_server_ops	src/or/rephist.c	/^  unsigned long n_rend_server_ops;$/;"	m	struct:__anon86	file:
n_seconds_active_in_interval	src/or/hibernate.c	/^static uint32_t n_seconds_active_in_interval = 0;$/;"	v	file:
n_seconds_to_hit_soft_limit	src/or/hibernate.c	/^static int n_seconds_to_hit_soft_limit = 0;$/;"	v	file:
n_seen	src/or/microdesc.c	/^  unsigned n_seen;$/;"	m	struct:microdesc_cache_t	file:
n_send_resolved_cell_replacement	src/test/test_dns.c	/^static int n_send_resolved_cell_replacement = 0;$/;"	v	file:
n_send_resolved_hostname_cell_replacement	src/test/test_dns.c	/^static int n_send_resolved_hostname_cell_replacement = 0;$/;"	v	file:
n_sent	src/test/test_workqueue.c	/^static int n_sent = 0;$/;"	v	file:
n_shutdown	src/test/test_threads.c	/^  int n_shutdown;$/;"	m	struct:cv_testinfo_s	file:
n_signed_dir_objs	src/or/rephist.c	/^  unsigned long n_signed_dir_objs;$/;"	m	struct:__anon86	file:
n_signed_routerdescs	src/or/rephist.c	/^  unsigned long n_signed_routerdescs;$/;"	m	struct:__anon86	file:
n_sigsafe_log_fds	src/common/log.c	/^static int n_sigsafe_log_fds = 1;$/;"	v	file:
n_skipped	src/ext/tinytest.c	/^static int n_skipped = 0; \/**< Number of tests that have been skipped. *\/$/;"	v	file:
n_sockets_open	src/common/compat.c	/^static int n_sockets_open = 0;$/;"	v	file:
n_streams	src/or/or.h	/^  edge_connection_t *n_streams;$/;"	m	struct:or_circuit_t
n_successful_cancel	src/test/test_workqueue.c	/^static int n_successful_cancel = 0;$/;"	v	file:
n_threads	src/common/workqueue.c	/^  int n_threads;$/;"	m	struct:threadpool_s	file:
n_threads	src/test/test_threads.c	/^  int n_threads;$/;"	m	struct:cv_testinfo_s	file:
n_timeouts	src/test/test_threads.c	/^  int n_timeouts;$/;"	m	struct:cv_testinfo_s	file:
n_tls_client_handshakes	src/or/rephist.c	/^  unsigned long n_tls_client_handshakes;$/;"	m	struct:__anon86	file:
n_tls_server_handshakes	src/or/rephist.c	/^  unsigned long n_tls_server_handshakes;$/;"	m	struct:__anon86	file:
n_usec	src/or/cpuworker.c	/^  uint32_t n_usec;$/;"	m	struct:cpuworker_reply_t	file:
n_v3_ns_requests	src/or/geoip.c	/^  uint32_t n_v3_ns_requests;$/;"	m	struct:geoip_country_t	file:
n_verified_dir_objs	src/or/rephist.c	/^  unsigned long n_verified_dir_objs;$/;"	m	struct:__anon86	file:
n_verified_routerdescs	src/or/rephist.c	/^  unsigned long n_verified_routerdescs;$/;"	m	struct:__anon86	file:
n_votes	src/or/dircollate.h	/^  int n_votes;$/;"	m	struct:dircollator_s
n_wakeups	src/test/test_threads.c	/^  int n_wakeups;$/;"	m	struct:cv_testinfo_s	file:
n_wildcard_requests	src/or/dns.c	/^static int n_wildcard_requests = 0;$/;"	v	file:
n_written	src/or/control.c	/^  uint32_t n_written;$/;"	m	struct:cached_bw_event_s	file:
n_written	src/or/or.h	/^  uint32_t n_written;$/;"	m	struct:edge_connection_t
n_written_circ_bw	src/or/or.h	/^  uint32_t n_written_circ_bw;$/;"	m	struct:origin_circuit_t
n_written_conn_bw	src/or/or.h	/^  uint32_t n_written_conn_bw;$/;"	m	struct:connection_t
name	src/common/sandbox.c	/^  char *name;$/;"	m	struct:cached_getaddrinfo_item_t	file:
name	src/ext/eventdns.h	/^	char name[1];$/;"	m	struct:evdns_server_question
name	src/ext/tinytest.h	/^	const char *name; \/**< An identifier for this case. *\/$/;"	m	struct:testcase_t
name	src/ext/tinytest.h	/^	const char *name;$/;"	m	struct:testlist_alias_t
name	src/or/config.c	/^  const char *name;$/;"	m	struct:__anon7	file:
name	src/or/confparse.h	/^  const char *name; \/**< The full keyword (case insensitive). *\/$/;"	m	struct:config_var_t
name	src/or/confparse.h	/^  const char *name;$/;"	m	struct:config_var_description_t
name	src/or/transports.h	/^  char *name;$/;"	m	struct:transport_t
name	src/test/bench.c	/^  const char *name;$/;"	m	struct:benchmark_t	file:
name	src/test/test-memwipe.c	/^  const char *name;$/;"	m	struct:testcase	file:
name_lookup_warned	src/or/or.h	/^  unsigned int name_lookup_warned:1; \/**< Have we warned the user for referring$/;"	m	struct:node_t
named_server_map	src/or/networkstatus.c	/^static strmap_t *named_server_map = NULL;$/;"	v	file:
names	src/or/routerset.h	/^  strmap_t *names;$/;"	m	struct:routerset_t
nameserver_config_failed	src/or/dns.c	/^static int nameserver_config_failed = 0;$/;"	v	file:
nameservers_configured	src/or/dns.c	/^static int nameservers_configured = 0;$/;"	v	file:
nanostart	src/test/bench.c	/^static uint64_t nanostart;$/;"	v	file:
ncalls	src/test/test_circuitlist.c	/^  int ncalls;$/;"	m	struct:__anon77	file:
ncalls	src/test/test_circuitlist.c	/^  int ncalls;$/;"	m	struct:__anon78	file:
need_capacity	src/or/or.h	/^  unsigned int need_capacity : 1;$/;"	m	struct:__anon53
need_to_update_have_min_dir_info	src/or/nodelist.c	/^static int need_to_update_have_min_dir_info = 1;$/;"	v	file:
need_uptime	src/or/or.h	/^  unsigned int need_uptime : 1;$/;"	m	struct:__anon53
needs_close	src/common/log.c	/^  int needs_close; \/**< Boolean: true if the stream gets closed on shutdown. *\/$/;"	m	struct:logfile_t	file:
needs_retest_if_added	src/or/or.h	/^  unsigned int needs_retest_if_added:1;$/;"	m	struct:__anon45
negative	src/ext/ed25519/ref10/ge_scalarmult_base.c	/^static unsigned char negative(signed char b)$/;"	f	file:
negotiated_callback	src/common/tortls.h	/^  void (*negotiated_callback)(tor_tls_t *tls, void *arg);$/;"	m	struct:tor_tls_t
net_is_disabled	src/test/test_config.c	/^NS(net_is_disabled)(void)$/;"	f
net_params	src/or/or.h	/^  smartlist_t *net_params;$/;"	m	struct:networkstatus_t
network_init	src/common/compat.c	/^network_init(void)$/;"	f
network_is_live	src/or/control.c	/^static int network_is_live = 0;$/;"	v	file:
network_last_live	src/or/or.h	/^  time_t network_last_live;$/;"	m	struct:__anon62
network_liveness_t	src/or/or.h	/^} network_liveness_t;$/;"	t	typeref:struct:__anon62
networkstatus_add_detached_signatures	src/or/dirvote.c	/^networkstatus_add_detached_signatures(networkstatus_t *target,$/;"	f
networkstatus_check_consensus_signature	src/or/networkstatus.c	/^networkstatus_check_consensus_signature(networkstatus_t *consensus,$/;"	f
networkstatus_check_document_signature	src/or/networkstatus.c	/^networkstatus_check_document_signature(const networkstatus_t *consensus,$/;"	f
networkstatus_check_weights	src/or/dirvote.c	/^networkstatus_check_weights(int64_t Wgg, int64_t Wgd, int64_t Wmg,$/;"	f	file:
networkstatus_compute_bw_weights_v10	src/or/dirvote.c	/^networkstatus_compute_bw_weights_v10(smartlist_t *chunks, int64_t G,$/;"	f	file:
networkstatus_compute_consensus	src/or/dirvote.c	/^networkstatus_compute_consensus(smartlist_t *votes,$/;"	f
networkstatus_consensus_download_failed	src/or/networkstatus.c	/^networkstatus_consensus_download_failed(int status_code, const char *flavname)$/;"	f
networkstatus_consensus_token_table	src/or/routerparse.c	/^static token_rule_t networkstatus_consensus_token_table[] = {$/;"	v	file:
networkstatus_copy_old_consensus_info	src/or/networkstatus.c	/^networkstatus_copy_old_consensus_info(networkstatus_t *new_c,$/;"	f	file:
networkstatus_detached_signature_token_table	src/or/routerparse.c	/^static token_rule_t networkstatus_detached_signature_token_table[] = {$/;"	v	file:
networkstatus_dl_check_interval	src/or/main.c	/^#define networkstatus_dl_check_interval(/;"	d	file:
networkstatus_dump_bridge_status_to_file	src/or/networkstatus.c	/^networkstatus_dump_bridge_status_to_file(time_t now)$/;"	f
networkstatus_format_signatures	src/or/dirvote.c	/^networkstatus_format_signatures(networkstatus_t *consensus,$/;"	f	file:
networkstatus_free_all	src/or/networkstatus.c	/^networkstatus_free_all(void)$/;"	f
networkstatus_get_bw_weight	src/or/networkstatus.c	/^networkstatus_get_bw_weight(networkstatus_t *ns, const char *weight_name,$/;"	f
networkstatus_get_detached_signatures	src/or/dirvote.c	/^networkstatus_get_detached_signatures(smartlist_t *consensuses)$/;"	f
networkstatus_get_flavor_name	src/or/networkstatus.c	/^networkstatus_get_flavor_name(consensus_flavor_t flav)$/;"	f
networkstatus_get_live_consensus	src/or/networkstatus.c	/^networkstatus_get_live_consensus(time_t now)$/;"	f
networkstatus_get_param	src/or/networkstatus.c	/^networkstatus_get_param(const networkstatus_t *ns, const char *param_name,$/;"	f
networkstatus_get_reasonably_live_consensus	src/or/networkstatus.c	/^networkstatus_get_reasonably_live_consensus(time_t now, int flavor)$/;"	f
networkstatus_get_router_digest_by_nickname	src/or/networkstatus.c	/^networkstatus_get_router_digest_by_nickname(const char *nickname)$/;"	f
networkstatus_get_voter_by_id	src/or/networkstatus.c	/^networkstatus_get_voter_by_id(networkstatus_t *vote,$/;"	f
networkstatus_get_weight_scale_param	src/or/networkstatus.c	/^networkstatus_get_weight_scale_param(networkstatus_t *ns)$/;"	f
networkstatus_getinfo_by_purpose	src/or/networkstatus.c	/^networkstatus_getinfo_by_purpose(const char *purpose_string, time_t now)$/;"	f
networkstatus_getinfo_helper_single	src/or/networkstatus.c	/^networkstatus_getinfo_helper_single(const routerstatus_t *rs)$/;"	f
networkstatus_nickname_is_unnamed	src/or/networkstatus.c	/^networkstatus_nickname_is_unnamed(const char *nickname)$/;"	f
networkstatus_note_certs_arrived	src/or/networkstatus.c	/^networkstatus_note_certs_arrived(void)$/;"	f
networkstatus_parse_detached_signatures	src/or/routerparse.c	/^networkstatus_parse_detached_signatures(const char *s, const char *eos)$/;"	f
networkstatus_parse_flavor_name	src/or/networkstatus.c	/^networkstatus_parse_flavor_name(const char *flavname)$/;"	f
networkstatus_parse_vote_from_string	src/or/routerparse.c	/^networkstatus_parse_vote_from_string(const char *s, const char **eos_out,$/;"	f
networkstatus_reset_download_failures	src/or/networkstatus.c	/^networkstatus_reset_download_failures(void)$/;"	f
networkstatus_reset_warnings	src/or/networkstatus.c	/^networkstatus_reset_warnings(void)$/;"	f
networkstatus_set_current_consensus	src/or/networkstatus.c	/^networkstatus_set_current_consensus(const char *consensus,$/;"	f
networkstatus_t	src/or/or.h	/^typedef struct networkstatus_t {$/;"	s
networkstatus_t	src/or/or.h	/^} networkstatus_t;$/;"	t	typeref:struct:networkstatus_t
networkstatus_token_table	src/or/routerparse.c	/^static token_rule_t networkstatus_token_table[] = {$/;"	v	file:
networkstatus_type_t	src/or/or.h	/^} networkstatus_type_t;$/;"	t	typeref:enum:__anon46
networkstatus_verify_bw_weights	src/or/routerparse.c	/^networkstatus_verify_bw_weights(networkstatus_t *ns, int consensus_method)$/;"	f
networkstatus_vote_find_entry	src/or/networkstatus.c	/^networkstatus_vote_find_entry(networkstatus_t *ns, const char *digest)$/;"	f
networkstatus_vote_find_entry_idx	src/or/networkstatus.c	/^networkstatus_vote_find_entry_idx(networkstatus_t *ns,$/;"	f
networkstatus_vote_find_mutable_entry	src/or/networkstatus.c	/^networkstatus_vote_find_mutable_entry(networkstatus_t *ns, const char *digest)$/;"	f
networkstatus_vote_footer_token_table	src/or/routerparse.c	/^static token_rule_t networkstatus_vote_footer_token_table[] = {$/;"	v	file:
networkstatus_vote_free	src/or/networkstatus.c	/^networkstatus_vote_free(networkstatus_t *ns)$/;"	f
networkstatus_voter_info_t	src/or/or.h	/^typedef struct networkstatus_voter_info_t {$/;"	s
networkstatus_voter_info_t	src/or/or.h	/^} networkstatus_voter_info_t;$/;"	t	typeref:struct:networkstatus_voter_info_t
new_address	src/or/addressmap.c	/^  char *new_address;$/;"	m	struct:__anon83	file:
new_cached_dir	src/or/dirserv.c	/^new_cached_dir(char *s, time_t published)$/;"	f
new_element	src/common/sandbox.c	/^new_element(int syscall, char *value)$/;"	f	file:
new_element2	src/common/sandbox.c	/^new_element2(int syscall, char *value, char *value2)$/;"	f	file:
new_fake_channel	src/test/test_channel.c	/^new_fake_channel(void)$/;"	f
new_fake_channel	src/test/test_circuitlist.c	/^new_fake_channel(void)$/;"	f	file:
new_fake_channel	src/test/test_circuitmux.c	/^new_fake_channel(void)$/;"	f	file:
new_fake_orcirc	src/test/test_relay.c	/^new_fake_orcirc(channel_t *nchan, channel_t *pchan)$/;"	f	file:
new_route_len	src/or/circuitbuild.c	/^new_route_len(uint8_t purpose, extend_info_t *exit, smartlist_t *nodes)$/;"	f	file:
new_state	src/test/test_workqueue.c	/^new_state(void *arg)$/;"	f	file:
new_thread_state_arg	src/common/workqueue.c	/^  void *new_thread_state_arg;$/;"	m	struct:threadpool_s	file:
new_thread_state_fn	src/common/workqueue.c	/^  void *(*new_thread_state_fn)(void*);$/;"	m	struct:threadpool_s	file:
newnym_epoch	src/or/main.c	/^static unsigned newnym_epoch = 0;$/;"	v	file:
next	src/common/di_ops.c	/^  struct di_digest256_map_t *next;$/;"	m	struct:di_digest256_map_t	typeref:struct:di_digest256_map_t::di_digest256_map_t	file:
next	src/common/log.c	/^  struct logfile_t *next; \/**< Next logfile_t in the linked list. *\/$/;"	m	struct:logfile_t	typeref:struct:logfile_t::logfile_t	file:
next	src/common/sandbox.h	/^  struct sandbox_cfg_elem *next;$/;"	m	struct:sandbox_cfg_elem	typeref:struct:sandbox_cfg_elem::sandbox_cfg_elem
next	src/or/buffers.h	/^  struct chunk_t *next; \/**< The next chunk on the buffer. *\/$/;"	m	struct:chunk_t	typeref:struct:chunk_t::chunk_t
next	src/or/channel.h	/^  TOR_SIMPLEQ_ENTRY(cell_queue_entry_s) next;$/;"	m	struct:cell_queue_entry_s
next	src/or/dirvote.c	/^  struct microdesc_vote_line_t *next;$/;"	m	struct:microdesc_vote_line_t	typeref:struct:microdesc_vote_line_t::microdesc_vote_line_t	file:
next	src/or/dns_structs.h	/^  struct pending_connection_t *next;$/;"	m	struct:pending_connection_t	typeref:struct:pending_connection_t::pending_connection_t
next	src/or/or.h	/^  TOR_SIMPLEQ_ENTRY(packed_cell_t) next;$/;"	m	struct:packed_cell_t
next	src/or/or.h	/^  struct config_line_t *next;$/;"	m	struct:config_line_t	typeref:struct:config_line_t::config_line_t
next	src/or/or.h	/^  struct crypt_path_t *next; \/**< Link to next crypt_path_t in the circuit.$/;"	m	struct:crypt_path_t	typeref:struct:crypt_path_t::crypt_path_t
next	src/or/or.h	/^  struct vote_microdesc_hash_t *next;$/;"	m	struct:vote_microdesc_hash_t	typeref:struct:vote_microdesc_hash_t::vote_microdesc_hash_t
next_active_on_n_chan	src/or/or.h	/^  struct circuit_t *next_active_on_n_chan;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::circuit_t
next_active_on_p_chan	src/or/or.h	/^  struct circuit_t *next_active_on_p_chan;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::circuit_t
next_attempt_at	src/or/or.h	/^  time_t next_attempt_at; \/**< When should we try downloading this descriptor$/;"	m	struct:download_status_t
next_chunk	src/common/memarea.c	/^  struct memarea_chunk_t *next_chunk;$/;"	m	struct:memarea_chunk_t	typeref:struct:memarea_chunk_t::memarea_chunk_t	file:
next_heartbeat	src/or/main.h	/^  time_t next_heartbeat;$/;"	m	struct:__anon5
next_max_idx	src/or/rephist.c	/^  int next_max_idx;$/;"	m	struct:bw_array_t	file:
next_measurement_idx	src/or/control.c	/^static int next_measurement_idx = 0;$/;"	v	file:
next_mem	src/common/memarea.c	/^  char *next_mem; \/**< Next position in mem to allocate data at.  If it's$/;"	m	struct:memarea_chunk_t	file:
next_period	src/or/rephist.c	/^  time_t next_period;$/;"	m	struct:bw_array_t	file:
next_reply_val	src/test/test_buffers.c	/^int next_reply_val[16];$/;"	v
next_stream	src/or/or.h	/^  struct edge_connection_t *next_stream; \/**< Points to the next stream at this$/;"	m	struct:edge_connection_t	typeref:struct:edge_connection_t::edge_connection_t
next_stream_id	src/or/or.h	/^  streamid_t next_stream_id;$/;"	m	struct:origin_circuit_t
next_upload_time	src/or/rendservice.c	/^  time_t next_upload_time; \/**< Scheduled next hidden service descriptor$/;"	m	struct:rend_service_t	file:
next_vote_num	src/or/dircollate.h	/^  int next_vote_num;$/;"	m	struct:dircollator_s
next_with_same_id	src/or/channel.h	/^  TOR_LIST_ENTRY(channel_s) next_with_same_id;$/;"	m	struct:channel_s
next_with_same_id	src/or/or.h	/^  struct or_connection_t *next_with_same_id; \/**< Next connection with same$/;"	m	struct:or_connection_t	typeref:struct:or_connection_t::or_connection_t
next_write	src/or/or.h	/^  time_t next_write;$/;"	m	struct:__anon61
nickname	src/or/channel.h	/^  char *nickname;$/;"	m	struct:channel_s
nickname	src/or/entrynodes.h	/^  char nickname[MAX_NICKNAME_LEN+1];$/;"	m	struct:entry_guard_t
nickname	src/or/or.h	/^  char *nickname; \/**< Human-readable OR name. *\/$/;"	m	struct:__anon45
nickname	src/or/or.h	/^  char *nickname; \/**< Nickname of OR on other side (if any). *\/$/;"	m	struct:or_connection_t
nickname	src/or/or.h	/^  char *nickname; \/**< Nickname of this voter *\/$/;"	m	struct:networkstatus_voter_info_t
nickname	src/or/or.h	/^  char *nickname;$/;"	m	struct:dir_server_t
nickname	src/or/or.h	/^  char nickname[MAX_HEX_NICKNAME_LEN+1]; \/**< This router's nickname for$/;"	m	struct:extend_info_t
nickname	src/or/or.h	/^  char nickname[MAX_NICKNAME_LEN+1]; \/**< The nickname this router says it$/;"	m	struct:routerstatus_t
nickname	src/or/or.h	/^  char nickname[MAX_NICKNAME_LEN+1];$/;"	m	struct:extrainfo_t
no_advertise	src/or/or.h	/^  unsigned int no_advertise : 1;$/;"	m	struct:server_port_cfg_t
no_listen	src/or/or.h	/^  unsigned int no_listen : 1;$/;"	m	struct:server_port_cfg_t
no_save	src/or/or.h	/^  unsigned int no_save : 1;$/;"	m	struct:microdesc_t
no_shutdown	src/test/test_workqueue.c	/^static int no_shutdown = 0;$/;"	v	file:
node	src/or/dns_structs.h	/^  HT_ENTRY(cached_resolve_t) node;$/;"	m	struct:cached_resolve_t
node	src/or/or.h	/^  HT_ENTRY(microdesc_t) node;$/;"	m	struct:microdesc_t
node_addrs_changed	src/or/nodelist.c	/^node_addrs_changed(node_t *node)$/;"	f	file:
node_allows_single_hop_exits	src/or/nodelist.c	/^node_allows_single_hop_exits(const node_t *node)$/;"	f
node_assert_ok	src/or/nodelist.h	/^#define node_assert_ok(/;"	d
node_describe	src/or/router.c	/^node_describe(const node_t *node)$/;"	f
node_describe_longname_by_id_replacement	src/test/test_hs.c	/^node_describe_longname_by_id_replacement(const char *id_digest)$/;"	f	file:
node_exit_policy_is_exact	src/or/nodelist.c	/^node_exit_policy_is_exact(const node_t *node, sa_family_t family)$/;"	f
node_exit_policy_rejects_all	src/or/nodelist.c	/^node_exit_policy_rejects_all(const node_t *node)$/;"	f
node_free	src/or/nodelist.c	/^node_free(node_t *node)$/;"	f	file:
node_get_addr	src/or/nodelist.c	/^node_get_addr(const node_t *node, tor_addr_t *addr_out)$/;"	f
node_get_addr_ipv4h	src/or/nodelist.h	/^#define node_get_addr_ipv4h(/;"	d
node_get_address_string	src/or/nodelist.c	/^node_get_address_string(const node_t *node, char *buf, size_t len)$/;"	f
node_get_all_orports	src/or/nodelist.c	/^node_get_all_orports(const node_t *node)$/;"	f
node_get_by_hex_id	src/or/nodelist.c	/^node_get_by_hex_id(const char *hex_id)$/;"	f
node_get_by_id	src/test/test_status.c	/^NS(node_get_by_id)(const char *identity_digest)$/;"	f	file:
node_get_by_nickname	src/test/test_routerset.c	/^NS(node_get_by_nickname)(const char *nickname, int warn_if_unused)$/;"	f
node_get_by_nickname_mock	src/test/test_connection_edge_ap_handshake.c	/^node_get_by_nickname_mock(const char *nickname, int warn)$/;"	f	file:
node_get_declared_family	src/or/nodelist.c	/^node_get_declared_family(const node_t *node)$/;"	f
node_get_declared_uptime	src/or/nodelist.c	/^node_get_declared_uptime(const node_t *node)$/;"	f
node_get_description	src/or/router.c	/^node_get_description(char *buf, const node_t *node)$/;"	f
node_get_mutable_by_id	src/or/nodelist.c	/^node_get_mutable_by_id(const char *identity_digest)$/;"	f
node_get_nickname	src/or/nodelist.c	/^node_get_nickname(const node_t *node)$/;"	f
node_get_or_create	src/or/nodelist.c	/^node_get_or_create(const char *identity_digest)$/;"	f	file:
node_get_platform	src/or/nodelist.c	/^node_get_platform(const node_t *node)$/;"	f
node_get_pref_ipv6_orport	src/or/nodelist.c	/^node_get_pref_ipv6_orport(const node_t *node, tor_addr_port_t *ap_out)$/;"	f
node_get_pref_orport	src/or/nodelist.c	/^node_get_pref_orport(const node_t *node, tor_addr_port_t *ap_out)$/;"	f
node_get_prim_addr_ipv4h	src/or/nodelist.c	/^node_get_prim_addr_ipv4h(const node_t *node)$/;"	f
node_get_prim_orport	src/or/nodelist.c	/^node_get_prim_orport(const node_t *node, tor_addr_port_t *ap_out)$/;"	f
node_get_published_on	src/or/nodelist.c	/^node_get_published_on(const node_t *node)$/;"	f
node_get_purpose	src/or/nodelist.c	/^node_get_purpose(const node_t *node)$/;"	f
node_get_verbose_nickname	src/or/nodelist.c	/^node_get_verbose_nickname(const node_t *node,$/;"	f
node_get_verbose_nickname_by_id	src/or/nodelist.c	/^node_get_verbose_nickname_by_id(const char *id_digest,$/;"	f
node_handles_some_port	src/or/circuitbuild.c	/^node_handles_some_port(const node_t *node, smartlist_t *needed_ports)$/;"	f	file:
node_has_curve25519_onion_key	src/or/nodelist.c	/^node_has_curve25519_onion_key(const node_t *node)$/;"	f
node_has_descriptor	src/or/nodelist.c	/^node_has_descriptor(const node_t *node)$/;"	f
node_hex	src/or/or.h	/^  char node_hex[MAX_HEX_NICKNAME_LEN+1];$/;"	m	struct:measured_bw_line_t
node_id	src/or/onion.h	/^  uint8_t node_id[DIGEST_LEN];$/;"	m	struct:extend_cell_t
node_id	src/or/or.h	/^  char node_id[DIGEST_LEN];$/;"	m	struct:measured_bw_line_t
node_id_eq	src/or/nodelist.c	/^node_id_eq(const node_t *node1, const node_t *node2)$/;"	f	file:
node_id_hash	src/or/nodelist.c	/^node_id_hash(const node_t *node)$/;"	f	file:
node_in_nickname_smartlist	src/or/nodelist.c	/^node_in_nickname_smartlist(const smartlist_t *lst, const node_t *node)$/;"	f	file:
node_ipv6_preferred	src/or/nodelist.c	/^node_ipv6_preferred(const node_t *node)$/;"	f
node_is_a_configured_bridge	src/or/entrynodes.c	/^node_is_a_configured_bridge(const node_t *node)$/;"	f
node_is_bridge	src/or/nodelist.h	/^#define node_is_bridge(/;"	d
node_is_dir	src/or/nodelist.c	/^node_is_dir(const node_t *node)$/;"	f
node_is_good_exit	src/or/or.h	/^static INLINE int node_is_good_exit(const node_t *node)$/;"	f
node_is_me	src/or/nodelist.c	/^node_is_me(const node_t *node)$/;"	f
node_is_named	src/or/nodelist.c	/^node_is_named(const node_t *node)$/;"	f
node_is_unreliable	src/or/nodelist.c	/^node_is_unreliable(const node_t *node, int need_uptime,$/;"	f
node_is_usable	src/or/nodelist.c	/^node_is_usable(const node_t *node)$/;"	f	file:
node_nickname_matches	src/or/nodelist.c	/^node_nickname_matches(const node_t *node, const char *nickname)$/;"	f	file:
node_set_country	src/or/nodelist.c	/^node_set_country(node_t *node)$/;"	f
node_sl_choose_by_bandwidth	src/or/routerlist.c	/^node_sl_choose_by_bandwidth(const smartlist_t *sl,$/;"	f
node_t	src/or/or.h	/^typedef struct node_t {$/;"	s
node_t	src/or/or.h	/^} node_t;$/;"	t	typeref:struct:node_t
nodelist_add_microdesc	src/or/nodelist.c	/^nodelist_add_microdesc(microdesc_t *md)$/;"	f
nodelist_add_node_and_family	src/or/nodelist.c	/^nodelist_add_node_and_family(smartlist_t *sl, const node_t *node)$/;"	f
nodelist_assert_ok	src/or/nodelist.c	/^nodelist_assert_ok(void)$/;"	f
nodelist_drop_node	src/or/nodelist.c	/^nodelist_drop_node(node_t *node, int remove_from_ht)$/;"	f	file:
nodelist_find_nodes_with_microdesc	src/or/nodelist.c	/^nodelist_find_nodes_with_microdesc(const microdesc_t *md)$/;"	f
nodelist_free_all	src/or/nodelist.c	/^nodelist_free_all(void)$/;"	f
nodelist_get_list	src/test/test_routerset.c	/^NS(nodelist_get_list)(void)$/;"	f
nodelist_idx	src/or/or.h	/^  int nodelist_idx;$/;"	m	struct:node_t
nodelist_purge	src/or/nodelist.c	/^nodelist_purge(void)$/;"	f
nodelist_refresh_countries	src/or/nodelist.c	/^nodelist_refresh_countries(void)$/;"	f
nodelist_remove_microdesc	src/or/nodelist.c	/^nodelist_remove_microdesc(const char *identity_digest, microdesc_t *md)$/;"	f
nodelist_remove_routerinfo	src/or/nodelist.c	/^nodelist_remove_routerinfo(routerinfo_t *ri)$/;"	f
nodelist_set_consensus	src/or/nodelist.c	/^nodelist_set_consensus(networkstatus_t *ns)$/;"	f
nodelist_set_routerinfo	src/or/nodelist.c	/^nodelist_set_routerinfo(routerinfo_t *ri, routerinfo_t **ri_old_out)$/;"	f
nodelist_t	src/or/nodelist.c	/^typedef struct nodelist_t {$/;"	s	file:
nodelist_t	src/or/nodelist.c	/^} nodelist_t;$/;"	t	typeref:struct:nodelist_t	file:
nodelist_tests	src/test/test_nodelist.c	/^struct testcase_t nodelist_tests[] = {$/;"	v	typeref:struct:testcase_t
nodes	src/or/nodelist.c	/^  smartlist_t *nodes;$/;"	m	struct:nodelist_t	file:
nodes_in_same_family	src/or/nodelist.c	/^nodes_in_same_family(const node_t *node1, const node_t *node2)$/;"	f
non_guard_bw	src/or/entrynodes.h	/^  int non_guard_bw;$/;"	m	struct:guardfraction_bandwidth_t
nonlive_timeouts	src/or/or.h	/^  int nonlive_timeouts;$/;"	m	struct:__anon62
normalize_data_directory	src/or/config.c	/^normalize_data_directory(or_options_t *options)$/;"	f	file:
notCompletelyValidCertString	src/test/test_tortls.c	/^static const char* notCompletelyValidCertString = "-----BEGIN CERTIFICATE-----\\n"$/;"	v	file:
note_broken_connection	src/or/connection_or.c	/^note_broken_connection(const char *state)$/;"	f	file:
note_client_request	src/or/directory.c	/^note_client_request(int purpose, int compressed, size_t bytes)$/;"	f	file:
note_crypto_pk_op	src/or/rephist.c	/^note_crypto_pk_op(pk_op_t operation)$/;"	f
note_read_started	src/test/test_extorport.c	/^note_read_started(connection_t *conn)$/;"	f	file:
note_read_started	src/test/test_relay.c	/^note_read_started(connection_t *conn)$/;"	f	file:
note_read_stopped	src/test/test_extorport.c	/^note_read_stopped(connection_t *conn)$/;"	f	file:
note_request	src/or/directory.c	/^note_request(const char *key, size_t bytes)$/;"	f
note_that_we_completed_a_circuit	src/or/main.c	/^note_that_we_completed_a_circuit(void)$/;"	f
note_that_we_maybe_cant_complete_circuits	src/or/main.c	/^note_that_we_maybe_cant_complete_circuits(void)$/;"	f
notice_bootstrap_percent	src/or/control.c	/^static int notice_bootstrap_percent = 0;$/;"	v	file:
notify_circ_active	src/or/circuitmux.h	/^  void (*notify_circ_active)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
notify_circ_inactive	src/or/circuitmux.h	/^  void (*notify_circ_inactive)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
notify_control_networkstatus_changed	src/or/networkstatus.c	/^notify_control_networkstatus_changed(const networkstatus_t *old_c,$/;"	f	file:
notify_pending_waitpid_callbacks	src/common/util_process.c	/^notify_pending_waitpid_callbacks(void)$/;"	f
notify_pending_waitpid_callbacks	src/test/test_util_slow.c	/^#define notify_pending_waitpid_callbacks(/;"	d	file:
notify_set_n_cells	src/or/circuitmux.h	/^  void (*notify_set_n_cells)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
notify_waitpid_callback_by_pid	src/common/util_process.c	/^notify_waitpid_callback_by_pid(pid_t pid, int status)$/;"	f	file:
notify_xmit_cells	src/or/circuitmux.h	/^  void (*notify_xmit_cells)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
now_ms_for_buf_cmp	src/or/circuitlist.c	/^static uint32_t now_ms_for_buf_cmp;$/;"	v	file:
nquestions	src/ext/eventdns.h	/^	int nquestions;$/;"	m	struct:evdns_server_request
nr_streams	src/or/or.h	/^  int nr_streams;$/;"	m	struct:rend_data_t
ns_detached_signatures_free	src/or/dirvote.c	/^ns_detached_signatures_free(ns_detached_signatures_t *s)$/;"	f
ns_detached_signatures_t	src/or/or.h	/^typedef struct ns_detached_signatures_t {$/;"	s
ns_detached_signatures_t	src/or/or.h	/^} ns_detached_signatures_t;$/;"	t	typeref:struct:ns_detached_signatures_t
ns_v3_responses	src/or/geoip.c	/^static uint32_t ns_v3_responses[GEOIP_NS_RESPONSE_NUM];$/;"	v	file:
nt_service_is_stopping	src/or/ntmain.h	/^#define nt_service_is_stopping(/;"	d
ntor	src/or/or.h	/^    struct ntor_handshake_state_t *ntor;$/;"	m	union:__anon50::__anon51	typeref:struct:__anon50::__anon51::ntor_handshake_state_t
ntor_handshake_state_free	src/or/onion_ntor.c	/^ntor_handshake_state_free(ntor_handshake_state_t *state)$/;"	f
ntor_handshake_state_t	src/or/onion_ntor.h	/^struct ntor_handshake_state_t {$/;"	s
ntor_handshake_state_t	src/or/onion_ntor.h	/^typedef struct ntor_handshake_state_t ntor_handshake_state_t;$/;"	t	typeref:struct:ntor_handshake_state_t
ntor_key_map_free	src/or/router.c	/^ntor_key_map_free(di_digest256_map_t *map)$/;"	f
ntor_key_map_free_helper	src/or/router.c	/^ntor_key_map_free_helper(void *arg)$/;"	f	file:
num_bridges_usable	src/or/entrynodes.c	/^num_bridges_usable(void)$/;"	f	file:
num_bytes_queued	src/or/channel.h	/^  size_t (*num_bytes_queued)(channel_t *);$/;"	m	struct:channel_s
num_cells_writeable	src/or/channel.h	/^  int (*num_cells_writeable)(channel_t *);$/;"	m	struct:channel_s
num_circuits_launched	src/or/or.h	/^  unsigned int num_circuits_launched:4;$/;"	m	struct:entry_connection_t
num_cpus	src/common/compat_libevent.h	/^  int num_cpus;$/;"	m	struct:tor_libevent_cfg
num_live_entry_guards	src/or/entrynodes.c	/^num_live_entry_guards(int for_directory)$/;"	f
num_maxes_set	src/or/rephist.c	/^  int num_maxes_set;$/;"	m	struct:bw_array_t	file:
num_n_circuits	src/or/channel.h	/^  unsigned int num_n_circuits, num_p_circuits;$/;"	m	struct:channel_s
num_ntors_per_tap	src/or/onion.c	/^num_ntors_per_tap(void)$/;"	f	file:
num_p_circuits	src/or/channel.h	/^  unsigned int num_n_circuits, num_p_circuits;$/;"	m	struct:channel_s
num_recent_circs	src/or/or.h	/^  int num_recent_circs;$/;"	m	struct:__anon62
num_rend_services	src/or/rendservice.c	/^num_rend_services(void)$/;"	f
num_resolve_failures	src/or/addressmap.c	/^  short num_resolve_failures;$/;"	m	struct:__anon83	file:
num_socks_retries	src/or/or.h	/^  uint8_t num_socks_retries;$/;"	m	struct:entry_connection_t
num_used	src/common/container.h	/^  int num_used;$/;"	m	struct:smartlist_t
nym_epoch	src/or/or.h	/^  unsigned nym_epoch;$/;"	m	struct:entry_connection_t
nym_epoch	src/or/or.h	/^  unsigned nym_epoch;$/;"	m	struct:origin_circuit_t
obj_syntax	src/or/routerparse.c	/^} obj_syntax;$/;"	t	typeref:enum:__anon97	file:
object_body	src/or/routerparse.c	/^  char *object_body;           \/**< Contents of object, base64-decoded. *\/$/;"	m	struct:directory_token_t	file:
object_size	src/or/routerparse.c	/^  size_t object_size;          \/**< Bytes in object_body *\/$/;"	m	struct:directory_token_t	file:
object_type	src/or/routerparse.c	/^  char *object_type;           \/**< -----BEGIN [object_type]-----*\/$/;"	m	struct:directory_token_t	file:
obs	src/or/rephist.c	/^  uint64_t obs[NUM_SECS_ROLLING_MEASURE];$/;"	m	struct:bw_array_t	file:
off	src/or/or.h	/^  off_t off;$/;"	m	struct:microdesc_t
off64_t	src/common/torgzip.c	/^#define off64_t /;"	d	file:
oh_what	src/test/test_bt_cl.c	/^oh_what(int x)$/;"	f
ol_entries	src/or/onion.c	/^static int ol_entries[MAX_ONION_HANDSHAKE_TYPE+1];$/;"	v	file:
old	src/or/routerlist.c	/^  int old;$/;"	m	struct:duration_idx_t	file:
old_ewma_enabled	src/test/test_config.c	/^NS(old_ewma_enabled) = 0;$/;"	v	file:
old_ewma_enabled	src/test/test_config.c	/^NS(old_ewma_enabled) = 1;$/;"	v	file:
old_opt	src/test/test_options.c	/^  or_options_t *old_opt;$/;"	m	struct:__anon11	file:
old_routers	src/or/or.h	/^  smartlist_t *old_routers;$/;"	m	struct:__anon48
on_circuit	src/or/or.h	/^  struct circuit_t *on_circuit; \/**< The circuit (if any) that this edge$/;"	m	struct:edge_connection_t	typeref:struct:edge_connection_t::circuit_t
on_pool	src/common/workqueue.c	/^  struct threadpool_s *on_pool;$/;"	m	struct:workqueue_entry_s	typeref:struct:workqueue_entry_s::threadpool_s	file:
one_tick	src/common/compat_libevent.c	/^static const struct timeval *one_tick = NULL;$/;"	v	typeref:struct:timeval	file:
onehop_tunnel	src/or/or.h	/^  unsigned int onehop_tunnel : 1;$/;"	m	struct:__anon53
onion_address	src/or/or.h	/^  char onion_address[REND_SERVICE_ADDRESS_LEN+1];$/;"	m	struct:rend_service_authorization_t
onion_address	src/or/or.h	/^  char onion_address[REND_SERVICE_ID_LEN_BASE32+1];$/;"	m	struct:rend_data_t
onion_append_hop	src/or/circuitbuild.c	/^onion_append_hop(crypt_path_t **head_ptr, extend_info_t *choice)$/;"	f	file:
onion_append_to_cpath	src/or/circuitbuild.c	/^onion_append_to_cpath(crypt_path_t **head_ptr, crypt_path_t *new_hop)$/;"	f
onion_curve25519_pkey	src/or/or.h	/^  curve25519_public_key_t *onion_curve25519_pkey;$/;"	m	struct:__anon45
onion_curve25519_pkey	src/or/or.h	/^  curve25519_public_key_t *onion_curve25519_pkey;$/;"	m	struct:microdesc_t
onion_extend_cpath	src/or/circuitbuild.c	/^onion_extend_cpath(origin_circuit_t *circ)$/;"	f	file:
onion_handshake_state_release	src/or/onion.c	/^onion_handshake_state_release(onion_handshake_state_t *state)$/;"	f
onion_handshake_state_t	src/or/or.h	/^} onion_handshake_state_t;$/;"	t	typeref:struct:__anon50
onion_handshakes_assigned	src/or/rephist.c	/^STATIC int onion_handshakes_assigned[MAX_ONION_HANDSHAKE_TYPE+1] = {0};$/;"	v
onion_handshakes_requested	src/or/rephist.c	/^STATIC int onion_handshakes_requested[MAX_ONION_HANDSHAKE_TYPE+1] = {0};$/;"	v
onion_key	src/or/onion.h	/^  crypto_pk_t *onion_key;$/;"	m	struct:server_onion_keys_t
onion_key	src/or/or.h	/^  crypto_pk_t *onion_key; \/**< Current onionskin key. *\/$/;"	m	struct:extend_info_t
onion_keys	src/or/cpuworker.c	/^  server_onion_keys_t *onion_keys;$/;"	m	struct:worker_state_s	file:
onion_next_hop_in_cpath	src/or/circuitbuild.c	/^onion_next_hop_in_cpath(crypt_path_t *cpath)$/;"	f	file:
onion_next_task	src/or/onion.c	/^onion_next_task(create_cell_t **onionskin_out)$/;"	f
onion_num_pending	src/or/onion.c	/^onion_num_pending(uint16_t handshake_type)$/;"	f
onion_pending_add	src/or/onion.c	/^onion_pending_add(or_circuit_t *circ, create_cell_t *onionskin)$/;"	f
onion_pending_remove	src/or/onion.c	/^onion_pending_remove(or_circuit_t *circ)$/;"	f
onion_pick_cpath_exit	src/or/circuitbuild.c	/^onion_pick_cpath_exit(origin_circuit_t *circ, extend_info_t *exit)$/;"	f	file:
onion_pkey	src/or/or.h	/^  crypto_pk_t *onion_pkey; \/**< Public RSA key for onions. *\/$/;"	m	struct:__anon45
onion_pkey	src/or/or.h	/^  crypto_pk_t *onion_pkey;$/;"	m	struct:microdesc_t
onion_populate_cpath	src/or/circuitbuild.c	/^onion_populate_cpath(origin_circuit_t *circ)$/;"	f	file:
onion_queue_entry_remove	src/or/onion.c	/^onion_queue_entry_remove(onion_queue_t *victim)$/;"	f	file:
onion_queue_t	src/or/onion.c	/^typedef struct onion_queue_t {$/;"	s	file:
onion_queue_t	src/or/onion.c	/^} onion_queue_t;$/;"	t	typeref:struct:onion_queue_t	file:
onion_skin_TAP_client_handshake	src/or/onion_tap.c	/^onion_skin_TAP_client_handshake(crypto_dh_t *handshake_state,$/;"	f
onion_skin_TAP_create	src/or/onion_tap.c	/^onion_skin_TAP_create(crypto_pk_t *dest_router_key,$/;"	f
onion_skin_TAP_server_handshake	src/or/onion_tap.c	/^onion_skin_TAP_server_handshake($/;"	f
onion_skin_client_handshake	src/or/onion.c	/^onion_skin_client_handshake(int type,$/;"	f
onion_skin_create	src/or/onion.c	/^onion_skin_create(int type,$/;"	f
onion_skin_ntor_client_handshake	src/or/onion_ntor.c	/^onion_skin_ntor_client_handshake($/;"	f
onion_skin_ntor_create	src/or/onion_ntor.c	/^onion_skin_ntor_create(const uint8_t *router_id,$/;"	f
onion_skin_ntor_server_handshake	src/or/onion_ntor.c	/^onion_skin_ntor_server_handshake(const uint8_t *onion_skin,$/;"	f
onion_skin_server_handshake	src/or/onion.c	/^onion_skin_server_handshake(int type,$/;"	f
onion_warning	src/tools/tor-resolve.c	/^onion_warning(const char *hostname)$/;"	f	file:
onionkey	src/or/router.c	/^static crypto_pk_t *onionkey=NULL;$/;"	v	file:
onionkey_set_at	src/or/router.c	/^static time_t onionkey_set_at=0; \/**< When was onionkey last changed? *\/$/;"	v	file:
onionqueue_entry	src/or/or.h	/^  struct onion_queue_t *onionqueue_entry;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::onion_queue_t
onions_seen_this_period	src/or/rephist.c	/^  digestmap_t *onions_seen_this_period;$/;"	m	struct:hs_stats_t	file:
onionskin	src/or/onion.c	/^  create_cell_t *onionskin;$/;"	m	struct:onion_queue_t	file:
onionskin	src/or/onion.h	/^  uint8_t onionskin[CELL_PAYLOAD_SIZE - 4];$/;"	m	struct:create_cell_t
onionskin_answer	src/or/circuitbuild.c	/^onionskin_answer(or_circuit_t *circ,$/;"	f
onionskins_n_processed	src/or/cpuworker.c	/^static uint64_t onionskins_n_processed[MAX_ONION_HANDSHAKE_TYPE+1];$/;"	v	file:
onionskins_usec_internal	src/or/cpuworker.c	/^static uint64_t onionskins_usec_internal[MAX_ONION_HANDSHAKE_TYPE+1];$/;"	v	file:
onionskins_usec_roundtrip	src/or/cpuworker.c	/^static uint64_t onionskins_usec_roundtrip[MAX_ONION_HANDSHAKE_TYPE+1];$/;"	v	file:
oom_tests	src/test/test_oom.c	/^struct testcase_t oom_tests[] = {$/;"	v	typeref:struct:testcase_t
open	src/common/crypto_ed25519.c	/^  int (*open)(const unsigned char *, const unsigned char *, size_t, const$/;"	m	struct:__anon15	file:
open_batch	src/common/crypto_ed25519.c	/^  int (*open_batch)(const unsigned char **, size_t *, const unsigned char **,$/;"	m	struct:__anon15	file:
open_file_t	src/common/util.c	/^struct open_file_t {$/;"	s	file:
open_file_t	src/common/util.h	/^typedef struct open_file_t open_file_t;$/;"	t	typeref:struct:open_file_t
open_sockets	src/common/compat.c	/^static bitarray_t *open_sockets = NULL;$/;"	v	file:
openssl_dynlock_create_cb_	src/common/crypto.c	/^openssl_dynlock_create_cb_(const char *file, int line)$/;"	f	file:
openssl_dynlock_destroy_cb_	src/common/crypto.c	/^openssl_dynlock_destroy_cb_(struct CRYPTO_dynlock_value *v,$/;"	f	file:
openssl_dynlock_lock_cb_	src/common/crypto.c	/^openssl_dynlock_lock_cb_(int mode, struct CRYPTO_dynlock_value *v,$/;"	f	file:
openssl_locking_cb_	src/common/crypto.c	/^openssl_locking_cb_(int mode, int n, const char *file, int line)$/;"	f	file:
openssl_mutexes_	src/common/crypto.c	/^static tor_mutex_t **openssl_mutexes_ = NULL;$/;"	v	file:
opt	src/test/test_options.c	/^  or_options_t *opt;$/;"	m	struct:__anon11	file:
opt_forked	src/ext/tinytest.c	/^static int opt_forked = 0; \/**< True iff we're called from inside a win32 fork*\/$/;"	v	file:
opt_n_cancel	src/test/test_workqueue.c	/^static int opt_n_cancel = 0;$/;"	v	file:
opt_n_inflight	src/test/test_workqueue.c	/^static int opt_n_inflight = 1000;$/;"	v	file:
opt_n_items	src/test/test_workqueue.c	/^static int opt_n_items = 10000;$/;"	v	file:
opt_n_lowwater	src/test/test_workqueue.c	/^static int opt_n_lowwater = 250;$/;"	v	file:
opt_n_threads	src/test/test_workqueue.c	/^static int opt_n_threads = 8;$/;"	v	file:
opt_nofork	src/ext/tinytest.c	/^static int opt_nofork = 0; \/**< Suppress calls to fork() for debugging. *\/$/;"	v	file:
opt_ratio_rsa	src/test/test_workqueue.c	/^static int opt_ratio_rsa = 5;$/;"	v	file:
opt_streq	src/or/config.c	/^opt_streq(const char *s1, const char *s2)$/;"	f	file:
opt_verbose	src/test/test_workqueue.c	/^static int opt_verbose = 0;$/;"	v	file:
opt_verbosity	src/ext/tinytest.c	/^static int opt_verbosity = 1; \/**< -==quiet,0==terse,1==normal,2==verbose *\/$/;"	v	file:
optimistic_data_enabled	src/or/circuituse.c	/^optimistic_data_enabled(void)$/;"	f	file:
option_abbrevs_	src/or/config.c	/^static config_abbrev_t option_abbrevs_[] = {$/;"	v	file:
option_get_assignment	src/or/config.c	/^option_get_assignment(const or_options_t *options, const char *key)$/;"	f
option_get_canonical_name	src/or/config.c	/^option_get_canonical_name(const char *key)$/;"	f
option_is_recognized	src/or/config.c	/^option_is_recognized(const char *key)$/;"	f
option_vars_	src/or/config.c	/^static config_var_t option_vars_[] = {$/;"	v	file:
options_act	src/or/config.c	/^options_act(const or_options_t *old_options)$/;"	f
options_act_reversible	src/or/config.c	/^options_act_reversible(const or_options_t *old_options, char **msg)$/;"	f	file:
options_dump	src/or/config.c	/^options_dump(const or_options_t *options, int how_to_dump)$/;"	f
options_format	src/or/config.c	/^STATIC config_format_t options_format = {$/;"	v
options_get_datadir_fname2	src/or/config.h	/^#define options_get_datadir_fname2(/;"	d
options_get_datadir_fname2_suffix	src/or/config.c	/^options_get_datadir_fname2_suffix(const or_options_t *options,$/;"	f
options_init	src/or/config.c	/^options_init(or_options_t *options)$/;"	f
options_init_from_string	src/or/config.c	/^options_init_from_string(const char *cf_defaults, const char *cf,$/;"	f
options_init_from_torrc	src/or/config.c	/^options_init_from_torrc(int argc, char **argv)$/;"	f
options_init_logs	src/or/config.c	/^options_init_logs(const or_options_t *old_options, or_options_t *options,$/;"	f	file:
options_mock	src/test/test_connection_edge_ap_handshake.c	/^static or_options_t *options_mock = NULL;$/;"	v	file:
options_need_geoip_info	src/or/config.c	/^options_need_geoip_info(const or_options_t *options, const char **reason_out)$/;"	f
options_new	src/or/config.c	/^options_new(void)$/;"	f
options_save_current	src/or/config.c	/^options_save_current(void)$/;"	f
options_test_data_t	src/test/test_options.c	/^} options_test_data_t;$/;"	t	typeref:struct:__anon11	file:
options_tests	src/test/test_options.c	/^struct testcase_t options_tests[] = {$/;"	v	typeref:struct:testcase_t
options_transition_affects_descriptor	src/or/config.c	/^options_transition_affects_descriptor(const or_options_t *old_options,$/;"	f	file:
options_transition_affects_workers	src/or/config.c	/^options_transition_affects_workers(const or_options_t *old_options,$/;"	f	file:
options_transition_allowed	src/or/config.c	/^options_transition_allowed(const or_options_t *old,$/;"	f	file:
options_transition_requires_fresh_tls_context	src/or/config.c	/^options_transition_requires_fresh_tls_context(const or_options_t *old_options,$/;"	f	file:
options_trial_assign	src/or/config.c	/^options_trial_assign(config_line_t *list, int use_defaults,$/;"	f
options_validate	src/or/config.c	/^options_validate(or_options_t *old_options, or_options_t *options,$/;"	f
options_validate_cb	src/or/config.c	/^options_validate_cb(void *old_options, void *options, void *default_options,$/;"	f	file:
or_circ	src/test/test_relay.c	/^  or_circuit_t *or_circ;$/;"	m	struct:relay_connection_test_data_t	file:
or_circuit_new	src/or/circuitlist.c	/^or_circuit_new(circid_t p_circ_id, channel_t *p_chan)$/;"	f
or_circuit_rendinfo_s	src/or/or.h	/^typedef struct or_circuit_rendinfo_s {$/;"	s
or_circuit_rendinfo_t	src/or/or.h	/^} or_circuit_rendinfo_t;$/;"	t	typeref:struct:or_circuit_rendinfo_s
or_circuit_t	src/or/or.h	/^typedef struct or_circuit_t {$/;"	s
or_circuit_t	src/or/or.h	/^} or_circuit_t;$/;"	t	typeref:struct:or_circuit_t
or_conn_status_event_t	src/or/or.h	/^typedef enum or_conn_status_event_t {$/;"	g
or_conn_status_event_t	src/or/or.h	/^} or_conn_status_event_t;$/;"	t	typeref:enum:or_conn_status_event_t
or_connection_new	src/or/connection.c	/^or_connection_new(int type, int socket_family)$/;"	f
or_connection_t	src/or/or.h	/^typedef struct or_connection_t {$/;"	s
or_connection_t	src/or/or.h	/^} or_connection_t;$/;"	t	typeref:struct:or_connection_t
or_handshake_state_free	src/or/connection_or.c	/^or_handshake_state_free(or_handshake_state_t *state)$/;"	f
or_handshake_state_record_cell	src/or/connection_or.c	/^or_handshake_state_record_cell(or_connection_t *conn,$/;"	f
or_handshake_state_record_var_cell	src/or/connection_or.c	/^or_handshake_state_record_var_cell(or_connection_t *conn,$/;"	f
or_handshake_state_t	src/or/or.h	/^typedef struct or_handshake_state_t {$/;"	s
or_handshake_state_t	src/or/or.h	/^} or_handshake_state_t;$/;"	t	typeref:struct:or_handshake_state_t
or_history_t	src/or/rephist.c	/^typedef struct or_history_t {$/;"	s	file:
or_history_t	src/or/rephist.c	/^} or_history_t;$/;"	t	typeref:struct:or_history_t	file:
or_options_free	src/or/config.c	/^or_options_free(or_options_t *options)$/;"	f
or_options_t	src/or/or.h	/^} or_options_t;$/;"	t	typeref:struct:__anon55
or_port	src/or/or.h	/^  uint16_t or_port; \/**< OR port for this router. *\/$/;"	m	struct:routerstatus_t
or_port	src/or/or.h	/^  uint16_t or_port; \/**< OR port of this voter *\/$/;"	m	struct:networkstatus_voter_info_t
or_port	src/or/or.h	/^  uint16_t or_port; \/**< OR port: Used for tunneling connections. *\/$/;"	m	struct:dir_server_t
or_port	src/or/or.h	/^  uint16_t or_port; \/**< Port for TLS connections. *\/$/;"	m	struct:__anon45
or_protocol_versions	src/or/connection_or.c	/^static const uint16_t or_protocol_versions[] = { 1, 2, 3, 4 };$/;"	v	file:
or_state	src/test/test_accounting.c	/^static or_state_t *or_state;$/;"	v	file:
or_state_free	src/or/statefile.c	/^or_state_free(or_state_t *state)$/;"	f
or_state_free_all	src/or/statefile.c	/^or_state_free_all(void)$/;"	f
or_state_load	src/test/test_config.c	/^NS(or_state_load)(void)$/;"	f
or_state_loaded	src/or/statefile.c	/^or_state_loaded(void)$/;"	f
or_state_mark_dirty	src/or/or.h	/^static INLINE void or_state_mark_dirty(or_state_t *state, time_t when)$/;"	f
or_state_new	src/or/statefile.c	/^or_state_new(void)$/;"	f
or_state_save	src/or/statefile.c	/^or_state_save(time_t now)$/;"	f
or_state_save_broken	src/or/statefile.c	/^or_state_save_broken(char *fname)$/;"	f	file:
or_state_set	src/or/statefile.c	/^or_state_set(or_state_t *new_state)$/;"	f	file:
or_state_t	src/or/or.h	/^} or_state_t;$/;"	t	typeref:struct:__anon61
or_state_validate	src/or/statefile.c	/^or_state_validate(or_state_t *state, char **msg)$/;"	f	file:
or_state_validate_cb	src/or/statefile.c	/^or_state_validate_cb(void *old_state, void *state, void *default_state,$/;"	f	file:
orconn	src/test/test_relay.c	/^  or_connection_t *orconn;$/;"	m	struct:relay_connection_test_data_t	file:
orconn_end_reason_to_control_string	src/or/reasons.c	/^orconn_end_reason_to_control_string(int r)$/;"	f
orconn_ext_or_id_map	src/or/connection_or.c	/^static digestmap_t *orconn_ext_or_id_map = NULL;$/;"	v	file:
orconn_identity_map	src/or/connection_or.c	/^static digestmap_t *orconn_identity_map = NULL;$/;"	v	file:
orconn_target_get_name	src/or/control.c	/^orconn_target_get_name(char *name, size_t len, or_connection_t *conn)$/;"	f	file:
orig_address	src/or/connection_edge.h	/^  char orig_address[MAX_SOCKS_ADDR_LEN];$/;"	m	struct:__anon85
orig_length	src/test/test_util.c	/^  int orig_length; \/\/ Length of orig_line$/;"	m	struct:split_lines_test_t	file:
orig_line	src/test/test_util.c	/^  const char *orig_line; \/\/ Line to be split (may contain \\0's)$/;"	m	struct:split_lines_test_t	file:
origin_circuit_init	src/or/circuitbuild.c	/^origin_circuit_init(uint8_t purpose, int flags)$/;"	f
origin_circuit_new	src/or/circuitlist.c	/^origin_circuit_new(void)$/;"	f
origin_circuit_t	src/or/or.h	/^typedef struct origin_circuit_t {$/;"	s
origin_circuit_t	src/or/or.h	/^} origin_circuit_t;$/;"	t	typeref:struct:origin_circuit_t
original_dest_address	src/or/or.h	/^  char *original_dest_address;$/;"	m	struct:entry_connection_t
orport_ipv4	src/or/onion.h	/^  tor_addr_port_t orport_ipv4;$/;"	m	struct:extend_cell_t
orport_ipv6	src/or/onion.h	/^  tor_addr_port_t orport_ipv6;$/;"	m	struct:extend_cell_t
os	src/or/routerparse.c	/^  obj_syntax os;$/;"	m	struct:token_rule_t	file:
outbuf	src/or/or.h	/^  buf_t *outbuf; \/**< Buffer holding data to write over this connection. *\/$/;"	m	struct:connection_t
outbuf_flushlen	src/or/or.h	/^  size_t outbuf_flushlen; \/**< How much data should we try to flush from the$/;"	m	struct:connection_t
outcome	src/ext/tinytest.c	/^enum outcome { SKIP=2, OK=1, FAIL=0 };$/;"	g	file:
outgoing_addrs	src/or/connection.c	/^static smartlist_t *outgoing_addrs = NULL;$/;"	v	file:
outgoing_queue	src/or/channel.h	/^  chan_cell_queue_t outgoing_queue;$/;"	m	struct:channel_s
output	src/test/test_routerlist.c	/^static char output[4*BASE64_DIGEST256_LEN+3+2+2+1];$/;"	v	file:
output_so_far	src/common/torgzip.c	/^  size_t output_so_far;$/;"	m	struct:tor_zlib_state_t	file:
owning_controller_process_monitor	src/or/control.c	/^static tor_process_monitor_t *owning_controller_process_monitor = NULL;$/;"	v	file:
owning_controller_process_spec	src/or/control.c	/^static char *owning_controller_process_spec = NULL;$/;"	v	file:
owning_controller_procmon_cb	src/or/control.c	/^owning_controller_procmon_cb(void *unused)$/;"	f	file:
p_chan	src/or/or.h	/^  channel_t *p_chan;$/;"	m	struct:or_circuit_t
p_chan	src/test/test_relay.c	/^  channel_tls_t *p_chan;$/;"	m	struct:relay_connection_test_data_t	file:
p_chan_cells	src/or/or.h	/^  cell_queue_t p_chan_cells;$/;"	m	struct:or_circuit_t
p_circ_id	src/or/or.h	/^  circid_t p_circ_id;$/;"	m	struct:or_circuit_t
p_crypto	src/or/or.h	/^  crypto_cipher_t *p_crypto;$/;"	m	struct:or_circuit_t
p_delete_pending	src/or/or.h	/^  unsigned int p_delete_pending : 1;$/;"	m	struct:circuit_t
p_digest	src/or/or.h	/^  crypto_digest_t *p_digest;$/;"	m	struct:or_circuit_t
p_mux	src/or/or.h	/^  circuitmux_t *p_mux;$/;"	m	struct:or_circuit_t
p_streams	src/or/or.h	/^  edge_connection_t *p_streams;$/;"	m	struct:origin_circuit_t
package_lines	src/or/or.h	/^  smartlist_t *package_lines;$/;"	m	struct:networkstatus_t
package_window	src/or/or.h	/^  int package_window; \/**< How many cells are we allowed to originate ending$/;"	m	struct:crypt_path_t
package_window	src/or/or.h	/^  int package_window; \/**< How many more relay cells can I send into the$/;"	m	struct:edge_connection_t
package_window	src/or/or.h	/^  int package_window;$/;"	m	struct:circuit_t
packed	src/or/channel.h	/^    } packed;$/;"	m	union:cell_queue_entry_s::__anon92	typeref:struct:cell_queue_entry_s::__anon92::__anon95
packed121666121665	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem64 packed121666121665 = {{121666, 121665}};$/;"	v
packed2p0	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed2p0 = {{0x7ffffda,0x3fffffe,0x7fffffe,0x3fffffe}};$/;"	v
packed2p1	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed2p1 = {{0x7fffffe,0x3fffffe,0x7fffffe,0x3fffffe}};$/;"	v
packed2p2	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed2p2 = {{0x7fffffe,0x3fffffe,0x0000000,0x0000000}};$/;"	v
packed32bignum25519	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^typedef packedelem32 packed32bignum25519[5];$/;"	t
packed32packed2p0	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed32packed2p0 = {{0x7ffffda,0x7ffffda,0x3fffffe,0x3fffffe}};$/;"	v
packed32packed2p1	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed32packed2p1 = {{0x7fffffe,0x7fffffe,0x3fffffe,0x3fffffe}};$/;"	v
packed32packed4p0	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed32packed4p0 = {{0xfffffb4,0xfffffb4,0x7fffffc,0x7fffffc}};$/;"	v
packed32packed4p1	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed32packed4p1 = {{0xffffffc,0xffffffc,0x7fffffc,0x7fffffc}};$/;"	v
packed3819	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem64 packed3819 = {{19*2,19}};$/;"	v
packed4p0	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed4p0 = {{0xfffffb4,0x7fffffc,0xffffffc,0x7fffffc}};$/;"	v
packed4p1	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed4p1 = {{0xffffffc,0x7fffffc,0xffffffc,0x7fffffc}};$/;"	v
packed4p2	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packed4p2 = {{0xffffffc,0x7fffffc,0x0000000,0x0000000}};$/;"	v
packed64bignum25519	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^typedef packedelem64 packed64bignum25519[10];$/;"	t
packed9638	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem64 packed9638 = {{19*4,19*2}};$/;"	v
packed_cell	src/or/channel.h	/^      packed_cell_t *packed_cell;$/;"	m	struct:cell_queue_entry_s::__anon92::__anon95
packed_cell_copy	src/or/relay.c	/^packed_cell_copy(const cell_t *cell, int wide_circ_ids)$/;"	f	file:
packed_cell_free	src/or/relay.c	/^packed_cell_free(packed_cell_t *cell)$/;"	f
packed_cell_free_unchecked	src/or/relay.c	/^packed_cell_free_unchecked(packed_cell_t *cell)$/;"	f	file:
packed_cell_get_circid	src/or/relay.c	/^packed_cell_get_circid(const packed_cell_t *cell, int wide_circ_ids)$/;"	f
packed_cell_get_command	src/or/relay.c	/^packed_cell_get_command(const packed_cell_t *cell, int wide_circ_ids)$/;"	f	file:
packed_cell_is_destroy	src/or/channel.c	/^packed_cell_is_destroy(channel_t *chan,$/;"	f
packed_cell_mem_cost	src/or/relay.c	/^packed_cell_mem_cost(void)$/;"	f
packed_cell_new	src/or/relay.c	/^packed_cell_new(void)$/;"	f
packed_cell_t	src/or/or.h	/^typedef struct packed_cell_t {$/;"	s
packed_cell_t	src/or/or.h	/^} packed_cell_t;$/;"	t	typeref:struct:packed_cell_t
packedelem32	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^} packedelem32;$/;"	t	typeref:union:packedelem32_t
packedelem32_t	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^typedef union packedelem32_t {$/;"	u
packedelem64	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^} packedelem64;$/;"	t	typeref:union:packedelem64_t
packedelem64_t	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^typedef union packedelem64_t {$/;"	u
packedelem8	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^} packedelem8;$/;"	t	typeref:union:packedelem8_t
packedelem8_t	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^typedef union packedelem8_t {$/;"	u
packedmask25	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem64 packedmask25 = {{0x01ffffff, 0x01ffffff}};$/;"	v
packedmask25252525	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packedmask25252525 = {{0x01ffffff, 0x01ffffff, 0x01ffffff, 0x01ffffff}};$/;"	v
packedmask26	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem64 packedmask26 = {{0x03ffffff, 0x03ffffff}};$/;"	v
packedmask2625	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packedmask2625 = {{0x3ffffff,0,0x1ffffff,0}};$/;"	v
packedmask26262626	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 packedmask26262626 = {{0x03ffffff, 0x03ffffff, 0x03ffffff, 0x03ffffff}};$/;"	v
packednineteen	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem64 packednineteen = {{19, 19}};$/;"	v
packednineteenone	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem64 packednineteenone = {{19, 1}};$/;"	v
packedthirtyeight	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem64 packedthirtyeight = {{38, 38}};$/;"	v
param	src/common/sandbox.h	/^  smp_param_t *param;$/;"	m	struct:sandbox_cfg_elem
parse_addr_policy	src/or/policies.c	/^parse_addr_policy(config_line_t *cfg, smartlist_t **dest,$/;"	f	file:
parse_bridge_line	src/or/config.c	/^parse_bridge_line(const char *line)$/;"	f
parse_client_method_error	src/or/transports.c	/^#define parse_client_method_error(/;"	d	file:
parse_cmethod_line	src/or/transports.c	/^parse_cmethod_line(const char *line, managed_proxy_t *mp)$/;"	f
parse_commandline	src/tools/tor-gencert.c	/^parse_commandline(int argc, char **argv)$/;"	f	file:
parse_config_line_from_str	src/common/util.h	/^#define parse_config_line_from_str(/;"	d
parse_config_line_from_str_verbose	src/common/util.c	/^parse_config_line_from_str_verbose(const char *line, char **key_out,$/;"	f
parse_create2_payload	src/or/onion.c	/^parse_create2_payload(create_cell_t *cell_out, const uint8_t *p, size_t p_len)$/;"	f	file:
parse_dir_authority_line	src/or/config.c	/^parse_dir_authority_line(const char *line, dirinfo_type_t required_type,$/;"	f	file:
parse_dir_fallback_line	src/or/config.c	/^parse_dir_fallback_line(const char *line,$/;"	f
parse_env_error	src/or/transports.c	/^parse_env_error(const char *line)$/;"	f
parse_extended_hostname	src/or/connection_edge.c	/^parse_extended_hostname(char *address)$/;"	f
parse_http_response	src/or/directory.c	/^parse_http_response(const char *headers, int *code, time_t *date,$/;"	f
parse_http_time	src/common/util.c	/^parse_http_time(const char *date, struct tm *tm)$/;"	f
parse_http_url	src/or/directory.c	/^parse_http_url(const char *headers, char **url)$/;"	f
parse_iso_time	src/common/util.c	/^parse_iso_time(const char *cp, time_t *t)$/;"	f
parse_iso_time_	src/common/util.c	/^parse_iso_time_(const char *cp, time_t *t, int strict)$/;"	f
parse_log_domain	src/common/log.c	/^parse_log_domain(const char *domain)$/;"	f	file:
parse_log_level	src/common/log.c	/^parse_log_level(const char *level)$/;"	f
parse_log_severity_config	src/common/log.c	/^parse_log_severity_config(const char **cfg_ptr,$/;"	f
parse_method_error	src/or/transports.c	/^parse_method_error(const char *line, int is_server)$/;"	f	file:
parse_openssl_version_str	src/common/crypto.c	/^parse_openssl_version_str(const char *raw_version)$/;"	f	file:
parse_outbound_addresses	src/or/config.c	/^parse_outbound_addresses(or_options_t *options, int validate_only, char **msg)$/;"	f	file:
parse_port_config	src/or/config.c	/^parse_port_config(smartlist_t *out,$/;"	f
parse_port_range	src/common/address.c	/^parse_port_range(const char *port, uint16_t *port_min_out,$/;"	f
parse_ports	src/or/config.c	/^parse_ports(or_options_t *options, int validate_only,$/;"	f	file:
parse_possibly_bad_iso_time	src/or/rephist.c	/^parse_possibly_bad_iso_time(const char *s, time_t *time_out)$/;"	f	file:
parse_process_specifier	src/common/procmon.c	/^parse_process_specifier(const char *process_spec,$/;"	f	file:
parse_proxy_error	src/or/transports.c	/^parse_proxy_error(const char *line)$/;"	f
parse_reachable_addresses	src/or/policies.c	/^parse_reachable_addresses(void)$/;"	f	file:
parse_rfc1123_time	src/common/util.c	/^parse_rfc1123_time(const char *buf, time_t *t)$/;"	f
parse_server_method_error	src/or/transports.c	/^#define parse_server_method_error(/;"	d	file:
parse_short_policy	src/or/policies.c	/^parse_short_policy(const char *summary)$/;"	f
parse_smethod_line	src/or/transports.c	/^parse_smethod_line(const char *line, managed_proxy_t *mp)$/;"	f
parse_socks	src/or/buffers.c	/^parse_socks(const char *data, size_t datalen, socks_request_t *req,$/;"	f	file:
parse_socks4a_resolve_response	src/tools/tor-resolve.c	/^parse_socks4a_resolve_response(const char *hostname,$/;"	f	file:
parse_socks_client	src/or/buffers.c	/^parse_socks_client(const uint8_t *data, size_t datalen,$/;"	f	file:
parse_transport_line	src/or/config.c	/^parse_transport_line(const or_options_t *options,$/;"	f
parse_version	src/or/transports.c	/^parse_version(const char *line, managed_proxy_t *mp)$/;"	f
parse_virtual_addr_network	src/or/addressmap.c	/^parse_virtual_addr_network(const char *val, sa_family_t family,$/;"	f
parsed	src/or/rendcache.h	/^  rend_service_descriptor_t *parsed; \/**< Parsed value of 'desc' *\/$/;"	m	struct:rend_cache_entry_t
parsed	src/or/rendservice.h	/^  uint8_t parsed;$/;"	m	struct:rend_intro_cell_s
parsed_process_specifier_t	src/common/procmon.c	/^struct parsed_process_specifier_t {$/;"	s	file:
passphrase	src/tools/tor-gencert.c	/^char *passphrase = NULL;$/;"	v
passphrase_fd	src/tools/tor-gencert.c	/^int passphrase_fd = -1;$/;"	v
passphrase_len	src/tools/tor-gencert.c	/^size_t passphrase_len = 0;$/;"	v
passthrough_setup	src/test/testing_common.c	/^const struct testcase_setup_t passthrough_setup = {$/;"	v	typeref:struct:testcase_setup_t
passthrough_test_cleanup	src/test/testing_common.c	/^passthrough_test_cleanup(const struct testcase_t *testcase, void *ptr)$/;"	f	file:
passthrough_test_setup	src/test/testing_common.c	/^passthrough_test_setup(const struct testcase_t *testcase)$/;"	f	file:
passwd_cached	src/common/compat.c	/^static struct passwd *passwd_cached = NULL;$/;"	v	typeref:struct:passwd	file:
password	src/or/or.h	/^  char *password;$/;"	m	struct:socks_request_t
passwordlen	src/or/or.h	/^  uint8_t passwordlen;$/;"	m	struct:socks_request_t
patchlevel	src/or/or.h	/^  int patchlevel;$/;"	m	struct:tor_version_t
path_bias_disabled	src/or/entrynodes.h	/^  unsigned int path_bias_disabled : 1; \/**< Have we disabled this node because$/;"	m	struct:entry_guard_t
path_bias_extreme	src/or/entrynodes.h	/^  unsigned int path_bias_extreme : 1; \/**< Did we alert the user about path$/;"	m	struct:entry_guard_t
path_bias_noticed	src/or/entrynodes.h	/^  unsigned int path_bias_noticed : 1; \/**< Did we alert the user about path$/;"	m	struct:entry_guard_t
path_bias_use_extreme	src/or/entrynodes.h	/^  unsigned int path_bias_use_extreme : 1; \/**< Did we alert the user about path$/;"	m	struct:entry_guard_t
path_bias_use_noticed	src/or/entrynodes.h	/^  unsigned int path_bias_use_noticed : 1; \/**< Did we alert the user about path$/;"	m	struct:entry_guard_t
path_bias_warned	src/or/entrynodes.h	/^  unsigned int path_bias_warned : 1; \/**< Did we alert the user about path bias$/;"	m	struct:entry_guard_t
path_is_relative	src/common/util.c	/^path_is_relative(const char *filename)$/;"	f
path_state	src/or/or.h	/^  path_state_bitfield_t path_state : 3;$/;"	m	struct:origin_circuit_t
path_state_bitfield_t	src/or/or.h	/^#define path_state_bitfield_t /;"	d
path_state_t	src/or/or.h	/^} path_state_t;$/;"	t	typeref:enum:__anon54
pathbias_check_close	src/or/circpathbias.c	/^pathbias_check_close(origin_circuit_t *ocirc, int reason)$/;"	f
pathbias_check_probe_response	src/or/circpathbias.c	/^pathbias_check_probe_response(circuit_t *circ, const cell_t *cell)$/;"	f
pathbias_count_build_attempt	src/or/circpathbias.c	/^pathbias_count_build_attempt(origin_circuit_t *circ)$/;"	f
pathbias_count_build_success	src/or/circpathbias.c	/^pathbias_count_build_success(origin_circuit_t *circ)$/;"	f
pathbias_count_circs_in_states	src/or/circpathbias.c	/^pathbias_count_circs_in_states(entry_guard_t *guard,$/;"	f	file:
pathbias_count_collapse	src/or/circpathbias.c	/^pathbias_count_collapse(origin_circuit_t *circ)$/;"	f	file:
pathbias_count_successful_close	src/or/circpathbias.c	/^pathbias_count_successful_close(origin_circuit_t *circ)$/;"	f	file:
pathbias_count_timeout	src/or/circpathbias.c	/^pathbias_count_timeout(origin_circuit_t *circ)$/;"	f
pathbias_count_use_attempt	src/or/circpathbias.c	/^pathbias_count_use_attempt(origin_circuit_t *circ)$/;"	f
pathbias_count_use_failed	src/or/circpathbias.c	/^pathbias_count_use_failed(origin_circuit_t *circ)$/;"	f	file:
pathbias_count_use_success	src/or/circpathbias.c	/^pathbias_count_use_success(origin_circuit_t *circ)$/;"	f	file:
pathbias_get_close_success_count	src/or/circpathbias.c	/^pathbias_get_close_success_count(entry_guard_t *guard)$/;"	f
pathbias_get_dropguards	src/or/circpathbias.c	/^pathbias_get_dropguards(const or_options_t *options)$/;"	f
pathbias_get_extreme_rate	src/or/circpathbias.c	/^pathbias_get_extreme_rate(const or_options_t *options)$/;"	f
pathbias_get_extreme_use_rate	src/or/circpathbias.c	/^pathbias_get_extreme_use_rate(const or_options_t *options)$/;"	f
pathbias_get_min_circs	src/or/circpathbias.c	/^pathbias_get_min_circs(const or_options_t *options)$/;"	f	file:
pathbias_get_min_use	src/or/circpathbias.c	/^pathbias_get_min_use(const or_options_t *options)$/;"	f	file:
pathbias_get_notice_rate	src/or/circpathbias.c	/^pathbias_get_notice_rate(const or_options_t *options)$/;"	f	file:
pathbias_get_notice_use_rate	src/or/circpathbias.c	/^pathbias_get_notice_use_rate(const or_options_t *options)$/;"	f	file:
pathbias_get_scale_ratio	src/or/circpathbias.c	/^pathbias_get_scale_ratio(const or_options_t *options)$/;"	f	file:
pathbias_get_scale_threshold	src/or/circpathbias.c	/^pathbias_get_scale_threshold(const or_options_t *options)$/;"	f	file:
pathbias_get_scale_use_threshold	src/or/circpathbias.c	/^pathbias_get_scale_use_threshold(const or_options_t *options)$/;"	f	file:
pathbias_get_use_success_count	src/or/circpathbias.c	/^pathbias_get_use_success_count(entry_guard_t *guard)$/;"	f
pathbias_get_warn_rate	src/or/circpathbias.c	/^pathbias_get_warn_rate(const or_options_t *options)$/;"	f	file:
pathbias_is_new_circ_attempt	src/or/circpathbias.c	/^pathbias_is_new_circ_attempt(origin_circuit_t *circ)$/;"	f	file:
pathbias_mark_use_rollback	src/or/circpathbias.c	/^pathbias_mark_use_rollback(origin_circuit_t *circ)$/;"	f
pathbias_mark_use_success	src/or/circpathbias.c	/^pathbias_mark_use_success(origin_circuit_t *circ)$/;"	f
pathbias_measure_close_rate	src/or/circpathbias.c	/^pathbias_measure_close_rate(entry_guard_t *guard)$/;"	f	file:
pathbias_measure_use_rate	src/or/circpathbias.c	/^pathbias_measure_use_rate(entry_guard_t *guard)$/;"	f	file:
pathbias_probe_id	src/or/or.h	/^  streamid_t pathbias_probe_id;$/;"	m	struct:origin_circuit_t
pathbias_probe_nonce	src/or/or.h	/^  uint32_t pathbias_probe_nonce;$/;"	m	struct:origin_circuit_t
pathbias_scale_close_rates	src/or/circpathbias.c	/^pathbias_scale_close_rates(entry_guard_t *guard)$/;"	f	file:
pathbias_scale_use_rates	src/or/circpathbias.c	/^pathbias_scale_use_rates(entry_guard_t *guard)$/;"	f
pathbias_send_usable_probe	src/or/circpathbias.c	/^pathbias_send_usable_probe(circuit_t *circ)$/;"	f	file:
pathbias_should_count	src/or/circpathbias.c	/^pathbias_should_count(origin_circuit_t *circ)$/;"	f	file:
pathbias_shouldcount	src/or/or.h	/^  uint8_t pathbias_shouldcount;$/;"	m	struct:origin_circuit_t
pathbias_state_to_string	src/or/circpathbias.c	/^pathbias_state_to_string(path_state_t state)$/;"	f
payload	src/or/or.h	/^  uint8_t payload[CELL_PAYLOAD_SIZE]; \/**< Cell body. *\/$/;"	m	struct:cell_t
payload	src/or/or.h	/^  uint8_t payload[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:var_cell_t
payload_len	src/or/or.h	/^  uint16_t payload_len;$/;"	m	struct:var_cell_t
peek_buf_has_control0_command	src/or/buffers.c	/^peek_buf_has_control0_command(buf_t *buf)$/;"	f
peek_connection_has_control0_command	src/or/control.c	/^peek_connection_has_control0_command(connection_t *conn)$/;"	f	file:
peek_evbuffer_has_control0_command	src/or/buffers.c	/^peek_evbuffer_has_control0_command(struct evbuffer *buf)$/;"	f
peek_from_buf	src/or/buffers.c	/^peek_from_buf(char *string, size_t string_len, const buf_t *buf)$/;"	f	file:
peer_cert_type	src/test/test_tortls.c	/^	int peer_cert_type;$/;"	m	struct:sess_cert_st_local	file:
peer_key	src/test/test_tortls.c	/^	CERT_PKEY_local *peer_key;$/;"	m	struct:sess_cert_st_local	file:
peer_pkeys	src/test/test_tortls.c	/^	CERT_PKEY_local peer_pkeys[8];$/;"	m	struct:sess_cert_st_local	file:
pending	src/common/workqueue.c	/^  uint8_t pending;$/;"	m	struct:workqueue_entry_s	file:
pending_cb_messages	src/common/log.c	/^static smartlist_t *pending_cb_messages = NULL;$/;"	v	file:
pending_connection_t	src/or/dns_structs.h	/^typedef struct pending_connection_t {$/;"	s
pending_connection_t	src/or/dns_structs.h	/^} pending_connection_t;$/;"	t	typeref:struct:pending_connection_t
pending_connections	src/or/dns_structs.h	/^  pending_connection_t *pending_connections;$/;"	m	struct:cached_resolve_t
pending_consensus_signature_list	src/or/dirvote.c	/^static smartlist_t *pending_consensus_signature_list = NULL;$/;"	v	file:
pending_consensus_signatures	src/or/dirvote.c	/^static char *pending_consensus_signatures = NULL;$/;"	v	file:
pending_consensus_t	src/or/dirvote.c	/^typedef struct pending_consensus_t {$/;"	s	file:
pending_consensus_t	src/or/dirvote.c	/^} pending_consensus_t;$/;"	t	typeref:struct:pending_consensus_t	file:
pending_consensuses	src/or/dirvote.c	/^static pending_consensus_t pending_consensuses[N_CONSENSUS_FLAVORS];$/;"	v	file:
pending_final_cpath	src/or/or.h	/^  crypt_path_t *pending_final_cpath;$/;"	m	struct:__anon53
pending_log_message_free	src/common/log.c	/^pending_log_message_free(pending_log_message_t *msg)$/;"	f	file:
pending_log_message_new	src/common/log.c	/^pending_log_message_new(int severity, log_domain_mask_t domain,$/;"	f	file:
pending_log_message_t	src/common/log.c	/^typedef struct pending_log_message_t {$/;"	s	file:
pending_log_message_t	src/common/log.c	/^} pending_log_message_t;$/;"	t	typeref:struct:pending_log_message_t	file:
pending_optimistic_data	src/or/or.h	/^  generic_buffer_t *pending_optimistic_data;$/;"	m	struct:entry_connection_t
pending_sig	src/or/or.h	/^  char *pending_sig;$/;"	m	struct:extrainfo_t
pending_sig_len	src/or/or.h	/^  size_t pending_sig_len;$/;"	m	struct:extrainfo_t
pending_startup_messages	src/common/log.c	/^static smartlist_t *pending_startup_messages = NULL;$/;"	v	file:
pending_startup_messages_len	src/common/log.c	/^static size_t pending_startup_messages_len;$/;"	v	file:
pending_vote_list	src/or/dirvote.c	/^static smartlist_t *pending_vote_list = NULL;$/;"	v	file:
pending_vote_t	src/or/dirvote.c	/^typedef struct pending_vote_t {$/;"	s	file:
pending_vote_t	src/or/dirvote.c	/^} pending_vote_t;$/;"	t	typeref:struct:pending_vote_t	file:
perftime	src/test/bench.c	/^perftime(void)$/;"	f	file:
periodic_timer_cb	src/common/compat_libevent.c	/^periodic_timer_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	file:
periodic_timer_free	src/common/compat_libevent.c	/^periodic_timer_free(periodic_timer_t *timer)$/;"	f
periodic_timer_new	src/common/compat_libevent.c	/^periodic_timer_new(struct event_base *base,$/;"	f
periodic_timer_t	src/common/compat_libevent.c	/^struct periodic_timer_t {$/;"	s	file:
periodic_timer_t	src/common/compat_libevent.h	/^typedef struct periodic_timer_t periodic_timer_t;$/;"	t	typeref:struct:periodic_timer_t
pf_socket	src/or/connection_edge.c	/^static int pf_socket = -1;$/;"	v	file:
pick_active_circuit	src/or/circuitmux.h	/^  circuit_t * (*pick_active_circuit)(circuitmux_t *cmux,$/;"	m	struct:circuitmux_policy_s
pick_curve25519_basepoint_impl	src/common/crypto_curve25519.c	/^pick_curve25519_basepoint_impl(void)$/;"	f	file:
pick_ed25519_impl	src/common/crypto_ed25519.c	/^pick_ed25519_impl(void)$/;"	f	file:
pick_entry_guards	src/or/entrynodes.c	/^pick_entry_guards(const or_options_t *options, int for_directory)$/;"	f	file:
pick_hsdir	src/or/rendclient.c	/^pick_hsdir(const char *desc_id, const char *desc_id_base32)$/;"	f	file:
pick_rendezvous_node	src/or/circuitbuild.c	/^pick_rendezvous_node(router_crn_flags_t flags)$/;"	f	file:
pick_tor2web_rendezvous_node	src/or/circuitbuild.c	/^pick_tor2web_rendezvous_node(router_crn_flags_t flags,$/;"	f
pid	src/common/procmon.c	/^  pid_t pid;$/;"	m	struct:parsed_process_specifier_t	file:
pid	src/common/procmon.c	/^  pid_t pid;$/;"	m	struct:tor_process_monitor_t	file:
pid	src/common/util.h	/^  PROCESS_INFORMATION pid;$/;"	m	struct:process_handle_t
pid	src/common/util.h	/^  pid_t pid;$/;"	m	struct:process_handle_t
pid	src/common/util_process.c	/^  pid_t pid;$/;"	m	struct:waitpid_callback_t	file:
pid	src/or/transports.h	/^  int pid; \/* The Process ID this managed proxy is using. *\/$/;"	m	struct:__anon34
pid_t	src/common/procmon.c	/^typedef int pid_t;$/;"	t	file:
pid_t	src/test/testing_common.c	/^#define pid_t /;"	d	file:
pipe_alert	src/common/compat_threads.c	/^pipe_alert(int fd)$/;"	f	file:
pipe_drain	src/common/compat_threads.c	/^pipe_drain(int fd)$/;"	f	file:
pk	src/or/or.h	/^  crypto_pk_t *pk; \/**< This service's public key. *\/$/;"	m	struct:rend_service_descriptor_t
pk	src/or/rendservice.h	/^  uint8_t pk[DIGEST_LEN];$/;"	m	struct:rend_intro_cell_s
pk	src/test/test_workqueue.c	/^    curve25519_public_key_t pk;$/;"	m	union:ecdh_work_s::__anon87	file:
pk_digest	src/or/rendservice.c	/^  char pk_digest[DIGEST_LEN]; \/**< Hash of permanent hidden-service key. *\/$/;"	m	struct:rend_service_t	file:
pk_generate	src/test/testing_common.c	/^pk_generate(int idx)$/;"	f
pk_op_counts	src/or/rephist.c	/^} pk_op_counts = {0,0,0,0,0,0,0,0,0,0,0};$/;"	v	typeref:struct:__anon86	file:
pk_op_t	src/or/or.h	/^} pk_op_t;$/;"	t	typeref:enum:__anon72
pkey_digests	src/common/tortls.h	/^  digests_t pkey_digests;$/;"	m	struct:tor_x509_cert_t
pkey_digests_set	src/common/tortls.h	/^  unsigned pkey_digests_set : 1;$/;"	m	struct:tor_x509_cert_t
plaintext	src/or/rendservice.h	/^  uint8_t *plaintext;$/;"	m	struct:rend_intro_cell_s
plaintext_len	src/or/rendservice.h	/^  ssize_t plaintext_len;$/;"	m	struct:rend_intro_cell_s
platform	src/or/or.h	/^  char *platform; \/**< What software\/operating system is this OR using? *\/$/;"	m	struct:__anon45
points	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^	ge25519 points[heap_batch_size];$/;"	m	struct:batch_heap_t
policies	src/or/routerset.h	/^  smartlist_t *policies;$/;"	m	struct:routerset_t
policies_exit_policy_append_reject_star	src/or/policies.c	/^policies_exit_policy_append_reject_star(smartlist_t **dest)$/;"	f
policies_free_all	src/or/policies.c	/^policies_free_all(void)$/;"	f
policies_parse_exit_policy	src/or/policies.c	/^policies_parse_exit_policy(config_line_t *cfg, smartlist_t **dest,$/;"	f
policies_parse_exit_policy_from_options	src/or/policies.c	/^policies_parse_exit_policy_from_options(const or_options_t *or_options,$/;"	f
policies_parse_exit_policy_internal	src/or/policies.c	/^policies_parse_exit_policy_internal(config_line_t *cfg, smartlist_t **dest,$/;"	f	file:
policies_parse_from_options	src/test/test_config.c	/^NS(policies_parse_from_options)(const or_options_t *options)$/;"	f	file:
policies_set_node_exitpolicy_to_reject_all	src/or/policies.c	/^policies_set_node_exitpolicy_to_reject_all(node_t *node)$/;"	f
policy	src/or/circuitmux.c	/^  const circuitmux_policy_t *policy;$/;"	m	struct:circuitmux_s	file:
policy	src/or/policies.c	/^  addr_policy_t *policy;$/;"	m	struct:policy_map_ent_t	file:
policy_data	src/or/circuitmux.c	/^  circuitmux_policy_circ_data_t *policy_data;$/;"	m	struct:circuit_muxinfo_s	file:
policy_data	src/or/circuitmux.c	/^  circuitmux_policy_data_t *policy_data;$/;"	m	struct:circuitmux_s	file:
policy_eq	src/or/policies.c	/^policy_eq(policy_map_ent_t *a, policy_map_ent_t *b)$/;"	f	file:
policy_expand_private	src/or/policies.c	/^policy_expand_private(smartlist_t **policy)$/;"	f
policy_expand_unspec	src/or/policies.c	/^policy_expand_unspec(smartlist_t **policy)$/;"	f
policy_hash	src/or/policies.c	/^policy_hash(const policy_map_ent_t *ent)$/;"	f	file:
policy_is_reject_star	src/or/or.h	/^  unsigned int policy_is_reject_star:1; \/**< True iff the exit policy for this$/;"	m	struct:__anon45
policy_is_reject_star	src/or/policies.c	/^policy_is_reject_star(const smartlist_t *policy, sa_family_t family)$/;"	f
policy_map_ent_t	src/or/policies.c	/^typedef struct policy_map_ent_t {$/;"	s	file:
policy_map_ent_t	src/or/policies.c	/^} policy_map_ent_t;$/;"	t	typeref:struct:policy_map_ent_t	file:
policy_summarize	src/or/policies.c	/^policy_summarize(smartlist_t *policy, sa_family_t family)$/;"	f
policy_summary_accept	src/or/policies.c	/^policy_summary_accept(smartlist_t *summary,$/;"	f	file:
policy_summary_add_item	src/or/policies.c	/^policy_summary_add_item(smartlist_t *summary, addr_policy_t *p)$/;"	f	file:
policy_summary_create	src/or/policies.c	/^policy_summary_create(void)$/;"	f	file:
policy_summary_item_split	src/or/policies.c	/^policy_summary_item_split(policy_summary_item_t* old, uint16_t new_starts)$/;"	f	file:
policy_summary_item_t	src/or/policies.c	/^typedef struct policy_summary_item_t {$/;"	s	file:
policy_summary_item_t	src/or/policies.c	/^} policy_summary_item_t;$/;"	t	typeref:struct:policy_summary_item_t	file:
policy_summary_reject	src/or/policies.c	/^policy_summary_reject(smartlist_t *summary,$/;"	f	file:
policy_summary_split	src/or/policies.c	/^policy_summary_split(smartlist_t *summary,$/;"	f	file:
policy_tests	src/test/test_policy.c	/^struct testcase_t policy_tests[] = {$/;"	v	typeref:struct:testcase_t
policy_type	src/or/or.h	/^  addr_policy_action_bitfield_t policy_type:2;$/;"	m	struct:addr_policy_t
policy_write_item	src/or/policies.c	/^policy_write_item(char *buf, size_t buflen, addr_policy_t *policy,$/;"	f
poll_hproc	src/common/procmon.c	/^  int poll_hproc;$/;"	m	struct:tor_process_monitor_t	file:
poll_interval_tv	src/common/procmon.c	/^static struct timeval poll_interval_tv = {15, 0};$/;"	v	typeref:struct:timeval	file:
pop_first_cell_ewma	src/or/circuitmux_ewma.c	/^pop_first_cell_ewma(ewma_policy_data_t *pol)$/;"	f	file:
populate_live_entry_guards	src/or/entrynodes.c	/^populate_live_entry_guards(smartlist_t *live_entry_guards,$/;"	f
populate_live_entry_guards_test_helper	src/test/test_entrynodes.c	/^populate_live_entry_guards_test_helper(int num_needed)$/;"	f	file:
port	src/common/address.h	/^  uint16_t port;$/;"	m	struct:tor_addr_port_t
port	src/or/config.h	/^  uint16_t port; \/* The TCP port of the bridge. *\/$/;"	m	struct:bridge_line_t
port	src/or/connection_edge.h	/^  uint16_t port;$/;"	m	struct:begin_cell_t
port	src/or/entrynodes.c	/^  uint16_t port;$/;"	m	struct:__anon32	file:
port	src/or/or.h	/^  int port; \/**< The configured port, or CFG_AUTO_PORT to tell Tor to pick its$/;"	m	struct:port_cfg_t
port	src/or/or.h	/^  uint16_t port; \/**< If non-zero, port on the other end$/;"	m	struct:connection_t
port	src/or/or.h	/^  uint16_t port; \/**< OR port. *\/$/;"	m	struct:extend_info_t
port	src/or/or.h	/^  uint16_t port; \/**< What port did the client ask to connect to? *\/$/;"	m	struct:socks_request_t
port	src/or/rephist.c	/^  uint16_t port;$/;"	m	struct:predicted_port_t	file:
port	src/or/transports.h	/^  uint16_t port;$/;"	m	struct:transport_t
port_cfg_free	src/or/config.c	/^port_cfg_free(port_cfg_t *port)$/;"	f	file:
port_cfg_new	src/or/config.c	/^port_cfg_new(size_t namelen)$/;"	f	file:
port_cfg_t	src/or/or.h	/^typedef struct port_cfg_t {$/;"	s
port_cfg_t	src/or/or.h	/^} port_cfg_t;$/;"	t	typeref:struct:port_cfg_t
ports	src/or/rendservice.c	/^  smartlist_t *ports; \/**< List of rend_service_port_config_t *\/$/;"	m	struct:rend_service_t	file:
pos	src/common/aes.c	/^  unsigned int pos;$/;"	m	struct:aes_cnt_cipher	file:
pos	src/or/buffers.c	/^  int pos;\/**< Which character inside the chunk's data are we pointing to? *\/$/;"	m	struct:buf_pos_t	file:
pos	src/or/routerparse.c	/^  int pos;$/;"	m	struct:token_rule_t	file:
pq_entry_t	src/test/test_containers.c	/^typedef struct pq_entry_t {$/;"	s	file:
pq_entry_t	src/test/test_containers.c	/^} pq_entry_t;$/;"	t	typeref:struct:pq_entry_t	file:
predicted_internal_capacity_time	src/or/rephist.c	/^static time_t predicted_internal_capacity_time = 0;$/;"	v	file:
predicted_internal_time	src/or/rephist.c	/^static time_t predicted_internal_time = 0;$/;"	v	file:
predicted_internal_uptime_time	src/or/rephist.c	/^static time_t predicted_internal_uptime_time = 0;$/;"	v	file:
predicted_port_t	src/or/rephist.c	/^typedef struct predicted_port_t {$/;"	s	file:
predicted_port_t	src/or/rephist.c	/^} predicted_port_t;$/;"	t	typeref:struct:predicted_port_t	file:
predicted_ports_free	src/or/rephist.c	/^predicted_ports_free(void)$/;"	f	file:
predicted_ports_init	src/or/rephist.c	/^predicted_ports_init(void)$/;"	f	file:
predicted_ports_list	src/or/rephist.c	/^static smartlist_t *predicted_ports_list=NULL;$/;"	v	file:
prefer_ipv6	src/or/or.h	/^  unsigned int prefer_ipv6 : 1;$/;"	m	struct:entry_port_cfg_t
prefer_ipv6_virtaddr	src/or/or.h	/^  unsigned int prefer_ipv6_virtaddr : 1;$/;"	m	struct:entry_port_cfg_t
preferred_chunk_size	src/or/buffers.c	/^preferred_chunk_size(size_t target)$/;"	f	file:
prefix	src/ext/tinytest.h	/^	const char *prefix; \/**< Prefix to prepend to testnames. *\/$/;"	m	struct:testgroup_t
pregen_keys	src/test/testing_common.c	/^static crypto_pk_t *pregen_keys[5] = {NULL, NULL, NULL, NULL, NULL};$/;"	v	file:
prepend_policy	src/or/or.h	/^  smartlist_t *prepend_policy;$/;"	m	struct:origin_circuit_t
pretend_to_connect	src/test/test_address.c	/^pretend_to_connect(tor_socket_t socket, const struct sockaddr *address,$/;"	f	file:
pretty_fn_has_parens	src/common/log.c	/^static int pretty_fn_has_parens = 0;$/;"	v	file:
prev	src/or/or.h	/^  struct crypt_path_t *prev; \/**< Link to previous crypt_path_t in the$/;"	m	struct:crypt_path_t	typeref:struct:crypt_path_t::crypt_path_t
prev_active_on_n_chan	src/or/or.h	/^  struct circuit_t *prev_active_on_n_chan;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::circuit_t
prev_active_on_p_chan	src/or/or.h	/^  struct circuit_t *prev_active_on_p_chan;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::circuit_t
previous_vote_list	src/or/dirvote.c	/^static smartlist_t *previous_vote_list = NULL;$/;"	v	file:
print_usage	src/or/config.c	/^print_usage(void)$/;"	f	file:
private_key	src/or/rendservice.c	/^  crypto_pk_t *private_key; \/**< Permanent hidden-service key. *\/$/;"	m	struct:rend_service_t	file:
private_nets	src/or/policies.c	/^static const char *private_nets[] = {$/;"	v	file:
privatekey	src/test/test_tortls.c	/^	EVP_PKEY *privatekey;$/;"	m	struct:cert_pkey_st_local	file:
process_environment_free	src/common/util.c	/^process_environment_free(process_environment_t *env)$/;"	f
process_environment_make	src/common/util.c	/^process_environment_make(struct smartlist_t *env_vars)$/;"	f
process_environment_t	src/common/util.h	/^struct process_environment_t {$/;"	s
process_environment_t	src/common/util.h	/^typedef struct process_environment_t process_environment_t;$/;"	t	typeref:struct:process_environment_t
process_handle	src/or/transports.h	/^  process_handle_t *process_handle;$/;"	m	struct:__anon34
process_handle_new	src/common/util.c	/^process_handle_new(void)$/;"	f	file:
process_handle_t	src/common/util.h	/^struct process_handle_t {$/;"	s
process_handle_t	src/common/util.h	/^typedef struct process_handle_t process_handle_t;$/;"	t	typeref:struct:process_handle_t
process_handle_waitpid_cb	src/common/util.c	/^process_handle_waitpid_cb(int status, void *arg)$/;"	f	file:
process_map_entries_eq_	src/common/util_process.c	/^process_map_entries_eq_(const waitpid_callback_t *a,$/;"	f	file:
process_map_entry_hash_	src/common/util_process.c	/^process_map_entry_hash_(const waitpid_callback_t *ent)$/;"	f	file:
process_signal	src/or/main.c	/^process_signal(int sig)$/;"	f	file:
process_test_alias	src/ext/tinytest.c	/^process_test_alias(struct testgroup_t *groups, const char *test)$/;"	f	file:
process_test_option	src/ext/tinytest.c	/^process_test_option(struct testgroup_t *groups, const char *test)$/;"	f	file:
processed_cells	src/or/or.h	/^  uint32_t processed_cells;$/;"	m	struct:or_circuit_t
processed_cells	src/or/rephist.c	/^  uint32_t processed_cells;$/;"	m	struct:circ_buffer_stats_t	file:
procmon_tests	src/test/test_procmon.c	/^struct testcase_t procmon_tests[] = {$/;"	v	typeref:struct:testcase_t
prot	src/common/sandbox.h	/^  int prot;$/;"	m	struct:smp_param
prot_strings	src/common/sandbox.c	/^prot_strings(scmp_filter_ctx ctx, sandbox_cfg_t* cfg)$/;"	f	file:
prot_strings_helper	src/common/sandbox.c	/^prot_strings_helper(strmap_t *locations,$/;"	f	file:
proto1_tweaks	src/or/onion_ntor.c	/^const tweakset_t proto1_tweaks = {$/;"	v
protocols	src/or/or.h	/^  unsigned protocols : REND_PROTOCOL_VERSION_BITMASK_WIDTH;$/;"	m	struct:rend_service_descriptor_t
proxy_configuration_finished	src/or/transports.c	/^proxy_configuration_finished(const managed_proxy_t *mp)$/;"	f	file:
proxy_mode	src/or/router.c	/^proxy_mode(const or_options_t *options)$/;"	f
proxy_needs_restart	src/or/transports.c	/^proxy_needs_restart(const managed_proxy_t *mp)$/;"	f	file:
proxy_prepare_for_restart	src/or/transports.c	/^proxy_prepare_for_restart(managed_proxy_t *mp)$/;"	f	file:
proxy_state	src/or/or.h	/^  unsigned int proxy_state:4;$/;"	m	struct:connection_t
proxy_supported	src/or/transports.h	/^  unsigned int proxy_supported : 1; \/* the proxy honors TOR_PT_PROXY *\/$/;"	m	struct:__anon34
proxy_type	src/or/or.h	/^  unsigned int proxy_type:2; \/**< One of PROXY_NONE...PROXY_SOCKS5 *\/$/;"	m	struct:or_connection_t
proxy_type_to_string	src/or/connection.c	/^proxy_type_to_string(int proxy_type)$/;"	f	file:
proxy_uri	src/or/transports.h	/^  char *proxy_uri;  \/* the outgoing proxy in TOR_PT_PROXY URI format *\/$/;"	m	struct:__anon34
prt_max	src/or/or.h	/^  uint16_t prt_max; \/**< Highest port number to accept\/reject. *\/$/;"	m	struct:addr_policy_t
prt_max	src/or/policies.c	/^    uint16_t prt_max; \/**< Highest port number to accept\/reject. *\/$/;"	m	struct:policy_summary_item_t	file:
prt_min	src/or/or.h	/^  uint16_t prt_min; \/**< Lowest port number to accept\/reject. *\/$/;"	m	struct:addr_policy_t
prt_min	src/or/policies.c	/^    uint16_t prt_min; \/**< Lowest port number to accept\/reject. *\/$/;"	m	struct:policy_summary_item_t	file:
prune_v2_cipher_list	src/common/tortls.c	/^prune_v2_cipher_list(const SSL *ssl)$/;"	f	file:
pt_configure_remaining_proxies	src/test/test_config.c	/^NS(pt_configure_remaining_proxies)(void)$/;"	f
pt_free_all	src/or/transports.c	/^pt_free_all(void)$/;"	f
pt_get_extra_info_descriptor_string	src/or/transports.c	/^pt_get_extra_info_descriptor_string(void)$/;"	f
pt_get_socks_args_for_proxy_addrport	src/or/transports.c	/^pt_get_socks_args_for_proxy_addrport(const tor_addr_t *addr, uint16_t port)$/;"	f
pt_kickstart_client_proxy	src/or/transports.h	/^#define pt_kickstart_client_proxy(/;"	d
pt_kickstart_proxy_mock	src/test/test_config.c	/^pt_kickstart_proxy_mock(const smartlist_t *transport_list,$/;"	f	file:
pt_kickstart_proxy_mock_call_count	src/test/test_config.c	/^static int pt_kickstart_proxy_mock_call_count = 0;$/;"	v	file:
pt_kickstart_server_proxy	src/or/transports.h	/^#define pt_kickstart_server_proxy(/;"	d
pt_prepare_proxy_list_for_config_read	src/or/transports.c	/^pt_prepare_proxy_list_for_config_read(void)$/;"	f
pt_proto_state	src/or/transports.h	/^enum pt_proto_state {$/;"	g
pt_proxies_configuration_pending	src/test/test_config.c	/^NS(pt_proxies_configuration_pending)(void)$/;"	f
pt_proxies_configuration_pending	src/test/test_main.c	/^NS(pt_proxies_configuration_pending)(void)$/;"	f
pt_stringify_socks_args	src/or/transports.c	/^pt_stringify_socks_args(const smartlist_t *socks_args)$/;"	f
pt_tests	src/test/test_pt.c	/^struct testcase_t pt_tests[] = {$/;"	v	typeref:struct:testcase_t
pubkey	src/common/crypto_curve25519.h	/^  curve25519_public_key_t pubkey;$/;"	m	struct:curve25519_keypair_t
pubkey	src/common/crypto_ed25519.c	/^  int (*pubkey)(unsigned char *, const unsigned char *);$/;"	m	struct:__anon15	file:
pubkey	src/common/crypto_ed25519.h	/^  const ed25519_public_key_t *pubkey;$/;"	m	struct:__anon21
pubkey	src/common/crypto_ed25519.h	/^  ed25519_public_key_t pubkey;$/;"	m	struct:__anon20
pubkey	src/common/crypto_ed25519.h	/^  uint8_t pubkey[ED25519_PUBKEY_LEN];$/;"	m	struct:__anon18
pubkey_B	src/or/onion_ntor.h	/^  curve25519_public_key_t pubkey_B;$/;"	m	struct:ntor_handshake_state_t
pubkey_X	src/or/onion_ntor.h	/^  curve25519_public_key_t pubkey_X;$/;"	m	struct:ntor_handshake_state_t
pubkey_from_curve25519_pubkey	src/common/crypto_ed25519.c	/^  int (*pubkey_from_curve25519_pubkey)(unsigned char *, const unsigned char *,$/;"	m	struct:__anon15	file:
public_key	src/common/crypto_curve25519.h	/^  uint8_t public_key[CURVE25519_PUBKEY_LEN];$/;"	m	struct:curve25519_public_key_t
public_server_mode	src/test/test_config.c	/^NS(public_server_mode)(const or_options_t *options)$/;"	f	file:
public_server_mode	src/test/test_dir.c	/^NS(public_server_mode)(const or_options_t *options)$/;"	f	file:
public_server_mode	src/test/test_status.c	/^NS(public_server_mode)(const or_options_t *options)$/;"	f	file:
published	src/or/or.h	/^  time_t published; \/**< Vote only: Time when vote was written. *\/$/;"	m	struct:networkstatus_t
published	src/or/or.h	/^  time_t published; \/**< When was this object published. *\/$/;"	m	struct:cached_dir_t
published_on	src/or/or.h	/^  time_t published_on; \/**< When was this router published? *\/$/;"	m	struct:routerstatus_t
published_on	src/or/or.h	/^  time_t published_on;$/;"	m	struct:signed_descriptor_t
purge_expired_resolves	src/or/dns.c	/^purge_expired_resolves(time_t now)$/;"	f	file:
purge_hid_serv_from_last_hid_serv_requests	src/or/rendclient.c	/^purge_hid_serv_from_last_hid_serv_requests(const char *desc_id)$/;"	f	file:
purpose	src/or/or.h	/^  uint8_t purpose; \/**< Why are we creating this circuit? *\/$/;"	m	struct:circuit_t
purpose	src/or/or.h	/^  uint8_t purpose;$/;"	m	struct:__anon45
purpose	src/or/or.h	/^  unsigned int purpose:5; \/**< Only used for DIR and EXIT types currently. *\/$/;"	m	struct:connection_t
purpose_needs_anonymity	src/or/directory.c	/^purpose_needs_anonymity(uint8_t dir_purpose, uint8_t router_purpose)$/;"	f
pwbox_deadcode_dummy__	src/trunnel/pwbox.c	/^int pwbox_deadcode_dummy__ = 0;$/;"	v
pwbox_encoded_add_data	src/trunnel/pwbox.c	/^pwbox_encoded_add_data(pwbox_encoded_t *inp, uint8_t elt)$/;"	f
pwbox_encoded_add_skey_header	src/trunnel/pwbox.c	/^pwbox_encoded_add_skey_header(pwbox_encoded_t *inp, uint8_t elt)$/;"	f
pwbox_encoded_check	src/trunnel/pwbox.c	/^pwbox_encoded_check(const pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_clear	src/trunnel/pwbox.c	/^pwbox_encoded_clear(pwbox_encoded_t *obj)$/;"	f	file:
pwbox_encoded_clear_errors	src/trunnel/pwbox.c	/^pwbox_encoded_clear_errors(pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_encode	src/trunnel/pwbox.c	/^pwbox_encoded_encode(uint8_t *output, size_t avail, const pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_encoded_len	src/trunnel/pwbox.c	/^pwbox_encoded_encoded_len(const pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_free	src/trunnel/pwbox.c	/^pwbox_encoded_free(pwbox_encoded_t *obj)$/;"	f
pwbox_encoded_get_data	src/trunnel/pwbox.c	/^pwbox_encoded_get_data(pwbox_encoded_t *inp, size_t idx)$/;"	f
pwbox_encoded_get_fixedbytes0	src/trunnel/pwbox.c	/^pwbox_encoded_get_fixedbytes0(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_get_fixedbytes1	src/trunnel/pwbox.c	/^pwbox_encoded_get_fixedbytes1(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_get_header_len	src/trunnel/pwbox.c	/^pwbox_encoded_get_header_len(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_get_hmac	src/trunnel/pwbox.c	/^pwbox_encoded_get_hmac(const pwbox_encoded_t *inp, size_t idx)$/;"	f
pwbox_encoded_get_iv	src/trunnel/pwbox.c	/^pwbox_encoded_get_iv(const pwbox_encoded_t *inp, size_t idx)$/;"	f
pwbox_encoded_get_skey_header	src/trunnel/pwbox.c	/^pwbox_encoded_get_skey_header(pwbox_encoded_t *inp, size_t idx)$/;"	f
pwbox_encoded_getarray_data	src/trunnel/pwbox.c	/^pwbox_encoded_getarray_data(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getarray_hmac	src/trunnel/pwbox.c	/^pwbox_encoded_getarray_hmac(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getarray_iv	src/trunnel/pwbox.c	/^pwbox_encoded_getarray_iv(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getarray_skey_header	src/trunnel/pwbox.c	/^pwbox_encoded_getarray_skey_header(pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getlen_data	src/trunnel/pwbox.c	/^pwbox_encoded_getlen_data(const pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getlen_hmac	src/trunnel/pwbox.c	/^pwbox_encoded_getlen_hmac(const pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getlen_iv	src/trunnel/pwbox.c	/^pwbox_encoded_getlen_iv(const pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_getlen_skey_header	src/trunnel/pwbox.c	/^pwbox_encoded_getlen_skey_header(const pwbox_encoded_t *inp)$/;"	f
pwbox_encoded_new	src/trunnel/pwbox.c	/^pwbox_encoded_new(void)$/;"	f
pwbox_encoded_parse	src/trunnel/pwbox.c	/^pwbox_encoded_parse(pwbox_encoded_t **output, const uint8_t *input, const size_t len_in)$/;"	f
pwbox_encoded_parse_into	src/trunnel/pwbox.c	/^pwbox_encoded_parse_into(pwbox_encoded_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
pwbox_encoded_set_data	src/trunnel/pwbox.c	/^pwbox_encoded_set_data(pwbox_encoded_t *inp, size_t idx, uint8_t elt)$/;"	f
pwbox_encoded_set_fixedbytes0	src/trunnel/pwbox.c	/^pwbox_encoded_set_fixedbytes0(pwbox_encoded_t *inp, uint32_t val)$/;"	f
pwbox_encoded_set_fixedbytes1	src/trunnel/pwbox.c	/^pwbox_encoded_set_fixedbytes1(pwbox_encoded_t *inp, uint32_t val)$/;"	f
pwbox_encoded_set_header_len	src/trunnel/pwbox.c	/^pwbox_encoded_set_header_len(pwbox_encoded_t *inp, uint8_t val)$/;"	f
pwbox_encoded_set_hmac	src/trunnel/pwbox.c	/^pwbox_encoded_set_hmac(pwbox_encoded_t *inp, size_t idx, uint8_t elt)$/;"	f
pwbox_encoded_set_iv	src/trunnel/pwbox.c	/^pwbox_encoded_set_iv(pwbox_encoded_t *inp, size_t idx, uint8_t elt)$/;"	f
pwbox_encoded_set_skey_header	src/trunnel/pwbox.c	/^pwbox_encoded_set_skey_header(pwbox_encoded_t *inp, size_t idx, uint8_t elt)$/;"	f
pwbox_encoded_setlen_data	src/trunnel/pwbox.c	/^pwbox_encoded_setlen_data(pwbox_encoded_t *inp, size_t newlen)$/;"	f
pwbox_encoded_setlen_skey_header	src/trunnel/pwbox.c	/^pwbox_encoded_setlen_skey_header(pwbox_encoded_t *inp, size_t newlen)$/;"	f
pwbox_encoded_st	src/trunnel/pwbox.h	/^struct pwbox_encoded_st {$/;"	s
pwbox_encoded_t	src/trunnel/pwbox.h	/^typedef struct pwbox_encoded_st pwbox_encoded_t;$/;"	t	typeref:struct:pwbox_encoded_st
questions	src/ext/eventdns.h	/^	struct evdns_server_question **questions;$/;"	m	struct:evdns_server_request	typeref:struct:evdns_server_request::evdns_server_question
queue_control_event_string_replacement	src/test/test_hs.c	/^queue_control_event_string_replacement(uint16_t event, char *msg)$/;"	f	file:
queue_control_event_string_replacement	src/test/test_pt.c	/^queue_control_event_string_replacement(uint16_t event, char *msg)$/;"	f	file:
queue_heuristic	src/or/scheduler.c	/^STATIC uint64_t queue_heuristic = 0;$/;"	v
queue_heuristic_timestamp	src/or/scheduler.c	/^STATIC time_t queue_heuristic_timestamp = 0;$/;"	v
queue_pending_tasks	src/or/cpuworker.c	/^queue_pending_tasks(void)$/;"	f	file:
queue_reply	src/common/workqueue.c	/^queue_reply(replyqueue_t *queue, workqueue_entry_t *work)$/;"	f	file:
queue_startup_messages	src/common/log.c	/^static int queue_startup_messages = 1;$/;"	v	file:
queued_control_events	src/or/control.c	/^static smartlist_t *queued_control_events = NULL;$/;"	v	file:
queued_control_events_lock	src/or/control.c	/^static tor_mutex_t *queued_control_events_lock = NULL;$/;"	v	file:
queued_event_free	src/or/control.c	/^queued_event_free(queued_event_t *ev)$/;"	f	file:
queued_event_s	src/or/control.c	/^typedef struct queued_event_s {$/;"	s	file:
queued_event_t	src/or/control.c	/^} queued_event_t;$/;"	t	typeref:struct:queued_event_s	file:
queued_events_flush_all	src/or/control.c	/^queued_events_flush_all(int force)$/;"	f	file:
quiet_level	src/or/main.c	/^int quiet_level = 0;$/;"	v
r	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^	unsigned char r[heap_batch_size][16]; \/* 128 bit random values *\/$/;"	m	struct:batch_heap_t
rand	src/trunnel/link_handshake.h	/^  uint8_t rand[24];$/;"	m	struct:auth1_st
randombytes	src/ext/ed25519/ref10/randombytes.h	/^#define randombytes(/;"	d
rate	src/common/util.h	/^  int rate;$/;"	m	struct:ratelim_t
rate_limit_is_ready	src/common/util.c	/^rate_limit_is_ready(ratelim_t *lim, time_t now)$/;"	f	file:
rate_limit_log	src/common/util.c	/^rate_limit_log(ratelim_t *lim, time_t now)$/;"	f
ratelim_t	src/common/util.h	/^typedef struct ratelim_t {$/;"	s
ratelim_t	src/common/util.h	/^} ratelim_t;$/;"	t	typeref:struct:ratelim_t
rc	src/or/rendservice.h	/^  uint8_t rc[REND_COOKIE_LEN];$/;"	m	struct:rend_intro_cell_s
rcsid	src/ext/strlcat.c	/^static char *rcsid = "$OpenBSD: strlcat.c,v 1.8 2001\/05\/13 15:40:15 deraadt Exp $";$/;"	v	file:
rcsid	src/ext/strlcpy.c	/^static char *rcsid = "$OpenBSD: strlcpy.c,v 1.2 1998\/11\/06 04:33:16 wvdputte Exp $";$/;"	v	file:
reachable_dir_addr_policy	src/or/policies.c	/^static smartlist_t *reachable_dir_addr_policy = NULL;$/;"	v	file:
reachable_or_addr_policy	src/or/policies.c	/^static smartlist_t *reachable_or_addr_policy = NULL;$/;"	v	file:
read	src/or/rephist.c	/^  size_t read; \/**< Number of read bytes *\/$/;"	m	struct:bidi_map_entry_t	file:
read_all	src/common/util.c	/^read_all(tor_socket_t fd, char *buf, size_t count, int isSocket)$/;"	f
read_array	src/or/rephist.c	/^static bw_array_t *read_array = NULL;$/;"	v	file:
read_bandwidth_usage	src/or/hibernate.c	/^read_bandwidth_usage(void)$/;"	f	file:
read_blocked_on_bw	src/or/or.h	/^  unsigned int read_blocked_on_bw:1; \/**< Boolean: should we start reading$/;"	m	struct:connection_t
read_bucket	src/or/or.h	/^  int read_bucket; \/**< When this hits 0, stop receiving. Every second we$/;"	m	struct:or_connection_t
read_cert_from	src/test/test_tortls.c	/^read_cert_from(const char *str)$/;"	f	file:
read_emptied_time	src/or/or.h	/^  uint32_t read_emptied_time;$/;"	m	struct:or_connection_t
read_encrypted_secret_key	src/or/routerkeys.c	/^read_encrypted_secret_key(ed25519_secret_key_t *out,$/;"	f
read_escaped_data	src/or/control.c	/^read_escaped_data(const char *data, size_t len, char **out)$/;"	f
read_event	src/or/or.h	/^  struct event *read_event; \/**< Libevent event structure. *\/$/;"	m	struct:connection_t	typeref:struct:connection_t::event
read_fd	src/common/compat_threads.h	/^  tor_socket_t read_fd;$/;"	m	struct:alert_sockets_s
read_file_to_str	src/common/util.c	/^read_file_to_str(const char *filename, int flags, struct stat *stat_out)$/;"	f
read_file_to_str_until_eof	src/common/util.c	/^read_file_to_str_until_eof(int fd, size_t max_bytes_to_read, size_t *sz_out)$/;"	f
read_ni	src/common/compat_threads.c	/^read_ni(int fd, void *buf, size_t n)$/;"	f	file:
read_to_buf	src/or/buffers.c	/^read_to_buf(tor_socket_t s, size_t at_most, buf_t *buf, int *reached_eof,$/;"	f
read_to_buf_tls	src/or/buffers.c	/^read_to_buf_tls(tor_tls_t *tls, size_t at_most, buf_t *buf)$/;"	f
read_to_chunk	src/or/buffers.c	/^read_to_chunk(buf_t *buf, chunk_t *chunk, tor_socket_t fd, size_t at_most,$/;"	f	file:
read_to_chunk_tls	src/or/buffers.c	/^read_to_chunk_tls(buf_t *buf, chunk_t *chunk, tor_tls_t *tls,$/;"	f	file:
reading_from_linked_conn	src/or/or.h	/^  unsigned int reading_from_linked_conn:1;$/;"	m	struct:connection_t
real_addr	src/or/or.h	/^  tor_addr_t real_addr; \/**< The actual address that this connection came from$/;"	m	struct:or_connection_t
real_addr	src/or/rendservice.c	/^  tor_addr_t real_addr;$/;"	m	struct:rend_service_port_config_s	file:
real_port	src/or/rendservice.c	/^  uint16_t real_port;$/;"	m	struct:rend_service_port_config_s	file:
real_uptime	src/or/dirserv.c	/^real_uptime(const routerinfo_t *router, time_t now)$/;"	f	file:
realign_pointer	src/common/memarea.c	/^realign_pointer(void *ptr)$/;"	f	file:
reason_for_closing	src/or/channel.h	/^  } reason_for_closing;$/;"	m	struct:channel_listener_s	typeref:enum:channel_listener_s::__anon90
reason_for_closing	src/or/channel.h	/^  } reason_for_closing;$/;"	m	struct:channel_s	typeref:enum:channel_s::__anon88
received	src/test/test_workqueue.c	/^bitarray_t *received;$/;"	v
received_auth_challenge	src/or/or.h	/^  unsigned int received_auth_challenge : 1;$/;"	m	struct:or_handshake_state_t
received_authenticate	src/or/or.h	/^  unsigned int received_authenticate : 1;$/;"	m	struct:or_handshake_state_t
received_certs_cell	src/or/or.h	/^  unsigned int received_certs_cell : 1;$/;"	m	struct:or_handshake_state_t
received_destroy	src/or/or.h	/^  unsigned int received_destroy : 1;$/;"	m	struct:circuit_t
received_msg	src/test/test_hs.c	/^static char *received_msg = NULL;$/;"	v	file:
received_versions	src/or/or.h	/^  unsigned int received_versions : 1;$/;"	m	struct:or_handshake_state_t
recheck_bandwidth	src/or/main.h	/^  time_t recheck_bandwidth;$/;"	m	struct:__anon5
recognized	src/or/or.h	/^  uint16_t recognized; \/**< Used to tell whether cell is for us. *\/$/;"	m	struct:__anon40
record_num_bytes_transferred	src/or/connection.c	/^record_num_bytes_transferred(connection_t *conn,$/;"	f	file:
record_num_bytes_transferred_impl	src/or/connection.c	/^record_num_bytes_transferred_impl(connection_t *conn,$/;"	f	file:
recv_authchallenge_cleanup	src/test/test_link_handshake.c	/^recv_authchallenge_cleanup(const struct testcase_t *test, void *obj)$/;"	f	file:
recv_authchallenge_setup	src/test/test_link_handshake.c	/^recv_authchallenge_setup(const struct testcase_t *test)$/;"	f	file:
recv_certs_cleanup	src/test/test_link_handshake.c	/^recv_certs_cleanup(const struct testcase_t *test, void *obj)$/;"	f	file:
recv_certs_setup	src/test/test_link_handshake.c	/^recv_certs_setup(const struct testcase_t *test)$/;"	f	file:
recv_ni	src/common/compat_threads.c	/^recv_ni(int fd, void *buf, size_t n, int flags)$/;"	f	file:
reduce256_modm	src/ext/ed25519/donna/modm-donna-32bit.h	/^reduce256_modm(bignum256modm r) {$/;"	f
reduce256_modm	src/ext/ed25519/donna/modm-donna-64bit.h	/^reduce256_modm(bignum256modm r) {$/;"	f
reduce_mask_25	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^static const uint32_t reduce_mask_25 = (1 << 25) - 1;$/;"	v
reduce_mask_26	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^static const uint32_t reduce_mask_26 = (1 << 26) - 1;$/;"	v
reduce_mask_40	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^static const uint64_t reduce_mask_40 = ((uint64_t)1 << 40) - 1;$/;"	v
reduce_mask_51	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^static const uint64_t reduce_mask_51 = ((uint64_t)1 << 51) - 1;$/;"	v
reduce_mask_56	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^static const uint64_t reduce_mask_56 = ((uint64_t)1 << 56) - 1;$/;"	v
refcnt	src/common/tortls.h	/^  int refcnt;$/;"	m	struct:tor_tls_context_t
refcnt	src/or/or.h	/^  int refcnt; \/**< Reference count *\/$/;"	m	struct:addr_policy_t
refcnt	src/or/or.h	/^  int refcnt; \/**< Reference count for this cached_dir_t. *\/$/;"	m	struct:cached_dir_t
refcount	src/or/or.h	/^  unsigned int refcount;$/;"	m	struct:__anon52
references	src/test/test_tortls.c	/^	int references;$/;"	m	struct:sess_cert_st_local	file:
refill_callback	src/or/main.c	/^refill_callback(periodic_timer_t *timer, void *arg)$/;"	f	file:
refill_timer	src/or/main.c	/^static periodic_timer_t *refill_timer = NULL;$/;"	v	file:
refresh_all_country_info	src/or/routerlist.c	/^refresh_all_country_info(void)$/;"	f
refs	src/common/crypto.c	/^  int refs; \/**< reference count, so we don't have to copy keys *\/$/;"	m	struct:crypto_pk_t	file:
register_cfg	src/common/sandbox.c	/^register_cfg(sandbox_cfg_t* cfg)$/;"	f	file:
register_client_proxy	src/or/transports.c	/^register_client_proxy(const managed_proxy_t *mp)$/;"	f	file:
register_proxy	src/or/transports.c	/^register_proxy(const managed_proxy_t *mp)$/;"	f	file:
register_server_proxy	src/or/transports.c	/^register_server_proxy(const managed_proxy_t *mp)$/;"	f	file:
registered	src/or/channel.h	/^  unsigned char registered:1;$/;"	m	struct:channel_listener_s
registered	src/or/channel.h	/^  unsigned char registered:1;$/;"	m	struct:channel_s
reject_count	src/or/policies.c	/^    uint64_t reject_count; \/**< Number of IP-Addresses that are rejected to$/;"	m	struct:policy_summary_item_t	file:
rejects_all	src/or/or.h	/^  unsigned int rejects_all:1;$/;"	m	struct:node_t
relaxed_timeout	src/or/or.h	/^  unsigned int relaxed_timeout : 1;$/;"	m	struct:origin_circuit_t
relay_command_to_string	src/or/relay.c	/^relay_command_to_string(uint8_t command)$/;"	f	file:
relay_connection_test_data_t	src/test/test_relay.c	/^typedef struct relay_connection_test_data_t {$/;"	s	file:
relay_connection_test_data_t	src/test/test_relay.c	/^} relay_connection_test_data_t;$/;"	t	typeref:struct:relay_connection_test_data_t	file:
relay_crypt	src/or/relay.c	/^relay_crypt(circuit_t *circ, cell_t *cell, cell_direction_t cell_direction,$/;"	f
relay_crypt_one_payload	src/or/relay.c	/^relay_crypt_one_payload(crypto_cipher_t *cipher, uint8_t *in,$/;"	f
relay_digest_matches	src/or/relay.c	/^relay_digest_matches(crypto_digest_t *digest, cell_t *cell)$/;"	f	file:
relay_early_cells_sent	src/or/or.h	/^  int relay_early_cells_sent;$/;"	m	struct:origin_circuit_t
relay_early_commands	src/or/or.h	/^  uint8_t relay_early_commands[MAX_RELAY_EARLY_CELLS_PER_CIRCUIT];$/;"	m	struct:origin_circuit_t
relay_header_pack	src/or/relay.c	/^relay_header_pack(uint8_t *dest, const relay_header_t *src)$/;"	f
relay_header_t	src/or/or.h	/^} relay_header_t;$/;"	t	typeref:struct:__anon40
relay_header_unpack	src/or/relay.c	/^relay_header_unpack(relay_header_t *dest, const uint8_t *src)$/;"	f
relay_lookup_conn	src/or/relay.c	/^relay_lookup_conn(circuit_t *circ, cell_t *cell,$/;"	f	file:
relay_send_command_from_edge	src/or/relay.h	/^#define relay_send_command_from_edge(/;"	d
relay_send_end_cell_from_edge	src/or/connection_edge.c	/^relay_send_end_cell_from_edge(streamid_t stream_id, circuit_t *circ,$/;"	f	file:
relay_set_digest	src/or/relay.c	/^relay_set_digest(crypto_digest_t *digest, cell_t *cell)$/;"	f	file:
relay_tests	src/test/test_relay.c	/^struct testcase_t relay_tests[] = {$/;"	v	typeref:struct:testcase_t
relaycell_tests	src/test/test_relaycell.c	/^struct testcase_t relaycell_tests[] = {$/;"	v	typeref:struct:testcase_t
release_lockfile	src/or/main.c	/^release_lockfile(void)$/;"	f
remaining_relay_early_cells	src/or/or.h	/^  unsigned int remaining_relay_early_cells : 4;$/;"	m	struct:or_circuit_t
remaining_relay_early_cells	src/or/or.h	/^  unsigned int remaining_relay_early_cells : 4;$/;"	m	struct:origin_circuit_t
remap_event_helper	src/or/relay.c	/^remap_event_helper(entry_connection_t *conn, const tor_addr_t *new_addr)$/;"	f	file:
remove_all_entry_guards	src/or/entrynodes.c	/^remove_all_entry_guards(void)$/;"	f
remove_bt_handler	src/common/backtrace.c	/^remove_bt_handler(void)$/;"	f	file:
remove_cell_ewma	src/or/circuitmux_ewma.c	/^remove_cell_ewma(ewma_policy_data_t *pol, cell_ewma_t *ewma)$/;"	f	file:
remove_dead_entry_guards	src/or/entrynodes.c	/^remove_dead_entry_guards(time_t now)$/;"	f	file:
remove_directory	src/test/testing_common.c	/^remove_directory(void)$/;"	f	file:
remove_file_if_very_old	src/or/config.c	/^remove_file_if_very_old(const char *fname, time_t now)$/;"	f
remove_invalid_intro_points	src/or/rendservice.c	/^remove_invalid_intro_points(rend_service_t *service,$/;"	f	file:
remove_obsolete_entry_guards	src/or/entrynodes.c	/^remove_obsolete_entry_guards(time_t now)$/;"	f	file:
remove_old_client_helper_	src/or/geoip.c	/^remove_old_client_helper_(struct clientmap_entry_t *ent, void *_cutoff)$/;"	f	file:
removed	src/or/or.h	/^  unsigned int removed:1; \/**< 0 for added to, 1 for removed from queue. *\/$/;"	m	struct:testing_cell_stats_entry_t
removed_cells_appward	src/or/control.h	/^  uint64_t removed_cells_appward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
removed_cells_exitward	src/or/control.h	/^  uint64_t removed_cells_exitward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
rename_on_close	src/common/util.c	/^  unsigned rename_on_close:1; \/**< Are we using the temporary file or not? *\/$/;"	m	struct:open_file_t	file:
rend_add_service	src/or/rendservice.c	/^rend_add_service(rend_service_t *service)$/;"	f	file:
rend_auth_material	src/or/cpuworker.c	/^  uint8_t rend_auth_material[DIGEST_LEN];$/;"	m	struct:cpuworker_reply_t	file:
rend_auth_type_t	src/or/or.h	/^typedef enum rend_auth_type_t {$/;"	g
rend_auth_type_t	src/or/or.h	/^} rend_auth_type_t;$/;"	t	typeref:enum:rend_auth_type_t
rend_auth_type_to_string	src/or/control.c	/^rend_auth_type_to_string(rend_auth_type_t auth_type)$/;"	f
rend_authorized_client_free	src/or/rendservice.c	/^rend_authorized_client_free(rend_authorized_client_t *client)$/;"	f	file:
rend_authorized_client_strmap_item_free	src/or/rendservice.c	/^rend_authorized_client_strmap_item_free(void *authorized_client)$/;"	f	file:
rend_authorized_client_t	src/or/or.h	/^typedef struct rend_authorized_client_t {$/;"	s
rend_authorized_client_t	src/or/or.h	/^} rend_authorized_client_t;$/;"	t	typeref:struct:rend_authorized_client_t
rend_cache	src/or/rendcache.c	/^STATIC strmap_t *rend_cache = NULL;$/;"	v
rend_cache_clean	src/or/rendcache.c	/^rend_cache_clean(time_t now)$/;"	f
rend_cache_clean_v2_descs_as_dir	src/or/rendcache.c	/^rend_cache_clean_v2_descs_as_dir(time_t now, size_t force_remove)$/;"	f
rend_cache_decrement_allocation	src/or/rendcache.c	/^rend_cache_decrement_allocation(size_t n)$/;"	f
rend_cache_entry_allocation	src/or/rendcache.c	/^rend_cache_entry_allocation(const rend_cache_entry_t *e)$/;"	f
rend_cache_entry_free	src/or/rendcache.c	/^rend_cache_entry_free(rend_cache_entry_t *e)$/;"	f
rend_cache_entry_free_	src/or/rendcache.c	/^rend_cache_entry_free_(void *p)$/;"	f	file:
rend_cache_entry_t	src/or/rendcache.h	/^typedef struct rend_cache_entry_t {$/;"	s
rend_cache_entry_t	src/or/rendcache.h	/^} rend_cache_entry_t;$/;"	t	typeref:struct:rend_cache_entry_t
rend_cache_failure	src/or/rendcache.c	/^STATIC strmap_t *rend_cache_failure = NULL;$/;"	v
rend_cache_failure_clean	src/or/rendcache.c	/^rend_cache_failure_clean(time_t now)$/;"	f
rend_cache_failure_entry_free	src/or/rendcache.c	/^rend_cache_failure_entry_free(rend_cache_failure_t *entry)$/;"	f
rend_cache_failure_entry_free_	src/or/rendcache.c	/^rend_cache_failure_entry_free_(void *entry)$/;"	f	file:
rend_cache_failure_entry_new	src/or/rendcache.c	/^rend_cache_failure_entry_new(void)$/;"	f
rend_cache_failure_intro_entry_free	src/or/rendcache.c	/^rend_cache_failure_intro_entry_free(rend_cache_failure_intro_t *entry)$/;"	f
rend_cache_failure_intro_entry_new	src/or/rendcache.c	/^rend_cache_failure_intro_entry_new(rend_intro_point_failure_t failure)$/;"	f
rend_cache_failure_intro_t	src/or/rendcache.h	/^typedef struct rend_cache_failure_intro_t {$/;"	s
rend_cache_failure_intro_t	src/or/rendcache.h	/^} rend_cache_failure_intro_t;$/;"	t	typeref:struct:rend_cache_failure_intro_t
rend_cache_failure_purge	src/or/rendcache.c	/^rend_cache_failure_purge(void)$/;"	f
rend_cache_failure_remove	src/or/rendcache.c	/^rend_cache_failure_remove(rend_service_descriptor_t *desc)$/;"	f
rend_cache_failure_t	src/or/rendcache.h	/^typedef struct rend_cache_failure_t {$/;"	s
rend_cache_failure_t	src/or/rendcache.h	/^} rend_cache_failure_t;$/;"	t	typeref:struct:rend_cache_failure_t
rend_cache_free_all	src/or/rendcache.c	/^rend_cache_free_all(void)$/;"	f
rend_cache_get_total_allocation	src/or/rendcache.c	/^rend_cache_get_total_allocation(void)$/;"	f
rend_cache_increment_allocation	src/or/rendcache.c	/^rend_cache_increment_allocation(size_t n)$/;"	f
rend_cache_init	src/or/rendcache.c	/^rend_cache_init(void)$/;"	f
rend_cache_intro_failure_note	src/or/rendcache.c	/^rend_cache_intro_failure_note(rend_intro_point_failure_t failure,$/;"	f
rend_cache_lookup_entry	src/or/rendcache.c	/^rend_cache_lookup_entry(const char *query, int version, rend_cache_entry_t **e)$/;"	f
rend_cache_lookup_v2_desc_as_dir	src/or/rendcache.c	/^rend_cache_lookup_v2_desc_as_dir(const char *desc_id, const char **desc)$/;"	f
rend_cache_purge	src/or/rendcache.c	/^rend_cache_purge(void)$/;"	f
rend_cache_store_status_t	src/or/rendcache.h	/^} rend_cache_store_status_t;$/;"	t	typeref:enum:__anon9
rend_cache_store_v2_desc_as_client	src/or/rendcache.c	/^rend_cache_store_v2_desc_as_client(const char *desc,$/;"	f
rend_cache_store_v2_desc_as_dir	src/or/rendcache.c	/^rend_cache_store_v2_desc_as_dir(const char *desc)$/;"	f
rend_cache_tests	src/test/test_rendcache.c	/^struct testcase_t rend_cache_tests[] = {$/;"	v	typeref:struct:testcase_t
rend_cache_total_allocation	src/or/rendcache.c	/^STATIC size_t rend_cache_total_allocation = 0;$/;"	v
rend_cache_v2_dir	src/or/rendcache.c	/^STATIC digestmap_t *rend_cache_v2_dir = NULL;$/;"	v
rend_check_authorization	src/or/rendservice.c	/^rend_check_authorization(rend_service_t *service,$/;"	f	file:
rend_circ_nonce	src/or/or.h	/^  char rend_circ_nonce[DIGEST_LEN];\/* KH in tor-spec.txt *\/$/;"	m	struct:crypt_path_t
rend_circ_nonce	src/or/or.h	/^  char rend_circ_nonce[DIGEST_LEN];\/* KH in tor-spec.txt *\/$/;"	m	struct:or_circuit_t
rend_client_any_intro_points_usable	src/or/rendclient.c	/^rend_client_any_intro_points_usable(const rend_cache_entry_t *entry)$/;"	f
rend_client_cancel_descriptor_fetches	src/or/rendclient.c	/^rend_client_cancel_descriptor_fetches(void)$/;"	f
rend_client_close_other_intros	src/or/rendclient.c	/^rend_client_close_other_intros(const char *onion_address)$/;"	f	file:
rend_client_desc_trynow	src/or/rendclient.c	/^rend_client_desc_trynow(const char *query)$/;"	f
rend_client_fetch_v2_desc	src/or/rendclient.c	/^rend_client_fetch_v2_desc(rend_data_t *query, smartlist_t *hsdirs)$/;"	f
rend_client_get_random_intro	src/or/rendclient.c	/^rend_client_get_random_intro(const rend_data_t *rend_query)$/;"	f
rend_client_get_random_intro_impl	src/or/rendclient.c	/^rend_client_get_random_intro_impl(const rend_cache_entry_t *entry,$/;"	f	file:
rend_client_introcirc_has_opened	src/or/rendclient.c	/^rend_client_introcirc_has_opened(origin_circuit_t *circ)$/;"	f
rend_client_introduction_acked	src/or/rendclient.c	/^rend_client_introduction_acked(origin_circuit_t *circ,$/;"	f
rend_client_lookup_service_authorization	src/or/rendclient.c	/^rend_client_lookup_service_authorization(const char *onion_address)$/;"	f
rend_client_note_connection_attempt_ended	src/or/rendclient.c	/^rend_client_note_connection_attempt_ended(const rend_data_t *rend_data)$/;"	f
rend_client_purge_last_hid_serv_requests	src/or/rendclient.c	/^rend_client_purge_last_hid_serv_requests(void)$/;"	f
rend_client_purge_state	src/or/rendclient.c	/^rend_client_purge_state(void)$/;"	f
rend_client_receive_rendezvous	src/or/rendclient.c	/^rend_client_receive_rendezvous(origin_circuit_t *circ, const uint8_t *request,$/;"	f
rend_client_reextend_intro_circuit	src/or/rendclient.c	/^rend_client_reextend_intro_circuit(origin_circuit_t *circ)$/;"	f	file:
rend_client_refetch_v2_renddesc	src/or/rendclient.c	/^rend_client_refetch_v2_renddesc(rend_data_t *rend_query)$/;"	f
rend_client_rendcirc_has_opened	src/or/rendclient.c	/^rend_client_rendcirc_has_opened(origin_circuit_t *circ)$/;"	f
rend_client_rendezvous_acked	src/or/rendclient.c	/^rend_client_rendezvous_acked(origin_circuit_t *circ, const uint8_t *request,$/;"	f
rend_client_report_intro_point_failure	src/or/rendclient.c	/^rend_client_report_intro_point_failure(extend_info_t *failed_intro,$/;"	f
rend_client_send_establish_rendezvous	src/or/rendclient.c	/^rend_client_send_establish_rendezvous(origin_circuit_t *circ)$/;"	f	file:
rend_client_send_introduction	src/or/rendclient.c	/^rend_client_send_introduction(origin_circuit_t *introcirc,$/;"	f
rend_cmp_service_ids	src/or/rendcommon.c	/^rend_cmp_service_ids(const char *one, const char *two)$/;"	f
rend_compute_v2_desc_id	src/or/rendcommon.c	/^rend_compute_v2_desc_id(char *desc_id_out, const char *service_id,$/;"	f
rend_config_services	src/test/test_config.c	/^NS(rend_config_services)(const or_options_t *options, int validate_only)$/;"	f	file:
rend_consider_descriptor_republication	src/or/rendservice.c	/^rend_consider_descriptor_republication(void)$/;"	f
rend_consider_services_intro_points	src/or/rendservice.c	/^rend_consider_services_intro_points(void)$/;"	f
rend_consider_services_upload	src/or/rendservice.c	/^rend_consider_services_upload(time_t now)$/;"	f
rend_cookie	src/or/or.h	/^  char rend_cookie[REND_COOKIE_LEN];$/;"	m	struct:rend_data_t
rend_cookie_map	src/or/circuitlist.c	/^static digestmap_t *rend_cookie_map = NULL;$/;"	v	file:
rend_data	src/or/or.h	/^  rend_data_t *rend_data;$/;"	m	struct:dir_connection_t
rend_data	src/or/or.h	/^  rend_data_t *rend_data;$/;"	m	struct:edge_connection_t
rend_data	src/or/or.h	/^  rend_data_t *rend_data;$/;"	m	struct:origin_circuit_t
rend_data_client_create	src/or/rendcommon.c	/^rend_data_client_create(const char *onion_address, const char *desc_id,$/;"	f
rend_data_dup	src/or/rendcommon.c	/^rend_data_dup(const rend_data_t *data)$/;"	f
rend_data_free	src/or/rendcommon.h	/^rend_data_free(rend_data_t *data)$/;"	f
rend_data_service_create	src/or/rendcommon.c	/^rend_data_service_create(const char *onion_address, const char *pk_digest,$/;"	f
rend_data_t	src/or/or.h	/^typedef struct rend_data_t {$/;"	s
rend_data_t	src/or/or.h	/^} rend_data_t;$/;"	t	typeref:struct:rend_data_t
rend_decrypt_introduction_points	src/or/routerparse.c	/^rend_decrypt_introduction_points(char **ipos_decrypted,$/;"	f
rend_desc_v2_is_parsable	src/or/rendcommon.c	/^rend_desc_v2_is_parsable(rend_encoded_v2_service_descriptor_t *desc)$/;"	f	file:
rend_dh_handshake_state	src/or/or.h	/^  crypto_dh_t *rend_dh_handshake_state;$/;"	m	struct:crypt_path_t
rend_encode_v2_descriptors	src/or/rendcommon.c	/^rend_encode_v2_descriptors(smartlist_t *descs_out,$/;"	f
rend_encode_v2_intro_points	src/or/rendcommon.c	/^rend_encode_v2_intro_points(char **encoded, rend_service_descriptor_t *desc)$/;"	f	file:
rend_encoded_v2_service_descriptor_free	src/or/rendcommon.c	/^rend_encoded_v2_service_descriptor_free($/;"	f
rend_encoded_v2_service_descriptor_t	src/or/or.h	/^typedef struct rend_encoded_v2_service_descriptor_t {$/;"	s
rend_encoded_v2_service_descriptor_t	src/or/or.h	/^} rend_encoded_v2_service_descriptor_t;$/;"	t	typeref:struct:rend_encoded_v2_service_descriptor_t
rend_encrypt_v2_intro_points_basic	src/or/rendcommon.c	/^rend_encrypt_v2_intro_points_basic(char **encrypted_out,$/;"	f	file:
rend_encrypt_v2_intro_points_stealth	src/or/rendcommon.c	/^rend_encrypt_v2_intro_points_stealth(char **encrypted_out,$/;"	f	file:
rend_get_descriptor_id_bytes	src/or/rendcommon.c	/^rend_get_descriptor_id_bytes(char *descriptor_id_out,$/;"	f
rend_get_service_id	src/or/rendcommon.c	/^rend_get_service_id(crypto_pk_t *pk, char *out)$/;"	f
rend_hsaddress_str_or_unknown	src/or/control.c	/^rend_hsaddress_str_or_unknown(const char *onion_address)$/;"	f	file:
rend_hsdir_routers_changed	src/or/rendservice.c	/^rend_hsdir_routers_changed(void)$/;"	f
rend_id_is_in_interval	src/or/rendcommon.c	/^rend_id_is_in_interval(const char *a, const char *b, const char *c)$/;"	f
rend_intro_cell_s	src/or/rendservice.h	/^struct rend_intro_cell_s {$/;"	s
rend_intro_cell_t	src/or/rendservice.h	/^typedef struct rend_intro_cell_s rend_intro_cell_t;$/;"	t	typeref:struct:rend_intro_cell_s
rend_intro_point_failure_t	src/or/rendcommon.h	/^typedef enum rend_intro_point_failure_t {$/;"	g
rend_intro_point_failure_t	src/or/rendcommon.h	/^} rend_intro_point_failure_t;$/;"	t	typeref:enum:rend_intro_point_failure_t
rend_intro_point_free	src/or/rendcommon.c	/^rend_intro_point_free(rend_intro_point_t *intro)$/;"	f
rend_intro_point_t	src/or/or.h	/^typedef struct rend_intro_point_t {$/;"	s
rend_intro_point_t	src/or/or.h	/^} rend_intro_point_t;$/;"	t	typeref:struct:rend_intro_point_t
rend_mid_establish_intro	src/or/rendmid.c	/^rend_mid_establish_intro(or_circuit_t *circ, const uint8_t *request,$/;"	f
rend_mid_establish_rendezvous	src/or/rendmid.c	/^rend_mid_establish_rendezvous(or_circuit_t *circ, const uint8_t *request,$/;"	f
rend_mid_introduce	src/or/rendmid.c	/^rend_mid_introduce(or_circuit_t *circ, const uint8_t *request,$/;"	f
rend_mid_rendezvous	src/or/rendmid.c	/^rend_mid_rendezvous(or_circuit_t *circ, const uint8_t *request,$/;"	f
rend_parse_client_keys	src/or/routerparse.c	/^rend_parse_client_keys(strmap_t *parsed_clients, const char *ckstr)$/;"	f
rend_parse_introduction_points	src/or/routerparse.c	/^rend_parse_introduction_points(rend_service_descriptor_t *parsed,$/;"	f
rend_parse_service_authorization	src/test/test_config.c	/^NS(rend_parse_service_authorization)(const or_options_t *options,$/;"	f	file:
rend_parse_v2_service_descriptor	src/or/routerparse.c	/^rend_parse_v2_service_descriptor(rend_service_descriptor_t **parsed_out,$/;"	f
rend_pk_digest	src/or/or.h	/^  char rend_pk_digest[DIGEST_LEN];$/;"	m	struct:rend_data_t
rend_process_relay_cell	src/or/rendcommon.c	/^rend_process_relay_cell(circuit_t *circ, const crypt_path_t *layer_hint,$/;"	f
rend_service_add_ephemeral	src/or/rendservice.c	/^rend_service_add_ephemeral(crypto_pk_t *pk,$/;"	f
rend_service_add_ephemeral_status_t	src/or/rendservice.h	/^} rend_service_add_ephemeral_status_t;$/;"	t	typeref:enum:__anon112
rend_service_add_filenames_to_list	src/or/rendservice.c	/^rend_service_add_filenames_to_list(smartlist_t *lst, const rend_service_t *s)$/;"	f	file:
rend_service_authorization_free	src/or/rendclient.c	/^rend_service_authorization_free(rend_service_authorization_t *auth)$/;"	f	file:
rend_service_authorization_free_all	src/or/rendclient.c	/^rend_service_authorization_free_all(void)$/;"	f
rend_service_authorization_strmap_item_free	src/or/rendclient.c	/^rend_service_authorization_strmap_item_free(void *service_auth)$/;"	f	file:
rend_service_authorization_t	src/or/or.h	/^typedef struct rend_service_authorization_t {$/;"	s
rend_service_authorization_t	src/or/or.h	/^} rend_service_authorization_t;$/;"	t	typeref:struct:rend_service_authorization_t
rend_service_begin_parse_intro	src/or/rendservice.c	/^rend_service_begin_parse_intro(const uint8_t *request,$/;"	f
rend_service_decrypt_intro	src/or/rendservice.c	/^rend_service_decrypt_intro($/;"	f
rend_service_del_ephemeral	src/or/rendservice.c	/^rend_service_del_ephemeral(const char *service_id)$/;"	f
rend_service_derive_key_digests	src/or/rendservice.c	/^rend_service_derive_key_digests(struct rend_service_t *s)$/;"	f	file:
rend_service_desc_has_uploaded	src/or/rendservice.c	/^rend_service_desc_has_uploaded(const rend_data_t *rend_data)$/;"	f
rend_service_descriptor_free	src/or/rendcommon.c	/^rend_service_descriptor_free(rend_service_descriptor_t *desc)$/;"	f
rend_service_descriptor_t	src/or/or.h	/^typedef struct rend_service_descriptor_t {$/;"	s
rend_service_descriptor_t	src/or/or.h	/^} rend_service_descriptor_t;$/;"	t	typeref:struct:rend_service_descriptor_t
rend_service_dump_stats	src/or/rendservice.c	/^rend_service_dump_stats(int severity)$/;"	f
rend_service_escaped_dir	src/or/rendservice.c	/^rend_service_escaped_dir(const struct rend_service_t *s)$/;"	f	file:
rend_service_free	src/or/rendservice.c	/^rend_service_free(rend_service_t *service)$/;"	f	file:
rend_service_free_all	src/or/rendservice.c	/^rend_service_free_all(void)$/;"	f
rend_service_free_intro	src/or/rendservice.c	/^rend_service_free_intro(rend_intro_cell_t *request)$/;"	f
rend_service_get_by_pk_digest	src/or/rendservice.c	/^rend_service_get_by_pk_digest(const char* digest)$/;"	f	file:
rend_service_get_by_service_id	src/or/rendservice.c	/^rend_service_get_by_service_id(const char *id)$/;"	f	file:
rend_service_intro_established	src/or/rendservice.c	/^rend_service_intro_established(origin_circuit_t *circuit,$/;"	f
rend_service_intro_has_opened	src/or/rendservice.c	/^rend_service_intro_has_opened(origin_circuit_t *circuit)$/;"	f
rend_service_launch_establish_intro	src/or/rendservice.c	/^rend_service_launch_establish_intro(rend_service_t *service,$/;"	f	file:
rend_service_list	src/or/rendservice.c	/^static smartlist_t *rend_service_list = NULL;$/;"	v	file:
rend_service_load_all_keys	src/test/test_config.c	/^NS(rend_service_load_all_keys)(void)$/;"	f	file:
rend_service_load_auth_keys	src/or/rendservice.c	/^rend_service_load_auth_keys(rend_service_t *s, const char *hfname)$/;"	f	file:
rend_service_load_keys	src/or/rendservice.c	/^rend_service_load_keys(rend_service_t *s)$/;"	f	file:
rend_service_parse_intro_for_v0_or_v1	src/or/rendservice.c	/^rend_service_parse_intro_for_v0_or_v1($/;"	f	file:
rend_service_parse_intro_for_v2	src/or/rendservice.c	/^rend_service_parse_intro_for_v2($/;"	f	file:
rend_service_parse_intro_for_v3	src/or/rendservice.c	/^rend_service_parse_intro_for_v3($/;"	f	file:
rend_service_parse_intro_plaintext	src/or/rendservice.c	/^rend_service_parse_intro_plaintext($/;"	f
rend_service_parse_port_config	src/or/rendservice.c	/^rend_service_parse_port_config(const char *string, const char *sep,$/;"	f
rend_service_port_config_free	src/or/rendservice.c	/^rend_service_port_config_free(rend_service_port_config_t *p)$/;"	f
rend_service_port_config_new	src/or/rendservice.c	/^rend_service_port_config_new(const char *socket_path)$/;"	f	file:
rend_service_port_config_s	src/or/rendservice.c	/^struct rend_service_port_config_s {$/;"	s	file:
rend_service_port_config_t	src/or/rendservice.h	/^typedef struct rend_service_port_config_s rend_service_port_config_t;$/;"	t	typeref:struct:rend_service_port_config_s
rend_service_receive_introduction	src/or/rendservice.c	/^rend_service_receive_introduction(origin_circuit_t *circuit,$/;"	f
rend_service_relaunch_rendezvous	src/or/rendservice.c	/^rend_service_relaunch_rendezvous(origin_circuit_t *oldcirc)$/;"	f
rend_service_rendezvous_has_opened	src/or/rendservice.c	/^rend_service_rendezvous_has_opened(origin_circuit_t *circuit)$/;"	f
rend_service_requires_uptime	src/or/rendservice.c	/^rend_service_requires_uptime(rend_service_t *service)$/;"	f	file:
rend_service_set_connection_addr_port	src/or/rendservice.c	/^rend_service_set_connection_addr_port(edge_connection_t *conn,$/;"	f
rend_service_t	src/or/rendservice.c	/^typedef struct rend_service_t {$/;"	s	file:
rend_service_t	src/or/rendservice.c	/^} rend_service_t;$/;"	t	typeref:struct:rend_service_t	file:
rend_service_update_descriptor	src/or/rendservice.c	/^rend_service_update_descriptor(rend_service_t *service)$/;"	f	file:
rend_service_validate_intro_late	src/or/rendservice.c	/^rend_service_validate_intro_late(const rend_intro_cell_t *intro,$/;"	f
rend_services_add_filenames_to_lists	src/or/rendservice.c	/^rend_services_add_filenames_to_lists(smartlist_t *open_lst,$/;"	f
rend_splice	src/or/or.h	/^  struct or_circuit_t *rend_splice;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::or_circuit_t
rend_token	src/or/or.h	/^  char rend_token[REND_TOKEN_LEN];$/;"	m	struct:or_circuit_rendinfo_s
rend_valid_descriptor_id	src/or/rendcommon.c	/^rend_valid_descriptor_id(const char *query)$/;"	f
rend_valid_service_id	src/or/rendcommon.c	/^rend_valid_service_id(const char *query)$/;"	f
rendinfo	src/or/or.h	/^  struct or_circuit_rendinfo_s *rendinfo;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::or_circuit_rendinfo_s
rep_hist_add_buffer_stats	src/or/rephist.c	/^rep_hist_add_buffer_stats(double mean_num_cells_in_queue,$/;"	f
rep_hist_bandwidth_assess	src/or/rephist.c	/^rep_hist_bandwidth_assess(void)$/;"	f
rep_hist_buffer_stats_add_circ	src/or/rephist.c	/^rep_hist_buffer_stats_add_circ(circuit_t *circ, time_t end_of_interval)$/;"	f
rep_hist_buffer_stats_init	src/or/rephist.c	/^rep_hist_buffer_stats_init(time_t now)$/;"	f
rep_hist_buffer_stats_term	src/or/rephist.c	/^rep_hist_buffer_stats_term(void)$/;"	f
rep_hist_buffer_stats_write	src/or/rephist.c	/^rep_hist_buffer_stats_write(time_t now)$/;"	f
rep_hist_circbuilding_dormant	src/or/rephist.c	/^rep_hist_circbuilding_dormant(time_t now)$/;"	f
rep_hist_conn_stats_init	src/or/rephist.c	/^rep_hist_conn_stats_init(time_t now)$/;"	f
rep_hist_conn_stats_term	src/or/rephist.c	/^rep_hist_conn_stats_term(void)$/;"	f
rep_hist_conn_stats_write	src/or/rephist.c	/^rep_hist_conn_stats_write(time_t now)$/;"	f
rep_hist_desc_stats_init	src/or/rephist.c	/^rep_hist_desc_stats_init(time_t now)$/;"	f
rep_hist_desc_stats_term	src/or/rephist.c	/^rep_hist_desc_stats_term(void)$/;"	f
rep_hist_desc_stats_write	src/or/rephist.c	/^rep_hist_desc_stats_write(time_t now)$/;"	f
rep_hist_downrate_old_runs	src/or/rephist.c	/^rep_hist_downrate_old_runs(time_t now)$/;"	f
rep_hist_dump_stats	src/or/rephist.c	/^rep_hist_dump_stats(time_t now, int severity)$/;"	f
rep_hist_exit_stats_init	src/or/rephist.c	/^rep_hist_exit_stats_init(time_t now)$/;"	f
rep_hist_exit_stats_term	src/or/rephist.c	/^rep_hist_exit_stats_term(void)$/;"	f
rep_hist_exit_stats_write	src/or/rephist.c	/^rep_hist_exit_stats_write(time_t now)$/;"	f
rep_hist_fill_bandwidth_history	src/or/rephist.c	/^rep_hist_fill_bandwidth_history(char *buf, size_t len, const bw_array_t *b)$/;"	f	file:
rep_hist_format_buffer_stats	src/or/rephist.c	/^rep_hist_format_buffer_stats(time_t now)$/;"	f
rep_hist_format_conn_stats	src/or/rephist.c	/^rep_hist_format_conn_stats(time_t now)$/;"	f
rep_hist_format_desc_stats	src/or/rephist.c	/^rep_hist_format_desc_stats(time_t now)$/;"	f	file:
rep_hist_format_exit_stats	src/or/rephist.c	/^rep_hist_format_exit_stats(time_t now)$/;"	f
rep_hist_format_hs_stats	src/or/rephist.c	/^rep_hist_format_hs_stats(time_t now)$/;"	f	file:
rep_hist_free_all	src/or/rephist.c	/^rep_hist_free_all(void)$/;"	f
rep_hist_get_bandwidth_lines	src/or/rephist.c	/^rep_hist_get_bandwidth_lines(void)$/;"	f
rep_hist_get_predicted_internal	src/or/rephist.c	/^rep_hist_get_predicted_internal(time_t now, int *need_uptime,$/;"	f
rep_hist_get_predicted_ports	src/or/rephist.c	/^rep_hist_get_predicted_ports(time_t now)$/;"	f
rep_hist_get_stability	src/or/rephist.c	/^rep_hist_get_stability(const char *id, time_t when)$/;"	f
rep_hist_get_uptime	src/or/rephist.c	/^rep_hist_get_uptime(const char *id, time_t when)$/;"	f
rep_hist_get_weighted_fractional_uptime	src/or/rephist.c	/^rep_hist_get_weighted_fractional_uptime(const char *id, time_t when)$/;"	f
rep_hist_get_weighted_time_known	src/or/rephist.c	/^rep_hist_get_weighted_time_known(const char *id, time_t when)$/;"	f
rep_hist_have_measured_enough_stability	src/or/rephist.c	/^rep_hist_have_measured_enough_stability(void)$/;"	f
rep_hist_hs_stats_init	src/or/rephist.c	/^rep_hist_hs_stats_init(time_t now)$/;"	f
rep_hist_hs_stats_term	src/or/rephist.c	/^rep_hist_hs_stats_term(void)$/;"	f
rep_hist_hs_stats_write	src/or/rephist.c	/^rep_hist_hs_stats_write(time_t now)$/;"	f
rep_hist_init	src/or/rephist.c	/^rep_hist_init(void)$/;"	f
rep_hist_load_bwhist_state_section	src/or/rephist.c	/^rep_hist_load_bwhist_state_section(bw_array_t *b,$/;"	f	file:
rep_hist_load_mtbf_data	src/or/rephist.c	/^rep_hist_load_mtbf_data(time_t now)$/;"	f
rep_hist_load_state	src/or/rephist.c	/^rep_hist_load_state(or_state_t *state, char **err)$/;"	f
rep_hist_log_circuit_handshake_stats	src/or/rephist.c	/^rep_hist_log_circuit_handshake_stats(time_t now)$/;"	f
rep_hist_log_link_protocol_counts	src/or/rephist.c	/^rep_hist_log_link_protocol_counts(void)$/;"	f
rep_hist_make_router_pessimal	src/or/rephist.c	/^rep_hist_make_router_pessimal(const char *id, time_t when)$/;"	f
rep_hist_note_bytes_read	src/or/rephist.c	/^rep_hist_note_bytes_read(size_t num_bytes, time_t when)$/;"	f
rep_hist_note_bytes_written	src/or/rephist.c	/^rep_hist_note_bytes_written(size_t num_bytes, time_t when)$/;"	f
rep_hist_note_circuit_handshake_assigned	src/or/rephist.c	/^rep_hist_note_circuit_handshake_assigned(uint16_t type)$/;"	f
rep_hist_note_circuit_handshake_requested	src/or/rephist.c	/^rep_hist_note_circuit_handshake_requested(uint16_t type)$/;"	f
rep_hist_note_connect_failed	src/or/rephist.c	/^rep_hist_note_connect_failed(const char* id, time_t when)$/;"	f
rep_hist_note_connect_succeeded	src/or/rephist.c	/^rep_hist_note_connect_succeeded(const char* id, time_t when)$/;"	f
rep_hist_note_connection_died	src/or/rephist.c	/^rep_hist_note_connection_died(const char* id, time_t when)$/;"	f
rep_hist_note_desc_served	src/or/rephist.c	/^rep_hist_note_desc_served(const char * desc)$/;"	f
rep_hist_note_dir_bytes_read	src/or/rephist.c	/^rep_hist_note_dir_bytes_read(size_t num_bytes, time_t when)$/;"	f
rep_hist_note_dir_bytes_written	src/or/rephist.c	/^rep_hist_note_dir_bytes_written(size_t num_bytes, time_t when)$/;"	f
rep_hist_note_disconnect	src/or/rephist.c	/^rep_hist_note_disconnect(const char* id, time_t when)$/;"	f
rep_hist_note_exit_bytes	src/or/rephist.c	/^rep_hist_note_exit_bytes(uint16_t port, size_t num_written,$/;"	f
rep_hist_note_exit_stream_opened	src/or/rephist.c	/^rep_hist_note_exit_stream_opened(uint16_t port)$/;"	f
rep_hist_note_extend_failed	src/or/rephist.c	/^rep_hist_note_extend_failed(const char *from_id, const char *to_id)$/;"	f
rep_hist_note_extend_succeeded	src/or/rephist.c	/^rep_hist_note_extend_succeeded(const char *from_id, const char *to_id)$/;"	f
rep_hist_note_negotiated_link_proto	src/or/rephist.c	/^rep_hist_note_negotiated_link_proto(unsigned link_proto, int started_here)$/;"	f
rep_hist_note_or_conn_bytes	src/or/rephist.c	/^rep_hist_note_or_conn_bytes(uint64_t conn_id, size_t num_read,$/;"	f
rep_hist_note_router_reachable	src/or/rephist.c	/^rep_hist_note_router_reachable(const char *id, const tor_addr_t *at_addr,$/;"	f
rep_hist_note_router_unreachable	src/or/rephist.c	/^rep_hist_note_router_unreachable(const char *id, time_t when)$/;"	f
rep_hist_note_used_internal	src/or/rephist.c	/^rep_hist_note_used_internal(time_t now, int need_uptime, int need_capacity)$/;"	f
rep_hist_note_used_port	src/or/rephist.c	/^rep_hist_note_used_port(time_t now, uint16_t port)$/;"	f
rep_hist_note_used_resolve	src/or/rephist.c	/^rep_hist_note_used_resolve(time_t now)$/;"	f
rep_hist_record_mtbf_data	src/or/rephist.c	/^rep_hist_record_mtbf_data(time_t now, int missing_means_down)$/;"	f
rep_hist_remove_predicted_ports	src/or/rephist.c	/^rep_hist_remove_predicted_ports(const smartlist_t *rmv_ports)$/;"	f
rep_hist_reset_buffer_stats	src/or/rephist.c	/^rep_hist_reset_buffer_stats(time_t now)$/;"	f
rep_hist_reset_conn_stats	src/or/rephist.c	/^rep_hist_reset_conn_stats(time_t now)$/;"	f
rep_hist_reset_desc_stats	src/or/rephist.c	/^rep_hist_reset_desc_stats(time_t now)$/;"	f	file:
rep_hist_reset_exit_stats	src/or/rephist.c	/^rep_hist_reset_exit_stats(time_t now)$/;"	f
rep_hist_reset_hs_stats	src/or/rephist.c	/^rep_hist_reset_hs_stats(time_t now)$/;"	f	file:
rep_hist_seen_new_rp_cell	src/or/rephist.c	/^rep_hist_seen_new_rp_cell(void)$/;"	f
rep_hist_stored_maybe_new_hs	src/or/rephist.c	/^rep_hist_stored_maybe_new_hs(const crypto_pk_t *pubkey)$/;"	f
rep_hist_update_bwhist_state_section	src/or/rephist.c	/^rep_hist_update_bwhist_state_section(or_state_t *state,$/;"	f	file:
rep_hist_update_state	src/or/rephist.c	/^rep_hist_update_state(or_state_t *state)$/;"	f
rep_history_clean	src/or/rephist.c	/^rep_history_clean(time_t before)$/;"	f
rephist_total_alloc	src/or/rephist.c	/^uint64_t rephist_total_alloc=0;$/;"	v
rephist_total_num	src/or/rephist.c	/^uint32_t rephist_total_num=0;$/;"	v
replace_file	src/common/compat.c	/^replace_file(const char *from, const char *to)$/;"	f
replaycache_add_and_test	src/or/replaycache.c	/^replaycache_add_and_test(replaycache_t *r, const void *data, size_t len)$/;"	f
replaycache_add_and_test_internal	src/or/replaycache.c	/^replaycache_add_and_test_internal($/;"	f
replaycache_add_test_and_elapsed	src/or/replaycache.c	/^replaycache_add_test_and_elapsed($/;"	f
replaycache_free	src/or/replaycache.c	/^replaycache_free(replaycache_t *r)$/;"	f
replaycache_new	src/or/replaycache.c	/^replaycache_new(time_t horizon, time_t interval)$/;"	f
replaycache_s	src/or/replaycache.h	/^struct replaycache_s {$/;"	s
replaycache_scrub_if_needed	src/or/replaycache.c	/^replaycache_scrub_if_needed(replaycache_t *r)$/;"	f
replaycache_scrub_if_needed_internal	src/or/replaycache.c	/^replaycache_scrub_if_needed_internal(time_t present, replaycache_t *r)$/;"	f
replaycache_t	src/or/replaycache.h	/^typedef struct replaycache_s replaycache_t;$/;"	t	typeref:struct:replaycache_s
replaycache_tests	src/test/test_replay.c	/^struct testcase_t replaycache_tests[] = {$/;"	v	typeref:struct:testcase_t
reply	src/or/cpuworker.c	/^    cpuworker_reply_t reply;$/;"	m	union:cpuworker_job_u::__anon100	file:
reply	src/or/onion.h	/^  uint8_t reply[CELL_PAYLOAD_SIZE - 2];$/;"	m	struct:created_cell_t
reply	src/or/or.h	/^  uint8_t reply[MAX_SOCKS_REPLY_LEN]; \/**< Write an entry into this string if$/;"	m	struct:socks_request_t
reply_event	src/or/cpuworker.c	/^static struct event *reply_event = NULL;$/;"	v	typeref:struct:event	file:
reply_fn	src/common/workqueue.c	/^  void (*reply_fn)(void *arg);$/;"	m	struct:workqueue_entry_s	file:
reply_queue	src/common/workqueue.c	/^  replyqueue_t *reply_queue;$/;"	m	struct:threadpool_s	file:
reply_queue	src/common/workqueue.c	/^  replyqueue_t *reply_queue;$/;"	m	struct:workerthread_s	file:
replylen	src/or/or.h	/^  size_t replylen; \/**< Length of <b>reply<\/b>. *\/$/;"	m	struct:socks_request_t
replyqueue	src/or/cpuworker.c	/^static replyqueue_t *replyqueue = NULL;$/;"	v	file:
replyqueue_get_socket	src/common/workqueue.c	/^replyqueue_get_socket(replyqueue_t *rq)$/;"	f
replyqueue_new	src/common/workqueue.c	/^replyqueue_new(uint32_t alertsocks_flags)$/;"	f
replyqueue_process	src/common/workqueue.c	/^replyqueue_process(replyqueue_t *queue)$/;"	f
replyqueue_process_cb	src/or/cpuworker.c	/^replyqueue_process_cb(evutil_socket_t sock, short events, void *arg)$/;"	f	file:
replyqueue_s	src/common/workqueue.c	/^struct replyqueue_s {$/;"	s	file:
replyqueue_t	src/common/workqueue.h	/^typedef struct replyqueue_s replyqueue_t;$/;"	t	typeref:struct:replyqueue_s
replysock_readable_cb	src/test/test_workqueue.c	/^replysock_readable_cb(tor_socket_t sock, short what, void *arg)$/;"	f	file:
req	src/test/test_socks.c	/^  socks_request_t *req;$/;"	m	struct:socks_test_data_t	file:
request	src/or/cpuworker.c	/^    cpuworker_request_t request;$/;"	m	union:cpuworker_job_u::__anon100	file:
request_map	src/or/directory.c	/^static strmap_t *request_map = NULL;$/;"	v	file:
request_sample_rng	src/or/cpuworker.c	/^static tor_weak_rng_t request_sample_rng = TOR_WEAK_RNG_INIT;$/;"	v	file:
request_t	src/or/directory.c	/^typedef struct request_t {$/;"	s	file:
request_t	src/or/directory.c	/^} request_t;$/;"	t	typeref:struct:request_t	file:
request_time	src/or/geoip.c	/^  struct timeval request_time;$/;"	m	struct:dirreq_map_entry_t	typeref:struct:dirreq_map_entry_t::timeval	file:
requested_resource	src/or/or.h	/^  char *requested_resource;$/;"	m	struct:dir_connection_t
res	src/common/sandbox.c	/^  struct addrinfo *res;$/;"	m	struct:cached_getaddrinfo_item_t	typeref:struct:cached_getaddrinfo_item_t::addrinfo	file:
res_status_hostname	src/or/dns_structs.h	/^  unsigned int res_status_hostname : 2;$/;"	m	struct:cached_resolve_t
res_status_ipv4	src/or/dns_structs.h	/^  unsigned int res_status_ipv4 : 2;$/;"	m	struct:cached_resolve_t
res_status_ipv6	src/or/dns_structs.h	/^  unsigned int res_status_ipv6 : 2;$/;"	m	struct:cached_resolve_t
reschedule_descriptor_update_check	src/or/main.c	/^reschedule_descriptor_update_check(void)$/;"	f
reschedule_directory_downloads	src/or/main.c	/^reschedule_directory_downloads(void)$/;"	f
reset_accounting	src/or/hibernate.c	/^reset_accounting(time_t now)$/;"	f	file:
reset_all_main_loop_timers	src/or/main.c	/^reset_all_main_loop_timers(void)$/;"	f
reset_bandwidth_test	src/or/circuituse.c	/^reset_bandwidth_test(void)$/;"	f
reset_descriptor_failures	src/or/main.h	/^  time_t reset_descriptor_failures;$/;"	m	struct:__anon5
reset_last_resolved_addr	src/or/config.c	/^reset_last_resolved_addr(void)$/;"	f
reset_mp	src/test/test_pt.c	/^reset_mp(managed_proxy_t *mp)$/;"	f	file:
reset_options	src/test/test_dir.c	/^reset_options(or_options_t *options, int *get_options_calls)$/;"	f	file:
reset_perftime	src/test/bench.c	/^reset_perftime(void)$/;"	f	file:
reset_routerstatus	src/test/test_dir.c	/^reset_routerstatus(routerstatus_t *rs,$/;"	f	file:
resolv_conf_fname	src/or/dns.c	/^static char *resolv_conf_fname = NULL;$/;"	v	file:
resolv_conf_mtime	src/or/dns.c	/^static time_t resolv_conf_mtime = 0;$/;"	v	file:
resolve_made_conn_pending	src/test/test_dns.c	/^static int resolve_made_conn_pending = 0;$/;"	v	file:
resolve_my_address	src/or/config.c	/^resolve_my_address(int warn_severity, const or_options_t *options,$/;"	f
resolve_retval	src/test/test_dns.c	/^static int resolve_retval = 0;$/;"	v	file:
resolved_cell_parse	src/or/relay.c	/^resolved_cell_parse(const cell_t *cell, const relay_header_t *rh,$/;"	f
resolved_name	src/test/test_dns.c	/^static char *resolved_name = NULL;$/;"	v	file:
resolving_streams	src/or/or.h	/^  edge_connection_t *resolving_streams;$/;"	m	struct:or_circuit_t
response_size	src/or/geoip.c	/^  size_t response_size; \/**< What is the size of the response in bytes? *\/$/;"	m	struct:dirreq_map_entry_t	file:
result_ipv4	src/or/dns_structs.h	/^  } result_ipv4; \/**< Outcome of IPv4 lookup *\/$/;"	m	struct:cached_resolve_t	typeref:union:cached_resolve_t::__anon12
result_ipv6	src/or/dns_structs.h	/^  } result_ipv6; \/**< Outcome of IPv6 lookup, if any *\/$/;"	m	struct:cached_resolve_t	typeref:union:cached_resolve_t::__anon13
result_ptr	src/or/dns_structs.h	/^  } result_ptr;$/;"	m	struct:cached_resolve_t	typeref:union:cached_resolve_t::__anon14
retry_all_listeners	src/or/connection.c	/^retry_all_listeners(smartlist_t *replaced_conns,$/;"	f
retry_bridge_descriptor_fetch_directly	src/or/entrynodes.c	/^retry_bridge_descriptor_fetch_directly(const char *digest)$/;"	f
retry_dns_init	src/or/main.h	/^  time_t retry_dns_init;$/;"	m	struct:__anon5
retry_listener_ports	src/or/connection.c	/^retry_listener_ports(smartlist_t *old_conns,$/;"	f	file:
reuse_signing_key	src/tools/tor-gencert.c	/^int reuse_signing_key = 0;$/;"	v
rewrite_mock	src/test/test_connection_edge_ap_handshake.c	/^static rewrite_result_t *rewrite_mock = NULL; $/;"	v	file:
rewrite_node_address_for_bridge	src/or/entrynodes.c	/^rewrite_node_address_for_bridge(const bridge_info_t *bridge, node_t *node)$/;"	f	file:
rewrite_result_t	src/or/connection_edge.h	/^} rewrite_result_t;$/;"	t	typeref:struct:__anon85
rh	src/test/test_relay.c	/^  relay_header_t *rh;$/;"	m	struct:relay_connection_test_data_t	file:
ri	src/or/or.h	/^  routerinfo_t *ri;$/;"	m	struct:node_t
rlim_t	src/common/compat.h	/^typedef unsigned long rlim_t;$/;"	t
rm_rf	src/test/testing_common.c	/^rm_rf(const char *dir)$/;"	f	file:
rollback_log_changes	src/common/log.c	/^rollback_log_changes(void)$/;"	f
rotate_onion_key	src/or/router.c	/^rotate_onion_key(void)$/;"	f
round_int64_to_next_multiple_of	src/common/util.c	/^round_int64_to_next_multiple_of(int64_t number, int64_t divisor)$/;"	f
round_to_next_multiple_of	src/common/util.c	/^round_to_next_multiple_of(unsigned number, unsigned divisor)$/;"	f
round_to_power_of_2	src/common/util.c	/^round_to_power_of_2(uint64_t u64)$/;"	f
round_uint32_to_next_multiple_of	src/common/util.c	/^round_uint32_to_next_multiple_of(uint32_t number, uint32_t divisor)$/;"	f
round_uint64_to_next_multiple_of	src/common/util.c	/^round_uint64_to_next_multiple_of(uint64_t number, uint64_t divisor)$/;"	f
router_add_exit_policy	src/or/routerparse.c	/^router_add_exit_policy(routerinfo_t *router, directory_token_t *tok)$/;"	f	file:
router_add_extrainfo_to_routerlist	src/or/routerlist.c	/^router_add_extrainfo_to_routerlist(extrainfo_t *ei, const char **msg,$/;"	f
router_add_running_nodes_to_smartlist	src/or/routerlist.c	/^router_add_running_nodes_to_smartlist(smartlist_t *sl, int allow_invalid,$/;"	f
router_add_to_routerlist	src/or/routerlist.c	/^router_add_to_routerlist(routerinfo_t *router, const char **msg,$/;"	f
router_addr_is_trusted_dir	src/or/routerlist.c	/^router_addr_is_trusted_dir(uint32_t addr)$/;"	f
router_append_dirobj_signature	src/or/routerparse.c	/^router_append_dirobj_signature(char *buf, size_t buf_len, const char *digest,$/;"	f
router_build_fresh_descriptor	src/or/router.c	/^router_build_fresh_descriptor(routerinfo_t **r, extrainfo_t **e)$/;"	f
router_choose_random_node	src/or/routerlist.c	/^router_choose_random_node(smartlist_t *excludedsmartlist,$/;"	f
router_compare_to_my_exit_policy	src/or/router.c	/^router_compare_to_my_exit_policy(const tor_addr_t *addr, uint16_t port)$/;"	f
router_counts_toward_thresholds	src/or/dirserv.c	/^router_counts_toward_thresholds(const node_t *node, time_t now,$/;"	f	file:
router_crn_flags_t	src/or/or.h	/^} router_crn_flags_t;$/;"	t	typeref:enum:__anon73
router_describe	src/or/router.c	/^router_describe(const routerinfo_t *ri)$/;"	f
router_descriptor_is_older_than_replacement	src/test/test_helpers.c	/^router_descriptor_is_older_than_replacement(const routerinfo_t *router,$/;"	f	file:
router_differences_are_cosmetic	src/or/routerlist.c	/^router_differences_are_cosmetic(const routerinfo_t *r1, const routerinfo_t *r2)$/;"	f
router_digest_is_me	src/or/router.c	/^router_digest_is_me(const char *digest)$/;"	f
router_digest_is_trusted_dir	src/or/routerlist.h	/^#define router_digest_is_trusted_dir(/;"	d
router_digest_is_trusted_dir_type	src/or/routerlist.c	/^router_digest_is_trusted_dir_type(const char *digest, dirinfo_type_t type)$/;"	f
router_dir_info_changed	src/test/test_config.c	/^NS(router_dir_info_changed)(void)$/;"	f	file:
router_dirport_found_reachable	src/or/router.c	/^router_dirport_found_reachable(void)$/;"	f
router_dump_exit_policy_to_string	src/or/router.c	/^router_dump_exit_policy_to_string(const routerinfo_t *router,$/;"	f
router_dump_router_to_string	src/or/router.c	/^router_dump_router_to_string(routerinfo_t *router,$/;"	f
router_exit_policy_all_nodes_reject	src/or/nodelist.c	/^router_exit_policy_all_nodes_reject(const tor_addr_t *addr, uint16_t port,$/;"	f
router_exit_policy_rejects_all	src/or/routerlist.c	/^router_exit_policy_rejects_all(const routerinfo_t *router)$/;"	f
router_extrainfo_digest_is_me	src/or/router.c	/^router_extrainfo_digest_is_me(const char *digest)$/;"	f
router_find_exact_exit_enclave	src/or/nodelist.c	/^router_find_exact_exit_enclave(const char *address, uint16_t port)$/;"	f
router_free_all	src/or/router.c	/^router_free_all(void)$/;"	f
router_get_active_listener_port_by_type_af	src/or/router.c	/^router_get_active_listener_port_by_type_af(int listener_type,$/;"	f
router_get_advertised_bandwidth	src/or/routerlist.c	/^router_get_advertised_bandwidth(const routerinfo_t *router)$/;"	f
router_get_advertised_bandwidth_capped	src/or/routerlist.c	/^router_get_advertised_bandwidth_capped(const routerinfo_t *router)$/;"	f
router_get_advertised_dir_port	src/or/router.c	/^router_get_advertised_dir_port(const or_options_t *options, uint16_t dirport)$/;"	f
router_get_advertised_or_port	src/or/router.c	/^router_get_advertised_or_port(const or_options_t *options)$/;"	f
router_get_advertised_or_port_by_af	src/or/router.c	/^router_get_advertised_or_port_by_af(const or_options_t *options,$/;"	f
router_get_all_orports	src/or/router.c	/^router_get_all_orports(const routerinfo_t *ri)$/;"	f
router_get_by_descriptor_digest	src/or/routerlist.c	/^router_get_by_descriptor_digest(const char *digest)$/;"	f
router_get_by_id_digest	src/or/routerlist.c	/^router_get_by_id_digest(const char *digest)$/;"	f
router_get_consensus_status_by_descriptor_digest	src/or/networkstatus.c	/^router_get_consensus_status_by_descriptor_digest(networkstatus_t *consensus,$/;"	f
router_get_consensus_status_by_id	src/or/networkstatus.c	/^router_get_consensus_status_by_id(const char *digest)$/;"	f
router_get_consensus_status_by_nickname	src/or/networkstatus.c	/^router_get_consensus_status_by_nickname(const char *nickname,$/;"	f
router_get_description	src/or/router.c	/^router_get_description(char *buf, const routerinfo_t *ri)$/;"	f
router_get_descriptor_gen_reason	src/or/router.c	/^router_get_descriptor_gen_reason(void)$/;"	f
router_get_dir_hash	src/or/routerparse.c	/^router_get_dir_hash(const char *s, char *digest)$/;"	f
router_get_dirobj_signature	src/or/routerparse.c	/^router_get_dirobj_signature(const char *digest,$/;"	f
router_get_extrainfo_hash	src/or/routerparse.c	/^router_get_extrainfo_hash(const char *s, size_t s_len, char *digest)$/;"	f
router_get_fallback_dir_servers	src/or/routerlist.c	/^router_get_fallback_dir_servers(void)$/;"	f
router_get_fallback_dirserver_by_digest	src/or/routerlist.c	/^router_get_fallback_dirserver_by_digest(const char *digest)$/;"	f
router_get_hash_impl	src/or/routerparse.c	/^router_get_hash_impl(const char *s, size_t s_len, char *digest,$/;"	f	file:
router_get_hash_impl_helper	src/or/routerparse.c	/^router_get_hash_impl_helper(const char *s, size_t s_len,$/;"	f	file:
router_get_hashes_impl	src/or/routerparse.c	/^router_get_hashes_impl(const char *s, size_t s_len, digests_t *digests,$/;"	f	file:
router_get_mutable_by_digest	src/or/routerlist.c	/^router_get_mutable_by_digest(const char *digest)$/;"	f
router_get_mutable_consensus_status_by_id	src/or/networkstatus.c	/^router_get_mutable_consensus_status_by_id(const char *digest)$/;"	f
router_get_my_descriptor	src/or/router.c	/^router_get_my_descriptor(void)$/;"	f
router_get_my_extrainfo	src/or/router.c	/^router_get_my_extrainfo(void)$/;"	f
router_get_my_id_digest	src/or/router.c	/^router_get_my_id_digest(void)$/;"	f
router_get_my_routerinfo	src/test/test_dir_handle_get.c	/^NS(router_get_my_routerinfo)(void)$/;"	f	file:
router_get_my_routerinfo	src/test/test_rendcache.c	/^NS(router_get_my_routerinfo)(void)$/;"	f	file:
router_get_my_routerinfo	src/test/test_status.c	/^NS(router_get_my_routerinfo)(void)$/;"	f	file:
router_get_networkstatus_v3_hashes	src/or/routerparse.c	/^router_get_networkstatus_v3_hashes(const char *s, digests_t *digests)$/;"	f
router_get_prim_orport	src/or/router.c	/^router_get_prim_orport(const routerinfo_t *router, tor_addr_port_t *ap_out)$/;"	f
router_get_router_hash	src/or/routerparse.c	/^router_get_router_hash(const char *s, size_t s_len, char *digest)$/;"	f
router_get_routerlist	src/or/routerlist.c	/^router_get_routerlist(void)$/;"	f
router_get_trusted_dir_servers	src/or/routerlist.c	/^router_get_trusted_dir_servers(void)$/;"	f
router_get_trusteddirserver_by_digest	src/or/routerlist.c	/^router_get_trusteddirserver_by_digest(const char *digest)$/;"	f
router_get_verbose_nickname	src/or/router.c	/^router_get_verbose_nickname(char *buf, const routerinfo_t *router)$/;"	f
router_guess_address_from_dir_headers	src/or/router.c	/^router_guess_address_from_dir_headers(uint32_t *guess)$/;"	f	file:
router_has_addr	src/or/router.c	/^router_has_addr(const routerinfo_t *router, const tor_addr_t *addr)$/;"	f
router_has_orport	src/or/router.c	/^router_has_orport(const routerinfo_t *router, const tor_addr_port_t *orport)$/;"	f
router_have_consensus_path	src/or/nodelist.c	/^router_have_consensus_path(void)$/;"	f
router_have_minimum_dir_info	src/or/nodelist.c	/^router_have_minimum_dir_info(void)$/;"	f
router_id	src/or/onion_ntor.h	/^  uint8_t router_id[DIGEST_LEN];$/;"	m	struct:ntor_handshake_state_t
router_initialize_tls_context	src/test/test_config.c	/^NS(router_initialize_tls_context)(void)$/;"	f
router_is_active	src/or/dirserv.c	/^router_is_active(const routerinfo_t *ri, const node_t *node, time_t now)$/;"	f	file:
router_is_me	src/or/router.c	/^router_is_me(const routerinfo_t *router)$/;"	f
router_is_named	src/or/routerlist.c	/^router_is_named(const routerinfo_t *router)$/;"	f
router_load_extrainfo_from_string	src/or/routerlist.c	/^router_load_extrainfo_from_string(const char *s, const char *eos,$/;"	f
router_load_routers_from_string	src/or/routerlist.c	/^router_load_routers_from_string(const char *s, const char *eos,$/;"	f
router_load_single_router	src/or/routerlist.c	/^router_load_single_router(const char *s, uint8_t purpose, int cache,$/;"	f
router_my_exit_policy_is_reject_star	src/or/router.c	/^router_my_exit_policy_is_reject_star(void)$/;"	f
router_new_address_suggestion	src/or/router.c	/^router_new_address_suggestion(const char *suggestion,$/;"	f
router_orport_found_reachable	src/or/router.c	/^router_orport_found_reachable(void)$/;"	f
router_parse_addr_policy	src/or/routerparse.c	/^router_parse_addr_policy(directory_token_t *tok, unsigned fmt_flags)$/;"	f	file:
router_parse_addr_policy_item_from_string	src/test/test_routerset.c	/^NS(router_parse_addr_policy_item_from_string)(const char *s, int assume_action)$/;"	f
router_parse_addr_policy_private	src/or/routerparse.c	/^router_parse_addr_policy_private(directory_token_t *tok)$/;"	f	file:
router_parse_entry_from_string	src/or/routerparse.c	/^router_parse_entry_from_string(const char *s, const char *end,$/;"	f
router_parse_list_from_string	src/or/routerparse.c	/^router_parse_list_from_string(const char **s, const char *eos,$/;"	f
router_perform_bandwidth_test	src/or/router.c	/^router_perform_bandwidth_test(int num_circs, time_t now)$/;"	f
router_pick_directory_server	src/or/routerlist.c	/^router_pick_directory_server(dirinfo_type_t type, int flags)$/;"	f
router_pick_directory_server_impl	src/or/routerlist.c	/^router_pick_directory_server_impl(dirinfo_type_t type, int flags,$/;"	f	file:
router_pick_dirserver_generic	src/or/routerlist.c	/^router_pick_dirserver_generic(smartlist_t *sourcelist,$/;"	f	file:
router_pick_fallback_dirserver	src/or/routerlist.c	/^router_pick_fallback_dirserver(dirinfo_type_t type, int flags)$/;"	f
router_pick_published_address	src/or/router.c	/^router_pick_published_address(const or_options_t *options, uint32_t *addr)$/;"	f
router_pick_trusteddirserver	src/or/routerlist.c	/^router_pick_trusteddirserver(dirinfo_type_t type, int flags)$/;"	f
router_pick_trusteddirserver_impl	src/or/routerlist.c	/^router_pick_trusteddirserver_impl(const smartlist_t *sourcelist,$/;"	f	file:
router_purpose	src/or/or.h	/^  uint8_t router_purpose;$/;"	m	struct:dir_connection_t
router_purpose_from_string	src/or/router.c	/^router_purpose_from_string(const char *s)$/;"	f
router_purpose_to_string	src/or/router.c	/^router_purpose_to_string(uint8_t p)$/;"	f
router_rebuild_descriptor	src/or/router.c	/^router_rebuild_descriptor(int force)$/;"	f
router_rebuild_store	src/or/routerlist.c	/^router_rebuild_store(int flags, desc_store_t *store)$/;"	f	file:
router_reload_consensus_networkstatus	src/or/networkstatus.c	/^router_reload_consensus_networkstatus(void)$/;"	f
router_reload_router_list	src/or/routerlist.c	/^router_reload_router_list(void)$/;"	f
router_reload_router_list_impl	src/or/routerlist.c	/^router_reload_router_list_impl(desc_store_t *store)$/;"	f	file:
router_reset_descriptor_download_failures	src/or/routerlist.c	/^router_reset_descriptor_download_failures(void)$/;"	f
router_reset_reachability	src/or/router.c	/^router_reset_reachability(void)$/;"	f
router_reset_status_download_failures	src/or/routerlist.c	/^router_reset_status_download_failures(void)$/;"	f
router_reset_warnings	src/or/router.c	/^router_reset_warnings(void)$/;"	f
router_set_status	src/or/nodelist.c	/^router_set_status(const char *digest, int up)$/;"	f
router_should_rebuild_store	src/or/routerlist.c	/^router_should_rebuild_store(desc_store_t *store)$/;"	f	file:
router_status_t	src/or/dirserv.c	/^typedef uint32_t router_status_t;$/;"	t	file:
router_supports_extrainfo	src/or/directory.c	/^router_supports_extrainfo(const char *identity_digest, int is_authority)$/;"	f
router_upload_dir_desc_to_dirservers	src/or/router.c	/^router_upload_dir_desc_to_dirservers(int force)$/;"	f
router_write_fingerprint	src/or/router.c	/^router_write_fingerprint(int hashed)$/;"	f
routerdesc_token_table	src/or/routerparse.c	/^static token_rule_t routerdesc_token_table[] = {$/;"	v	file:
routerinfo_free	src/or/routerlist.c	/^routerinfo_free(routerinfo_t *router)$/;"	f
routerinfo_free_wrapper_	src/test/test_dir.c	/^routerinfo_free_wrapper_(void *arg)$/;"	f	file:
routerinfo_incompatible_with_extrainfo	src/or/routerlist.c	/^routerinfo_incompatible_with_extrainfo(const routerinfo_t *ri,$/;"	f
routerinfo_is_a_configured_bridge	src/or/entrynodes.c	/^routerinfo_is_a_configured_bridge(const routerinfo_t *ri)$/;"	f
routerinfo_t	src/or/or.h	/^} routerinfo_t;$/;"	t	typeref:struct:__anon45
routerkeys_free_all	src/or/routerkeys.c	/^routerkeys_free_all(void)$/;"	f
routerkeys_tests	src/test/test_routerkeys.c	/^struct testcase_t routerkeys_tests[] = {$/;"	v	typeref:struct:testcase_t
routerlist	src/or/routerlist.c	/^static routerlist_t *routerlist = NULL;$/;"	v	file:
routerlist_add_node_and_family	src/or/routerlist.c	/^routerlist_add_node_and_family(smartlist_t *sl, const routerinfo_t *router)$/;"	f	file:
routerlist_assert_ok	src/or/routerlist.c	/^routerlist_assert_ok(const routerlist_t *rl)$/;"	f
routerlist_descriptors_added	src/or/routerlist.c	/^routerlist_descriptors_added(smartlist_t *sl, int from_cache)$/;"	f
routerlist_find_elt_	src/or/routerlist.c	/^routerlist_find_elt_(smartlist_t *sl, void *ri, int idx)$/;"	f	file:
routerlist_find_my_routerinfo	src/or/routerlist.c	/^routerlist_find_my_routerinfo(void)$/;"	f
routerlist_free	src/or/routerlist.c	/^routerlist_free(routerlist_t *rl)$/;"	f
routerlist_free_all	src/or/routerlist.c	/^routerlist_free_all(void)$/;"	f
routerlist_index	src/or/or.h	/^  int routerlist_index;$/;"	m	struct:signed_descriptor_t
routerlist_insert	src/or/routerlist.c	/^routerlist_insert(routerlist_t *rl, routerinfo_t *ri)$/;"	f	file:
routerlist_insert_old	src/or/routerlist.c	/^routerlist_insert_old(routerlist_t *rl, routerinfo_t *ri)$/;"	f	file:
routerlist_remove	src/or/routerlist.c	/^routerlist_remove(routerlist_t *rl, routerinfo_t *ri, int make_old, time_t now)$/;"	f
routerlist_remove_old	src/or/routerlist.c	/^routerlist_remove_old(routerlist_t *rl, signed_descriptor_t *sd, int idx)$/;"	f	file:
routerlist_remove_old_cached_routers_with_id	src/or/routerlist.c	/^routerlist_remove_old_cached_routers_with_id(time_t now,$/;"	f	file:
routerlist_remove_old_routers	src/or/routerlist.c	/^routerlist_remove_old_routers(void)$/;"	f
routerlist_reparse_old	src/or/routerlist.c	/^routerlist_reparse_old(routerlist_t *rl, signed_descriptor_t *sd)$/;"	f	file:
routerlist_replace	src/or/routerlist.c	/^routerlist_replace(routerlist_t *rl, routerinfo_t *ri_old,$/;"	f	file:
routerlist_reset_warnings	src/or/routerlist.c	/^routerlist_reset_warnings(void)$/;"	f
routerlist_retry_directory_downloads	src/or/routerlist.c	/^routerlist_retry_directory_downloads(time_t now)$/;"	f
routerlist_t	src/or/or.h	/^} routerlist_t;$/;"	t	typeref:struct:__anon48
routerlist_tests	src/test/test_routerlist.c	/^struct testcase_t routerlist_tests[] = {$/;"	v	typeref:struct:testcase_t
routers	src/or/or.h	/^  smartlist_t *routers;$/;"	m	struct:__anon48
routers_have_same_or_addrs	src/or/routerlist.c	/^routers_have_same_or_addrs(const routerinfo_t *r1, const routerinfo_t *r2)$/;"	f
routers_sort_by_identity	src/or/routerlist.c	/^routers_sort_by_identity(smartlist_t *routers)$/;"	f
routers_update_all_from_networkstatus	src/or/networkstatus.c	/^routers_update_all_from_networkstatus(time_t now, int dir_version)$/;"	f
routers_update_status_from_consensus_networkstatus	src/or/networkstatus.c	/^routers_update_status_from_consensus_networkstatus(smartlist_t *routers,$/;"	f
routers_with_measured_bw	src/or/dirserv.c	/^static int routers_with_measured_bw = 0;$/;"	v	file:
routerset_add_unknown_ccs	src/test/test_config.c	/^NS(routerset_add_unknown_ccs)(routerset_t **setp, int only_if_some_cc_set)$/;"	f
routerset_contains	src/or/routerset.c	/^routerset_contains(const routerset_t *set, const tor_addr_t *addr,$/;"	f
routerset_contains_bridge	src/or/entrynodes.c	/^routerset_contains_bridge(const routerset_t *routerset,$/;"	f	file:
routerset_contains_extendinfo	src/or/routerset.c	/^routerset_contains_extendinfo(const routerset_t *set, const extend_info_t *ei)$/;"	f
routerset_contains_node	src/or/routerset.c	/^routerset_contains_node(const routerset_t *set, const node_t *node)$/;"	f
routerset_contains_router	src/or/routerset.c	/^routerset_contains_router(const routerset_t *set, const routerinfo_t *ri,$/;"	f
routerset_contains_routerstatus	src/or/routerset.c	/^routerset_contains_routerstatus(const routerset_t *set,$/;"	f
routerset_equal	src/or/routerset.c	/^routerset_equal(const routerset_t *old, const routerset_t *new)$/;"	f
routerset_free	src/or/routerset.c	/^routerset_free(routerset_t *routerset)$/;"	f
routerset_get_all_nodes	src/or/routerset.c	/^routerset_get_all_nodes(smartlist_t *out, const routerset_t *routerset,$/;"	f
routerset_get_countryname	src/or/routerset.c	/^routerset_get_countryname(const char *c)$/;"	f
routerset_is_empty	src/or/routerset.c	/^routerset_is_empty(const routerset_t *set)$/;"	f
routerset_is_list	src/or/routerset.c	/^routerset_is_list(const routerset_t *set)$/;"	f
routerset_len	src/or/routerset.c	/^routerset_len(const routerset_t *set)$/;"	f
routerset_needs_geoip	src/or/routerset.c	/^routerset_needs_geoip(const routerset_t *set)$/;"	f
routerset_new	src/or/routerset.c	/^routerset_new(void)$/;"	f
routerset_parse	src/or/routerset.c	/^routerset_parse(routerset_t *target, const char *s, const char *description)$/;"	f
routerset_refresh_countries	src/or/routerset.c	/^routerset_refresh_countries(routerset_t *target)$/;"	f
routerset_subtract_nodes	src/or/routerset.c	/^routerset_subtract_nodes(smartlist_t *lst, const routerset_t *routerset)$/;"	f
routerset_t	src/or/or.h	/^typedef struct routerset_t routerset_t;$/;"	t	typeref:struct:routerset_t
routerset_t	src/or/routerset.h	/^struct routerset_t {$/;"	s
routerset_tests	src/test/test_routerset.c	/^struct testcase_t routerset_tests[] = {$/;"	v	typeref:struct:testcase_t
routerset_to_string	src/or/routerset.c	/^routerset_to_string(const routerset_t *set)$/;"	f
routerset_union	src/or/routerset.c	/^routerset_union(routerset_t *target, const routerset_t *source)$/;"	f
routerstatus_describe	src/or/router.c	/^routerstatus_describe(const routerstatus_t *rs)$/;"	f
routerstatus_format_entry	src/or/dirserv.c	/^routerstatus_format_entry(const routerstatus_t *rs, const char *version,$/;"	f
routerstatus_format_type_t	src/or/or.h	/^} routerstatus_format_type_t;$/;"	t	typeref:enum:__anon66
routerstatus_free	src/or/networkstatus.c	/^routerstatus_free(routerstatus_t *rs)$/;"	f
routerstatus_get_description	src/or/router.c	/^routerstatus_get_description(char *buf, const routerstatus_t *rs)$/;"	f
routerstatus_has_changed	src/or/networkstatus.c	/^routerstatus_has_changed(const routerstatus_t *a, const routerstatus_t *b)$/;"	f	file:
routerstatus_list	src/or/or.h	/^  smartlist_t *routerstatus_list;$/;"	m	struct:networkstatus_t
routerstatus_list_update_named_server_map	src/or/networkstatus.c	/^routerstatus_list_update_named_server_map(void)$/;"	f	file:
routerstatus_parse_entry_from_string	src/or/routerparse.c	/^routerstatus_parse_entry_from_string(memarea_t *area,$/;"	f	file:
routerstatus_parse_guardfraction	src/or/routerparse.c	/^routerstatus_parse_guardfraction(const char *guardfraction_str,$/;"	f
routerstatus_t	src/or/or.h	/^typedef struct routerstatus_t {$/;"	s
routerstatus_t	src/or/or.h	/^} routerstatus_t;$/;"	t	typeref:struct:routerstatus_t
rp	src/or/rendservice.h	/^      uint8_t rp[42];$/;"	m	struct:rend_intro_cell_s::__anon108::__anon109
rp_relay_cells_seen	src/or/rephist.c	/^  int64_t rp_relay_cells_seen;$/;"	m	struct:hs_stats_t	file:
rs	src/or/or.h	/^  routerstatus_t *rs;$/;"	m	struct:node_t
rs_test	src/test/test_dir.c	/^    void (*rs_test)(routerstatus_t *rs, time_t now))$/;"	f	file:
rsa	src/test/test_workqueue.c	/^  crypto_pk_t *rsa;$/;"	m	struct:state_s	file:
rsa_ed_crosscert	src/or/routerkeys.c	/^static uint8_t *rsa_ed_crosscert = NULL;$/;"	v	file:
rsa_ed_crosscert_add_sig	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_add_sig(rsa_ed_crosscert_t *inp, uint8_t elt)$/;"	f
rsa_ed_crosscert_check	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_check(const rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_clear	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_clear(rsa_ed_crosscert_t *obj)$/;"	f	file:
rsa_ed_crosscert_clear_errors	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_clear_errors(rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_encode	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_encode(uint8_t *output, const size_t avail, const rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_encoded_len	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_encoded_len(const rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_free	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_free(rsa_ed_crosscert_t *obj)$/;"	f
rsa_ed_crosscert_get_ed_key	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_get_ed_key(const rsa_ed_crosscert_t *inp, size_t idx)$/;"	f
rsa_ed_crosscert_get_end_of_signed	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_get_end_of_signed(const rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_get_expiration	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_get_expiration(rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_get_sig	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_get_sig(rsa_ed_crosscert_t *inp, size_t idx)$/;"	f
rsa_ed_crosscert_get_sig_len	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_get_sig_len(rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_getarray_ed_key	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_getarray_ed_key(rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_getarray_sig	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_getarray_sig(rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_getlen_ed_key	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_getlen_ed_key(const rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_getlen_sig	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_getlen_sig(const rsa_ed_crosscert_t *inp)$/;"	f
rsa_ed_crosscert_len	src/or/routerkeys.c	/^static size_t rsa_ed_crosscert_len = 0;$/;"	v	file:
rsa_ed_crosscert_new	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_new(void)$/;"	f
rsa_ed_crosscert_parse	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_parse(rsa_ed_crosscert_t **output, const uint8_t *input, const size_t len_in)$/;"	f
rsa_ed_crosscert_parse_into	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_parse_into(rsa_ed_crosscert_t *obj, const uint8_t *input, const size_t len_in)$/;"	f	file:
rsa_ed_crosscert_set_ed_key	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_set_ed_key(rsa_ed_crosscert_t *inp, size_t idx, uint8_t elt)$/;"	f
rsa_ed_crosscert_set_expiration	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_set_expiration(rsa_ed_crosscert_t *inp, uint32_t val)$/;"	f
rsa_ed_crosscert_set_sig	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_set_sig(rsa_ed_crosscert_t *inp, size_t idx, uint8_t elt)$/;"	f
rsa_ed_crosscert_set_sig_len	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_set_sig_len(rsa_ed_crosscert_t *inp, uint8_t val)$/;"	f
rsa_ed_crosscert_setlen_sig	src/trunnel/link_handshake.c	/^rsa_ed_crosscert_setlen_sig(rsa_ed_crosscert_t *inp, size_t newlen)$/;"	f
rsa_ed_crosscert_st	src/trunnel/link_handshake.h	/^struct rsa_ed_crosscert_st {$/;"	s
rsa_ed_crosscert_t	src/trunnel/link_handshake.h	/^typedef struct rsa_ed_crosscert_st rsa_ed_crosscert_t;$/;"	t	typeref:struct:rsa_ed_crosscert_st
rsa_id	src/or/keypin.h	/^  uint8_t rsa_id[DIGEST_LEN];$/;"	m	struct:keypin_ent_st
rsa_sent	src/test/test_workqueue.c	/^static int rsa_sent = 0;$/;"	v	file:
rsa_work_s	src/test/test_workqueue.c	/^typedef struct rsa_work_s {$/;"	s	file:
rsa_work_t	src/test/test_workqueue.c	/^} rsa_work_t;$/;"	t	typeref:struct:rsa_work_s	file:
rsamap_node	src/or/keypin.h	/^  HT_ENTRY(keypin_ent_st) rsamap_node;$/;"	m	struct:keypin_ent_st
rtrstatus_token_table	src/or/routerparse.c	/^static token_rule_t rtrstatus_token_table[] = {$/;"	v	file:
run_connection_housekeeping	src/or/main.c	/^run_connection_housekeeping(int i, time_t now)$/;"	f	file:
run_main_loop_once	src/or/main.c	/^run_main_loop_once(void)$/;"	f	file:
run_main_loop_until_done	src/or/main.c	/^run_main_loop_until_done(void)$/;"	f	file:
run_s2k_tests	src/test/test_crypto_slow.c	/^run_s2k_tests(const unsigned flags, const unsigned type,$/;"	f	file:
run_sched_ev	src/or/scheduler.c	/^STATIC struct event *run_sched_ev = NULL;$/;"	v	typeref:struct:event
run_scheduled_events	src/or/main.c	/^run_scheduled_events(time_t now)$/;"	f
run_util_spawn_background	src/test/test_util_slow.c	/^run_util_spawn_background(const char *argv[], const char *expected_out,$/;"	f	file:
running	src/common/util_process.c	/^  unsigned running;$/;"	m	struct:waitpid_callback_t	file:
running_long_enough_to_decide_unreachable	src/or/dirserv.c	/^running_long_enough_to_decide_unreachable(void)$/;"	f	file:
s	src/or/or.h	/^  tor_socket_t s;$/;"	m	struct:connection_t
s	src/test/test-memwipe.c	/^const char *s = NULL;$/;"	v
s6_addr	src/common/compat.h	/^#define s6_addr /;"	d
s6_addr16	src/common/compat.h	/^#define s6_addr16 /;"	d
s6_addr32	src/common/compat.h	/^#define s6_addr32 /;"	d
sa_family_t	src/common/compat.h	/^typedef uint16_t sa_family_t;$/;"	t
safe_mem_is_zero	src/common/di_ops.c	/^safe_mem_is_zero(const void *mem, size_t sz)$/;"	f
safe_str	src/or/config.c	/^safe_str(const char *address)$/;"	f
safe_str_client	src/or/config.c	/^safe_str_client(const char *address)$/;"	f
safecookie_client_hash	src/or/or.h	/^  char *safecookie_client_hash;$/;"	m	struct:control_connection_t
sample_laplace_distribution	src/common/util.c	/^sample_laplace_distribution(double mu, double b, double p)$/;"	f
sandbox_active	src/common/sandbox.c	/^static int sandbox_active = 0;$/;"	v	file:
sandbox_add_addrinfo	src/common/sandbox.c	/^sandbox_add_addrinfo(const char *name)$/;"	f
sandbox_add_addrinfo	src/common/sandbox.h	/^#define sandbox_add_addrinfo(/;"	d
sandbox_cfg_allow_open_filename	src/common/sandbox.c	/^sandbox_cfg_allow_open_filename(sandbox_cfg_t **cfg, char *file)$/;"	f
sandbox_cfg_allow_openat_filename	src/common/sandbox.c	/^sandbox_cfg_allow_openat_filename(sandbox_cfg_t **cfg, char *file)$/;"	f
sandbox_cfg_allow_rename	src/common/sandbox.c	/^sandbox_cfg_allow_rename(sandbox_cfg_t **cfg, char *file1, char *file2)$/;"	f
sandbox_cfg_allow_stat_filename	src/common/sandbox.c	/^sandbox_cfg_allow_stat_filename(sandbox_cfg_t **cfg, char *file)$/;"	f
sandbox_cfg_elem	src/common/sandbox.h	/^struct sandbox_cfg_elem {$/;"	s
sandbox_cfg_new	src/common/sandbox.c	/^sandbox_cfg_new(void)$/;"	f
sandbox_cfg_t	src/common/sandbox.h	/^typedef struct sandbox_cfg_elem sandbox_cfg_t;$/;"	t	typeref:struct:sandbox_cfg_elem
sandbox_disable_getaddrinfo_cache	src/common/sandbox.c	/^sandbox_disable_getaddrinfo_cache(void)$/;"	f
sandbox_filter_func_t	src/common/sandbox.h	/^typedef int (*sandbox_filter_func_t)(scmp_filter_ctx ctx,$/;"	t
sandbox_free_getaddrinfo_cache	src/common/sandbox.c	/^sandbox_free_getaddrinfo_cache(void)$/;"	f
sandbox_free_getaddrinfo_cache	src/common/sandbox.h	/^#define sandbox_free_getaddrinfo_cache(/;"	d
sandbox_freeaddrinfo	src/common/sandbox.c	/^sandbox_freeaddrinfo(struct addrinfo *ai)$/;"	f
sandbox_freeaddrinfo	src/common/sandbox.h	/^#define sandbox_freeaddrinfo(/;"	d
sandbox_getaddrinfo	src/common/sandbox.c	/^sandbox_getaddrinfo(const char *name, const char *servname,$/;"	f
sandbox_getaddrinfo	src/common/sandbox.h	/^#define sandbox_getaddrinfo(/;"	d
sandbox_getaddrinfo_cache_disabled	src/common/sandbox.c	/^static int sandbox_getaddrinfo_cache_disabled = 0;$/;"	v	file:
sandbox_init	src/common/sandbox.c	/^sandbox_init(sandbox_cfg_t *cfg)$/;"	f
sandbox_init_filter	src/or/main.c	/^sandbox_init_filter(void)$/;"	f	file:
sandbox_intern_string	src/common/sandbox.c	/^sandbox_intern_string(const char *str)$/;"	f
sandbox_intern_string	src/common/sandbox.h	/^#define sandbox_intern_string(/;"	d
sandbox_is_active	src/common/sandbox.c	/^sandbox_is_active(void)$/;"	f
sandbox_t	src/common/sandbox.h	/^} sandbox_t;$/;"	t	typeref:struct:__anon76
sandbox_tests	src/test/test_sandbox.c	/^struct testcase_t sandbox_tests[] = {$/;"	v	typeref:struct:testcase_t
save_stability	src/or/main.h	/^  time_t save_stability;$/;"	m	struct:__anon5
save_transport_to_state	src/or/statefile.c	/^save_transport_to_state(const char *transport,$/;"	f
saved_location	src/or/or.h	/^  saved_location_bitfield_t saved_location : 3;$/;"	m	struct:microdesc_t
saved_location	src/or/or.h	/^  saved_location_t saved_location;$/;"	m	struct:signed_descriptor_t
saved_location_bitfield_t	src/or/or.h	/^#define saved_location_bitfield_t /;"	d
saved_location_t	src/or/or.h	/^} saved_location_t;$/;"	t	typeref:enum:__anon43
saved_logs	src/test/log_test_helpers.c	/^static smartlist_t *saved_logs = NULL;$/;"	v	file:
saved_offset	src/or/or.h	/^  off_t saved_offset;$/;"	m	struct:signed_descriptor_t
sb__sysctl	src/common/sandbox.c	/^sb__sysctl(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_accept4	src/common/sandbox.c	/^sb_accept4(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_epoll_ctl	src/common/sandbox.c	/^sb_epoll_ctl(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_fcntl64	src/common/sandbox.c	/^sb_fcntl64(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_flock	src/common/sandbox.c	/^sb_flock(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_futex	src/common/sandbox.c	/^sb_futex(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_getsockopt	src/common/sandbox.c	/^sb_getsockopt(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_mmap2	src/common/sandbox.c	/^sb_mmap2(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_mprotect	src/common/sandbox.c	/^sb_mprotect(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_mremap	src/common/sandbox.c	/^sb_mremap(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_open	src/common/sandbox.c	/^sb_open(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_openat	src/common/sandbox.c	/^sb_openat(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_poll	src/common/sandbox.c	/^sb_poll(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_prctl	src/common/sandbox.c	/^sb_prctl(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_rename	src/common/sandbox.c	/^sb_rename(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_rt_sigaction	src/common/sandbox.c	/^sb_rt_sigaction(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_rt_sigprocmask	src/common/sandbox.c	/^sb_rt_sigprocmask(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_setsockopt	src/common/sandbox.c	/^sb_setsockopt(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_socket	src/common/sandbox.c	/^sb_socket(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_socketpair	src/common/sandbox.c	/^sb_socketpair(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_stat64	src/common/sandbox.c	/^sb_stat64(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sb_time	src/common/sandbox.c	/^sb_time(scmp_filter_ctx ctx, sandbox_cfg_t *filter)$/;"	f	file:
sc_muladd	src/ext/ed25519/ref10/sc.h	/^#define sc_muladd /;"	d
sc_muladd	src/ext/ed25519/ref10/sc_muladd.c	/^void sc_muladd(unsigned char *s,const unsigned char *a,const unsigned char *b,const unsigned char *c)$/;"	f
sc_reduce	src/ext/ed25519/ref10/sc.h	/^#define sc_reduce /;"	d
sc_reduce	src/ext/ed25519/ref10/sc_reduce.c	/^void sc_reduce(unsigned char *s)$/;"	f
scalars	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^	bignum256modm scalars[heap_batch_size];$/;"	m	struct:batch_heap_t
scale_active_circuits	src/or/circuitmux_ewma.c	/^scale_active_circuits(ewma_policy_data_t *pol, unsigned cur_tick)$/;"	f	file:
scale_array_elements_to_u64	src/or/routerlist.c	/^scale_array_elements_to_u64(u64_dbl_t *entries, int n_entries,$/;"	f
scale_single_cell_ewma	src/or/circuitmux_ewma.c	/^scale_single_cell_ewma(cell_ewma_t *ewma, unsigned cur_tick)$/;"	f	file:
scan_double	src/common/util.c	/^scan_double(const char **bufp, double *out, int width)$/;"	f	file:
scan_signed	src/common/util.c	/^scan_signed(const char **bufp, long *out, int width)$/;"	f	file:
scan_string	src/common/util.c	/^scan_string(const char **bufp, char *out, int width)$/;"	f	file:
scan_unsigned	src/common/util.c	/^scan_unsigned(const char **bufp, unsigned long *out, int width, int base)$/;"	f	file:
scert	src/trunnel/link_handshake.h	/^  uint8_t scert[32];$/;"	m	struct:auth1_st
sched_heap_idx	src/or/channel.h	/^  int sched_heap_idx;$/;"	m	struct:channel_s
sched_max_flush_cells	src/or/scheduler.c	/^static uint32_t sched_max_flush_cells = 16;$/;"	v	file:
sched_q_high_water	src/or/scheduler.c	/^static uint32_t sched_q_high_water = 32768;$/;"	v	file:
sched_q_low_water	src/or/scheduler.c	/^static uint32_t sched_q_low_water = 16384;$/;"	v	file:
schedule	src/or/or.h	/^  download_schedule_bitfield_t schedule : 8;$/;"	m	struct:download_status_t
scheduler_adjust_queue_size	src/or/scheduler.c	/^scheduler_adjust_queue_size(channel_t *chan, int dir, uint64_t adj)$/;"	f
scheduler_channel_doesnt_want_writes_mock	src/test/test_channel.c	/^scheduler_channel_doesnt_want_writes_mock(channel_t *ch)$/;"	f	file:
scheduler_channel_has_waiting_cells_mock	src/test/test_channel.c	/^scheduler_channel_has_waiting_cells_mock(channel_t *ch)$/;"	f
scheduler_channel_wants_writes	src/or/scheduler.c	/^scheduler_channel_wants_writes(channel_t *chan)$/;"	f
scheduler_compare_channels_mock	src/test/test_scheduler.c	/^scheduler_compare_channels_mock(const void *c1_v,$/;"	f	file:
scheduler_compare_channels_mock_ctr	src/test/test_scheduler.c	/^static int scheduler_compare_channels_mock_ctr = 0;$/;"	v	file:
scheduler_evt_callback	src/or/scheduler.c	/^scheduler_evt_callback(evutil_socket_t fd, short events, void *arg)$/;"	f	file:
scheduler_free_all	src/or/scheduler.c	/^scheduler_free_all(void)$/;"	f
scheduler_get_queue_heuristic	src/or/scheduler.c	/^scheduler_get_queue_heuristic(void)$/;"	f
scheduler_init	src/or/scheduler.c	/^scheduler_init(void)$/;"	f
scheduler_more_work	src/or/scheduler.c	/^scheduler_more_work(void)$/;"	f	file:
scheduler_release_channel_mock	src/test/test_channel.c	/^scheduler_release_channel_mock(channel_t *ch)$/;"	f
scheduler_retrigger	src/or/scheduler.c	/^scheduler_retrigger(void)$/;"	f	file:
scheduler_run_mock_ctr	src/test/test_scheduler.c	/^static int scheduler_run_mock_ctr = 0;$/;"	v	file:
scheduler_run_noop_mock	src/test/test_scheduler.c	/^scheduler_run_noop_mock(void)$/;"	f	file:
scheduler_set_watermarks	src/or/scheduler.c	/^scheduler_set_watermarks(uint32_t lo, uint32_t hi, uint32_t max_flush)$/;"	f
scheduler_state	src/or/channel.h	/^  } scheduler_state;$/;"	m	struct:channel_s	typeref:enum:channel_s::__anon89
scheduler_tests	src/test/test_scheduler.c	/^struct testcase_t scheduler_tests[] = {$/;"	v	typeref:struct:testcase_t
scheduler_touch_channel	src/or/scheduler.c	/^scheduler_touch_channel(channel_t *chan)$/;"	f
scheduler_update_queue_heuristic	src/or/scheduler.c	/^scheduler_update_queue_heuristic(time_t now)$/;"	f
scrub_interval	src/or/replaycache.h	/^  time_t scrub_interval;$/;"	m	struct:replaycache_s
scrubbed	src/or/replaycache.h	/^  time_t scrubbed;$/;"	m	struct:replaycache_s
sd_ei_bad_nickname	src/test/test_dir.c	/^static signed_descriptor_t sd_ei_bad_nickname;$/;"	v	file:
sd_ei_bad_sig2	src/test/test_dir.c	/^static signed_descriptor_t sd_ei_bad_sig2;$/;"	v	file:
sd_ei_bad_tokens	src/test/test_dir.c	/^static signed_descriptor_t sd_ei_bad_tokens;$/;"	v	file:
sd_ei_maximal	src/test/test_dir.c	/^static signed_descriptor_t sd_ei_maximal;$/;"	v	file:
sd_ei_minimal	src/test/test_dir.c	/^static signed_descriptor_t sd_ei_minimal;$/;"	v	file:
seccomp_rule_add_0	src/common/sandbox.c	/^#define seccomp_rule_add_0(/;"	d	file:
seccomp_rule_add_1	src/common/sandbox.c	/^#define seccomp_rule_add_1(/;"	d	file:
seccomp_rule_add_2	src/common/sandbox.c	/^#define seccomp_rule_add_2(/;"	d	file:
seccomp_rule_add_3	src/common/sandbox.c	/^#define seccomp_rule_add_3(/;"	d	file:
seccomp_rule_add_4	src/common/sandbox.c	/^#define seccomp_rule_add_4(/;"	d	file:
seckey	src/common/crypto_curve25519.h	/^  curve25519_secret_key_t seckey;$/;"	m	struct:curve25519_keypair_t
seckey	src/common/crypto_ed25519.c	/^  int (*seckey)(unsigned char *);$/;"	m	struct:__anon15	file:
seckey	src/common/crypto_ed25519.h	/^  ed25519_secret_key_t seckey;$/;"	m	struct:__anon20
seckey	src/common/crypto_ed25519.h	/^  uint8_t seckey[ED25519_SECKEY_LEN];$/;"	m	struct:__anon19
seckey_expand	src/common/crypto_ed25519.c	/^  int (*seckey_expand)(unsigned char *, const unsigned char *);$/;"	m	struct:__anon15	file:
seckey_x	src/or/onion_ntor.h	/^  curve25519_secret_key_t seckey_x;$/;"	m	struct:ntor_handshake_state_t
second	src/or/or.h	/^  char second[DIGEST_LEN];$/;"	m	struct:__anon65
second_elapsed_callback	src/or/main.c	/^second_elapsed_callback(periodic_timer_t *timer, void *arg)$/;"	f	file:
second_timer	src/or/main.c	/^static periodic_timer_t *second_timer = NULL;$/;"	v	file:
secret_key	src/common/crypto_curve25519.h	/^  uint8_t secret_key[CURVE25519_SECKEY_LEN];$/;"	m	struct:curve25519_secret_key_t
secret_to_key_check	src/common/crypto_s2k.c	/^secret_to_key_check(const uint8_t *spec_and_key, size_t spec_and_key_len,$/;"	f
secret_to_key_compute_key	src/common/crypto_s2k.c	/^secret_to_key_compute_key(uint8_t *key_out, size_t key_out_len,$/;"	f
secret_to_key_derivekey	src/common/crypto_s2k.c	/^secret_to_key_derivekey(uint8_t *key_out, size_t key_out_len,$/;"	f
secret_to_key_get_type	src/common/crypto_s2k.c	/^secret_to_key_get_type(const uint8_t *spec_and_key, size_t spec_and_key_len,$/;"	f	file:
secret_to_key_key_len	src/common/crypto_s2k.c	/^secret_to_key_key_len(uint8_t type)$/;"	f	file:
secret_to_key_make_specifier	src/common/crypto_s2k.c	/^secret_to_key_make_specifier(uint8_t *buf, size_t buf_len, unsigned flags)$/;"	f
secret_to_key_new	src/common/crypto_s2k.c	/^secret_to_key_new(uint8_t *buf,$/;"	f
secret_to_key_rfc2440	src/common/crypto_s2k.c	/^secret_to_key_rfc2440(char *key_out, size_t key_out_len, const char *secret,$/;"	f
secret_to_key_spec_len	src/common/crypto_s2k.c	/^secret_to_key_spec_len(uint8_t type)$/;"	f	file:
secs_to_uptime	src/or/status.c	/^secs_to_uptime(long secs)$/;"	f
seems_dead	src/common/log.c	/^  int seems_dead; \/**< Boolean: true if the stream seems to be kaput. *\/$/;"	m	struct:logfile_t	file:
select	src/ext/ed25519/ref10/ge_scalarmult_base.c	/^#define select /;"	d	file:
select	src/ext/ed25519/ref10/ge_scalarmult_base.c	/^static void select(ge_precomp *t,int pos,signed char b)$/;"	f	file:
selftest	src/common/crypto_ed25519.c	/^  int (*selftest)(void);$/;"	m	struct:__anon15	file:
send_control_done	src/or/control.c	/^send_control_done(control_connection_t *conn)$/;"	f	file:
send_control_event	src/or/control.c	/^send_control_event(uint16_t event,$/;"	f	file:
send_control_event_impl	src/or/control.c	/^send_control_event_impl(uint16_t event,$/;"	f	file:
send_ni	src/common/compat_threads.c	/^send_ni(int fd, const void *buf, size_t n, int flags)$/;"	f	file:
send_resolved_cell_replacement	src/test/test_dns.c	/^send_resolved_cell_replacement(edge_connection_t *conn, uint8_t answer_type,$/;"	f	file:
send_resolved_hostname_cell_replacement	src/test/test_dns.c	/^send_resolved_hostname_cell_replacement(edge_connection_t *conn,$/;"	f	file:
send_unencrypted	src/or/or.h	/^  unsigned int send_unencrypted : 1;$/;"	m	struct:signed_descriptor_t
sending_optimistic_data	src/or/or.h	/^  generic_buffer_t *sending_optimistic_data;$/;"	m	struct:entry_connection_t
sent_netinfo	src/or/or.h	/^  unsigned int sent_netinfo : 1;$/;"	m	struct:or_handshake_state_t
sent_versions_at	src/or/or.h	/^  time_t sent_versions_at;$/;"	m	struct:or_handshake_state_t
serial	src/test/test_workqueue.c	/^  int serial;$/;"	m	struct:ecdh_work_s	file:
serial	src/test/test_workqueue.c	/^  int serial;$/;"	m	struct:rsa_work_s	file:
served_descs	src/or/rephist.c	/^static digestmap_t *served_descs = NULL;$/;"	v	file:
server1	src/test/test_ntor_cl.c	/^server1(int argc, char **argv)$/;"	f	file:
server_cfg	src/or/or.h	/^  server_port_cfg_t server_cfg;$/;"	m	struct:port_cfg_t
server_handshake_count	src/common/tortls.h	/^  uint8_t server_handshake_count;$/;"	m	struct:tor_tls_t
server_identity_key_is_set	src/or/router.c	/^server_identity_key_is_set(void)$/;"	f
server_identitykey	src/or/router.c	/^static crypto_pk_t *server_identitykey=NULL;$/;"	v	file:
server_identitykey_digest	src/or/router.c	/^static char server_identitykey_digest[DIGEST_LEN];$/;"	v	file:
server_is_advertised	src/or/router.c	/^static int server_is_advertised=0;$/;"	v	file:
server_mode	src/test/test_config.c	/^NS(server_mode)(const or_options_t *options)$/;"	f	file:
server_mode	src/test/test_status.c	/^NS(server_mode)(const or_options_t *options)$/;"	f	file:
server_onion_keys_free	src/or/onion.c	/^server_onion_keys_free(server_onion_keys_t *keys)$/;"	f
server_onion_keys_new	src/or/onion.c	/^server_onion_keys_new(void)$/;"	f
server_onion_keys_t	src/or/onion.h	/^typedef struct server_onion_keys_t {$/;"	s
server_onion_keys_t	src/or/onion.h	/^} server_onion_keys_t;$/;"	t	typeref:struct:server_onion_keys_t
server_port_cfg_t	src/or/or.h	/^typedef struct server_port_cfg_t {$/;"	s
server_port_cfg_t	src/or/or.h	/^} server_port_cfg_t;$/;"	t	typeref:struct:server_port_cfg_t
server_tls_context	src/common/tortls.c	/^STATIC tor_tls_context_t *server_tls_context = NULL;$/;"	v
server_versions	src/or/or.h	/^  char *server_versions;$/;"	m	struct:networkstatus_t
service_id	src/or/rendservice.c	/^  char service_id[REND_SERVICE_ID_LEN_BASE32+1]; \/**< Onion address without$/;"	m	struct:rend_service_t	file:
service_pending_final_cpath_ref	src/or/or.h	/^  crypt_path_reference_t *service_pending_final_cpath_ref;$/;"	m	struct:__anon53
sess_cert_st_local	src/test/test_tortls.c	/^typedef struct sess_cert_st_local$/;"	s	file:
session_group	src/or/or.h	/^  int session_group; \/**< A session group, or -1 if this port is not in a$/;"	m	struct:entry_port_cfg_t
session_group	src/or/or.h	/^  int session_group;$/;"	m	struct:origin_circuit_t
set_all_times_to	src/test/test_main.c	/^set_all_times_to(time_t now)$/;"	f	file:
set_at	src/or/networkstatus.c	/^  time_t set_at;$/;"	m	struct:consensus_waiting_for_certs_t	file:
set_buffer_lengths_to_zero	src/or/main.c	/^set_buffer_lengths_to_zero(tor_socket_t s)$/;"	f	file:
set_cached_network_liveness	src/or/control.c	/^set_cached_network_liveness(int liveness)$/;"	f	file:
set_client_identity_key	src/or/router.c	/^set_client_identity_key(crypto_pk_t *k)$/;"	f
set_constrained_socket_buffers	src/or/connection.c	/^set_constrained_socket_buffers(tor_socket_t sock, int size)$/;"	f	file:
set_environment_variable_in_smartlist	src/common/util.c	/^set_environment_variable_in_smartlist(struct smartlist_t *env_vars,$/;"	f
set_exitconn_info_from_resolve	src/or/dns.c	/^set_exitconn_info_from_resolve(edge_connection_t *exitconn,$/;"	f	file:
set_expiry	src/or/dns.c	/^set_expiry(cached_resolve_t *resolve, time_t expires)$/;"	f	file:
set_log_severity_config	src/common/log.c	/^set_log_severity_config(int loglevelMin, int loglevelMax,$/;"	f
set_log_time_granularity	src/common/log.c	/^set_log_time_granularity(int granularity_msec)$/;"	f
set_main_thread	src/common/compat_threads.c	/^set_main_thread(void)$/;"	f
set_max_file_descriptors	src/common/compat.c	/^set_max_file_descriptors(rlim_t limit, int *max_out)$/;"	f
set_onion_key	src/or/router.c	/^set_onion_key(crypto_pk_t *k)$/;"	f	file:
set_options	src/or/config.c	/^set_options(or_options_t *new_val, char **msg)$/;"	f
set_routerstatus_from_routerinfo	src/or/dirserv.c	/^set_routerstatus_from_routerinfo(routerstatus_t *rs,$/;"	f
set_server_advertised	src/or/router.c	/^set_server_advertised(int s)$/;"	f	file:
set_server_identity_key	src/or/router.c	/^set_server_identity_key(crypto_pk_t *k)$/;"	f
set_socket_nonblocking	src/common/compat.c	/^set_socket_nonblocking(tor_socket_t socket)$/;"	f
set_streams_blocked_on_circ	src/or/relay.c	/^set_streams_blocked_on_circ(circuit_t *circ, channel_t *chan,$/;"	f	file:
set_uint16	src/common/compat.c	/^set_uint16(void *cp, uint16_t v)$/;"	f
set_uint32	src/common/compat.c	/^set_uint32(void *cp, uint32_t v)$/;"	f
set_uint64	src/common/compat.c	/^set_uint64(void *cp, uint64_t v)$/;"	f
set_uint8	src/common/compat.h	/^set_uint8(void *cp, uint8_t v)$/;"	f
set_unix_port	src/or/rendservice.c	/^set_unix_port(edge_connection_t *conn, rend_service_port_config_t *p)$/;"	f	file:
set_waitpid_callback	src/common/util_process.c	/^set_waitpid_callback(pid_t pid, void (*fn)(int, void *), void *arg)$/;"	f
setopt_err_t	src/or/or.h	/^typedef enum setopt_err_t {$/;"	g
setopt_err_t	src/or/or.h	/^} setopt_err_t;$/;"	t	typeref:enum:setopt_err_t
setup	src/ext/tinytest.h	/^	const struct testcase_setup_t *setup; \/**< Optional setup\/cleanup fns*\/$/;"	m	struct:testcase_t	typeref:struct:testcase_t::testcase_setup_t
setup_authenticate	src/test/test_link_handshake.c	/^static struct testcase_setup_t setup_authenticate = {$/;"	v	typeref:struct:testcase_setup_t	file:
setup_capture_of_logs	src/test/log_test_helpers.c	/^setup_capture_of_logs(int new_level)$/;"	f
setup_data	src/ext/tinytest.h	/^	void *setup_data; \/**< Extra data usable by setup function *\/$/;"	m	struct:testcase_t
setup_directory	src/test/testing_common.c	/^setup_directory(void)$/;"	f	file:
setup_fn	src/ext/tinytest.h	/^	void *(*setup_fn)(const struct testcase_t *);$/;"	m	struct:testcase_setup_t
setup_log_callback	src/test/test_options.c	/^setup_log_callback(void)$/;"	f	file:
setup_openssl_threading	src/common/crypto.c	/^setup_openssl_threading(void)$/;"	f	file:
setup_recv_authchallenge	src/test/test_link_handshake.c	/^static struct testcase_setup_t setup_recv_authchallenge = {$/;"	v	typeref:struct:testcase_setup_t	file:
setup_recv_certs	src/test/test_link_handshake.c	/^static struct testcase_setup_t setup_recv_certs = {$/;"	v	typeref:struct:testcase_setup_t	file:
setup_transition_affects_workers_branch	src/test/test_config.c	/^setup_transition_affects_workers_branch(void)$/;"	f	file:
sev_to_string	src/common/log.c	/^sev_to_string(int severity)$/;"	f	file:
severities	src/common/log.c	/^  log_severity_list_t *severities; \/**< Which severity of messages should we$/;"	m	struct:logfile_t	file:
severity	src/common/log.c	/^  int severity; \/**< The severity of the message *\/$/;"	m	struct:pending_log_message_t	file:
severity	src/test/test_options.c	/^  int severity;$/;"	m	struct:__anon10	file:
sha1	src/common/crypto.c	/^    SHA_CTX sha1; \/**< state for SHA1 *\/$/;"	m	union:crypto_digest_t::__anon16	file:
sha2	src/common/crypto.c	/^    SHA256_CTX sha2; \/**< state for SHA256 *\/$/;"	m	union:crypto_digest_t::__anon16	file:
sha512_LOAD64_BE	src/ext/ed25519/donna/ed25519-hash.h	/^sha512_LOAD64_BE(const uint8_t *p) {$/;"	f
sha512_ROTR64	src/ext/ed25519/donna/ed25519-hash.h	/^sha512_ROTR64(uint64_t x, int k) {$/;"	f
sha512_STORE64_BE	src/ext/ed25519/donna/ed25519-hash.h	/^sha512_STORE64_BE(uint8_t *p, uint64_t v) {$/;"	f
sha512_blocks	src/ext/ed25519/donna/ed25519-hash.h	/^sha512_blocks(sha512_state *S, const uint8_t *in, size_t blocks) {$/;"	f
sha512_constants	src/ext/ed25519/donna/ed25519-hash.h	/^static const uint64_t sha512_constants[80] = {$/;"	v
sha512_state	src/ext/ed25519/donna/ed25519-hash.h	/^} sha512_state;$/;"	t	typeref:struct:sha512_state_t
sha512_state_t	src/ext/ed25519/donna/ed25519-hash.h	/^typedef struct sha512_state_t {$/;"	s
shl128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define shl128(/;"	d
shl128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define shl128(/;"	d
shl128_pair	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define shl128_pair(/;"	d
shl128_pair	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define shl128_pair(/;"	d
short_policy_entry_t	src/or/or.h	/^typedef struct short_policy_entry_t {$/;"	s
short_policy_entry_t	src/or/or.h	/^} short_policy_entry_t;$/;"	t	typeref:struct:short_policy_entry_t
short_policy_free	src/or/policies.c	/^short_policy_free(short_policy_t *policy)$/;"	f
short_policy_is_reject_star	src/or/policies.c	/^short_policy_is_reject_star(const short_policy_t *policy)$/;"	f
short_policy_t	src/or/or.h	/^typedef struct short_policy_t {$/;"	s
short_policy_t	src/or/or.h	/^} short_policy_t;$/;"	t	typeref:struct:short_policy_t
should_add_entry_nodes	src/or/entrynodes.c	/^static int should_add_entry_nodes = 0;$/;"	v	file:
should_apply_guardfraction	src/or/entrynodes.c	/^should_apply_guardfraction(const networkstatus_t *ns)$/;"	f
should_cache_old_descriptors	src/or/routerlist.c	/^#define should_cache_old_descriptors(/;"	d	file:
should_close	src/or/connection_edge.h	/^  int should_close;$/;"	m	struct:__anon85
should_delay_dir_fetches	src/or/networkstatus.c	/^should_delay_dir_fetches(const or_options_t *options, const char **msg_out)$/;"	f
should_log_function_name	src/common/log.c	/^should_log_function_name(log_domain_mask_t domain, int severity)$/;"	f	file:
should_make_new_ed_keys	src/or/routerkeys.c	/^should_make_new_ed_keys(const or_options_t *options, const time_t now)$/;"	f
should_rebuild_md_cache	src/or/microdesc.c	/^should_rebuild_md_cache(microdesc_cache_t *cache)$/;"	f	file:
should_record_bridge_info	src/or/geoip.c	/^should_record_bridge_info(const or_options_t *options)$/;"	f
should_refuse_unknown_exits	src/or/router.c	/^should_refuse_unknown_exits(const or_options_t *options)$/;"	f
should_time_request	src/or/cpuworker.c	/^should_time_request(uint16_t onionskin_type)$/;"	f	file:
should_use_EVP	src/common/aes.c	/^static int should_use_EVP = 0;$/;"	v	file:
should_use_create_fast_for_circuit	src/or/circuitbuild.c	/^should_use_create_fast_for_circuit(origin_circuit_t *circ)$/;"	f	file:
should_use_directory_guards	src/or/directory.c	/^should_use_directory_guards(const or_options_t *options)$/;"	f
should_use_openssl_CTR	src/common/aes.c	/^static int should_use_openssl_CTR = 0;$/;"	v	file:
show_help	src/tools/tor-gencert.c	/^show_help(void)$/;"	f	file:
shr128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define shr128(/;"	d
shr128	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define shr128(/;"	d
shr128_pair	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			#define shr128_pair(/;"	d
shr128_pair	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		#define shr128_pair(/;"	d
shutdown	src/test/test_threads.c	/^  int shutdown;$/;"	m	struct:cv_testinfo_s	file:
shutdown_time	src/or/hibernate.c	/^static time_t shutdown_time = 0;$/;"	v	file:
shutting_down	src/test/test_workqueue.c	/^static int shutting_down = 0;$/;"	v	file:
sid	src/trunnel/link_handshake.h	/^  uint8_t sid[32];$/;"	m	struct:auth1_st
sig	src/common/crypto_ed25519.h	/^  uint8_t sig[ED25519_SIG_LEN];$/;"	m	struct:__anon17
sig	src/or/control.c	/^  int sig;$/;"	m	struct:signal_t	file:
sig	src/trunnel/link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) sig;$/;"	m	struct:auth1_st
sig	src/trunnel/link_handshake.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) sig;$/;"	m	struct:rsa_ed_crosscert_st
sig_bad	src/or/torcert.h	/^  unsigned sig_bad : 1;$/;"	m	struct:tor_cert_st
sig_len	src/trunnel/link_handshake.h	/^  uint8_t sig_len;$/;"	m	struct:rsa_ed_crosscert_st
sig_ok	src/or/torcert.h	/^  unsigned sig_ok : 1;$/;"	m	struct:tor_cert_st
sign	src/common/crypto_ed25519.c	/^  int (*sign)(unsigned char *, const unsigned char *, size_t,$/;"	m	struct:__anon15	file:
signal_callback	src/or/main.c	/^signal_callback(evutil_socket_t fd, short events, void *arg)$/;"	f	file:
signal_event	src/or/main.c	/^  struct event *signal_event;$/;"	m	struct:__anon4	typeref:struct:__anon4::event	file:
signal_handlers	src/or/main.c	/^} signal_handlers[] = {$/;"	v	typeref:struct:__anon4	file:
signal_name	src/or/control.c	/^  const char *signal_name;$/;"	m	struct:signal_t	file:
signal_t	src/or/control.c	/^struct signal_t {$/;"	s	file:
signal_table	src/or/control.c	/^static const struct signal_t signal_table[] = {$/;"	v	typeref:struct:signal_t	file:
signal_value	src/or/main.c	/^  int signal_value;$/;"	m	struct:__anon4	file:
signature	src/common/crypto_ed25519.h	/^  ed25519_signature_t signature;$/;"	m	struct:__anon21
signature	src/or/or.h	/^  char *signature;$/;"	m	struct:document_signature_t
signature	src/trunnel/ed25519_cert.h	/^  uint8_t signature[64];$/;"	m	struct:ed25519_cert_st
signature_len	src/or/or.h	/^  int signature_len;$/;"	m	struct:document_signature_t
signatures	src/or/or.h	/^  strmap_t *signatures; \/**< Map from flavor name to list of$/;"	m	struct:ns_detached_signatures_t
signed_desc_append_to_journal	src/or/routerlist.c	/^signed_desc_append_to_journal(signed_descriptor_t *desc,$/;"	f	file:
signed_desc_digest_is_recognized	src/or/routerlist.c	/^signed_desc_digest_is_recognized(signed_descriptor_t *desc)$/;"	f	file:
signed_descriptor_body	src/or/or.h	/^  char *signed_descriptor_body;$/;"	m	struct:signed_descriptor_t
signed_descriptor_digest	src/or/or.h	/^  char signed_descriptor_digest[DIGEST_LEN];$/;"	m	struct:signed_descriptor_t
signed_descriptor_free	src/or/routerlist.c	/^signed_descriptor_free(signed_descriptor_t *sd)$/;"	f	file:
signed_descriptor_from_routerinfo	src/or/routerlist.c	/^signed_descriptor_from_routerinfo(routerinfo_t *ri)$/;"	f	file:
signed_descriptor_get_annotations	src/or/routerlist.c	/^signed_descriptor_get_annotations(const signed_descriptor_t *desc)$/;"	f
signed_descriptor_get_body	src/or/routerlist.c	/^signed_descriptor_get_body(const signed_descriptor_t *desc)$/;"	f
signed_descriptor_get_body_impl	src/or/routerlist.c	/^signed_descriptor_get_body_impl(const signed_descriptor_t *desc,$/;"	f	file:
signed_descriptor_len	src/or/or.h	/^  size_t signed_descriptor_len;$/;"	m	struct:signed_descriptor_t
signed_descriptor_t	src/or/or.h	/^typedef struct signed_descriptor_t {$/;"	s
signed_descriptor_t	src/or/or.h	/^} signed_descriptor_t;$/;"	t	typeref:struct:signed_descriptor_t
signed_descs_update_status_from_consensus_networkstatus	src/or/networkstatus.c	/^signed_descs_update_status_from_consensus_networkstatus(smartlist_t *descs)$/;"	f
signed_key	src/or/torcert.h	/^  ed25519_public_key_t signed_key;$/;"	m	struct:tor_cert_st
signewnym_impl	src/or/main.c	/^signewnym_impl(time_t now)$/;"	f	file:
signewnym_is_pending	src/or/main.c	/^static int signewnym_is_pending = 0;$/;"	v	file:
signing_key	src/or/or.h	/^  crypto_pk_t *signing_key;$/;"	m	struct:authority_cert_t
signing_key	src/or/torcert.h	/^  ed25519_public_key_t signing_key;$/;"	m	struct:tor_cert_st
signing_key	src/tools/tor-gencert.c	/^EVP_PKEY *signing_key = NULL;$/;"	v
signing_key_cert	src/or/or.h	/^  struct tor_cert_st *signing_key_cert;$/;"	m	struct:__anon45	typeref:struct:__anon45::tor_cert_st
signing_key_cert	src/or/or.h	/^  struct tor_cert_st *signing_key_cert;$/;"	m	struct:extrainfo_t	typeref:struct:extrainfo_t::tor_cert_st
signing_key_cert	src/or/routerkeys.c	/^static tor_cert_t *signing_key_cert = NULL;$/;"	v	file:
signing_key_digest	src/or/or.h	/^  char signing_key_digest[DIGEST_LEN];$/;"	m	struct:authority_cert_t
signing_key_digest	src/or/or.h	/^  char signing_key_digest[DIGEST_LEN];$/;"	m	struct:document_signature_t
signing_key_file	src/tools/tor-gencert.c	/^char *signing_key_file = NULL;$/;"	v
signing_key_included	src/or/torcert.h	/^  unsigned signing_key_included : 1;$/;"	m	struct:tor_cert_st
sigs	src/or/or.h	/^  smartlist_t *sigs;$/;"	m	struct:networkstatus_voter_info_t
sigsafe_log_fds	src/common/log.c	/^static int sigsafe_log_fds[MAX_SIGSAFE_FDS] = { STDERR_FILENO };$/;"	v	file:
sigsys_debugging	src/common/sandbox.c	/^sigsys_debugging(int nr, siginfo_t *info, void *void_context)$/;"	f	file:
sin6_addr	src/common/compat.h	/^  struct in6_addr sin6_addr;$/;"	m	struct:sockaddr_in6	typeref:struct:sockaddr_in6::in6_addr
sin6_family	src/common/compat.h	/^  sa_family_t sin6_family;$/;"	m	struct:sockaddr_in6
sin6_port	src/common/compat.h	/^  uint16_t sin6_port;$/;"	m	struct:sockaddr_in6
since	src/or/rephist.c	/^  time_t since;$/;"	m	struct:link_history_t	file:
since	src/or/rephist.c	/^  time_t since;$/;"	m	struct:or_history_t	file:
single_conn_free_bytes	src/or/circuitlist.c	/^single_conn_free_bytes(connection_t *conn)$/;"	f	file:
siphash24	src/ext/csiphash.c	/^uint64_t siphash24(const void *src, unsigned long src_sz, const struct sipkey *key) {$/;"	f
siphash24g	src/ext/csiphash.c	/^uint64_t siphash24g(const void *src, unsigned long src_sz) {$/;"	f
siphash_set_global_key	src/ext/csiphash.c	/^void siphash_set_global_key(const struct sipkey *key)$/;"	f
sipkey	src/ext/siphash.h	/^struct sipkey {$/;"	s
size	src/common/compat.h	/^  size_t size; \/**< Size of the file. *\/$/;"	m	struct:tor_mmap_t
size	src/ext/ed25519/donna/ed25519-donna-batchverify.h	/^	size_t size;$/;"	m	struct:batch_heap_t
size	src/or/confparse.h	/^  size_t size; \/**< Size of the struct that everything gets parsed into. *\/$/;"	m	struct:config_format_t
size_mul_check	src/common/util.c	/^size_mul_check(const size_t x, const size_t y)$/;"	f	file:
sized_chunk_t	src/common/util.h	/^typedef struct sized_chunk_t {$/;"	s
sized_chunk_t	src/common/util.h	/^} sized_chunk_t;$/;"	t	typeref:struct:sized_chunk_t
skey_header	src/trunnel/pwbox.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) skey_header;$/;"	m	struct:pwbox_encoded_st
slide	src/ext/ed25519/ref10/ge_double_scalarmult.c	/^static void slide(signed char *r,const unsigned char *a)$/;"	f	file:
slog	src/trunnel/link_handshake.h	/^  uint8_t slog[32];$/;"	m	struct:auth1_st
slow_crypto_tests	src/test/test_crypto_slow.c	/^struct testcase_t slow_crypto_tests[] = {$/;"	v	typeref:struct:testcase_t
slow_util_tests	src/test/test_util_slow.c	/^struct testcase_t slow_util_tests[] = {$/;"	v	typeref:struct:testcase_t
smartlist_add	src/common/container.c	/^smartlist_add(smartlist_t *sl, void *element)$/;"	f
smartlist_add_all	src/common/container.c	/^smartlist_add_all(smartlist_t *s1, const smartlist_t *s2)$/;"	f
smartlist_add_asprintf	src/common/util.c	/^smartlist_add_asprintf(struct smartlist_t *sl, const char *pattern, ...)$/;"	f
smartlist_add_vasprintf	src/common/util.c	/^smartlist_add_vasprintf(struct smartlist_t *sl, const char *pattern,$/;"	f
smartlist_bsearch	src/common/container.c	/^smartlist_bsearch(smartlist_t *sl, const void *key,$/;"	f
smartlist_bsearch_idx	src/common/container.c	/^smartlist_bsearch_idx(const smartlist_t *sl, const void *key,$/;"	f
smartlist_choose	src/common/crypto.c	/^smartlist_choose(const smartlist_t *sl)$/;"	f
smartlist_choose_node_by_bandwidth_weights	src/or/routerlist.c	/^smartlist_choose_node_by_bandwidth_weights(const smartlist_t *sl,$/;"	f	file:
smartlist_clear	src/common/container.c	/^smartlist_clear(smartlist_t *sl)$/;"	f
smartlist_contains	src/common/container.c	/^smartlist_contains(const smartlist_t *sl, const void *element)$/;"	f
smartlist_contains_digest	src/common/container.c	/^smartlist_contains_digest(const smartlist_t *sl, const char *element)$/;"	f
smartlist_contains_int_as_string	src/common/container.c	/^smartlist_contains_int_as_string(const smartlist_t *sl, int num)$/;"	f
smartlist_contains_localhost_tor_addr	src/test/test_address.c	/^smartlist_contains_localhost_tor_addr(smartlist_t *smartlist)$/;"	f	file:
smartlist_contains_string	src/common/container.c	/^smartlist_contains_string(const smartlist_t *sl, const char *element)$/;"	f
smartlist_contains_string_case	src/common/container.c	/^smartlist_contains_string_case(const smartlist_t *sl, const char *element)$/;"	f
smartlist_del	src/common/container.c	/^smartlist_del(smartlist_t *sl, int idx)$/;"	f
smartlist_del_keeporder	src/common/container.c	/^smartlist_del_keeporder(smartlist_t *sl, int idx)$/;"	f
smartlist_ensure_capacity	src/common/container.c	/^smartlist_ensure_capacity(smartlist_t *sl, int size)$/;"	f	file:
smartlist_free	src/test/test_routerset.c	/^NS(smartlist_free)(smartlist_t *s)$/;"	f
smartlist_get	src/common/container.h	/^#define smartlist_get(/;"	d
smartlist_get	src/common/container.h	/^static INLINE void *smartlist_get(const smartlist_t *sl, int idx) {$/;"	f
smartlist_get_most_frequent	src/common/container.h	/^#define smartlist_get_most_frequent(/;"	d
smartlist_get_most_frequent_	src/common/container.c	/^smartlist_get_most_frequent_(const smartlist_t *sl,$/;"	f
smartlist_get_most_frequent_digest256	src/common/container.c	/^smartlist_get_most_frequent_digest256(smartlist_t *sl)$/;"	f
smartlist_get_most_frequent_string	src/common/container.c	/^smartlist_get_most_frequent_string(smartlist_t *sl)$/;"	f
smartlist_get_most_frequent_string_	src/common/container.c	/^smartlist_get_most_frequent_string_(smartlist_t *sl, int *count_out)$/;"	f
smartlist_heapify	src/common/container.c	/^smartlist_heapify(smartlist_t *sl,$/;"	f	file:
smartlist_insert	src/common/container.c	/^smartlist_insert(smartlist_t *sl, int idx, void *val)$/;"	f
smartlist_intersect	src/common/container.c	/^smartlist_intersect(smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_ints_eq	src/common/container.c	/^smartlist_ints_eq(const smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_join_strings	src/common/container.c	/^smartlist_join_strings(smartlist_t *sl, const char *join,$/;"	f
smartlist_join_strings2	src/common/container.c	/^smartlist_join_strings2(smartlist_t *sl, const char *join,$/;"	f
smartlist_len	src/common/container.h	/^#define smartlist_len(/;"	d
smartlist_len	src/common/container.h	/^static INLINE int smartlist_len(const smartlist_t *sl) {$/;"	f
smartlist_new	src/test/test_routerset.c	/^NS(smartlist_new)(void)$/;"	f	file:
smartlist_new_from_text_lines	src/test/test_util.c	/^smartlist_new_from_text_lines(const char *lines)$/;"	f	file:
smartlist_overlap	src/common/container.c	/^smartlist_overlap(const smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_pop_last	src/common/container.c	/^smartlist_pop_last(smartlist_t *sl)$/;"	f
smartlist_pos	src/common/container.c	/^smartlist_pos(const smartlist_t *sl, const void *element)$/;"	f
smartlist_pqueue_add	src/common/container.c	/^smartlist_pqueue_add(smartlist_t *sl,$/;"	f
smartlist_pqueue_assert_ok	src/common/container.c	/^smartlist_pqueue_assert_ok(smartlist_t *sl,$/;"	f
smartlist_pqueue_pop	src/common/container.c	/^smartlist_pqueue_pop(smartlist_t *sl,$/;"	f
smartlist_pqueue_remove	src/common/container.c	/^smartlist_pqueue_remove(smartlist_t *sl,$/;"	f
smartlist_remove	src/common/container.c	/^smartlist_remove(smartlist_t *sl, const void *element)$/;"	f
smartlist_reverse	src/common/container.c	/^smartlist_reverse(smartlist_t *sl)$/;"	f
smartlist_set	src/common/container.h	/^#define smartlist_set(/;"	d
smartlist_set	src/common/container.h	/^static INLINE void smartlist_set(smartlist_t *sl, int idx, void *val) {$/;"	f
smartlist_shuffle	src/common/crypto.c	/^smartlist_shuffle(smartlist_t *sl)$/;"	f
smartlist_sort	src/common/container.c	/^smartlist_sort(smartlist_t *sl, int (*compare)(const void **a, const void **b))$/;"	f
smartlist_sort_digests	src/common/container.c	/^smartlist_sort_digests(smartlist_t *sl)$/;"	f
smartlist_sort_digests256	src/common/container.c	/^smartlist_sort_digests256(smartlist_t *sl)$/;"	f
smartlist_sort_pointers	src/common/container.c	/^smartlist_sort_pointers(smartlist_t *sl)$/;"	f
smartlist_sort_strings	src/common/container.c	/^smartlist_sort_strings(smartlist_t *sl)$/;"	f
smartlist_split_string	src/common/container.c	/^smartlist_split_string(smartlist_t *sl, const char *str, const char *sep,$/;"	f
smartlist_string_pos	src/common/container.c	/^smartlist_string_pos(const smartlist_t *sl, const char *element)$/;"	f
smartlist_string_remove	src/common/container.c	/^smartlist_string_remove(smartlist_t *sl, const char *element)$/;"	f
smartlist_subtract	src/common/container.c	/^smartlist_subtract(smartlist_t *sl1, const smartlist_t *sl2)$/;"	f
smartlist_swap	src/common/container.h	/^static INLINE void smartlist_swap(smartlist_t *sl, int idx1, int idx2)$/;"	f
smartlist_t	src/common/container.h	/^typedef struct smartlist_t {$/;"	s
smartlist_t	src/common/container.h	/^} smartlist_t;$/;"	t	typeref:struct:smartlist_t
smartlist_uniq	src/common/container.c	/^smartlist_uniq(smartlist_t *sl,$/;"	f
smartlist_uniq_digests	src/common/container.c	/^smartlist_uniq_digests(smartlist_t *sl)$/;"	f
smartlist_uniq_digests256	src/common/container.c	/^smartlist_uniq_digests256(smartlist_t *sl)$/;"	f
smartlist_uniq_strings	src/common/container.c	/^smartlist_uniq_strings(smartlist_t *sl)$/;"	f
smp_param	src/common/sandbox.h	/^typedef struct smp_param {$/;"	s
smp_param_t	src/common/sandbox.h	/^} smp_param_t;$/;"	t	typeref:struct:smp_param
sock_alert	src/common/compat_threads.c	/^sock_alert(tor_socket_t fd)$/;"	f	file:
sock_drain	src/common/compat_threads.c	/^sock_drain(tor_socket_t fd)$/;"	f	file:
sockaddr_in6	src/common/compat.h	/^struct sockaddr_in6 {$/;"	s
sockaddr_in6_are_equal	src/test/test_address.c	/^sockaddr_in6_are_equal(struct sockaddr_in6 *sockaddr1,$/;"	f	file:
sockaddr_in_are_equal	src/test/test_address.c	/^sockaddr_in_are_equal(struct sockaddr_in *sockaddr1,$/;"	f	file:
sockaddr_in_from_string	src/test/test_address.c	/^sockaddr_in_from_string(const char *ip_str, struct sockaddr_in *out)$/;"	f	file:
socket	src/common/tortls.h	/^  int socket; \/**< The underlying file descriptor for this TLS connection. *\/$/;"	m	struct:tor_tls_t
socket_accounting_lock	src/common/compat.c	/^socket_accounting_lock(void)$/;"	f	file:
socket_accounting_mutex	src/common/compat.c	/^static tor_mutex_t *socket_accounting_mutex = NULL;$/;"	v	file:
socket_accounting_unlock	src/common/compat.c	/^socket_accounting_unlock(void)$/;"	f	file:
socket_family	src/or/or.h	/^  int socket_family; \/**< Address family of this connection's socket.  Usually$/;"	m	struct:connection_t
socklen_t	src/common/compat.h	/^typedef int socklen_t;$/;"	t
socks4_response_code_to_string	src/or/reasons.c	/^socks4_response_code_to_string(uint8_t code)$/;"	f
socks5_reason_to_string	src/tools/tor-resolve.c	/^socks5_reason_to_string(char reason)$/;"	f	file:
socks5_reply_status_t	src/common/compat.h	/^} socks5_reply_status_t;$/;"	t	typeref:enum:__anon28
socks5_response_code_to_string	src/or/reasons.c	/^socks5_response_code_to_string(uint8_t code)$/;"	f
socks_args	src/or/config.h	/^  smartlist_t *socks_args; \/* SOCKS arguments for the pluggable$/;"	m	struct:bridge_line_t
socks_args	src/or/entrynodes.c	/^  smartlist_t *socks_args;$/;"	m	struct:__anon32	file:
socks_password	src/or/or.h	/^  char *socks_password;$/;"	m	struct:origin_circuit_t
socks_password_len	src/or/or.h	/^  uint8_t socks_password_len;$/;"	m	struct:origin_circuit_t
socks_policy	src/or/policies.c	/^static smartlist_t *socks_policy = NULL;$/;"	v	file:
socks_policy_permits_address	src/or/policies.c	/^socks_policy_permits_address(const tor_addr_t *addr)$/;"	f
socks_prefer_no_auth	src/or/or.h	/^  unsigned int socks_prefer_no_auth : 1;$/;"	m	struct:entry_port_cfg_t
socks_prefer_no_auth	src/or/or.h	/^  unsigned int socks_prefer_no_auth : 1;$/;"	m	struct:socks_request_t
socks_request	src/or/or.h	/^  socks_request_t *socks_request; \/**< SOCKS structure describing request (AP$/;"	m	struct:entry_connection_t
socks_request_clear	src/test/test_socks.c	/^socks_request_clear(socks_request_t *socks)$/;"	f	file:
socks_request_free	src/or/buffers.c	/^socks_request_free(socks_request_t *req)$/;"	f
socks_request_new	src/or/buffers.c	/^socks_request_new(void)$/;"	f
socks_request_set_socks5_error	src/or/buffers.c	/^socks_request_set_socks5_error(socks_request_t *req,$/;"	f	file:
socks_request_t	src/or/or.h	/^struct socks_request_t {$/;"	s
socks_request_t	src/or/or.h	/^typedef struct socks_request_t socks_request_t;$/;"	t	typeref:struct:socks_request_t
socks_resolved_mock	src/test/test_relaycell.c	/^socks_resolved_mock(entry_connection_t *conn,$/;"	f	file:
socks_setup	src/test/test_socks.c	/^const struct testcase_setup_t socks_setup = {$/;"	v	typeref:struct:testcase_setup_t
socks_test_cleanup	src/test/test_socks.c	/^socks_test_cleanup(const struct testcase_t *testcase, void *ptr)$/;"	f	file:
socks_test_data_t	src/test/test_socks.c	/^typedef struct socks_test_data_t {$/;"	s	file:
socks_test_data_t	src/test/test_socks.c	/^} socks_test_data_t;$/;"	t	typeref:struct:socks_test_data_t	file:
socks_test_setup	src/test/test_socks.c	/^socks_test_setup(const struct testcase_t *testcase)$/;"	f	file:
socks_tests	src/test/test_socks.c	/^struct testcase_t socks_tests[] = {$/;"	v	typeref:struct:testcase_t
socks_username	src/or/or.h	/^  char *socks_username;$/;"	m	struct:origin_circuit_t
socks_username_len	src/or/or.h	/^  size_t socks_username_len;$/;"	m	struct:origin_circuit_t
socks_version	src/or/or.h	/^  uint8_t socks_version;$/;"	m	struct:socks_request_t
socks_version	src/or/transports.h	/^  int socks_version;$/;"	m	struct:transport_t
soft_limit_hit_at	src/or/hibernate.c	/^static time_t soft_limit_hit_at = 0;$/;"	v	file:
sort_version_list	src/or/routerparse.c	/^sort_version_list(smartlist_t *versions, int remove_duplicates)$/;"	f
source	src/or/addressmap.c	/^  addressmap_entry_source_bitfield_t source:3;$/;"	m	struct:__anon83	file:
spawn_exit	src/common/compat_pthreads.c	/^spawn_exit(void)$/;"	f
spawn_func	src/common/compat_pthreads.c	/^spawn_func(void (*func)(void *), void *data)$/;"	f
split_line	src/test/test_util.c	/^  const char *split_line[MAX_SPLIT_LINE_COUNT]; \/\/ Split lines$/;"	m	struct:split_lines_test_t	file:
split_lines_test_t	src/test/test_util.c	/^struct split_lines_test_t {$/;"	s	file:
sqrtm1	src/ext/ed25519/ref10/ge_frombytes.c	/^static const fe sqrtm1 = {$/;"	v	file:
src_wildcard	src/or/addressmap.c	/^  unsigned src_wildcard:1;$/;"	m	struct:__anon83	file:
srm_alen	src/test/test_relaycell.c	/^static size_t srm_alen;$/;"	v	file:
srm_answer	src/test/test_relaycell.c	/^static uint8_t srm_answer[512];$/;"	v	file:
srm_answer_is_set	src/test/test_relaycell.c	/^static int srm_answer_is_set;$/;"	v	file:
srm_atype	src/test/test_relaycell.c	/^static int srm_atype;$/;"	v	file:
srm_conn	src/test/test_relaycell.c	/^static entry_connection_t *srm_conn;$/;"	v	file:
srm_expires	src/test/test_relaycell.c	/^static time_t srm_expires;$/;"	v	file:
srm_ncalls	src/test/test_relaycell.c	/^static int srm_ncalls;$/;"	v	file:
srm_ttl	src/test/test_relaycell.c	/^static int srm_ttl;$/;"	v	file:
ssize_t	src/common/torint.h	/^typedef int32_t ssize_t;$/;"	t
ssize_t	src/common/torint.h	/^typedef int64_t ssize_t;$/;"	t
ssl	src/common/tortls.h	/^  SSL *ssl; \/**< An OpenSSL SSL object. *\/$/;"	m	struct:tor_tls_t
stability_last_downrated	src/or/rephist.c	/^static time_t stability_last_downrated = 0;$/;"	v	file:
stable_mtbf	src/or/dirserv.c	/^static double stable_mtbf = 0.0;$/;"	v	file:
stable_uptime	src/or/dirserv.c	/^static uint32_t stable_uptime = 0; \/* start at a safe value *\/$/;"	v	file:
start_daemon	src/common/util.c	/^start_daemon(void)$/;"	f
start_daemon_called	src/common/util.c	/^static int start_daemon_called = 0;$/;"	v	file:
start_of_accounting_period_after	src/or/hibernate.c	/^start_of_accounting_period_after(time_t now)$/;"	f	file:
start_of_accounting_period_containing	src/or/hibernate.c	/^start_of_accounting_period_containing(time_t now)$/;"	f	file:
start_of_bridge_stats_interval	src/or/geoip.c	/^static time_t start_of_bridge_stats_interval;$/;"	v	file:
start_of_buffer_stats_interval	src/or/rephist.c	/^static time_t start_of_buffer_stats_interval;$/;"	v	file:
start_of_conn_stats_interval	src/or/rephist.c	/^static time_t start_of_conn_stats_interval;$/;"	v	file:
start_of_dirreq_stats_interval	src/or/geoip.c	/^static time_t start_of_dirreq_stats_interval;$/;"	v	file:
start_of_downtime	src/or/rephist.c	/^  time_t start_of_downtime;$/;"	m	struct:or_history_t	file:
start_of_entry_stats_interval	src/or/geoip.c	/^static time_t start_of_entry_stats_interval;$/;"	v	file:
start_of_exit_stats_interval	src/or/rephist.c	/^static time_t start_of_exit_stats_interval;$/;"	v	file:
start_of_hs_stats_interval	src/or/rephist.c	/^static time_t start_of_hs_stats_interval;$/;"	v	file:
start_of_run	src/or/rephist.c	/^  time_t start_of_run;$/;"	m	struct:or_history_t	file:
start_of_served_descs_stats_interval	src/or/rephist.c	/^static time_t start_of_served_descs_stats_interval;$/;"	v	file:
start_writing_to_file	src/common/util.c	/^start_writing_to_file(const char *fname, int open_flags, int mode,$/;"	f
start_writing_to_stdio_file	src/common/util.c	/^start_writing_to_stdio_file(const char *fname, int open_flags, int mode,$/;"	f
started_at	src/or/cpuworker.c	/^  struct timeval started_at;$/;"	m	struct:cpuworker_reply_t	typeref:struct:cpuworker_reply_t::timeval	file:
started_at	src/or/cpuworker.c	/^  struct timeval started_at;$/;"	m	struct:cpuworker_request_t	typeref:struct:cpuworker_request_t::timeval	file:
started_here	src/or/or.h	/^  unsigned int started_here : 1;$/;"	m	struct:or_handshake_state_t
started_tracking_stability	src/or/rephist.c	/^static time_t started_tracking_stability = 0;$/;"	v	file:
state	src/common/tortls.h	/^  tor_tls_state_bitfield_t state : 3; \/**< The current SSL state,$/;"	m	struct:tor_tls_t
state	src/common/util.h	/^  uint32_t state;$/;"	m	struct:tor_weak_rng_t
state	src/common/workqueue.c	/^  void *state;$/;"	m	struct:workerthread_s	file:
state	src/ext/ed25519/donna/ed25519-randombytes.h	/^	uint32_t state[256];$/;"	m	struct:isaacp_state_t
state	src/or/channel.h	/^  channel_listener_state_t state;$/;"	m	struct:channel_listener_s
state	src/or/channel.h	/^  channel_state_t state;$/;"	m	struct:channel_s
state	src/or/connection_or.c	/^  const char *state;$/;"	m	struct:broken_state_count_t	file:
state	src/or/dns_structs.h	/^  uint8_t state; \/**< Is this cached entry pending\/done\/informative? *\/$/;"	m	struct:cached_resolve_t
state	src/or/geoip.c	/^  unsigned int state:3; \/**< State of this directory request. *\/$/;"	m	struct:dirreq_map_entry_t	file:
state	src/or/onion_fast.h	/^  uint8_t state[DIGEST_LEN];$/;"	m	struct:fast_handshake_state_t
state	src/or/or.h	/^  uint8_t state; \/**< Current state of this connection. *\/$/;"	m	struct:connection_t
state	src/or/or.h	/^  uint8_t state; \/**< Current status of this circuit. *\/$/;"	m	struct:circuit_t
state	src/or/or.h	/^  uint8_t state;$/;"	m	struct:crypt_path_t
state_abbrevs_	src/or/statefile.c	/^static config_abbrev_t state_abbrevs_[] = {$/;"	v	file:
state_extra_var	src/or/statefile.c	/^static config_var_t state_extra_var = {$/;"	v	file:
state_format	src/or/statefile.c	/^static const config_format_t state_format = {$/;"	v	file:
state_insert_entry_guard_helper	src/test/test_entrynodes.c	/^state_insert_entry_guard_helper(or_state_t *state,$/;"	f	file:
state_lines_free	src/test/test_entrynodes.c	/^state_lines_free(smartlist_t *entry_guard_lines)$/;"	f	file:
state_s	src/test/test_workqueue.c	/^typedef struct state_s {$/;"	s	file:
state_t	src/test/test_workqueue.c	/^} state_t;$/;"	t	typeref:struct:state_s	file:
state_transport_line_is_valid	src/or/statefile.c	/^state_transport_line_is_valid(const char *line)$/;"	f	file:
state_vars_	src/or/statefile.c	/^static config_var_t state_vars_[] = {$/;"	v	file:
stats_n_auth_challenge_cells_processed	src/or/channeltls.c	/^uint64_t stats_n_auth_challenge_cells_processed = 0;$/;"	v
stats_n_authenticate_cells_processed	src/or/channeltls.c	/^uint64_t stats_n_authenticate_cells_processed = 0;$/;"	v
stats_n_authorize_cells_processed	src/or/channeltls.c	/^uint64_t stats_n_authorize_cells_processed = 0;$/;"	v
stats_n_bytes_read	src/or/main.c	/^static uint64_t stats_n_bytes_read = 0;$/;"	v	file:
stats_n_bytes_written	src/or/main.c	/^static uint64_t stats_n_bytes_written = 0;$/;"	v	file:
stats_n_certs_cells_processed	src/or/channeltls.c	/^uint64_t stats_n_certs_cells_processed = 0;$/;"	v
stats_n_create_cells_processed	src/or/command.c	/^uint64_t stats_n_create_cells_processed = 0;$/;"	v
stats_n_created_cells_processed	src/or/command.c	/^uint64_t stats_n_created_cells_processed = 0;$/;"	v
stats_n_data_bytes_packaged	src/or/relay.c	/^uint64_t stats_n_data_bytes_packaged = 0;$/;"	v
stats_n_data_bytes_received	src/or/relay.c	/^uint64_t stats_n_data_bytes_received = 0;$/;"	v
stats_n_data_cells_packaged	src/or/relay.c	/^uint64_t stats_n_data_cells_packaged = 0;$/;"	v
stats_n_data_cells_received	src/or/relay.c	/^uint64_t stats_n_data_cells_received = 0;$/;"	v
stats_n_destroy_cells_processed	src/or/command.c	/^uint64_t stats_n_destroy_cells_processed = 0;$/;"	v
stats_n_netinfo_cells_processed	src/or/channeltls.c	/^uint64_t stats_n_netinfo_cells_processed = 0;$/;"	v
stats_n_padding_cells_processed	src/or/channeltls.c	/^uint64_t stats_n_padding_cells_processed = 0;$/;"	v
stats_n_relay_cells_delivered	src/or/relay.c	/^uint64_t stats_n_relay_cells_delivered = 0;$/;"	v
stats_n_relay_cells_processed	src/or/command.c	/^uint64_t stats_n_relay_cells_processed = 0;$/;"	v
stats_n_relay_cells_relayed	src/or/relay.c	/^uint64_t stats_n_relay_cells_relayed = 0;$/;"	v
stats_n_seconds_working	src/or/main.c	/^long stats_n_seconds_working = 0;$/;"	v
stats_n_versions_cells_processed	src/or/channeltls.c	/^uint64_t stats_n_versions_cells_processed = 0;$/;"	v
stats_n_vpadding_cells_processed	src/or/channeltls.c	/^uint64_t stats_n_vpadding_cells_processed = 0;$/;"	v
stats_prev_global_read_bucket	src/or/main.c	/^static int stats_prev_global_read_bucket;$/;"	v	file:
stats_prev_global_write_bucket	src/or/main.c	/^static int stats_prev_global_write_bucket;$/;"	v	file:
stats_prev_n_read	src/or/main.c	/^static uint64_t stats_prev_n_read = 0;$/;"	v	file:
stats_prev_n_written	src/or/main.c	/^static uint64_t stats_prev_n_written = 0;$/;"	v	file:
status	src/common/util.h	/^  int status;$/;"	m	struct:process_handle_t
status	src/or/or.h	/^  enum { VER_PRE=0, VER_RC=1, VER_RELEASE=2, } status;$/;"	m	struct:tor_version_t	typeref:enum:tor_version_t::__anon74
status	src/or/or.h	/^  routerstatus_t status; \/**< Underlying 'status' object for this router.$/;"	m	struct:vote_routerstatus_t
status_by_digest	src/or/dirserv.c	/^  digestmap_t *status_by_digest; \/**< Map from digest to router_status_t. *\/$/;"	m	struct:authdir_config_t	file:
status_tag	src/or/or.h	/^  char status_tag[MAX_STATUS_TAG_LEN];$/;"	m	struct:tor_version_t
status_tests	src/test/test_status.c	/^struct testcase_t status_tests[] = {$/;"	v	typeref:struct:testcase_t
status_vote_current_consensus_ns_test	src/test/test_dir_handle_get.c	/^status_vote_current_consensus_ns_test(char **header, char **body, size_t *body_len)$/;"	f	file:
status_vote_current_d_test	src/test/test_dir_handle_get.c	/^status_vote_current_d_test(char **header, char **body, size_t *body_l)$/;"	f	file:
status_vote_next_consensus_signatures_test	src/test/test_dir_handle_get.c	/^status_vote_next_consensus_signatures_test(char **header, char **body, size_t *body_used)$/;"	f	file:
status_vote_next_consensus_test	src/test/test_dir_handle_get.c	/^status_vote_next_consensus_test(char **header, char **body, size_t *body_used)$/;"	f	file:
status_vote_next_d_test	src/test/test_dir_handle_get.c	/^status_vote_next_d_test(char **header, char **body, size_t *body_l)$/;"	f	file:
stderr_handle	src/common/util.h	/^  FILE *stderr_handle;$/;"	m	struct:process_handle_t
stderr_pipe	src/common/util.h	/^  HANDLE stderr_pipe;$/;"	m	struct:process_handle_t
stderr_pipe	src/common/util.h	/^  int stderr_pipe;$/;"	m	struct:process_handle_t
stdin_handle	src/common/util.h	/^  FILE *stdin_handle;$/;"	m	struct:process_handle_t
stdin_pipe	src/common/util.h	/^  HANDLE stdin_pipe;$/;"	m	struct:process_handle_t
stdin_pipe	src/common/util.h	/^  int stdin_pipe;$/;"	m	struct:process_handle_t
stdio_file	src/common/util.c	/^  FILE *stdio_file; \/**< stdio wrapper for <b>fd<\/b>. *\/$/;"	m	struct:open_file_t	file:
stdout_handle	src/common/util.h	/^  FILE *stdout_handle;$/;"	m	struct:process_handle_t
stdout_pipe	src/common/util.h	/^  HANDLE stdout_pipe;$/;"	m	struct:process_handle_t
stdout_pipe	src/common/util.h	/^  int stdout_pipe;$/;"	m	struct:process_handle_t
store_len	src/or/or.h	/^  size_t store_len;$/;"	m	struct:desc_store_t
store_limb	src/ext/curve25519_donna/curve25519-donna-c64.c	/^store_limb(u8 *out, limb in) {$/;"	f	file:
store_type_t	src/or/or.h	/^typedef enum store_type_t {$/;"	g
store_type_t	src/or/or.h	/^} store_type_t;$/;"	t	typeref:enum:store_type_t
str_num_before	src/common/util.c	/^str_num_before(const char *s, char ch)$/;"	f	file:
strcasecmp	src/common/compat.h	/^#define strcasecmp /;"	d
strcasecmpend	src/common/util.c	/^strcasecmpend(const char *s1, const char *s2)$/;"	f
strcasecmpstart	src/common/util.c	/^strcasecmpstart(const char *s1, const char *s2)$/;"	f
strcmp_len	src/common/util.c	/^strcmp_len(const char *s1, const char *s2, size_t s1_len)$/;"	f
strcmp_opt	src/common/util.c	/^strcmp_opt(const char *s1, const char *s2)$/;"	f
strcmpend	src/common/util.c	/^strcmpend(const char *s1, const char *s2)$/;"	f
strcmpstart	src/common/util.c	/^strcmpstart(const char *s1, const char *s2)$/;"	f
stream	src/common/torgzip.c	/^  struct z_stream_s stream; \/**< The zlib stream *\/$/;"	m	struct:tor_zlib_state_t	typeref:struct:tor_zlib_state_t::z_stream_s	file:
stream_choice_rng	src/or/relay.c	/^static tor_weak_rng_t stream_choice_rng = TOR_WEAK_RNG_INIT;$/;"	v	file:
stream_choice_seed_weak_rng	src/or/relay.c	/^stream_choice_seed_weak_rng(void)$/;"	f
stream_end_reason_to_control_string	src/or/reasons.c	/^stream_end_reason_to_control_string(int reason)$/;"	f
stream_end_reason_to_socks5_response	src/or/reasons.c	/^stream_end_reason_to_socks5_response(int reason)$/;"	f
stream_end_reason_to_string	src/or/reasons.c	/^stream_end_reason_to_string(int reason)$/;"	f
stream_id	src/or/connection_edge.h	/^  uint16_t stream_id;$/;"	m	struct:begin_cell_t
stream_id	src/or/or.h	/^  streamid_t stream_id; \/**< The stream ID used for this edge connection on its$/;"	m	struct:edge_connection_t
stream_id	src/or/or.h	/^  streamid_t stream_id; \/**< Which stream is this cell associated with? *\/$/;"	m	struct:__anon40
stream_status	src/common/util.h	/^enum stream_status {$/;"	g
stream_status_event_t	src/or/or.h	/^typedef enum stream_status_event_t {$/;"	g
stream_status_event_t	src/or/or.h	/^} stream_status_event_t;$/;"	t	typeref:enum:stream_status_event_t
stream_status_to_string	src/common/util.c	/^stream_status_to_string(enum stream_status stream_status)$/;"	f
streamid_t	src/or/or.h	/^typedef uint16_t streamid_t;$/;"	t
streams_blocked_on_n_chan	src/or/or.h	/^  unsigned int streams_blocked_on_n_chan : 1;$/;"	m	struct:circuit_t
streams_blocked_on_p_chan	src/or/or.h	/^  unsigned int streams_blocked_on_p_chan : 1;$/;"	m	struct:circuit_t
string_is_C_identifier	src/common/util.c	/^string_is_C_identifier(const char *string)$/;"	f
string_is_key_value	src/common/util.c	/^string_is_key_value(int severity, const char *string)$/;"	f
string_is_valid_hostname	src/common/util.c	/^string_is_valid_hostname(const char *string)$/;"	f
string_is_valid_ipv4_address	src/common/util.c	/^string_is_valid_ipv4_address(const char *string)$/;"	f
string_is_valid_ipv6_address	src/common/util.c	/^string_is_valid_ipv6_address(const char *string)$/;"	f
strlcat	src/common/compat.h	/^#undef strlcat$/;"	d
strlcat	src/ext/strlcat.c	/^strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	src/common/compat.h	/^#undef strlcpy$/;"	d
strlcpy	src/ext/strlcpy.c	/^size_t strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strmap_assign_key	src/common/container.c	/^strmap_assign_key(strmap_entry_t *ent, const char *key)$/;"	f	file:
strmap_assign_tmp_key	src/common/container.c	/^strmap_assign_tmp_key(strmap_entry_t *ent, const char *key)$/;"	f	file:
strmap_entries_eq	src/common/container.c	/^strmap_entries_eq(const strmap_entry_t *a, const strmap_entry_t *b)$/;"	f	file:
strmap_entry_free	src/common/container.c	/^strmap_entry_free(strmap_entry_t *ent)$/;"	f	file:
strmap_entry_hash	src/common/container.c	/^strmap_entry_hash(const strmap_entry_t *a)$/;"	f	file:
strmap_free	src/test/test_routerset.c	/^NS(strmap_free)(strmap_t *map, void (*free_val)(void*))$/;"	f
strmap_get_lc	src/common/container.c	/^strmap_get_lc(const strmap_t *map, const char *key)$/;"	f
strmap_remove_lc	src/common/container.c	/^strmap_remove_lc(strmap_t *map, const char *key)$/;"	f
strmap_set_lc	src/common/container.c	/^strmap_set_lc(strmap_t *map, const char *key, void *val)$/;"	f
strncasecmp	src/common/compat.h	/^#define strncasecmp /;"	d
strndup	src/common/util.c	/^ #undef strndup$/;"	d	file:
strnlen	src/test/test_util.c	/^strnlen(const char *s, size_t len)$/;"	f	file:
strtok_helper	src/common/compat.c	/^strtok_helper(char *cp, const char *sep)$/;"	f	file:
sub256_modm_batch	src/ext/ed25519/donna/modm-donna-32bit.h	/^sub256_modm_batch(bignum256modm out, const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
sub256_modm_batch	src/ext/ed25519/donna/modm-donna-64bit.h	/^sub256_modm_batch(bignum256modm out, const bignum256modm a, const bignum256modm b, size_t limbsize) {$/;"	f
success	src/or/cpuworker.c	/^  uint8_t success;$/;"	m	struct:cpuworker_reply_t	file:
successful_circuits_closed	src/or/entrynodes.h	/^  double successful_circuits_closed; \/**< Number of circuits that carried$/;"	m	struct:entry_guard_t
successful_uploads	src/or/or.h	/^  smartlist_t *successful_uploads;$/;"	m	struct:rend_service_descriptor_t
sum_up_cell_stats_by_command	src/or/control.c	/^sum_up_cell_stats_by_command(circuit_t *circ, cell_stats_t *cell_stats)$/;"	f
supported_methods	src/or/or.h	/^  smartlist_t *supported_methods;$/;"	m	struct:networkstatus_t
suppress_libevent_log_msg	src/common/compat_libevent.c	/^suppress_libevent_log_msg(const char *msg)$/;"	f
suppress_msg	src/common/compat_libevent.c	/^static const char *suppress_msg = NULL;$/;"	v	file:
svn_revision	src/or/or.h	/^  int svn_revision;$/;"	m	struct:tor_version_t
swap_conditional	src/ext/curve25519_donna/curve25519-donna-c64.c	/^swap_conditional(limb a[5], limb b[5], limb iswap) {$/;"	f	file:
sweep_bridge_list	src/or/entrynodes.c	/^sweep_bridge_list(void)$/;"	f
sweep_proxy_list	src/or/transports.c	/^sweep_proxy_list(void)$/;"	f
sweep_transport_list	src/or/transports.c	/^sweep_transport_list(void)$/;"	f
switch_id	src/common/compat.c	/^switch_id(const char *user)$/;"	f
switch_logs_debug	src/common/log.c	/^switch_logs_debug(void)$/;"	f
syscall	src/common/sandbox.h	/^  int syscall;$/;"	m	struct:smp_param
syscall_cb_buf	src/common/sandbox.c	/^static void *syscall_cb_buf[MAX_DEPTH];$/;"	v	file:
syslog_count	src/common/log.c	/^static int syslog_count = 0;$/;"	v	file:
systemd_watchdog_callback	src/or/main.c	/^systemd_watchdog_callback(periodic_timer_t *timer, void *arg)$/;"	f	file:
systemd_watchdog_timer	src/or/main.c	/^static periodic_timer_t *systemd_watchdog_timer = NULL;$/;"	v	file:
t	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_p1p1_t
t	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_t
t	src/or/routerparse.c	/^  const char *t;$/;"	m	struct:token_rule_t	file:
t2d	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 ysubx, xaddy, t2d;$/;"	m	struct:ge25519_niels_t
t2d	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 ysubx, xaddy, z, t2d;$/;"	m	struct:ge25519_pniels_t
t_key	src/or/onion_ntor.c	/^  const char *t_key;$/;"	m	struct:tweakset_t	file:
t_mac	src/or/onion_ntor.c	/^  const char *t_mac;$/;"	m	struct:tweakset_t	file:
t_verify	src/or/onion_ntor.c	/^  const char *t_verify;$/;"	m	struct:tweakset_t	file:
tag	src/or/or.h	/^  uint16_t tag;$/;"	m	struct:__anon50
tail	src/or/buffers.h	/^  chunk_t *tail; \/**< Last chunk in the list, or NULL for none. *\/$/;"	m	struct:buf_t
takes_argument	src/or/config.c	/^  takes_argument_t takes_argument;$/;"	m	struct:__anon7	file:
takes_argument_t	src/or/config.c	/^} takes_argument_t;$/;"	t	typeref:enum:__anon6	file:
tap	src/or/or.h	/^    crypto_dh_t *tap;$/;"	m	union:__anon50::__anon51
teardown_capture_of_logs	src/test/log_test_helpers.c	/^teardown_capture_of_logs(int prev)$/;"	f
tell_controller_about_resolved_result	src/or/connection_edge.c	/^tell_controller_about_resolved_result(entry_connection_t *conn,$/;"	f	file:
temp_callback	src/test/test_util_process.c	/^void temp_callback(int r, void *s)$/;"	f	file:
temp_dir	src/test/testing_common.c	/^static char temp_dir[256];$/;"	v	file:
temp_dir_setup_in_pid	src/test/testing_common.c	/^static pid_t temp_dir_setup_in_pid = 0;$/;"	v	file:
tempname	src/common/util.c	/^  char *tempname; \/**< Name of the temporary file. *\/$/;"	m	struct:open_file_t	file:
test_CL_PORT_ALLOW_EXTRA_LISTENADDR	src/test/test_config.c	/^#define test_CL_PORT_ALLOW_EXTRA_LISTENADDR /;"	d	file:
test_CL_PORT_DFLT_GROUP_WRITABLE	src/test/test_config.c	/^#define test_CL_PORT_DFLT_GROUP_WRITABLE /;"	d	file:
test_CL_PORT_FORBID_NONLOCAL	src/test/test_config.c	/^#define test_CL_PORT_FORBID_NONLOCAL /;"	d	file:
test_CL_PORT_IS_UNIXSOCKET	src/test/test_config.c	/^#define test_CL_PORT_IS_UNIXSOCKET /;"	d	file:
test_CL_PORT_NO_STREAM_OPTIONS	src/test/test_config.c	/^#define test_CL_PORT_NO_STREAM_OPTIONS /;"	d	file:
test_CL_PORT_SERVER_OPTIONS	src/test/test_config.c	/^#define test_CL_PORT_SERVER_OPTIONS /;"	d	file:
test_CL_PORT_TAKES_HOSTNAMES	src/test/test_config.c	/^#define test_CL_PORT_TAKES_HOSTNAMES /;"	d	file:
test_CL_PORT_WARN_NONLOCAL	src/test/test_config.c	/^#define test_CL_PORT_WARN_NONLOCAL /;"	d	file:
test_accounting_limits	src/test/test_accounting.c	/^test_accounting_limits(void *arg)$/;"	f	file:
test_add_onion_helper_keyarg	src/test/test_controller.c	/^test_add_onion_helper_keyarg(void *arg)$/;"	f	file:
test_addr_basic	src/test/test_addr.c	/^test_addr_basic(void *arg)$/;"	f	file:
test_addr_compare	src/test/test_addr.c	/^#define test_addr_compare(/;"	d	file:
test_addr_compare_masked	src/test/test_addr.c	/^#define test_addr_compare_masked(/;"	d	file:
test_addr_dup_ip	src/test/test_addr.c	/^test_addr_dup_ip(void *arg)$/;"	f	file:
test_addr_ip6_helpers	src/test/test_addr.c	/^test_addr_ip6_helpers(void *arg)$/;"	f	file:
test_addr_is_loopback	src/test/test_addr.c	/^test_addr_is_loopback(void *data)$/;"	f	file:
test_addr_localname	src/test/test_addr.c	/^test_addr_localname(void *arg)$/;"	f	file:
test_addr_make_null	src/test/test_addr.c	/^test_addr_make_null(void *data)$/;"	f	file:
test_addr_mask_ports_parse	src/test/test_addr.c	/^#define test_addr_mask_ports_parse(/;"	d	file:
test_addr_parse	src/test/test_addr.c	/^test_addr_parse(void *arg)$/;"	f	file:
test_addr_sockaddr_to_str	src/test/test_addr.c	/^test_addr_sockaddr_to_str(void *arg)$/;"	f	file:
test_address_get_if_addrs_ifaddrs	src/test/test_address.c	/^test_address_get_if_addrs_ifaddrs(void *arg)$/;"	f	file:
test_address_get_if_addrs_ioctl	src/test/test_address.c	/^test_address_get_if_addrs_ioctl(void *arg)$/;"	f	file:
test_address_get_if_addrs_win32	src/test/test_address.c	/^test_address_get_if_addrs_win32(void *arg)$/;"	f	file:
test_address_ifaddrs_to_smartlist	src/test/test_address.c	/^test_address_ifaddrs_to_smartlist(void *arg)$/;"	f	file:
test_address_ifreq_to_smartlist	src/test/test_address.c	/^test_address_ifreq_to_smartlist(void *arg)$/;"	f	file:
test_address_ip_adapter_addresses_to_smartlist	src/test/test_address.c	/^test_address_ip_adapter_addresses_to_smartlist(void *arg)$/;"	f	file:
test_address_tor_addr_eq_ipv4h	src/test/test_address.c	/^test_address_tor_addr_eq_ipv4h(void *ignored)$/;"	f	file:
test_address_tor_addr_to_in	src/test/test_address.c	/^test_address_tor_addr_to_in(void *ignored)$/;"	f	file:
test_address_tor_addr_to_in6	src/test/test_address.c	/^test_address_tor_addr_to_in6(void *ignored)$/;"	f	file:
test_address_tor_addr_to_ipv4n	src/test/test_address.c	/^test_address_tor_addr_to_ipv4n(void *ignored)$/;"	f	file:
test_address_tor_addr_to_mapped_ipv4h	src/test/test_address.c	/^test_address_tor_addr_to_mapped_ipv4h(void *ignored)$/;"	f	file:
test_address_udp_socket_trick_blackbox	src/test/test_address.c	/^test_address_udp_socket_trick_blackbox(void *arg)$/;"	f	file:
test_address_udp_socket_trick_whitebox	src/test/test_address.c	/^test_address_udp_socket_trick_whitebox(void *arg)$/;"	f	file:
test_adds	src/ext/ed25519/donna/test-internals.c	/^test_adds(void) {$/;"	f	file:
test_aes_cipher_free	src/test/test_aes.c	/^test_aes_cipher_free(void *ignored)$/;"	f	file:
test_array	src/test/test.c	/^static struct testcase_t test_array[] = {$/;"	v	typeref:struct:testcase_t	file:
test_bad_onion_handshake	src/test/test.c	/^test_bad_onion_handshake(void *arg)$/;"	f	file:
test_buffer	src/test/test_replay.c	/^static const char *test_buffer =$/;"	v	file:
test_buffer_allocation_tracking	src/test/test_buffers.c	/^test_buffer_allocation_tracking(void *arg)$/;"	f	file:
test_buffer_copy	src/test/test_buffers.c	/^test_buffer_copy(void *arg)$/;"	f	file:
test_buffer_ext_or_cmd	src/test/test_buffers.c	/^test_buffer_ext_or_cmd(void *arg)$/;"	f	file:
test_buffer_pullup	src/test/test_buffers.c	/^test_buffer_pullup(void *arg)$/;"	f	file:
test_buffer_time_tracking	src/test/test_buffers.c	/^test_buffer_time_tracking(void *arg)$/;"	f	file:
test_buffers_basic	src/test/test_buffers.c	/^test_buffers_basic(void *arg)$/;"	f	file:
test_buffers_tls_read_mocked	src/test/test_buffers.c	/^test_buffers_tls_read_mocked(void *arg)$/;"	f	file:
test_buffers_zlib	src/test/test_buffers.c	/^test_buffers_zlib(void *arg)$/;"	f	file:
test_buffers_zlib_fin_at_chunk_end	src/test/test_buffers.c	/^test_buffers_zlib_fin_at_chunk_end(void *arg)$/;"	f	file:
test_buffers_zlib_fin_with_nil	src/test/test_buffers.c	/^test_buffers_zlib_fin_with_nil(void *arg)$/;"	f	file:
test_buffers_zlib_impl	src/test/test_buffers.c	/^test_buffers_zlib_impl(int finalize_with_nil)$/;"	f	file:
test_cells_written	src/test/test_channel.c	/^static int test_cells_written = 0;$/;"	v	file:
test_cfmt_begin_cells	src/test/test_cell_formats.c	/^test_cfmt_begin_cells(void *arg)$/;"	f	file:
test_cfmt_connected_cells	src/test/test_cell_formats.c	/^test_cfmt_connected_cells(void *arg)$/;"	f	file:
test_cfmt_create_cells	src/test/test_cell_formats.c	/^test_cfmt_create_cells(void *arg)$/;"	f	file:
test_cfmt_created_cells	src/test/test_cell_formats.c	/^test_cfmt_created_cells(void *arg)$/;"	f	file:
test_cfmt_extend_cells	src/test/test_cell_formats.c	/^test_cfmt_extend_cells(void *arg)$/;"	f	file:
test_cfmt_extended_cells	src/test/test_cell_formats.c	/^test_cfmt_extended_cells(void *arg)$/;"	f	file:
test_cfmt_is_destroy	src/test/test_cell_formats.c	/^test_cfmt_is_destroy(void *arg)$/;"	f	file:
test_cfmt_relay_header	src/test/test_cell_formats.c	/^test_cfmt_relay_header(void *arg)$/;"	f	file:
test_cfmt_resolved_cells	src/test/test_cell_formats.c	/^test_cfmt_resolved_cells(void *arg)$/;"	f	file:
test_chan_accept_cells	src/test/test_channel.c	/^static int test_chan_accept_cells = 0;$/;"	v	file:
test_chan_fixed_cells_recved	src/test/test_channel.c	/^static int test_chan_fixed_cells_recved = 0;$/;"	v	file:
test_chan_var_cells_recved	src/test/test_channel.c	/^static int test_chan_var_cells_recved = 0;$/;"	v	file:
test_channel_dumpstats	src/test/test_channel.c	/^test_channel_dumpstats(void *arg)$/;"	f	file:
test_channel_flush	src/test/test_channel.c	/^test_channel_flush(void *arg)$/;"	f	file:
test_channel_flushmux	src/test/test_channel.c	/^test_channel_flushmux(void *arg)$/;"	f	file:
test_channel_incoming	src/test/test_channel.c	/^test_channel_incoming(void *arg)$/;"	f	file:
test_channel_lifecycle	src/test/test_channel.c	/^test_channel_lifecycle(void *arg)$/;"	f	file:
test_channel_lifecycle_2	src/test/test_channel.c	/^test_channel_lifecycle_2(void *arg)$/;"	f	file:
test_channel_multi	src/test/test_channel.c	/^test_channel_multi(void *arg)$/;"	f	file:
test_channel_queue_impossible	src/test/test_channel.c	/^test_channel_queue_impossible(void *arg)$/;"	f	file:
test_channel_queue_size	src/test/test_channel.c	/^test_channel_queue_size(void *arg)$/;"	f	file:
test_channel_write	src/test/test_channel.c	/^test_channel_write(void *arg)$/;"	f	file:
test_channeltls_create	src/test/test_channeltls.c	/^test_channeltls_create(void *arg)$/;"	f	file:
test_channeltls_num_bytes_queued	src/test/test_channeltls.c	/^test_channeltls_num_bytes_queued(void *arg)$/;"	f	file:
test_channeltls_overhead_estimate	src/test/test_channeltls.c	/^test_channeltls_overhead_estimate(void *arg)$/;"	f	file:
test_checkdir_perms	src/test/test_checkdir.c	/^test_checkdir_perms(void *testdata)$/;"	f	file:
test_choose_random_entry_no_guards	src/test/test_entrynodes.c	/^test_choose_random_entry_no_guards(void *arg)$/;"	f	file:
test_choose_random_entry_one_possible_guard	src/test/test_entrynodes.c	/^test_choose_random_entry_one_possible_guard(void *arg)$/;"	f	file:
test_circuit_n_cells	src/test/test_cell_queue.c	/^test_circuit_n_cells(void *arg)$/;"	f	file:
test_circuit_timeout	src/test/test.c	/^test_circuit_timeout(void *arg)$/;"	f	file:
test_clist_maps	src/test/test_circuitlist.c	/^test_clist_maps(void *arg)$/;"	f	file:
test_cmux_cells	src/test/test_channel.c	/^static unsigned int test_cmux_cells = 0;$/;"	v	file:
test_cmux_destroy_cell_queue	src/test/test_circuitmux.c	/^test_cmux_destroy_cell_queue(void *arg)$/;"	f	file:
test_cntev_append_cell_stats	src/test/test_controller_events.c	/^test_cntev_append_cell_stats(void *arg)$/;"	f	file:
test_cntev_bucket_millis_empty	src/test/test_controller_events.c	/^test_cntev_bucket_millis_empty(void *arg)$/;"	f	file:
test_cntev_bucket_note_empty	src/test/test_controller_events.c	/^test_cntev_bucket_note_empty(void *arg)$/;"	f	file:
test_cntev_event_mask	src/test/test_controller_events.c	/^test_cntev_event_mask(void *arg)$/;"	f	file:
test_cntev_format_cell_stats	src/test/test_controller_events.c	/^test_cntev_format_cell_stats(void *arg)$/;"	f	file:
test_cntev_sum_up_cell_stats	src/test/test_controller_events.c	/^test_cntev_sum_up_cell_stats(void *arg)$/;"	f	file:
test_compat_libevent_header_version	src/test/test_compat_libevent.c	/^test_compat_libevent_header_version(void *ignored)$/;"	f	file:
test_compat_libevent_le_versions_compatibility	src/test/test_compat_libevent.c	/^test_compat_libevent_le_versions_compatibility(void *ignored)$/;"	f	file:
test_compat_libevent_logging_callback	src/test/test_compat_libevent.c	/^test_compat_libevent_logging_callback(void *ignored)$/;"	f	file:
test_compat_libevent_tor_decode_libevent_version	src/test/test_compat_libevent.c	/^test_compat_libevent_tor_decode_libevent_version(void *ignored)$/;"	f	file:
test_config_adding_dir_servers	src/test/test_config.c	/^test_config_adding_dir_servers(void *arg)$/;"	f	file:
test_config_addressmap	src/test/test_config.c	/^test_config_addressmap(void *arg)$/;"	f	file:
test_config_check_or_create_data_subdir	src/test/test_config.c	/^test_config_check_or_create_data_subdir(void *arg)$/;"	f	file:
test_config_fix_my_family	src/test/test_config.c	/^test_config_fix_my_family(void *arg)$/;"	f	file:
test_config_options_act_Bridge	src/test/test_config.c	/^test_config_options_act_Bridge(void *arg)$/;"	f	file:
test_config_options_act_BridgePassword	src/test/test_config.c	/^test_config_options_act_BridgePassword(void *arg)$/;"	f	file:
test_config_options_act_BridgePassword_error	src/test/test_config.c	/^test_config_options_act_BridgePassword_error(void *arg)$/;"	f	file:
test_config_options_act_BridgeRelay	src/test/test_config.c	/^test_config_options_act_BridgeRelay(void *arg)$/;"	f	file:
test_config_options_act_Bridge_err	src/test/test_config.c	/^test_config_options_act_Bridge_err(void *arg)$/;"	f	file:
test_config_options_act_ClientTransportPlugin_err	src/test/test_config.c	/^test_config_options_act_ClientTransportPlugin_err(void *arg)$/;"	f	file:
test_config_options_act_DirAuthority_line_err	src/test/test_config.c	/^test_config_options_act_DirAuthority_line_err(void *arg)$/;"	f	file:
test_config_options_act_DirPortFrontPage	src/test/test_config.c	/^test_config_options_act_DirPortFrontPage(void *arg)$/;"	f	file:
test_config_options_act_EntryNodes	src/test/test_config.c	/^test_config_options_act_EntryNodes(void *arg)$/;"	f	file:
test_config_options_act_ExcludeNodes	src/test/test_config.c	/^test_config_options_act_ExcludeNodes(void *arg)$/;"	f	file:
test_config_options_act_RunAsDaemon	src/test/test_config.c	/^test_config_options_act_RunAsDaemon(void *arg)$/;"	f	file:
test_config_options_act_ServerTransportPlugin_err	src/test/test_config.c	/^test_config_options_act_ServerTransportPlugin_err(void *arg)$/;"	f	file:
test_config_options_act_Statistics_private_server_mode	src/test/test_config.c	/^test_config_options_act_Statistics_private_server_mode(void *arg)$/;"	f	file:
test_config_options_act_Tor2webMode_err	src/test/test_config.c	/^test_config_options_act_Tor2webMode_err(void *arg)$/;"	f	file:
test_config_options_act_VirtualAddrNetworkIPv4	src/test/test_config.c	/^test_config_options_act_VirtualAddrNetworkIPv4(void *arg)$/;"	f	file:
test_config_options_act_VirtualAddrNetworkIPv6	src/test/test_config.c	/^test_config_options_act_VirtualAddrNetworkIPv6(void *arg)$/;"	f	file:
test_config_options_act_accounting_is_enabled	src/test/test_config.c	/^test_config_options_act_accounting_is_enabled(void *arg)$/;"	f	file:
test_config_options_act_accounting_parse_options_error	src/test/test_config.c	/^test_config_options_act_accounting_parse_options_error(void *arg)$/;"	f	file:
test_config_options_act_calls_update_router_when_changes_status	src/test/test_config.c	/^test_config_options_act_calls_update_router_when_changes_status(void *arg)$/;"	f	file:
test_config_options_act_cell_ewma_disabled	src/test/test_config.c	/^test_config_options_act_cell_ewma_disabled(void *arg)$/;"	f	file:
test_config_options_act_cell_ewma_enabled	src/test/test_config.c	/^test_config_options_act_cell_ewma_enabled(void *arg)$/;"	f	file:
test_config_options_act_circuit_change_by_Bridges_line_update	src/test/test_config.c	/^test_config_options_act_circuit_change_by_Bridges_line_update(void *arg)$/;"	f	file:
test_config_options_act_circuit_change_by_Nodes_update	src/test/test_config.c	/^test_config_options_act_circuit_change_by_Nodes_update(void *arg)$/;"	f	file:
test_config_options_act_circuit_change_by_UseBridges	src/test/test_config.c	/^test_config_options_act_circuit_change_by_UseBridges(void *arg)$/;"	f	file:
test_config_options_act_dirvote_recalc_if_mode_v3_changes	src/test/test_config.c	/^test_config_options_act_dirvote_recalc_if_mode_v3_changes(void *arg)$/;"	f	file:
test_config_options_act_disable_Statistics_public_server_mode	src/test/test_config.c	/^test_config_options_act_disable_Statistics_public_server_mode(void *arg)$/;"	f	file:
test_config_options_act_disable_statistics_geoip_dirreq_stats_term	src/test/test_config.c	/^test_config_options_act_disable_statistics_geoip_dirreq_stats_term(void *arg)$/;"	f	file:
test_config_options_act_enable_Statistics_public_server_mode	src/test/test_config.c	/^test_config_options_act_enable_Statistics_public_server_mode(void *arg)$/;"	f	file:
test_config_options_act_inform_testing_reachability	src/test/test_config.c	/^test_config_options_act_inform_testing_reachability(void *arg)$/;"	f	file:
test_config_options_act_init_control_cookie_authentication_error	src/test/test_config.c	/^test_config_options_act_init_control_cookie_authentication_error(void *arg)$/;"	f	file:
test_config_options_act_init_ext_or_cookie_authentication_err	src/test/test_config.c	/^test_config_options_act_init_ext_or_cookie_authentication_err(void *arg)$/;"	f	file:
test_config_options_act_init_key_error	src/test/test_config.c	/^test_config_options_act_init_key_error(void *arg)$/;"	f	file:
test_config_options_act_no_dirvote_recalc_if_mode_v3_no_changes	src/test/test_config.c	/^test_config_options_act_no_dirvote_recalc_if_mode_v3_no_changes(void *arg)$/;"	f	file:
test_config_options_act_no_dirvote_recalc_if_no_old_options	src/test/test_config.c	/^test_config_options_act_no_dirvote_recalc_if_no_old_options(void *arg)$/;"	f	file:
test_config_options_act_no_geoIP_db_found_to_mesure_entry_node	src/test/test_config.c	/^test_config_options_act_no_geoIP_db_found_to_mesure_entry_node(void *arg)$/;"	f	file:
test_config_options_act_not_DisableDebuggerAttachment	src/test/test_config.c	/^test_config_options_act_not_DisableDebuggerAttachment(void *arg)$/;"	f	file:
test_config_options_act_options_transit_req_fresh_tls_cxt	src/test/test_config.c	/^test_config_options_act_options_transit_req_fresh_tls_cxt(void *arg)$/;"	f	file:
test_config_options_act_options_transit_req_fresh_tls_cxt_error	src/test/test_config.c	/^test_config_options_act_options_transit_req_fresh_tls_cxt_error(void *arg)$/;"	f	file:
test_config_options_act_options_transit_req_fresh_tls_cxt_fail	src/test/test_config.c	/^test_config_options_act_options_transit_req_fresh_tls_cxt_fail(void *arg)$/;"	f	file:
test_config_options_act_or_state_load_err	src/test/test_config.c	/^test_config_options_act_or_state_load_err(void *arg)$/;"	f	file:
test_config_options_act_parse_outbound_addresses_error	src/test/test_config.c	/^test_config_options_act_parse_outbound_addresses_error(void *arg)$/;"	f	file:
test_config_options_act_policies_parse_from_options_error	src/test/test_config.c	/^test_config_options_act_policies_parse_from_options_error(void *arg)$/;"	f	file:
test_config_options_act_pt_configure_remaining_proxies	src/test/test_config.c	/^test_config_options_act_pt_configure_remaining_proxies(void *arg)$/;"	f	file:
test_config_options_act_rend_config_services_err	src/test/test_config.c	/^test_config_options_act_rend_config_services_err(void *arg)$/;"	f	file:
test_config_options_act_rend_parse_service_authorization_err	src/test/test_config.c	/^test_config_options_act_rend_parse_service_authorization_err(void *arg)$/;"	f	file:
test_config_options_act_rend_service_load_all_keys_error	src/test/test_config.c	/^test_config_options_act_rend_service_load_all_keys_error(void *arg)$/;"	f	file:
test_config_options_act_revise_automap_entries	src/test/test_config.c	/^test_config_options_act_revise_automap_entries(void *arg)$/;"	f	file:
test_config_options_act_routerset_add_unknown_ccs_error	src/test/test_config.c	/^test_config_options_act_routerset_add_unknown_ccs_error(void *arg)$/;"	f	file:
test_config_options_act_transition_affects_workers_cpu_init	src/test/test_config.c	/^test_config_options_act_transition_affects_workers_cpu_init(void *arg)$/;"	f	file:
test_config_options_act_transition_affects_workers_cpu_init_error	src/test/test_config.c	/^test_config_options_act_transition_affects_workers_cpu_init_error(void *arg)$/;"	f	file:
test_config_options_act_try_locking_err	src/test/test_config.c	/^test_config_options_act_try_locking_err(void *arg)$/;"	f	file:
test_config_options_act_update_token_buckets_PerConnBWRate_change	src/test/test_config.c	/^test_config_options_act_update_token_buckets_PerConnBWRate_change(void *arg)$/;"	f	file:
test_config_options_act_with_NULL_old_options	src/test/test_config.c	/^test_config_options_act_with_NULL_old_options(void *arg)$/;"	f	file:
test_config_options_act_write_pidfile	src/test/test_config.c	/^test_config_options_act_write_pidfile(void *arg)$/;"	f	file:
test_config_parse_bridge_line	src/test/test_config.c	/^test_config_parse_bridge_line(void *arg)$/;"	f	file:
test_config_parse_port_config__listenaddress	src/test/test_config.c	/^test_config_parse_port_config__listenaddress(void *data)$/;"	f	file:
test_config_parse_port_config__ports	src/test/test_config.c	/^test_config_parse_port_config__ports(void *data)$/;"	f	file:
test_config_parse_transport_options_line	src/test/test_config.c	/^test_config_parse_transport_options_line(void *arg)$/;"	f	file:
test_config_parse_transport_plugin_line	src/test/test_config.c	/^test_config_parse_transport_plugin_line(void *arg)$/;"	f	file:
test_config_resolve_my_address	src/test/test_config.c	/^test_config_resolve_my_address(void *arg)$/;"	f	file:
test_config_write_to_data_subdir	src/test/test_config.c	/^test_config_write_to_data_subdir(void *arg)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_to_port0	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_to_port0(void *data)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_exit_doesnt_really_exist	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_exit_doesnt_really_exist(void *data)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_exit_is_allowed_but_malformed	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_exit_is_allowed_but_malformed(void *data)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_hostname_is_bogus	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_hostname_is_bogus(void *data)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_hostname_is_dns_exit	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_hostname_is_dns_exit(void *data)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_hostname_is_exit_but_not_remapped	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_hostname_is_exit_but_not_remapped(void *data)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_hostname_is_unallowed_exit	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_when_hostname_is_unallowed_exit(void *data)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_with_answer	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_with_answer(void *data)$/;"	f	file:
test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_with_error	src/test/test_connection_edge_ap_handshake.c	/^test_conn_edge_ap_handshake_rewrite_and_attach_closes_conn_with_error(void *data)$/;"	f	file:
test_consensus_for_umbw	src/test/test_dir.c	/^test_consensus_for_umbw(networkstatus_t *con, time_t now)$/;"	f	file:
test_consensus_for_v3ns	src/test/test_dir.c	/^test_consensus_for_v3ns(networkstatus_t *con, time_t now)$/;"	f	file:
test_container_bitarray	src/test/test_containers.c	/^test_container_bitarray(void *arg)$/;"	f	file:
test_container_di_map	src/test/test_containers.c	/^test_container_di_map(void *arg)$/;"	f	file:
test_container_digestset	src/test/test_containers.c	/^test_container_digestset(void *arg)$/;"	f	file:
test_container_fp_pair_map	src/test/test_containers.c	/^test_container_fp_pair_map(void *arg)$/;"	f	file:
test_container_order_functions	src/test/test_containers.c	/^test_container_order_functions(void *arg)$/;"	f	file:
test_container_pqueue	src/test/test_containers.c	/^test_container_pqueue(void *arg)$/;"	f	file:
test_container_smartlist_basic	src/test/test_containers.c	/^test_container_smartlist_basic(void *arg)$/;"	f	file:
test_container_smartlist_digests	src/test/test_containers.c	/^test_container_smartlist_digests(void *arg)$/;"	f	file:
test_container_smartlist_ints_eq	src/test/test_containers.c	/^test_container_smartlist_ints_eq(void *arg)$/;"	f	file:
test_container_smartlist_join	src/test/test_containers.c	/^test_container_smartlist_join(void *arg)$/;"	f	file:
test_container_smartlist_most_frequent	src/test/test_containers.c	/^test_container_smartlist_most_frequent(void *arg)$/;"	f	file:
test_container_smartlist_overlap	src/test/test_containers.c	/^test_container_smartlist_overlap(void *arg)$/;"	f	file:
test_container_smartlist_pos	src/test/test_containers.c	/^test_container_smartlist_pos(void *arg)$/;"	f	file:
test_container_smartlist_sort_ptrs	src/test/test_containers.c	/^test_container_smartlist_sort_ptrs(void *arg)$/;"	f	file:
test_container_smartlist_strings	src/test/test_containers.c	/^test_container_smartlist_strings(void *arg)$/;"	f	file:
test_container_smartlist_strings_eq	src/test/test_containers.c	/^test_container_smartlist_strings_eq(void *arg)$/;"	f	file:
test_container_strmap	src/test/test_containers.c	/^test_container_strmap(void *arg)$/;"	f	file:
test_cq_manip	src/test/test_cell_queue.c	/^test_cq_manip(void *arg)$/;"	f	file:
test_crypto_aes	src/test/test_crypto.c	/^test_crypto_aes(void *arg)$/;"	f	file:
test_crypto_aes_iv	src/test/test_crypto.c	/^test_crypto_aes_iv(void *arg)$/;"	f	file:
test_crypto_base32_decode	src/test/test_crypto.c	/^test_crypto_base32_decode(void *arg)$/;"	f	file:
test_crypto_curve25519_basepoint	src/test/test_crypto.c	/^test_crypto_curve25519_basepoint(void *arg)$/;"	f	file:
test_crypto_curve25519_encode	src/test/test_crypto.c	/^test_crypto_curve25519_encode(void *arg)$/;"	f	file:
test_crypto_curve25519_impl	src/test/test_crypto.c	/^test_crypto_curve25519_impl(void *arg)$/;"	f	file:
test_crypto_curve25519_persist	src/test/test_crypto.c	/^test_crypto_curve25519_persist(void *arg)$/;"	f	file:
test_crypto_curve25519_wrappers	src/test/test_crypto.c	/^test_crypto_curve25519_wrappers(void *arg)$/;"	f	file:
test_crypto_dh	src/test/test_crypto.c	/^test_crypto_dh(void *arg)$/;"	f	file:
test_crypto_digests	src/test/test_crypto.c	/^test_crypto_digests(void *arg)$/;"	f	file:
test_crypto_ed25519_blinding	src/test/test_crypto.c	/^test_crypto_ed25519_blinding(void *arg)$/;"	f	file:
test_crypto_ed25519_convert	src/test/test_crypto.c	/^test_crypto_ed25519_convert(void *arg)$/;"	f	file:
test_crypto_ed25519_encode	src/test/test_crypto.c	/^test_crypto_ed25519_encode(void *arg)$/;"	f	file:
test_crypto_ed25519_fuzz_donna	src/test/test_crypto.c	/^test_crypto_ed25519_fuzz_donna(void *arg)$/;"	f	file:
test_crypto_ed25519_simple	src/test/test_crypto.c	/^test_crypto_ed25519_simple(void *arg)$/;"	f	file:
test_crypto_ed25519_test_vectors	src/test/test_crypto.c	/^test_crypto_ed25519_test_vectors(void *arg)$/;"	f	file:
test_crypto_ed25519_testvectors	src/test/test_crypto.c	/^test_crypto_ed25519_testvectors(void *arg)$/;"	f	file:
test_crypto_formats	src/test/test_crypto.c	/^test_crypto_formats(void *arg)$/;"	f	file:
test_crypto_hkdf_sha256	src/test/test_crypto.c	/^test_crypto_hkdf_sha256(void *arg)$/;"	f	file:
test_crypto_kdf_TAP	src/test/test_crypto.c	/^test_crypto_kdf_TAP(void *arg)$/;"	f	file:
test_crypto_pbkdf2_vectors	src/test/test_crypto_slow.c	/^test_crypto_pbkdf2_vectors(void *arg)$/;"	f	file:
test_crypto_pk	src/test/test_crypto.c	/^test_crypto_pk(void *arg)$/;"	f	file:
test_crypto_pk_base64	src/test/test_crypto.c	/^test_crypto_pk_base64(void *arg)$/;"	f	file:
test_crypto_pk_fingerprints	src/test/test_crypto.c	/^test_crypto_pk_fingerprints(void *arg)$/;"	f	file:
test_crypto_pwbox	src/test/test_crypto_slow.c	/^test_crypto_pwbox(void *arg)$/;"	f	file:
test_crypto_rng	src/test/test_crypto.c	/^test_crypto_rng(void *arg)$/;"	f	file:
test_crypto_rng_range	src/test/test_crypto.c	/^test_crypto_rng_range(void *arg)$/;"	f	file:
test_crypto_s2k_errors	src/test/test_crypto_slow.c	/^test_crypto_s2k_errors(void *arg)$/;"	f	file:
test_crypto_s2k_general	src/test/test_crypto_slow.c	/^test_crypto_s2k_general(void *arg)$/;"	f	file:
test_crypto_s2k_rfc2440	src/test/test_crypto_slow.c	/^test_crypto_s2k_rfc2440(void *arg)$/;"	f	file:
test_crypto_scrypt_vectors	src/test/test_crypto_slow.c	/^test_crypto_scrypt_vectors(void *arg)$/;"	f	file:
test_crypto_sha	src/test/test_crypto.c	/^test_crypto_sha(void *arg)$/;"	f	file:
test_crypto_siphash	src/test/test_crypto.c	/^test_crypto_siphash(void *arg)$/;"	f	file:
test_destroy_not_pending_calls	src/test/test_channel.c	/^static int test_destroy_not_pending_calls = 0;$/;"	v	file:
test_dir_authdir_type_to_string	src/test/test_dir.c	/^test_dir_authdir_type_to_string(void *data)$/;"	f	file:
test_dir_choose_compression_level	src/test/test_dir.c	/^test_dir_choose_compression_level(void* data)$/;"	f	file:
test_dir_clip_unmeasured_bw_kb	src/test/test_dir.c	/^test_dir_clip_unmeasured_bw_kb(void *arg)$/;"	f	file:
test_dir_clip_unmeasured_bw_kb_alt	src/test/test_dir.c	/^test_dir_clip_unmeasured_bw_kb_alt(void *arg)$/;"	f	file:
test_dir_conn_purpose_to_string	src/test/test_dir.c	/^test_dir_conn_purpose_to_string(void *data)$/;"	f	file:
test_dir_dirserv_set_routerstatus_testing	src/test/test_dir.c	/^test_dir_dirserv_set_routerstatus_testing(void *arg)$/;"	f	file:
test_dir_extrainfo_parsing	src/test/test_dir.c	/^test_dir_extrainfo_parsing(void *arg)$/;"	f	file:
test_dir_fetch_type	src/test/test_dir.c	/^test_dir_fetch_type(void *arg)$/;"	f	file:
test_dir_find_dl_schedule_and_len	src/test/test_dir.c	/^test_dir_find_dl_schedule_and_len(void* data)$/;"	f	file:
test_dir_fmt_control_ns	src/test/test_dir.c	/^test_dir_fmt_control_ns(void *arg)$/;"	f	file:
test_dir_formats	src/test/test_dir.c	/^test_dir_formats(void *arg)$/;"	f	file:
test_dir_fp_pairs	src/test/test_dir.c	/^test_dir_fp_pairs(void *arg)$/;"	f	file:
test_dir_handle_get_bad_request	src/test/test_dir_handle_get.c	/^test_dir_handle_get_bad_request(void *data)$/;"	f	file:
test_dir_handle_get_bytes_txt	src/test/test_dir_handle_get.c	/^test_dir_handle_get_bytes_txt(void *data)$/;"	f	file:
test_dir_handle_get_micro_d	src/test/test_dir_handle_get.c	/^test_dir_handle_get_micro_d(void *data)$/;"	f	file:
test_dir_handle_get_micro_d_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_micro_d_not_found(void *data)$/;"	f	file:
test_dir_handle_get_micro_d_server_busy	src/test/test_dir_handle_get.c	/^test_dir_handle_get_micro_d_server_busy(void *data)$/;"	f	file:
test_dir_handle_get_networkstatus_bridges	src/test/test_dir_handle_get.c	/^test_dir_handle_get_networkstatus_bridges(void *data)$/;"	f	file:
test_dir_handle_get_networkstatus_bridges_not_found_without_auth	src/test/test_dir_handle_get.c	/^test_dir_handle_get_networkstatus_bridges_not_found_without_auth(void *data)$/;"	f	file:
test_dir_handle_get_networkstatus_bridges_not_found_wrong_auth	src/test/test_dir_handle_get.c	/^test_dir_handle_get_networkstatus_bridges_not_found_wrong_auth(void *data)$/;"	f	file:
test_dir_handle_get_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_not_found(void *data)$/;"	f	file:
test_dir_handle_get_rendezvous2_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_rendezvous2_not_found(void *data)$/;"	f	file:
test_dir_handle_get_rendezvous2_not_found_if_not_encrypted	src/test/test_dir_handle_get.c	/^test_dir_handle_get_rendezvous2_not_found_if_not_encrypted(void *data)$/;"	f	file:
test_dir_handle_get_rendezvous2_on_encrypted_conn_not_well_formed	src/test/test_dir_handle_get.c	/^test_dir_handle_get_rendezvous2_on_encrypted_conn_not_well_formed(void *data)$/;"	f	file:
test_dir_handle_get_rendezvous2_on_encrypted_conn_success	src/test/test_dir_handle_get.c	/^test_dir_handle_get_rendezvous2_on_encrypted_conn_success(void *data)$/;"	f	file:
test_dir_handle_get_rendezvous2_on_encrypted_conn_with_invalid_desc_id	src/test/test_dir_handle_get.c	/^test_dir_handle_get_rendezvous2_on_encrypted_conn_with_invalid_desc_id(void *data)$/;"	f	file:
test_dir_handle_get_robots_txt	src/test/test_dir_handle_get.c	/^test_dir_handle_get_robots_txt(void *data)$/;"	f	file:
test_dir_handle_get_server_descriptors_all	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_descriptors_all(void* data)$/;"	f	file:
test_dir_handle_get_server_descriptors_authority	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_descriptors_authority(void* data)$/;"	f	file:
test_dir_handle_get_server_descriptors_busy	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_descriptors_busy(void* data)$/;"	f	file:
test_dir_handle_get_server_descriptors_d	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_descriptors_d(void* data)$/;"	f	file:
test_dir_handle_get_server_descriptors_fp	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_descriptors_fp(void* data)$/;"	f	file:
test_dir_handle_get_server_descriptors_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_descriptors_not_found(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_all	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_all(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_all_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_all_not_found(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_authority	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_authority(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_authority_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_authority_not_found(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_bad_req	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_bad_req(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_busy	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_busy(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_fp	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_fp(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_fp_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_fp_not_found(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_fpsk	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_fpsk(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_fpsk_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_fpsk_not_found(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_sk	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_sk(void* data)$/;"	f	file:
test_dir_handle_get_server_keys_sk_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_server_keys_sk_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_current_authority	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_current_authority(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_current_authority_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_current_authority_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_current_consensus_ns	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_current_consensus_ns(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_current_consensus_ns_busy	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_current_consensus_ns_busy(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_current_consensus_ns_not_enough_sigs	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_current_consensus_ns_not_enough_sigs(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_current_consensus_ns_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_current_consensus_ns_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_current_d_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_current_d_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_current_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_current_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_d	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_d(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_authority	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_authority(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_authority_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_authority_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_consensus	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_consensus(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_consensus_busy	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_consensus_busy(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_consensus_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_consensus_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_consensus_signatures	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_consensus_signatures(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_consensus_signatures_busy	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_consensus_signatures_busy(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_consensus_signatures_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_consensus_signatures_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_d_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_d_not_found(void* data)$/;"	f	file:
test_dir_handle_get_status_vote_next_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_status_vote_next_not_found(void* data)$/;"	f	file:
test_dir_handle_get_v1_command	src/test/test_dir_handle_get.c	/^test_dir_handle_get_v1_command(void *data)$/;"	f	file:
test_dir_handle_get_v1_command_not_found	src/test/test_dir_handle_get.c	/^test_dir_handle_get_v1_command_not_found(void *data)$/;"	f	file:
test_dir_http_handling	src/test/test_dir.c	/^test_dir_http_handling(void *args)$/;"	f	file:
test_dir_load_extrainfo	src/test/test_dir.c	/^test_dir_load_extrainfo(void *arg)$/;"	f	file:
test_dir_load_routers	src/test/test_dir.c	/^test_dir_load_routers(void *arg)$/;"	f	file:
test_dir_measured_bw_kb	src/test/test_dir.c	/^test_dir_measured_bw_kb(void *arg)$/;"	f	file:
test_dir_measured_bw_kb_cache	src/test/test_dir.c	/^test_dir_measured_bw_kb_cache(void *arg)$/;"	f	file:
test_dir_nicknames	src/test/test_dir.c	/^test_dir_nicknames(void *arg)$/;"	f	file:
test_dir_packages	src/test/test_dir.c	/^test_dir_packages(void *arg)$/;"	f	file:
test_dir_param_voting	src/test/test_dir.c	/^test_dir_param_voting(void *arg)$/;"	f	file:
test_dir_parse_router_list	src/test/test_dir.c	/^test_dir_parse_router_list(void *arg)$/;"	f	file:
test_dir_purpose_needs_anonymity	src/test/test_dir.c	/^test_dir_purpose_needs_anonymity(void *arg)$/;"	f	file:
test_dir_random_weighted	src/test/test_dir.c	/^test_dir_random_weighted(void *testdata)$/;"	f	file:
test_dir_routerinfo_parsing	src/test/test_dir.c	/^test_dir_routerinfo_parsing(void *arg)$/;"	f	file:
test_dir_scale_bw	src/test/test_dir.c	/^test_dir_scale_bw(void *testdata)$/;"	f	file:
test_dir_should_init_request_to_dir_auths	src/test/test_dir.c	/^static void test_dir_should_init_request_to_dir_auths(void *data){$/;"	f	file:
test_dir_should_not_init_request_to_dir_auths_without_v3_info	src/test/test_dir.c	/^test_dir_should_not_init_request_to_dir_auths_without_v3_info(void *data){$/;"	f	file:
test_dir_should_not_init_request_to_ourselves	src/test/test_dir.c	/^test_dir_should_not_init_request_to_ourselves(void *data){$/;"	f	file:
test_dir_should_use_directory_guards	src/test/test_dir.c	/^test_dir_should_use_directory_guards(void *data)$/;"	f	file:
test_dir_split_fps	src/test/test_dir.c	/^test_dir_split_fps(void *testdata)$/;"	f	file:
test_dir_v3_networkstatus	src/test/test_dir.c	/^test_dir_v3_networkstatus(void *arg)$/;"	f	file:
test_dir_versions	src/test/test_dir.c	/^test_dir_versions(void *arg)$/;"	f	file:
test_dns_clip_ttl	src/test/test_dns.c	/^test_dns_clip_ttl(void *arg)$/;"	f	file:
test_dns_expiry_ttl	src/test/test_dns.c	/^test_dns_expiry_ttl(void *arg)$/;"	f	file:
test_dns_resolve_outer	src/test/test_dns.c	/^test_dns_resolve_outer(void *arg)$/;"	f	file:
test_doesnt_want_writes_count	src/test/test_channel.c	/^static int test_doesnt_want_writes_count = 0;$/;"	v	file:
test_dump_exit_policy_to_string	src/test/test_policy.c	/^test_dump_exit_policy_to_string(void *arg)$/;"	f	file:
test_dumpstats_calls	src/test/test_channel.c	/^static int test_dumpstats_calls = 0;$/;"	v	file:
test_entry_guards_parse_state_pathbias	src/test/test_entrynodes.c	/^test_entry_guards_parse_state_pathbias(void *arg)$/;"	f	file:
test_entry_guards_parse_state_simple	src/test/test_entrynodes.c	/^test_entry_guards_parse_state_simple(void *arg)$/;"	f	file:
test_entry_guards_set_from_config	src/test/test_entrynodes.c	/^test_entry_guards_set_from_config(void *arg)$/;"	f	file:
test_entry_is_live	src/test/test_entrynodes.c	/^test_entry_is_live(void *arg)$/;"	f	file:
test_entry_is_time_to_retry	src/test/test_entrynodes.c	/^test_entry_is_time_to_retry(void *arg)$/;"	f	file:
test_entryconn_rewrite_automap_exit	src/test/test_entryconn.c	/^test_entryconn_rewrite_automap_exit(void *arg)$/;"	f	file:
test_entryconn_rewrite_automap_ipv4	src/test/test_entryconn.c	/^test_entryconn_rewrite_automap_ipv4(void *arg)$/;"	f	file:
test_entryconn_rewrite_automap_ipv6	src/test/test_entryconn.c	/^test_entryconn_rewrite_automap_ipv6(void *arg)$/;"	f	file:
test_entryconn_rewrite_bad_dotexit	src/test/test_entryconn.c	/^test_entryconn_rewrite_bad_dotexit(void *arg)$/;"	f	file:
test_entryconn_rewrite_basic	src/test/test_entryconn.c	/^test_entryconn_rewrite_basic(void *arg)$/;"	f	file:
test_entryconn_rewrite_cached_dns_ipv4	src/test/test_entryconn.c	/^test_entryconn_rewrite_cached_dns_ipv4(void *arg)$/;"	f	file:
test_entryconn_rewrite_cached_dns_ipv6	src/test/test_entryconn.c	/^test_entryconn_rewrite_cached_dns_ipv6(void *arg)$/;"	f	file:
test_entryconn_rewrite_mapaddress	src/test/test_entryconn.c	/^test_entryconn_rewrite_mapaddress(void *arg)$/;"	f	file:
test_entryconn_rewrite_mapaddress_automap_onion	src/test/test_entryconn.c	/^test_entryconn_rewrite_mapaddress_automap_onion(void *arg)$/;"	f	file:
test_entryconn_rewrite_mapaddress_automap_onion2	src/test/test_entryconn.c	/^test_entryconn_rewrite_mapaddress_automap_onion2(void *arg)$/;"	f	file:
test_entryconn_rewrite_mapaddress_automap_onion3	src/test/test_entryconn.c	/^test_entryconn_rewrite_mapaddress_automap_onion3(void *arg)$/;"	f	file:
test_entryconn_rewrite_mapaddress_automap_onion4	src/test/test_entryconn.c	/^test_entryconn_rewrite_mapaddress_automap_onion4(void *arg)$/;"	f	file:
test_entryconn_rewrite_mapaddress_automap_onion_common	src/test/test_entryconn.c	/^test_entryconn_rewrite_mapaddress_automap_onion_common(entry_connection_t *ec,$/;"	f	file:
test_entryconn_rewrite_mapaddress_exit	src/test/test_entryconn.c	/^test_entryconn_rewrite_mapaddress_exit(void *arg)$/;"	f	file:
test_entryconn_rewrite_reject_internal_reverse	src/test/test_entryconn.c	/^test_entryconn_rewrite_reject_internal_reverse(void *arg)$/;"	f	file:
test_entryconn_rewrite_unmapped_virtual	src/test/test_entryconn.c	/^test_entryconn_rewrite_unmapped_virtual(void *arg)$/;"	f	file:
test_ext_or_cookie_auth	src/test/test_extorport.c	/^test_ext_or_cookie_auth(void *arg)$/;"	f	file:
test_ext_or_cookie_auth_testvec	src/test/test_extorport.c	/^test_ext_or_cookie_auth_testvec(void *arg)$/;"	f	file:
test_ext_or_handshake	src/test/test_extorport.c	/^test_ext_or_handshake(void *arg)$/;"	f	file:
test_ext_or_id_map	src/test/test_extorport.c	/^test_ext_or_id_map(void *arg)$/;"	f	file:
test_ext_or_init_auth	src/test/test_extorport.c	/^test_ext_or_init_auth(void *arg)$/;"	f	file:
test_ext_or_write_command	src/test/test_extorport.c	/^test_ext_or_write_command(void *arg)$/;"	f	file:
test_external_ip	src/test/test_addr.c	/^#define test_external_ip(/;"	d	file:
test_fast_handshake_state_free_does_not_free_if_is_null	src/test/test_fast_handshake.c	/^test_fast_handshake_state_free_does_not_free_if_is_null()$/;"	f	file:
test_feq	src/test/test_util.c	/^#define test_feq(/;"	d	file:
test_geoip	src/test/test.c	/^test_geoip(void *arg)$/;"	f	file:
test_geoip_with_pt	src/test/test.c	/^test_geoip_with_pt(void *arg)$/;"	f	file:
test_get_guardfraction_bandwidth	src/test/test_guardfraction.c	/^test_get_guardfraction_bandwidth(void *arg)$/;"	f	file:
test_get_pt_proxy_uri	src/test/test_pt.c	/^test_get_pt_proxy_uri(void *arg)$/;"	f	file:
test_get_sigsafe_err_fds	src/test/test_logging.c	/^test_get_sigsafe_err_fds(void *arg)$/;"	f	file:
test_has_waiting_cells_count	src/test/test_channel.c	/^static int test_has_waiting_cells_count = 0;$/;"	v	file:
test_hs_desc_event	src/test/test_hs.c	/^test_hs_desc_event(void *arg)$/;"	f	file:
test_hs_rend_data	src/test/test_hs.c	/^test_hs_rend_data(void *arg)$/;"	f	file:
test_internal_ip	src/test/test_addr.c	/^#define test_internal_ip(/;"	d	file:
test_introduce_decrypt_v0	src/test/test_introduce.c	/^test_introduce_decrypt_v0(void *arg)$/;"	f	file:
test_introduce_decrypt_v1	src/test/test_introduce.c	/^test_introduce_decrypt_v1(void *arg)$/;"	f	file:
test_introduce_decrypt_v2	src/test/test_introduce.c	/^test_introduce_decrypt_v2(void *arg)$/;"	f	file:
test_introduce_decrypt_v3	src/test/test_introduce.c	/^test_introduce_decrypt_v3(void *arg)$/;"	f	file:
test_introduce_early_parse_v0	src/test/test_introduce.c	/^test_introduce_early_parse_v0(void *arg)$/;"	f	file:
test_introduce_early_parse_v1	src/test/test_introduce.c	/^test_introduce_early_parse_v1(void *arg)$/;"	f	file:
test_introduce_early_parse_v2	src/test/test_introduce.c	/^test_introduce_early_parse_v2(void *arg)$/;"	f	file:
test_introduce_early_parse_v3	src/test/test_introduce.c	/^test_introduce_early_parse_v3(void *arg)$/;"	f	file:
test_introduce_late_parse_v0	src/test/test_introduce.c	/^test_introduce_late_parse_v0(void *arg)$/;"	f	file:
test_introduce_late_parse_v1	src/test/test_introduce.c	/^test_introduce_late_parse_v1(void *arg)$/;"	f	file:
test_introduce_late_parse_v2	src/test/test_introduce.c	/^test_introduce_late_parse_v2(void *arg)$/;"	f	file:
test_introduce_late_parse_v3	src/test/test_introduce.c	/^test_introduce_late_parse_v3(void *arg)$/;"	f	file:
test_keypin_add_entry	src/test/test_keypin.c	/^test_keypin_add_entry(void *arg)$/;"	f	file:
test_keypin_journal	src/test/test_keypin.c	/^test_keypin_journal(void *arg)$/;"	f	file:
test_keypin_parse_file	src/test/test_keypin.c	/^test_keypin_parse_file(void *arg)$/;"	f	file:
test_keypin_parse_line	src/test/test_keypin.c	/^test_keypin_parse_line(void *arg)$/;"	f	file:
test_libscrypt_eq_openssl	src/test/test_crypto_slow.c	/^test_libscrypt_eq_openssl(void *arg)$/;"	f	file:
test_link_handshake_auth_already_authenticated	src/test/test_link_handshake.c	/^test_link_handshake_auth_already_authenticated(void *arg)$/;"	f	file:
test_link_handshake_auth_cell	src/test/test_link_handshake.c	/^test_link_handshake_auth_cell(void *arg)$/;"	f	file:
test_link_handshake_certs_ok	src/test/test_link_handshake.c	/^test_link_handshake_certs_ok(void *arg)$/;"	f	file:
test_link_handshake_recv_authchallenge_ok	src/test/test_link_handshake.c	/^test_link_handshake_recv_authchallenge_ok(void *arg)$/;"	f	file:
test_link_handshake_recv_authchallenge_ok_noserver	src/test/test_link_handshake.c	/^test_link_handshake_recv_authchallenge_ok_noserver(void *arg)$/;"	f	file:
test_link_handshake_recv_authchallenge_ok_unrecognized	src/test/test_link_handshake.c	/^test_link_handshake_recv_authchallenge_ok_unrecognized(void *arg)$/;"	f	file:
test_link_handshake_recv_certs_ok	src/test/test_link_handshake.c	/^test_link_handshake_recv_certs_ok(void *arg)$/;"	f	file:
test_link_handshake_recv_certs_ok_server	src/test/test_link_handshake.c	/^test_link_handshake_recv_certs_ok_server(void *arg)$/;"	f	file:
test_link_handshake_send_authchallenge	src/test/test_link_handshake.c	/^test_link_handshake_send_authchallenge(void *arg)$/;"	f	file:
test_main	src/test/test_routerset.c	/^NS(test_main)(void *arg)$/;"	f	file:
test_main	src/test/test_status.c	/^NS(test_main)(void *arg)$/;"	f	file:
test_md1	src/test/test_microdesc.c	/^static const char test_md1[] =$/;"	v	file:
test_md2	src/test/test_microdesc.c	/^static const char test_md2[] =$/;"	v	file:
test_md2_18	src/test/test_microdesc.c	/^static const char test_md2_18[] =$/;"	v	file:
test_md2_21	src/test/test_microdesc.c	/^static const char test_md2_21[] =$/;"	v	file:
test_md3	src/test/test_microdesc.c	/^static const char test_md3[] =$/;"	v	file:
test_md_16	src/test/test_microdesc.c	/^static const char test_md_16[] =$/;"	v	file:
test_md_18	src/test/test_microdesc.c	/^static const char test_md_18[] =$/;"	v	file:
test_md_8	src/test/test_microdesc.c	/^static const char test_md_8[] =$/;"	v	file:
test_md_cache	src/test/test_microdesc.c	/^test_md_cache(void *data)$/;"	f	file:
test_md_cache_broken	src/test/test_microdesc.c	/^test_md_cache_broken(void *data)$/;"	f	file:
test_md_corrupt_desc	src/test/test_microdesc.c	/^test_md_corrupt_desc(void *arg)$/;"	f	file:
test_md_generate	src/test/test_microdesc.c	/^test_md_generate(void *arg)$/;"	f	file:
test_md_parse	src/test/test_microdesc.c	/^test_md_parse(void *arg)$/;"	f	file:
test_md_reject_cache	src/test/test_microdesc.c	/^test_md_reject_cache(void *arg)$/;"	f	file:
test_mem_op_hex	src/test/test.h	/^#define test_mem_op_hex(/;"	d
test_memeq_hex	src/test/test.h	/^#define test_memeq_hex(/;"	d
test_nodelist_node_get_verbose_nickname_by_id_null_node	src/test/test_nodelist.c	/^test_nodelist_node_get_verbose_nickname_by_id_null_node(void *arg)$/;"	f	file:
test_nodelist_node_get_verbose_nickname_not_named	src/test/test_nodelist.c	/^test_nodelist_node_get_verbose_nickname_not_named(void *arg)$/;"	f	file:
test_ntop6_reduces	src/test/test_addr.c	/^#define test_ntop6_reduces(/;"	d	file:
test_ntor_handshake	src/test/test.c	/^test_ntor_handshake(void *arg)$/;"	f	file:
test_onion_handshake	src/test/test.c	/^test_onion_handshake(void *arg)$/;"	f	file:
test_onion_queues	src/test/test.c	/^test_onion_queues(void *arg)$/;"	f	file:
test_oom_circbuf	src/test/test_oom.c	/^test_oom_circbuf(void *arg)$/;"	f	file:
test_oom_streambuf	src/test/test_oom.c	/^test_oom_streambuf(void *arg)$/;"	f	file:
test_op_ip6_	src/test/test_addr.c	/^#define test_op_ip6_(/;"	d	file:
test_options_validate	src/test/test_options.c	/^test_options_validate(void *arg)$/;"	f	file:
test_options_validate__accel	src/test/test_options.c	/^test_options_validate__accel(void *ignored)$/;"	f	file:
test_options_validate__accounting	src/test/test_options.c	/^test_options_validate__accounting(void *ignored)$/;"	f	file:
test_options_validate__addr_policies	src/test/test_options.c	/^test_options_validate__addr_policies(void *ignored)$/;"	f	file:
test_options_validate__authdir	src/test/test_options.c	/^test_options_validate__authdir(void *ignored)$/;"	f	file:
test_options_validate__bandwidth	src/test/test_options.c	/^test_options_validate__bandwidth(void *ignored)$/;"	f	file:
test_options_validate__circuits	src/test/test_options.c	/^test_options_validate__circuits(void *ignored)$/;"	f	file:
test_options_validate__conn_limit	src/test/test_options.c	/^test_options_validate__conn_limit(void *ignored)$/;"	f	file:
test_options_validate__constrained_sockets	src/test/test_options.c	/^test_options_validate__constrained_sockets(void *ignored)$/;"	f	file:
test_options_validate__contactinfo	src/test/test_options.c	/^test_options_validate__contactinfo(void *ignored)$/;"	f	file:
test_options_validate__control	src/test/test_options.c	/^test_options_validate__control(void *ignored)$/;"	f	file:
test_options_validate__data_directory	src/test/test_options.c	/^test_options_validate__data_directory(void *ignored)$/;"	f	file:
test_options_validate__dir_auth	src/test/test_options.c	/^test_options_validate__dir_auth(void *ignored)$/;"	f	file:
test_options_validate__entry_nodes	src/test/test_options.c	/^test_options_validate__entry_nodes(void *ignored)$/;"	f	file:
test_options_validate__exclude_nodes	src/test/test_options.c	/^test_options_validate__exclude_nodes(void *ignored)$/;"	f	file:
test_options_validate__exits	src/test/test_options.c	/^test_options_validate__exits(void *ignored)$/;"	f	file:
test_options_validate__families	src/test/test_options.c	/^test_options_validate__families(void *ignored)$/;"	f	file:
test_options_validate__fetch_dir	src/test/test_options.c	/^test_options_validate__fetch_dir(void *ignored)$/;"	f	file:
test_options_validate__hidserv	src/test/test_options.c	/^test_options_validate__hidserv(void *ignored)$/;"	f	file:
test_options_validate__invalid_nodes	src/test/test_options.c	/^test_options_validate__invalid_nodes(void *ignored)$/;"	f	file:
test_options_validate__logs	src/test/test_options.c	/^test_options_validate__logs(void *ignored)$/;"	f	file:
test_options_validate__max_client_circuits	src/test/test_options.c	/^test_options_validate__max_client_circuits(void *ignored)$/;"	f	file:
test_options_validate__nickname	src/test/test_options.c	/^test_options_validate__nickname(void *ignored)$/;"	f	file:
test_options_validate__node_families	src/test/test_options.c	/^test_options_validate__node_families(void *ignored)$/;"	f	file:
test_options_validate__outbound_addresses	src/test/test_options.c	/^test_options_validate__outbound_addresses(void *ignored)$/;"	f	file:
test_options_validate__path_bias	src/test/test_options.c	/^test_options_validate__path_bias(void *ignored)$/;"	f	file:
test_options_validate__paths_needed	src/test/test_options.c	/^test_options_validate__paths_needed(void *ignored)$/;"	f	file:
test_options_validate__port_forwarding	src/test/test_options.c	/^test_options_validate__port_forwarding(void *ignored)$/;"	f	file:
test_options_validate__ports	src/test/test_options.c	/^test_options_validate__ports(void *ignored)$/;"	f	file:
test_options_validate__predicted_ports	src/test/test_options.c	/^test_options_validate__predicted_ports(void *ignored)$/;"	f	file:
test_options_validate__proxy	src/test/test_options.c	/^test_options_validate__proxy(void *ignored)$/;"	f	file:
test_options_validate__publish_server_descriptor	src/test/test_options.c	/^test_options_validate__publish_server_descriptor(void *ignored)$/;"	f	file:
test_options_validate__reachable_addresses	src/test/test_options.c	/^test_options_validate__reachable_addresses(void *ignored)$/;"	f	file:
test_options_validate__recommended_packages	src/test/test_options.c	/^test_options_validate__recommended_packages(void *ignored)$/;"	f	file:
test_options_validate__relay_with_hidden_services	src/test/test_options.c	/^test_options_validate__relay_with_hidden_services(void *ignored)$/;"	f	file:
test_options_validate__rend	src/test/test_options.c	/^test_options_validate__rend(void *ignored)$/;"	f	file:
test_options_validate__safe_logging	src/test/test_options.c	/^test_options_validate__safe_logging(void *ignored)$/;"	f	file:
test_options_validate__scheduler	src/test/test_options.c	/^test_options_validate__scheduler(void *ignored)$/;"	f	file:
test_options_validate__testing	src/test/test_options.c	/^test_options_validate__testing(void *ignored)$/;"	f	file:
test_options_validate__testing_options	src/test/test_options.c	/^test_options_validate__testing_options(void *ignored)$/;"	f	file:
test_options_validate__tlsec	src/test/test_options.c	/^test_options_validate__tlsec(void *ignored)$/;"	f	file:
test_options_validate__token_bucket	src/test/test_options.c	/^test_options_validate__token_bucket(void *ignored)$/;"	f	file:
test_options_validate__tor2web	src/test/test_options.c	/^test_options_validate__tor2web(void *ignored)$/;"	f	file:
test_options_validate__transport	src/test/test_options.c	/^test_options_validate__transport(void *ignored)$/;"	f	file:
test_options_validate__transproxy	src/test/test_options.c	/^test_options_validate__transproxy(void *ignored)$/;"	f	file:
test_options_validate__uname_for_server	src/test/test_options.c	/^test_options_validate__uname_for_server(void *ignored)$/;"	f	file:
test_options_validate__use_bridges	src/test/test_options.c	/^test_options_validate__use_bridges(void *ignored)$/;"	f	file:
test_options_validate__v3_auth	src/test/test_options.c	/^test_options_validate__v3_auth(void *ignored)$/;"	f	file:
test_options_validate__virtual_addr	src/test/test_options.c	/^test_options_validate__virtual_addr(void *ignored)$/;"	f	file:
test_options_validate_impl	src/test/test_options.c	/^test_options_validate_impl(const char *configuration,$/;"	f	file:
test_overhead_estimate	src/test/test_channel.c	/^static double test_overhead_estimate = 1.0f;$/;"	v	file:
test_parse_guardfraction_consensus	src/test/test_guardfraction.c	/^test_parse_guardfraction_consensus(void *arg)$/;"	f	file:
test_parse_guardfraction_file_bad	src/test/test_guardfraction.c	/^test_parse_guardfraction_file_bad(void *arg)$/;"	f	file:
test_parse_guardfraction_file_good	src/test/test_guardfraction.c	/^test_parse_guardfraction_file_good(void *arg)$/;"	f	file:
test_pick_bad_tor2web_rendezvous_node	src/test/test_hs.c	/^test_pick_bad_tor2web_rendezvous_node(void *arg)$/;"	f	file:
test_pick_circid	src/test/test_circuitlist.c	/^test_pick_circid(void *arg)$/;"	f	file:
test_pick_tor2web_rendezvous_node	src/test/test_hs.c	/^test_pick_tor2web_rendezvous_node(void *arg)$/;"	f	file:
test_policies_general	src/test/test_policy.c	/^test_policies_general(void *arg)$/;"	f	file:
test_policy_summary_helper	src/test/test_policy.c	/^test_policy_summary_helper(const char *policy_str,$/;"	f	file:
test_populate_live_entry_guards_1guard	src/test/test_entrynodes.c	/^test_populate_live_entry_guards_1guard(void *arg)$/;"	f	file:
test_populate_live_entry_guards_3guards	src/test/test_entrynodes.c	/^test_populate_live_entry_guards_3guards(void *arg)$/;"	f	file:
test_procmon_tor_process_monitor_new	src/test/test_procmon.c	/^test_procmon_tor_process_monitor_new(void *ignored)$/;"	f	file:
test_pt_configure_proxy	src/test/test_pt.c	/^test_pt_configure_proxy(void *arg)$/;"	f	file:
test_pt_get_extrainfo_string	src/test/test_pt.c	/^test_pt_get_extrainfo_string(void *arg)$/;"	f	file:
test_pt_get_transport_options	src/test/test_pt.c	/^test_pt_get_transport_options(void *arg)$/;"	f	file:
test_pt_parsing	src/test/test_pt.c	/^test_pt_parsing(void *arg)$/;"	f	file:
test_pt_protocol	src/test/test_pt.c	/^test_pt_protocol(void *arg)$/;"	f	file:
test_pton6_bad	src/test/test_addr.c	/^#define test_pton6_bad(/;"	d	file:
test_pton6_same	src/test/test_addr.c	/^#define test_pton6_same(/;"	d	file:
test_relay_append_cell_to_circuit_queue	src/test/test_relay.c	/^test_relay_append_cell_to_circuit_queue(void *arg)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__begin	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__begin(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__begin_dir	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__begin_dir(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__cell_length_too_long	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__cell_length_too_long(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__closed_connection	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__closed_connection(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__command	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__command(void *command_type)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__command_group	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__command_group(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__connected	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__connected(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__data	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__data(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__end	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__end(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__extend	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__extend(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__extend2	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__extend2(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__extended	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__extended(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__extended2	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__extended2(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__no_stream_id_with_relay_that_needs_stream	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__no_stream_id_with_relay_that_needs_stream(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__open_connection	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__open_connection(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__resolve	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__resolve(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__resolved	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__resolved(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__sendme	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__sendme(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__truncate	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__truncate(void *ignored)$/;"	f	file:
test_relay_connection_edge_process_relay_cell__truncated	src/test/test_relay.c	/^test_relay_connection_edge_process_relay_cell__truncated(void *ignored)$/;"	f	file:
test_relaycell_resolved	src/test/test_relaycell.c	/^test_relaycell_resolved(void *arg)$/;"	f	file:
test_releases_count	src/test/test_channel.c	/^static int test_releases_count = 0;$/;"	v	file:
test_rend_cache_clean	src/test/test_rendcache.c	/^test_rend_cache_clean(void *data)$/;"	f	file:
test_rend_cache_clean_v2_descs_as_dir	src/test/test_rendcache.c	/^test_rend_cache_clean_v2_descs_as_dir(void *data)$/;"	f	file:
test_rend_cache_decrement_allocation	src/test/test_rendcache.c	/^test_rend_cache_decrement_allocation(void *data)$/;"	f	file:
test_rend_cache_entry_allocation	src/test/test_rendcache.c	/^test_rend_cache_entry_allocation(void *data)$/;"	f	file:
test_rend_cache_entry_free	src/test/test_rendcache.c	/^test_rend_cache_entry_free(void *data)$/;"	f	file:
test_rend_cache_failure_clean	src/test/test_rendcache.c	/^test_rend_cache_failure_clean(void *data)$/;"	f	file:
test_rend_cache_failure_entry_free	src/test/test_rendcache.c	/^test_rend_cache_failure_entry_free(void *data)$/;"	f	file:
test_rend_cache_failure_entry_new	src/test/test_rendcache.c	/^test_rend_cache_failure_entry_new(void *data)$/;"	f	file:
test_rend_cache_failure_intro_add	src/test/test_rendcache.c	/^test_rend_cache_failure_intro_add(void *data)$/;"	f	file:
test_rend_cache_failure_intro_entry_free	src/test/test_rendcache.c	/^test_rend_cache_failure_intro_entry_free(void *data)$/;"	f	file:
test_rend_cache_failure_intro_entry_new	src/test/test_rendcache.c	/^test_rend_cache_failure_intro_entry_new(void *data)$/;"	f	file:
test_rend_cache_failure_intro_lookup	src/test/test_rendcache.c	/^test_rend_cache_failure_intro_lookup(void *data)$/;"	f	file:
test_rend_cache_failure_purge	src/test/test_rendcache.c	/^test_rend_cache_failure_purge(void *data)$/;"	f	file:
test_rend_cache_failure_remove	src/test/test_rendcache.c	/^test_rend_cache_failure_remove(void *data)$/;"	f	file:
test_rend_cache_free_all	src/test/test_rendcache.c	/^test_rend_cache_free_all(void *data)$/;"	f	file:
test_rend_cache_increment_allocation	src/test/test_rendcache.c	/^test_rend_cache_increment_allocation(void *data)$/;"	f	file:
test_rend_cache_init	src/test/test_rendcache.c	/^test_rend_cache_init(void *data)$/;"	f	file:
test_rend_cache_intro_failure_note	src/test/test_rendcache.c	/^test_rend_cache_intro_failure_note(void *data)$/;"	f	file:
test_rend_cache_lookup_entry	src/test/test_rendcache.c	/^test_rend_cache_lookup_entry(void *data)$/;"	f	file:
test_rend_cache_lookup_v2_desc_as_dir	src/test/test_rendcache.c	/^test_rend_cache_lookup_v2_desc_as_dir(void *data)$/;"	f	file:
test_rend_cache_purge	src/test/test_rendcache.c	/^test_rend_cache_purge(void *data)$/;"	f	file:
test_rend_cache_store_v2_desc_as_client	src/test/test_rendcache.c	/^test_rend_cache_store_v2_desc_as_client(void *data)$/;"	f	file:
test_rend_cache_store_v2_desc_as_client_with_different_time	src/test/test_rendcache.c	/^test_rend_cache_store_v2_desc_as_client_with_different_time(void *data)$/;"	f	file:
test_rend_cache_store_v2_desc_as_dir	src/test/test_rendcache.c	/^test_rend_cache_store_v2_desc_as_dir(void *data)$/;"	f	file:
test_rend_cache_store_v2_desc_as_dir_with_different_content	src/test/test_rendcache.c	/^test_rend_cache_store_v2_desc_as_dir_with_different_content(void *data)$/;"	f	file:
test_rend_cache_store_v2_desc_as_dir_with_different_time	src/test/test_rendcache.c	/^test_rend_cache_store_v2_desc_as_dir_with_different_time(void *data)$/;"	f	file:
test_rend_cache_validate_intro_point_failure	src/test/test_rendcache.c	/^test_rend_cache_validate_intro_point_failure(void *data)$/;"	f	file:
test_rend_fns	src/test/test.c	/^test_rend_fns(void *arg)$/;"	f	file:
test_rend_service_parse_port_config	src/test/test_controller.c	/^test_rend_service_parse_port_config(void *arg)$/;"	f	file:
test_rend_token_maps	src/test/test_circuitlist.c	/^test_rend_token_maps(void *arg)$/;"	f	file:
test_replaycache_age	src/test/test_replay.c	/^test_replaycache_age(void *arg)$/;"	f	file:
test_replaycache_alloc	src/test/test_replay.c	/^test_replaycache_alloc(void *arg)$/;"	f	file:
test_replaycache_badalloc	src/test/test_replay.c	/^test_replaycache_badalloc(void *arg)$/;"	f	file:
test_replaycache_elapsed	src/test/test_replay.c	/^test_replaycache_elapsed(void *arg)$/;"	f	file:
test_replaycache_free_null	src/test/test_replay.c	/^test_replaycache_free_null(void *arg)$/;"	f	file:
test_replaycache_future	src/test/test_replay.c	/^test_replaycache_future(void *arg)$/;"	f	file:
test_replaycache_hit	src/test/test_replay.c	/^test_replaycache_hit(void *arg)$/;"	f	file:
test_replaycache_miss	src/test/test_replay.c	/^test_replaycache_miss(void *arg)$/;"	f	file:
test_replaycache_noexpire	src/test/test_replay.c	/^test_replaycache_noexpire(void *arg)$/;"	f	file:
test_replaycache_realtime	src/test/test_replay.c	/^test_replaycache_realtime(void *arg)$/;"	f	file:
test_replaycache_scrub	src/test/test_replay.c	/^test_replaycache_scrub(void *arg)$/;"	f	file:
test_rewrite_setup	src/test/test_connection_edge_ap_handshake.c	/^static struct testcase_setup_t test_rewrite_setup = {$/;"	v	typeref:struct:testcase_setup_t	file:
test_rewrite_setup	src/test/test_entryconn.c	/^static struct testcase_setup_t test_rewrite_setup = {$/;"	v	typeref:struct:testcase_setup_t	file:
test_ri	src/test/test_microdesc.c	/^static const char test_ri[] =$/;"	v	file:
test_ri2	src/test/test_microdesc.c	/^static const char test_ri2[] =$/;"	v	file:
test_routerkeys_cross_certify_ntor	src/test/test_routerkeys.c	/^test_routerkeys_cross_certify_ntor(void *args)$/;"	f	file:
test_routerkeys_cross_certify_tap	src/test/test_routerkeys.c	/^test_routerkeys_cross_certify_tap(void *args)$/;"	f	file:
test_routerkeys_ed_certs	src/test/test_routerkeys.c	/^test_routerkeys_ed_certs(void *args)$/;"	f	file:
test_routerkeys_ed_key_create	src/test/test_routerkeys.c	/^test_routerkeys_ed_key_create(void *arg)$/;"	f	file:
test_routerkeys_ed_key_init_basic	src/test/test_routerkeys.c	/^test_routerkeys_ed_key_init_basic(void *arg)$/;"	f	file:
test_routerkeys_ed_key_init_split	src/test/test_routerkeys.c	/^test_routerkeys_ed_key_init_split(void *arg)$/;"	f	file:
test_routerkeys_ed_keys_init_all	src/test/test_routerkeys.c	/^test_routerkeys_ed_keys_init_all(void *arg)$/;"	f	file:
test_routerkeys_write_fingerprint	src/test/test_routerkeys.c	/^test_routerkeys_write_fingerprint(void *arg)$/;"	f	file:
test_routerlist_initiate_descriptor_downloads	src/test/test_routerlist.c	/^test_routerlist_initiate_descriptor_downloads(void *arg)$/;"	f	file:
test_routerlist_launch_descriptor_downloads	src/test/test_routerlist.c	/^test_routerlist_launch_descriptor_downloads(void *arg)$/;"	f	file:
test_routerstatus_for_umbw	src/test/test_dir.c	/^test_routerstatus_for_umbw(routerstatus_t *rs, time_t now)$/;"	f	file:
test_routerstatus_for_v3ns	src/test/test_dir.c	/^test_routerstatus_for_v3ns(routerstatus_t *rs, time_t now)$/;"	f	file:
test_run_scheduled_events__adds_entropy	src/test/test_main.c	/^test_run_scheduled_events__adds_entropy(void *data)$/;"	f	file:
test_run_scheduled_events__changes_tls_context	src/test/test_main.c	/^test_run_scheduled_events__changes_tls_context(void *data)$/;"	f	file:
test_run_scheduled_events__fetches_bridge_descriptors	src/test/test_main.c	/^test_run_scheduled_events__fetches_bridge_descriptors(void *data)$/;"	f	file:
test_run_scheduled_events__fetches_dir_descriptors	src/test/test_main.c	/^test_run_scheduled_events__fetches_dir_descriptors(void *data)$/;"	f	file:
test_run_scheduled_events__resets_descriptor_failures	src/test/test_main.c	/^test_run_scheduled_events__resets_descriptor_failures(void *data)$/;"	f	file:
test_run_scheduled_events__writes_bridge_authoritative_dir_stats_to_disk	src/test/test_main.c	/^test_run_scheduled_events__writes_bridge_authoritative_dir_stats_to_disk(void *data)$/;"	f	file:
test_run_scheduled_events__writes_cell_stats_to_disk	src/test/test_main.c	/^test_run_scheduled_events__writes_cell_stats_to_disk(void *data)$/;"	f	file:
test_run_scheduled_events__writes_conn_direction_stats_to_disk	src/test/test_main.c	/^test_run_scheduled_events__writes_conn_direction_stats_to_disk(void *data)$/;"	f	file:
test_run_scheduled_events__writes_dir_req_stats_to_disk	src/test/test_main.c	/^test_run_scheduled_events__writes_dir_req_stats_to_disk(void *data)$/;"	f	file:
test_run_scheduled_events__writes_entry_stats_to_disk	src/test/test_main.c	/^test_run_scheduled_events__writes_entry_stats_to_disk(void *data)$/;"	f	file:
test_run_scheduled_events__writes_exit_port_stats_to_disk	src/test/test_main.c	/^test_run_scheduled_events__writes_exit_port_stats_to_disk(void *data)$/;"	f	file:
test_run_scheduled_events__writes_hidden_service_stats_to_disk	src/test/test_main.c	/^test_run_scheduled_events__writes_hidden_service_stats_to_disk(void *data)$/;"	f	file:
test_same_voter	src/test/test_dir.c	/^test_same_voter(networkstatus_voter_info_t *v1,$/;"	f	file:
test_sandbox_cfg_allow_open_filename	src/test/test_sandbox.c	/^test_sandbox_cfg_allow_open_filename(void *ignored)$/;"	f	file:
test_sandbox_cfg_allow_openat_filename	src/test/test_sandbox.c	/^test_sandbox_cfg_allow_openat_filename(void *ignored)$/;"	f	file:
test_sandbox_cfg_allow_rename	src/test/test_sandbox.c	/^test_sandbox_cfg_allow_rename(void *ignored)$/;"	f	file:
test_sandbox_cfg_allow_stat_filename	src/test/test_sandbox.c	/^test_sandbox_cfg_allow_stat_filename(void *ignored)$/;"	f	file:
test_sandbox_cfg_new	src/test/test_sandbox.c	/^test_sandbox_cfg_new(void *ignored)$/;"	f	file:
test_sandbox_disable_getaddrinfo_cache	src/test/test_sandbox.c	/^test_sandbox_disable_getaddrinfo_cache(void *ignored)$/;"	f	file:
test_sandbox_init	src/test/test_sandbox.c	/^test_sandbox_init(void *ignored)$/;"	f	file:
test_sandbox_is_active	src/test/test_sandbox.c	/^test_sandbox_is_active(void *ignored)$/;"	f	file:
test_scheduler_channel_states	src/test/test_scheduler.c	/^test_scheduler_channel_states(void *arg)$/;"	f	file:
test_scheduler_compare_channels	src/test/test_scheduler.c	/^test_scheduler_compare_channels(void *arg)$/;"	f	file:
test_scheduler_initfree	src/test/test_scheduler.c	/^test_scheduler_initfree(void *arg)$/;"	f	file:
test_scheduler_loop	src/test/test_scheduler.c	/^test_scheduler_loop(void *arg)$/;"	f	file:
test_scheduler_queue_heuristic	src/test/test_scheduler.c	/^test_scheduler_queue_heuristic(void *arg)$/;"	f	file:
test_setup_option_CMD_TOR	src/test/test_config.c	/^test_setup_option_CMD_TOR()$/;"	f	file:
test_short_policy_parse	src/test/test_policy.c	/^test_short_policy_parse(const char *input,$/;"	f	file:
test_should_apply_guardfraction	src/test/test_guardfraction.c	/^test_should_apply_guardfraction(void *arg)$/;"	f	file:
test_sigsafe_err	src/test/test_logging.c	/^test_sigsafe_err(void *arg)$/;"	f	file:
test_socks_4_supported_commands	src/test/test_socks.c	/^test_socks_4_supported_commands(void *ptr)$/;"	f	file:
test_socks_4_unsupported_commands	src/test/test_socks.c	/^test_socks_4_unsupported_commands(void *ptr)$/;"	f	file:
test_socks_5_auth_before_negotiation	src/test/test_socks.c	/^test_socks_5_auth_before_negotiation(void *ptr)$/;"	f	file:
test_socks_5_authenticate	src/test/test_socks.c	/^test_socks_5_authenticate(void *ptr)$/;"	f	file:
test_socks_5_authenticate_with_data	src/test/test_socks.c	/^test_socks_5_authenticate_with_data(void *ptr)$/;"	f	file:
test_socks_5_malformed_commands	src/test/test_socks.c	/^test_socks_5_malformed_commands(void *ptr)$/;"	f	file:
test_socks_5_no_authenticate	src/test/test_socks.c	/^test_socks_5_no_authenticate(void *ptr)$/;"	f	file:
test_socks_5_supported_commands	src/test/test_socks.c	/^test_socks_5_supported_commands(void *ptr)$/;"	f	file:
test_socks_5_unsupported_commands	src/test/test_socks.c	/^test_socks_5_unsupported_commands(void *ptr)$/;"	f	file:
test_stats	src/test/test.c	/^test_stats(void *arg)$/;"	f	file:
test_subs	src/ext/ed25519/donna/test-internals.c	/^test_subs(void) {$/;"	f	file:
test_target_cmux	src/test/test_channel.c	/^static circuitmux_t *test_target_cmux = NULL;$/;"	v	file:
test_threads_basic	src/test/test_threads.c	/^test_threads_basic(void *arg)$/;"	f	file:
test_threads_conditionvar	src/test/test_threads.c	/^test_threads_conditionvar(void *arg)$/;"	f	file:
test_tortls_SSL_SESSION_get_master_key	src/test/test_tortls.c	/^test_tortls_SSL_SESSION_get_master_key(void *ignored)$/;"	f	file:
test_tortls_allocate_tor_tls_object_ex_data_index	src/test/test_tortls.c	/^test_tortls_allocate_tor_tls_object_ex_data_index(void *ignored)$/;"	f	file:
test_tortls_always_accept_verify_cb	src/test/test_tortls.c	/^test_tortls_always_accept_verify_cb(void *ignored)$/;"	f	file:
test_tortls_cert_get_key	src/test/test_tortls.c	/^test_tortls_cert_get_key(void *ignored)$/;"	f	file:
test_tortls_cert_matches_key	src/test/test_tortls.c	/^test_tortls_cert_matches_key(void *ignored)$/;"	f	file:
test_tortls_check_lifetime	src/test/test_tortls.c	/^test_tortls_check_lifetime(void *ignored)$/;"	f	file:
test_tortls_classify_client_ciphers	src/test/test_tortls.c	/^test_tortls_classify_client_ciphers(void *ignored)$/;"	f	file:
test_tortls_client_is_using_v2_ciphers	src/test/test_tortls.c	/^test_tortls_client_is_using_v2_ciphers(void *ignored)$/;"	f	file:
test_tortls_dn_indicates_v3_cert	src/test/test_tortls.c	/^test_tortls_dn_indicates_v3_cert(void *ignored)$/;"	f	file:
test_tortls_err_to_string	src/test/test_tortls.c	/^test_tortls_err_to_string(void *data)$/;"	f	file:
test_tortls_errno_to_tls_error	src/test/test_tortls.c	/^test_tortls_errno_to_tls_error(void *data)$/;"	f	file:
test_tortls_evaluate_ecgroup_for_tls	src/test/test_tortls.c	/^test_tortls_evaluate_ecgroup_for_tls(void *ignored)$/;"	f	file:
test_tortls_get_buffer_sizes	src/test/test_tortls.c	/^test_tortls_get_buffer_sizes(void *ignored)$/;"	f	file:
test_tortls_get_by_ssl	src/test/test_tortls.c	/^test_tortls_get_by_ssl(void *ignored)$/;"	f	file:
test_tortls_get_ciphersuite_name	src/test/test_tortls.c	/^test_tortls_get_ciphersuite_name(void *ignored)$/;"	f	file:
test_tortls_get_error	src/test/test_tortls.c	/^test_tortls_get_error(void *ignored)$/;"	f	file:
test_tortls_get_forced_write_size	src/test/test_tortls.c	/^test_tortls_get_forced_write_size(void *ignored)$/;"	f	file:
test_tortls_get_my_certs	src/test/test_tortls.c	/^test_tortls_get_my_certs(void *ignored)$/;"	f	file:
test_tortls_get_my_client_auth_key	src/test/test_tortls.c	/^test_tortls_get_my_client_auth_key(void *ignored)$/;"	f	file:
test_tortls_get_num_server_handshakes	src/test/test_tortls.c	/^test_tortls_get_num_server_handshakes(void *ignored)$/;"	f	file:
test_tortls_get_pending_bytes	src/test/test_tortls.c	/^test_tortls_get_pending_bytes(void *ignored)$/;"	f	file:
test_tortls_get_state_description	src/test/test_tortls.c	/^test_tortls_get_state_description(void *ignored)$/;"	f	file:
test_tortls_get_tlssecrets	src/test/test_tortls.c	/^test_tortls_get_tlssecrets(void *ignored)$/;"	f	file:
test_tortls_get_write_overhead_ratio	src/test/test_tortls.c	/^test_tortls_get_write_overhead_ratio(void *ignored)$/;"	f	file:
test_tortls_log_one_error	src/test/test_tortls.c	/^test_tortls_log_one_error(void *ignored)$/;"	f	file:
test_tortls_received_v3_certificate	src/test/test_tortls.c	/^test_tortls_received_v3_certificate(void *ignored)$/;"	f	file:
test_tortls_server_got_renegotiate	src/test/test_tortls.c	/^test_tortls_server_got_renegotiate(void *ignored)$/;"	f	file:
test_tortls_tor_tls_get_error	src/test/test_tortls.c	/^test_tortls_tor_tls_get_error(void *data)$/;"	f	file:
test_tortls_tor_tls_new	src/test/test_tortls.c	/^test_tortls_tor_tls_new(void *data)$/;"	f	file:
test_tortls_try_to_extract_certs_from_tls	src/test/test_tortls.c	/^test_tortls_try_to_extract_certs_from_tls(void *ignored)$/;"	f	file:
test_tortls_used_v1_handshake	src/test/test_tortls.c	/^test_tortls_used_v1_handshake(void *ignored)$/;"	f	file:
test_tortls_verify	src/test/test_tortls.c	/^test_tortls_verify(void *ignored)$/;"	f	file:
test_tortls_x509_cert_free	src/test/test_tortls.c	/^test_tortls_x509_cert_free(void *ignored)$/;"	f	file:
test_tortls_x509_cert_get_id_digests	src/test/test_tortls.c	/^test_tortls_x509_cert_get_id_digests(void *ignored)$/;"	f	file:
test_util_asprintf	src/test/test_util.c	/^test_util_asprintf(void *ptr)$/;"	f	file:
test_util_config_line	src/test/test_util.c	/^test_util_config_line(void *arg)$/;"	f	file:
test_util_config_line_comment_character	src/test/test_util.c	/^test_util_config_line_comment_character(void *arg)$/;"	f	file:
test_util_config_line_escaped_content	src/test/test_util.c	/^test_util_config_line_escaped_content(void *arg)$/;"	f	file:
test_util_config_line_quotes	src/test/test_util.c	/^test_util_config_line_quotes(void *arg)$/;"	f	file:
test_util_control_formats	src/test/test_util.c	/^test_util_control_formats(void *arg)$/;"	f	file:
test_util_datadir	src/test/test_util.c	/^test_util_datadir(void *arg)$/;"	f	file:
test_util_di_map	src/test/test_util.c	/^test_util_di_map(void *arg)$/;"	f	file:
test_util_di_ops	src/test/test_util.c	/^test_util_di_ops(void *arg)$/;"	f	file:
test_util_eat_whitespace	src/test/test_util.c	/^test_util_eat_whitespace(void *ptr)$/;"	f	file:
test_util_envnames	src/test/test_util.c	/^test_util_envnames(void *ptr)$/;"	f	file:
test_util_escape_string_socks	src/test/test_util.c	/^test_util_escape_string_socks(void *arg)$/;"	f	file:
test_util_exit_status	src/test/test_util.c	/^test_util_exit_status(void *ptr)$/;"	f	file:
test_util_expand_filename	src/test/test_util.c	/^test_util_expand_filename(void *arg)$/;"	f	file:
test_util_fgets_eagain	src/test/test_util.c	/^test_util_fgets_eagain(void *ptr)$/;"	f	file:
test_util_find_str_at_start_of_line	src/test/test_util.c	/^test_util_find_str_at_start_of_line(void *ptr)$/;"	f	file:
test_util_format_base16_decode	src/test/test_util_format.c	/^test_util_format_base16_decode(void *ignored)$/;"	f	file:
test_util_format_base64_decode	src/test/test_util_format.c	/^test_util_format_base64_decode(void *ignored)$/;"	f	file:
test_util_format_base64_decode_nopad	src/test/test_util_format.c	/^test_util_format_base64_decode_nopad(void *ignored)$/;"	f	file:
test_util_format_base64_encode	src/test/test_util_format.c	/^test_util_format_base64_encode(void *ignored)$/;"	f	file:
test_util_format_dec_number	src/test/test_util.c	/^test_util_format_dec_number(void *ptr)$/;"	f	file:
test_util_format_hex_number	src/test/test_util.c	/^test_util_format_hex_number(void *ptr)$/;"	f	file:
test_util_format_time_interval	src/test/test_util.c	/^test_util_format_time_interval(void *arg)$/;"	f	file:
test_util_ftruncate	src/test/test_util.c	/^test_util_ftruncate(void *ptr)$/;"	f	file:
test_util_get_avail_disk_space	src/test/test_util.c	/^test_util_get_avail_disk_space(void *arg)$/;"	f	file:
test_util_gzip	src/test/test_util.c	/^test_util_gzip(void *arg)$/;"	f	file:
test_util_hostname_validation	src/test/test_util.c	/^test_util_hostname_validation(void *arg)$/;"	f	file:
test_util_ipv4_validation	src/test/test_util.c	/^test_util_ipv4_validation(void *arg)$/;"	f	file:
test_util_join_win_cmdline	src/test/test_util.c	/^test_util_join_win_cmdline(void *ptr)$/;"	f	file:
test_util_laplace	src/test/test_util.c	/^test_util_laplace(void *arg)$/;"	f	file:
test_util_listdir	src/test/test_util.c	/^test_util_listdir(void *ptr)$/;"	f	file:
test_util_load_win_lib	src/test/test_util.c	/^test_util_load_win_lib(void *ptr)$/;"	f	file:
test_util_make_environment	src/test/test_util.c	/^test_util_make_environment(void *ptr)$/;"	f	file:
test_util_mathlog	src/test/test_util.c	/^test_util_mathlog(void *arg)$/;"	f	file:
test_util_max_mem	src/test/test_util.c	/^test_util_max_mem(void *arg)$/;"	f	file:
test_util_memarea	src/test/test_util.c	/^test_util_memarea(void *arg)$/;"	f	file:
test_util_mmap	src/test/test_util.c	/^test_util_mmap(void *arg)$/;"	f	file:
test_util_n_bits_set	src/test/test_util.c	/^test_util_n_bits_set(void *ptr)$/;"	f	file:
test_util_parent_dir	src/test/test_util.c	/^test_util_parent_dir(void *ptr)$/;"	f	file:
test_util_parse_http_time	src/test/test_util.c	/^test_util_parse_http_time(void *arg)$/;"	f	file:
test_util_path_is_relative	src/test/test_util.c	/^test_util_path_is_relative(void *arg)$/;"	f	file:
test_util_pow2	src/test/test_util.c	/^test_util_pow2(void *arg)$/;"	f	file:
test_util_process_clear_waitpid_callback	src/test/test_util_process.c	/^test_util_process_clear_waitpid_callback(void *ignored)$/;"	f	file:
test_util_process_set_waitpid_callback	src/test/test_util_process.c	/^test_util_process_set_waitpid_callback(void *ignored)$/;"	f	file:
test_util_read_file_eof_one_loop_a	src/test/test_util.c	/^test_util_read_file_eof_one_loop_a(void *arg)$/;"	f	file:
test_util_read_file_eof_one_loop_b	src/test/test_util.c	/^test_util_read_file_eof_one_loop_b(void *arg)$/;"	f	file:
test_util_read_file_eof_tiny_limit	src/test/test_util.c	/^test_util_read_file_eof_tiny_limit(void *arg)$/;"	f	file:
test_util_read_file_eof_two_loops	src/test/test_util.c	/^test_util_read_file_eof_two_loops(void *arg)$/;"	f	file:
test_util_read_file_eof_two_loops_b	src/test/test_util.c	/^test_util_read_file_eof_two_loops_b(void *arg)$/;"	f	file:
test_util_read_file_eof_zero_bytes	src/test/test_util.c	/^test_util_read_file_eof_zero_bytes(void *arg)$/;"	f	file:
test_util_read_until_eof_impl	src/test/test_util.c	/^test_util_read_until_eof_impl(const char *fname, size_t file_len,$/;"	f	file:
test_util_round_to_next_multiple_of	src/test/test_util.c	/^test_util_round_to_next_multiple_of(void *arg)$/;"	f	file:
test_util_set_env_var_in_sl	src/test/test_util.c	/^test_util_set_env_var_in_sl(void *ptr)$/;"	f	file:
test_util_sl_new_from_text_lines	src/test/test_util.c	/^test_util_sl_new_from_text_lines(void *ptr)$/;"	f	file:
test_util_socket	src/test/test_util.c	/^test_util_socket(void *arg)$/;"	f	file:
test_util_socketpair	src/test/test_util.c	/^test_util_socketpair(void *arg)$/;"	f	file:
test_util_spawn_background_exit_early	src/test/test_util_slow.c	/^test_util_spawn_background_exit_early(void *arg)$/;"	f	file:
test_util_spawn_background_fail	src/test/test_util_slow.c	/^test_util_spawn_background_fail(void *ptr)$/;"	f	file:
test_util_spawn_background_ok	src/test/test_util_slow.c	/^test_util_spawn_background_ok(void *ptr)$/;"	f	file:
test_util_spawn_background_partial_read	src/test/test_util_slow.c	/^test_util_spawn_background_partial_read(void *arg)$/;"	f	file:
test_util_spawn_background_partial_read_impl	src/test/test_util_slow.c	/^test_util_spawn_background_partial_read_impl(int exit_early)$/;"	f	file:
test_util_spawn_background_waitpid_notify	src/test/test_util_slow.c	/^test_util_spawn_background_waitpid_notify(void *arg)$/;"	f	file:
test_util_split_lines	src/test/test_util.c	/^test_util_split_lines(void *ptr)$/;"	f	file:
test_util_sscanf	src/test/test_util.c	/^test_util_sscanf(void *arg)$/;"	f	file:
test_util_string_is_C_identifier	src/test/test_util.c	/^test_util_string_is_C_identifier(void *ptr)$/;"	f	file:
test_util_string_is_key_value	src/test/test_util.c	/^test_util_string_is_key_value(void *ptr)$/;"	f	file:
test_util_strmisc	src/test/test_util.c	/^test_util_strmisc(void *arg)$/;"	f	file:
test_util_strtok	src/test/test_util.c	/^test_util_strtok(void *arg)$/;"	f	file:
test_util_time	src/test/test_util.c	/^test_util_time(void *arg)$/;"	f	file:
test_util_weak_random	src/test/test_util.c	/^test_util_weak_random(void *arg)$/;"	f	file:
test_util_write_chunks_to_file	src/test/test_util.c	/^test_util_write_chunks_to_file(void *arg)$/;"	f	file:
test_util_writepid	src/test/test_util.c	/^test_util_writepid(void *arg)$/;"	f	file:
test_v_i_o	src/test/test_dir.c	/^#define test_v_i_o(/;"	d	file:
test_virtaddrmap	src/test/test_addr.c	/^test_virtaddrmap(void *data)$/;"	f	file:
test_vrs_for_umbw	src/test/test_dir.c	/^test_vrs_for_umbw(vote_routerstatus_t *vrs, int voter, time_t now)$/;"	f	file:
test_vrs_for_v3ns	src/test/test_dir.c	/^test_vrs_for_v3ns(vote_routerstatus_t *vrs, int voter, time_t now)$/;"	f	file:
testcase	src/test/test-memwipe.c	/^static struct testcase {$/;"	s	file:
testcase_fn	src/ext/tinytest.h	/^typedef void (*testcase_fn)(void *);$/;"	t
testcase_run_bare_	src/ext/tinytest.c	/^testcase_run_bare_(const struct testcase_t *testcase)$/;"	f	file:
testcase_run_forked_	src/ext/tinytest.c	/^testcase_run_forked_(const struct testgroup_t *group,$/;"	f	file:
testcase_run_one	src/ext/tinytest.c	/^testcase_run_one(const struct testgroup_t *group,$/;"	f
testcase_setup_t	src/ext/tinytest.h	/^struct testcase_setup_t {$/;"	s
testcase_t	src/ext/tinytest.h	/^struct testcase_t {$/;"	s
testcases	src/test/test-memwipe.c	/^} testcases[] = {$/;"	v	typeref:struct:testcase	file:
testgroup_t	src/ext/tinytest.h	/^struct testgroup_t {$/;"	s
testgroups	src/test/test.c	/^struct testgroup_t testgroups[] = {$/;"	v	typeref:struct:testgroup_t
testgroups	src/test/test_slow.c	/^struct testgroup_t testgroups[] = {$/;"	v	typeref:struct:testgroup_t
testing_cell_stats	src/or/or.h	/^  smartlist_t *testing_cell_stats;$/;"	m	struct:circuit_t
testing_cell_stats_entry_t	src/or/or.h	/^typedef struct testing_cell_stats_entry_t {$/;"	s
testing_cell_stats_entry_t	src/or/or.h	/^} testing_cell_stats_entry_t;$/;"	t	typeref:struct:testing_cell_stats_entry_t
testing_tor_network_defaults	src/or/config.c	/^static const config_var_t testing_tor_network_defaults[] = {$/;"	v	file:
testlist_alias_t	src/ext/tinytest.h	/^struct testlist_alias_t {$/;"	s
tests	src/ext/tinytest.h	/^	const char **tests;$/;"	m	struct:testlist_alias_t
the_evdns_base	src/or/dns.c	/^static struct evdns_base *the_evdns_base = NULL;$/;"	v	typeref:struct:evdns_base	file:
the_event_base	src/common/compat_libevent.c	/^struct event_base *the_event_base = NULL;$/;"	v	typeref:struct:event_base
the_microdesc_cache	src/or/microdesc.c	/^static microdesc_cache_t *the_microdesc_cache = NULL;$/;"	v	file:
the_nodelist	src/or/nodelist.c	/^static nodelist_t *the_nodelist=NULL;$/;"	v	file:
the_short_tor_version	src/or/config.c	/^static char *the_short_tor_version = NULL;$/;"	v	file:
the_siphash_key	src/ext/csiphash.c	/^static struct sipkey the_siphash_key;$/;"	v	typeref:struct:sipkey	file:
the_siphash_key_is_set	src/ext/csiphash.c	/^static int the_siphash_key_is_set = 0;$/;"	v	file:
the_tor_version	src/or/config.c	/^static char *the_tor_version = NULL;$/;"	v	file:
third_quartile	src/test/test_containers.c	/^#define third_quartile(/;"	d	file:
third_quartile	src/test/test_containers.c	/^#undef third_quartile$/;"	d	file:
third_quartile_uint32	src/common/container.h	/^third_quartile_uint32(uint32_t *array, int n_elements)$/;"	f
thread1_name_	src/test/test_threads.c	/^static char *thread1_name_ = NULL;$/;"	v	file:
thread2_name_	src/test/test_threads.c	/^static char *thread2_name_ = NULL;$/;"	v	file:
thread_fn_tid1	src/test/test_threads.c	/^static unsigned long thread_fn_tid1, thread_fn_tid2;$/;"	v	file:
thread_fn_tid2	src/test/test_threads.c	/^static unsigned long thread_fn_tid1, thread_fn_tid2;$/;"	v	file:
thread_fns_failed	src/test/test_threads.c	/^static int thread_fns_failed = 0;$/;"	v	file:
thread_test_func_	src/test/test_threads.c	/^thread_test_func_(void* _s)$/;"	f	file:
thread_test_mutex_	src/test/test_threads.c	/^static tor_mutex_t *thread_test_mutex_ = NULL;$/;"	v	file:
thread_test_start1_	src/test/test_threads.c	/^static tor_mutex_t *thread_test_start1_ = NULL,$/;"	v	file:
thread_test_start2_	src/test/test_threads.c	/^                   *thread_test_start2_ = NULL;$/;"	v	file:
thread_test_strmap_	src/test/test_threads.c	/^static strmap_t *thread_test_strmap_ = NULL;$/;"	v	file:
thread_tests	src/test/test_threads.c	/^struct testcase_t thread_tests[] = {$/;"	v	typeref:struct:testcase_t
threadpool	src/or/cpuworker.c	/^static threadpool_t *threadpool = NULL;$/;"	v	file:
threadpool_get_replyqueue	src/common/workqueue.c	/^threadpool_get_replyqueue(threadpool_t *tp)$/;"	f
threadpool_new	src/common/workqueue.c	/^threadpool_new(int n_threads,$/;"	f
threadpool_queue_update	src/common/workqueue.c	/^threadpool_queue_update(threadpool_t *pool,$/;"	f
threadpool_queue_work	src/common/workqueue.c	/^threadpool_queue_work(threadpool_t *pool,$/;"	f
threadpool_s	src/common/workqueue.c	/^struct threadpool_s {$/;"	s	file:
threadpool_start_threads	src/common/workqueue.c	/^threadpool_start_threads(threadpool_t *pool, int n)$/;"	f	file:
threadpool_t	src/common/workqueue.h	/^typedef struct threadpool_s threadpool_t;$/;"	t	typeref:struct:threadpool_s
threads	src/common/workqueue.c	/^  struct workerthread_s **threads;$/;"	m	struct:threadpool_s	typeref:struct:threadpool_s::workerthread_s	file:
threads_initialized	src/common/compat_pthreads.c	/^static int threads_initialized = 0;$/;"	v	file:
time	src/or/rephist.c	/^  time_t time;$/;"	m	struct:predicted_port_t	file:
time_msec_units	src/or/confparse.c	/^static struct unit_table_t time_msec_units[] = {$/;"	v	typeref:struct:unit_table_t	file:
time_of_last_signewnym	src/or/main.c	/^static time_t time_of_last_signewnym = 0;$/;"	v	file:
time_of_process_start	src/or/main.c	/^time_t time_of_process_start = 0;$/;"	v
time_published	src/or/or.h	/^  time_t time_published;$/;"	m	struct:rend_intro_point_t
time_to	src/or/main.c	/^STATIC time_to_t time_to = {$/;"	v
time_to_download_next_consensus	src/or/networkstatus.c	/^static time_t time_to_download_next_consensus[N_CONSENSUS_FLAVORS];$/;"	v	file:
time_to_expire	src/or/or.h	/^  time_t time_to_expire;$/;"	m	struct:rend_intro_point_t
time_to_record_bandwidth_usage	src/or/hibernate.c	/^time_to_record_bandwidth_usage(time_t now)$/;"	f	file:
time_to_t	src/or/main.h	/^} time_to_t;$/;"	t	typeref:struct:__anon5
time_unit_t	src/or/hibernate.c	/^} time_unit_t;$/;"	t	typeref:enum:__anon29	file:
time_units	src/or/confparse.c	/^static struct unit_table_t time_units[] = {$/;"	v	typeref:struct:unit_table_t	file:
timed	src/or/cpuworker.c	/^  unsigned int timed : 1;$/;"	m	struct:cpuworker_reply_t	file:
timed	src/or/cpuworker.c	/^  unsigned timed : 1;$/;"	m	struct:cpuworker_request_t	file:
timed_out	src/or/or.h	/^  unsigned int timed_out : 1;$/;"	m	struct:rend_intro_point_t
timeit	src/ext/ed25519/donna/test-ticks.h	/^#define timeit(/;"	d
timeout0	src/test/test.c	/^#define timeout0 /;"	d	file:
timeout_ms	src/or/circuitstats.h	/^  double timeout_ms;$/;"	m	struct:circuit_build_times_s
timeouts	src/or/entrynodes.h	/^  double timeouts; \/**< Number of 'right-censored' circuit timeouts for this$/;"	m	struct:entry_guard_t
timeouts_after_firsthop	src/or/or.h	/^  int8_t *timeouts_after_firsthop;$/;"	m	struct:__anon62
timeradd	src/common/compat.h	/^#define timeradd(/;"	d
timercmp	src/common/compat.h	/^#define timercmp(/;"	d
timersub	src/common/compat.h	/^#define timersub(/;"	d
timespec_to_nsec	src/test/bench.c	/^timespec_to_nsec(const struct timespec *ts)$/;"	f	file:
timestamp	src/or/or.h	/^  time_t timestamp; \/**< Time when the descriptor was generated. *\/$/;"	m	struct:rend_service_descriptor_t
timestamp_accepted	src/or/channel.h	/^  time_t timestamp_accepted;$/;"	m	struct:channel_listener_s
timestamp_active	src/or/channel.h	/^  time_t timestamp_active; \/* Any activity *\/$/;"	m	struct:channel_listener_s
timestamp_active	src/or/channel.h	/^  time_t timestamp_active; \/* Any activity *\/$/;"	m	struct:channel_s
timestamp_began	src/or/or.h	/^  struct timeval timestamp_began;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::timeval
timestamp_client	src/or/channel.h	/^  time_t timestamp_client; \/* Client used this, according to relay.c *\/$/;"	m	struct:channel_s
timestamp_created	src/or/channel.h	/^  time_t timestamp_created; \/* Channel created *\/$/;"	m	struct:channel_listener_s
timestamp_created	src/or/channel.h	/^  time_t timestamp_created; \/* Channel created *\/$/;"	m	struct:channel_s
timestamp_created	src/or/or.h	/^  struct timeval timestamp_created;$/;"	m	struct:circuit_t	typeref:struct:circuit_t::timeval
timestamp_created	src/or/or.h	/^  time_t timestamp_created; \/**< When was this connection_t created? *\/$/;"	m	struct:connection_t
timestamp_dirty	src/or/or.h	/^  time_t timestamp_dirty;$/;"	m	struct:circuit_t
timestamp_drained	src/or/channel.h	/^  time_t timestamp_drained; \/* Output queue empty *\/$/;"	m	struct:channel_s
timestamp_last_had_circuits	src/or/channel.h	/^  time_t timestamp_last_had_circuits;$/;"	m	struct:channel_s
timestamp_lastempty	src/or/or.h	/^  time_t timestamp_lastempty; \/**< When was the outbuf last completely empty?*\/$/;"	m	struct:or_connection_t
timestamp_lastread	src/or/or.h	/^  time_t timestamp_lastread; \/**< When was the last time libevent said we could$/;"	m	struct:connection_t
timestamp_lastwritten	src/or/or.h	/^  time_t timestamp_lastwritten; \/**< When was the last time libevent said we$/;"	m	struct:connection_t
timestamp_recv	src/or/channel.h	/^  time_t timestamp_recv; \/* Cell received from lower layer *\/$/;"	m	struct:channel_s
timestamp_xmit	src/or/channel.h	/^  time_t timestamp_xmit; \/* Cell sent to lower layer *\/$/;"	m	struct:channel_s
timeval	src/common/compat.h	/^struct timeval {$/;"	s
tinytest_format_hex_	src/ext/tinytest.c	/^tinytest_format_hex_(const void *val_, unsigned long len)$/;"	f
tinytest_get_verbosity_	src/ext/tinytest.c	/^tinytest_get_verbosity_(void)$/;"	f
tinytest_main	src/ext/tinytest.c	/^tinytest_main(int c, const char **v, struct testgroup_t *groups)$/;"	f
tinytest_set_aliases	src/ext/tinytest.c	/^tinytest_set_aliases(const struct testlist_alias_t *aliases)$/;"	f
tinytest_set_flag_	src/ext/tinytest.c	/^tinytest_set_flag_(struct testgroup_t *groups, const char *arg, int set, unsigned long flag)$/;"	f
tinytest_set_test_failed_	src/ext/tinytest.c	/^tinytest_set_test_failed_(void)$/;"	f
tinytest_set_test_skipped_	src/ext/tinytest.c	/^tinytest_set_test_skipped_(void)$/;"	f
tinytest_skip	src/ext/tinytest.h	/^#define tinytest_skip(/;"	d
tls	src/or/or.h	/^  tor_tls_t *tls; \/**< TLS connection state. *\/$/;"	m	struct:or_connection_t
tls_error	src/or/or.h	/^  int tls_error; \/**< Last tor_tls error code. *\/$/;"	m	struct:or_connection_t
tls_error_to_orconn_end_reason	src/or/reasons.c	/^tls_error_to_orconn_end_reason(int e)$/;"	f
tls_get_write_overhead_ratio	src/test/test_status.c	/^NS(tls_get_write_overhead_ratio)(void)$/;"	f	file:
tls_library_is_initialized	src/common/tortls.c	/^static int tls_library_is_initialized = 0;$/;"	v	file:
tls_log_errors	src/common/tortls.c	/^tls_log_errors(tor_tls_t *tls, int severity, int domain, const char *doing)$/;"	f
tls_read_ptr	src/test/test_buffers.c	/^const uint8_t *tls_read_ptr;$/;"	v
tlschan_buf_datalen_mock	src/test/test_channeltls.c	/^tlschan_buf_datalen_mock(const buf_t *buf)$/;"	f	file:
tlschan_buf_datalen_mock_size	src/test/test_channeltls.c	/^static size_t tlschan_buf_datalen_mock_size = 0;$/;"	v	file:
tlschan_buf_datalen_mock_target	src/test/test_channeltls.c	/^static const buf_t * tlschan_buf_datalen_mock_target = NULL;$/;"	v	file:
tlschan_connection_or_connect_mock	src/test/test_channeltls.c	/^tlschan_connection_or_connect_mock(const tor_addr_t *addr,$/;"	f	file:
tlschan_fake_close_method	src/test/test_channeltls.c	/^tlschan_fake_close_method(channel_t *chan)$/;"	f	file:
tlschan_is_local_addr_mock	src/test/test_channeltls.c	/^tlschan_is_local_addr_mock(const tor_addr_t *addr)$/;"	f	file:
tlschan_local	src/test/test_channeltls.c	/^static int tlschan_local = 0;$/;"	v	file:
tlssecrets	src/trunnel/link_handshake.h	/^  uint8_t tlssecrets[32];$/;"	m	struct:auth1_st
token_check_object	src/or/routerparse.c	/^token_check_object(memarea_t *area, const char *kwd,$/;"	f	file:
token_clear	src/or/routerparse.c	/^token_clear(directory_token_t *tok)$/;"	f	file:
token_rule_t	src/or/routerparse.c	/^typedef struct token_rule_t {$/;"	s	file:
token_rule_t	src/or/routerparse.c	/^} token_rule_t;$/;"	t	typeref:struct:token_rule_t	file:
tokenize_string	src/or/routerparse.c	/^tokenize_string(memarea_t *area,$/;"	f	file:
top32bitmask	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 top32bitmask = {{0x00000000, 0xffffffff, 0x00000000, 0xffffffff}};$/;"	v
top64bitmask	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^static const packedelem32 top64bitmask = {{0x00000000, 0x00000000, 0xffffffff, 0xffffffff}};$/;"	v
tor_accept_socket	src/common/compat.c	/^tor_accept_socket(tor_socket_t sockfd, struct sockaddr *addr, socklen_t *len)$/;"	f
tor_accept_socket_nonblocking	src/common/compat.c	/^tor_accept_socket_nonblocking(tor_socket_t sockfd, struct sockaddr *addr,$/;"	f
tor_accept_socket_with_extensions	src/common/compat.c	/^tor_accept_socket_with_extensions(tor_socket_t sockfd, struct sockaddr *addr,$/;"	f
tor_add_bufferevent_to_rate_limit_group	src/common/compat_libevent.c	/^tor_add_bufferevent_to_rate_limit_group(struct bufferevent *bev,$/;"	f
tor_addr_compare	src/common/address.c	/^tor_addr_compare(const tor_addr_t *addr1, const tor_addr_t *addr2,$/;"	f
tor_addr_compare_masked	src/common/address.c	/^tor_addr_compare_masked(const tor_addr_t *addr1, const tor_addr_t *addr2,$/;"	f
tor_addr_comparison_t	src/common/address.h	/^} tor_addr_comparison_t;$/;"	t	typeref:enum:__anon2
tor_addr_copy	src/common/address.c	/^tor_addr_copy(tor_addr_t *dest, const tor_addr_t *src)$/;"	f
tor_addr_copy_tight	src/common/address.c	/^tor_addr_copy_tight(tor_addr_t *dest, const tor_addr_t *src)$/;"	f
tor_addr_eq	src/common/address.h	/^#define tor_addr_eq(/;"	d
tor_addr_eq_ipv4h	src/common/address.h	/^tor_addr_eq_ipv4h(const tor_addr_t *a, uint32_t u)$/;"	f
tor_addr_family	src/common/address.h	/^tor_addr_family(const tor_addr_t *a)$/;"	f
tor_addr_from_in	src/common/address.h	/^#define tor_addr_from_in(/;"	d
tor_addr_from_in6	src/common/address.c	/^tor_addr_from_in6(tor_addr_t *dest, const struct in6_addr *in6)$/;"	f
tor_addr_from_ipv4h	src/common/address.h	/^#define tor_addr_from_ipv4h(/;"	d
tor_addr_from_ipv4n	src/common/address.c	/^tor_addr_from_ipv4n(tor_addr_t *dest, uint32_t v4addr)$/;"	f
tor_addr_from_ipv6_bytes	src/common/address.c	/^tor_addr_from_ipv6_bytes(tor_addr_t *dest, const char *ipv6_bytes)$/;"	f
tor_addr_from_sockaddr	src/common/address.c	/^tor_addr_from_sockaddr(tor_addr_t *a, const struct sockaddr *sa,$/;"	f
tor_addr_hash	src/common/address.c	/^tor_addr_hash(const tor_addr_t *addr)$/;"	f
tor_addr_hostname_is_local	src/common/address.c	/^tor_addr_hostname_is_local(const char *name)$/;"	f
tor_addr_is_internal	src/common/address.h	/^#define tor_addr_is_internal(/;"	d
tor_addr_is_internal_	src/common/address.c	/^tor_addr_is_internal_(const tor_addr_t *addr, int for_listening,$/;"	f
tor_addr_is_loopback	src/common/address.c	/^tor_addr_is_loopback(const tor_addr_t *addr)$/;"	f
tor_addr_is_multicast	src/common/address.c	/^tor_addr_is_multicast(const tor_addr_t *a)$/;"	f	file:
tor_addr_is_null	src/common/address.c	/^tor_addr_is_null(const tor_addr_t *addr)$/;"	f
tor_addr_is_v4	src/common/address.c	/^tor_addr_is_v4(const tor_addr_t *addr)$/;"	f
tor_addr_lookup	src/common/address.c	/^tor_addr_lookup(const char *name, uint16_t family, tor_addr_t *addr)$/;"	f
tor_addr_make_af_unix	src/common/address.c	/^tor_addr_make_af_unix(tor_addr_t *a)$/;"	f	file:
tor_addr_make_null	src/common/address.c	/^tor_addr_make_null(tor_addr_t *a, sa_family_t family)$/;"	f
tor_addr_make_unspec	src/common/address.c	/^tor_addr_make_unspec(tor_addr_t *a)$/;"	f
tor_addr_parse	src/common/address.c	/^tor_addr_parse(tor_addr_t *addr, const char *src)$/;"	f
tor_addr_parse_PTR_name	src/common/address.c	/^tor_addr_parse_PTR_name(tor_addr_t *result, const char *address,$/;"	f
tor_addr_parse_mask_ports	src/common/address.c	/^tor_addr_parse_mask_ports(const char *s,$/;"	f
tor_addr_port_lookup	src/common/address.c	/^tor_addr_port_lookup(const char *s, tor_addr_t *addr_out, uint16_t *port_out)$/;"	f
tor_addr_port_new	src/common/address.c	/^tor_addr_port_new(const tor_addr_t *addr, uint16_t port)$/;"	f
tor_addr_port_parse	src/common/address.c	/^tor_addr_port_parse(int severity, const char *addrport,$/;"	f
tor_addr_port_split	src/common/address.c	/^tor_addr_port_split(int severity, const char *addrport,$/;"	f
tor_addr_port_t	src/common/address.h	/^typedef struct tor_addr_port_t$/;"	s
tor_addr_port_t	src/common/address.h	/^} tor_addr_port_t;$/;"	t	typeref:struct:tor_addr_port_t
tor_addr_t	src/common/address.h	/^typedef struct tor_addr_t$/;"	s
tor_addr_t	src/common/address.h	/^} tor_addr_t;$/;"	t	typeref:struct:tor_addr_t
tor_addr_to_PTR_name	src/common/address.c	/^tor_addr_to_PTR_name(char *out, size_t outlen,$/;"	f
tor_addr_to_in	src/common/address.h	/^tor_addr_to_in(const tor_addr_t *a)$/;"	f
tor_addr_to_in6	src/common/address.h	/^tor_addr_to_in6(const tor_addr_t *a)$/;"	f
tor_addr_to_in6_addr16	src/common/address.h	/^#define tor_addr_to_in6_addr16(/;"	d
tor_addr_to_in6_addr32	src/common/address.h	/^#define tor_addr_to_in6_addr32(/;"	d
tor_addr_to_in6_addr8	src/common/address.h	/^#define tor_addr_to_in6_addr8(/;"	d
tor_addr_to_ipv4h	src/common/address.h	/^tor_addr_to_ipv4h(const tor_addr_t *a)$/;"	f
tor_addr_to_ipv4n	src/common/address.h	/^tor_addr_to_ipv4n(const tor_addr_t *a)$/;"	f
tor_addr_to_mapped_ipv4h	src/common/address.h	/^tor_addr_to_mapped_ipv4h(const tor_addr_t *a)$/;"	f
tor_addr_to_sockaddr	src/common/address.c	/^tor_addr_to_sockaddr(const tor_addr_t *a,$/;"	f
tor_addr_to_str	src/common/address.c	/^tor_addr_to_str(char *dest, const tor_addr_t *addr, size_t len, int decorate)$/;"	f
tor_asprintf	src/common/compat.c	/^tor_asprintf(char **strp, const char *fmt, ...)$/;"	f
tor_assert	src/common/util.h	/^#define tor_assert(/;"	d
tor_assertion_failed_	src/common/util.c	/^tor_assertion_failed_(const char *fname, unsigned int line,$/;"	f
tor_calloc	src/common/util.h	/^#define tor_calloc(/;"	d
tor_calloc_	src/common/util.c	/^tor_calloc_(size_t nmemb, size_t size DMALLOC_PARAMS)$/;"	f
tor_cert_checksig	src/or/torcert.c	/^tor_cert_checksig(tor_cert_t *cert,$/;"	f
tor_cert_create	src/or/torcert.c	/^tor_cert_create(const ed25519_keypair_t *signing_key,$/;"	f
tor_cert_dup	src/or/torcert.c	/^tor_cert_dup(const tor_cert_t *cert)$/;"	f
tor_cert_eq	src/or/torcert.c	/^tor_cert_eq(const tor_cert_t *cert1, const tor_cert_t *cert2)$/;"	f
tor_cert_free	src/or/torcert.c	/^tor_cert_free(tor_cert_t *cert)$/;"	f
tor_cert_get_checkable_sig	src/or/torcert.c	/^tor_cert_get_checkable_sig(ed25519_checkable_t *checkable_out,$/;"	f
tor_cert_opt_eq	src/or/torcert.c	/^tor_cert_opt_eq(const tor_cert_t *cert1, const tor_cert_t *cert2)$/;"	f
tor_cert_parse	src/or/torcert.c	/^tor_cert_parse(const uint8_t *encoded, const size_t len)$/;"	f
tor_cert_sign_impl	src/or/torcert.c	/^tor_cert_sign_impl(const ed25519_keypair_t *signing_key,$/;"	f	file:
tor_cert_st	src/or/torcert.h	/^typedef struct tor_cert_st {$/;"	s
tor_cert_t	src/or/torcert.h	/^} tor_cert_t;$/;"	t	typeref:struct:tor_cert_st
tor_check_dh_key	src/common/crypto.c	/^tor_check_dh_key(int severity, BIGNUM *bn)$/;"	f	file:
tor_check_libevent_header_compatibility	src/common/compat_libevent.c	/^tor_check_libevent_header_compatibility(void)$/;"	f
tor_check_port_forwarding	src/common/util.c	/^tor_check_port_forwarding(const char *filename,$/;"	f
tor_cleanup	src/or/main.c	/^tor_cleanup(void)$/;"	f
tor_close_socket	src/common/compat.c	/^tor_close_socket(tor_socket_t s)$/;"	f
tor_close_socket_simple	src/common/compat.c	/^tor_close_socket_simple(tor_socket_t s)$/;"	f
tor_cond_free	src/common/compat_threads.c	/^tor_cond_free(tor_cond_t *c)$/;"	f
tor_cond_init	src/common/compat_pthreads.c	/^tor_cond_init(tor_cond_t *cond)$/;"	f
tor_cond_new	src/common/compat_threads.c	/^tor_cond_new(void)$/;"	f
tor_cond_signal_all	src/common/compat_pthreads.c	/^tor_cond_signal_all(tor_cond_t *cond)$/;"	f
tor_cond_signal_one	src/common/compat_pthreads.c	/^tor_cond_signal_one(tor_cond_t *cond)$/;"	f
tor_cond_t	src/common/compat_threads.h	/^typedef struct tor_cond_t {$/;"	s
tor_cond_t	src/common/compat_threads.h	/^} tor_cond_t;$/;"	t	typeref:struct:tor_cond_t
tor_cond_uninit	src/common/compat_pthreads.c	/^tor_cond_uninit(tor_cond_t *cond)$/;"	f
tor_cond_wait	src/common/compat_pthreads.c	/^tor_cond_wait(tor_cond_t *cond, tor_mutex_t *mutex, const struct timeval *tv)$/;"	f
tor_decode_libevent_version	src/common/compat_libevent.c	/^tor_decode_libevent_version(const char *v)$/;"	f
tor_digest256_is_zero	src/common/util.c	/^tor_digest256_is_zero(const char *digest)$/;"	f
tor_digest_is_zero	src/common/util.c	/^tor_digest_is_zero(const char *digest)$/;"	f
tor_disable_debugger_attach	src/common/compat.c	/^tor_disable_debugger_attach(void)$/;"	f
tor_dup_addr	src/common/address.c	/^tor_dup_addr(const tor_addr_t *addr)$/;"	f
tor_dup_ip	src/common/address.c	/^tor_dup_ip(uint32_t addr)$/;"	f
tor_errno_to_tls_error	src/common/tortls.c	/^tor_errno_to_tls_error(int e)$/;"	f
tor_ersatz_socketpair	src/common/compat.c	/^tor_ersatz_socketpair(int family, int type, int protocol, tor_socket_t fd[2])$/;"	f
tor_escape_str_for_pt_args	src/common/util.c	/^tor_escape_str_for_pt_args(const char *string, const char *chars_to_escape)$/;"	f
tor_evdns_add_server_port	src/common/compat_libevent.h	/^#define tor_evdns_add_server_port /;"	d
tor_evdns_add_server_port	src/common/compat_libevent.h	/^#define tor_evdns_add_server_port(/;"	d
tor_event_base_loopexit	src/common/compat_libevent.h	/^#define tor_event_base_loopexit /;"	d
tor_event_free	src/common/compat_libevent.c	/^tor_event_free(struct event *ev)$/;"	f
tor_event_new	src/common/compat_libevent.c	/^tor_event_new(struct event_base *base, int sock, short what,$/;"	f
tor_event_new	src/common/compat_libevent.h	/^#define tor_event_new /;"	d
tor_evsignal_new	src/common/compat_libevent.c	/^tor_evsignal_new(struct event_base * base, int sig,$/;"	f
tor_evsignal_new	src/common/compat_libevent.h	/^#define tor_evsignal_new /;"	d
tor_evtimer_new	src/common/compat_libevent.c	/^tor_evtimer_new(struct event_base *base,$/;"	f
tor_evtimer_new	src/common/compat_libevent.h	/^#define tor_evtimer_new /;"	d
tor_fd_getpos	src/common/compat.c	/^tor_fd_getpos(int fd)$/;"	f
tor_fd_seekend	src/common/compat.c	/^tor_fd_seekend(int fd)$/;"	f
tor_fd_setpos	src/common/compat.c	/^tor_fd_setpos(int fd, off_t pos)$/;"	f
tor_fix_source_file	src/common/compat.c	/^tor_fix_source_file(const char *fname)$/;"	f
tor_fix_source_file	src/common/compat.h	/^#define tor_fix_source_file(/;"	d
tor_fopen_cloexec	src/common/compat.c	/^tor_fopen_cloexec(const char *path, const char *mode)$/;"	f
tor_fragile_assert	src/common/util.h	/^#define tor_fragile_assert(/;"	d
tor_free	src/common/util.h	/^#define tor_free(/;"	d
tor_free_	src/common/util.c	/^tor_free_(void *mem)$/;"	f
tor_free_all	src/or/main.c	/^tor_free_all(int postfork)$/;"	f
tor_ftruncate	src/common/compat.c	/^tor_ftruncate(int fd)$/;"	f
tor_get_avail_disk_space	src/common/compat.c	/^tor_get_avail_disk_space(const char *path)$/;"	f
tor_get_exit_code	src/common/util.c	/^tor_get_exit_code(process_handle_t *process_handle,$/;"	f
tor_get_lines_from_handle_replacement	src/test/test_pt.c	/^tor_get_lines_from_handle_replacement(STDIN_HANDLE *handle,$/;"	f	file:
tor_get_root_bufferevent	src/common/compat_libevent.c	/^tor_get_root_bufferevent(struct bufferevent *bev)$/;"	f	file:
tor_get_thread_id	src/common/compat_pthreads.c	/^tor_get_thread_id(void)$/;"	f
tor_gethostname_failure	src/test/test_config.c	/^tor_gethostname_failure(char *name, size_t namelen)$/;"	f	file:
tor_gethostname_localhost	src/test/test_config.c	/^tor_gethostname_localhost(char *name, size_t namelen)$/;"	f	file:
tor_gethostname_replacement	src/test/test_config.c	/^tor_gethostname_replacement(char *name, size_t namelen)$/;"	f	file:
tor_getpass	src/common/compat.c	/^tor_getpass(const char *prompt, char *output, size_t buflen)$/;"	f
tor_getpwnam	src/common/compat.c	/^tor_getpwnam(const char *username)$/;"	f
tor_getpwuid	src/common/compat.c	/^tor_getpwuid(uid_t uid)$/;"	f
tor_gettimeofday	src/common/compat.c	/^tor_gettimeofday(struct timeval *timeval)$/;"	f
tor_gettimeofday_cache_clear	src/common/compat_libevent.c	/^tor_gettimeofday_cache_clear(void)$/;"	f
tor_gettimeofday_cache_set	src/common/compat_libevent.c	/^tor_gettimeofday_cache_set(const struct timeval *tv)$/;"	f
tor_gettimeofday_cached	src/common/compat_libevent.c	/^tor_gettimeofday_cached(struct timeval *tv)$/;"	f
tor_gettimeofday_cached_monotonic	src/common/compat_libevent.c	/^tor_gettimeofday_cached_monotonic(struct timeval *tv)$/;"	f
tor_git_revision	src/or/tor_main.c	/^const char tor_git_revision[] =$/;"	v
tor_git_revision	src/test/bench.c	/^const char tor_git_revision[] = "";$/;"	v
tor_git_revision	src/test/testing_common.c	/^const char tor_git_revision[] = "";$/;"	v
tor_gmtime_r	src/common/compat.c	/^tor_gmtime_r(const time_t *timep, struct tm *result)$/;"	f
tor_gzip_compress	src/common/torgzip.c	/^tor_gzip_compress(char **out, size_t *out_len,$/;"	f
tor_gzip_uncompress	src/common/torgzip.c	/^tor_gzip_uncompress(char **out, size_t *out_len,$/;"	f
tor_inet_aton	src/common/compat.c	/^tor_inet_aton(const char *str, struct in_addr* addr)$/;"	f
tor_inet_ntoa	src/common/address.c	/^tor_inet_ntoa(const struct in_addr *in, char *buf, size_t buf_len)$/;"	f
tor_inet_ntop	src/common/compat.c	/^tor_inet_ntop(int af, const void *src, char *dst, size_t len)$/;"	f
tor_inet_pton	src/common/compat.c	/^tor_inet_pton(int af, const char *src, void *dst)$/;"	f
tor_init	src/or/main.c	/^tor_init(int argc, char *argv[])$/;"	f
tor_init_libevent_rng	src/common/compat_libevent.c	/^tor_init_libevent_rng(void)$/;"	f
tor_init_weak_random	src/common/util.c	/^tor_init_weak_random(tor_weak_rng_t *rng, unsigned seed)$/;"	f
tor_join_win_cmdline	src/common/util.c	/^tor_join_win_cmdline(const char *argv[])$/;"	f
tor_libevent_cfg	src/common/compat_libevent.h	/^typedef struct tor_libevent_cfg {$/;"	s
tor_libevent_cfg	src/common/compat_libevent.h	/^} tor_libevent_cfg;$/;"	t	typeref:struct:tor_libevent_cfg
tor_libevent_get_base_mock	src/test/test_scheduler.c	/^tor_libevent_get_base_mock(void)$/;"	f	file:
tor_libevent_get_header_version_str	src/common/compat_libevent.c	/^tor_libevent_get_header_version_str(void)$/;"	f
tor_libevent_get_method	src/common/compat_libevent.c	/^tor_libevent_get_method(void)$/;"	f
tor_libevent_get_one_tick_timeout	src/common/compat_libevent.c	/^tor_libevent_get_one_tick_timeout(void)$/;"	f
tor_libevent_get_version_str	src/common/compat_libevent.c	/^tor_libevent_get_version_str(void)$/;"	f
tor_libevent_initialize	src/common/compat_libevent.c	/^tor_libevent_initialize(tor_libevent_cfg *torcfg)$/;"	f
tor_libevent_set_tick_timeout	src/common/compat_libevent.c	/^tor_libevent_set_tick_timeout(int msec_per_tick)$/;"	f	file:
tor_libevent_using_iocp_bufferevents	src/common/compat_libevent.c	/^tor_libevent_using_iocp_bufferevents(void)$/;"	f
tor_listdir	src/common/util.c	/^tor_listdir(const char *dirname)$/;"	f
tor_listen	src/or/connection.c	/^tor_listen(tor_socket_t fd)$/;"	f	file:
tor_llround	src/common/util.c	/^tor_llround(double d)$/;"	f
tor_localtime_r	src/common/compat.c	/^tor_localtime_r(const time_t *timep, struct tm *result)$/;"	f
tor_lockfile_lock	src/common/compat.c	/^tor_lockfile_lock(const char *filename, int blocking, int *locked_out)$/;"	f
tor_lockfile_t	src/common/compat.c	/^struct tor_lockfile_t {$/;"	s	file:
tor_lockfile_t	src/common/compat.h	/^typedef struct tor_lockfile_t tor_lockfile_t;$/;"	t	typeref:struct:tor_lockfile_t
tor_lockfile_unlock	src/common/compat.c	/^tor_lockfile_unlock(tor_lockfile_t *lockfile)$/;"	f
tor_log	src/common/log.c	/^tor_log(int severity, log_domain_mask_t domain, const char *format, ...)$/;"	f
tor_log2	src/common/util.c	/^tor_log2(uint64_t u64)$/;"	f
tor_log_err_sigsafe	src/common/log.c	/^tor_log_err_sigsafe(const char *m, ...)$/;"	f
tor_log_err_sigsafe_write	src/common/log.c	/^tor_log_err_sigsafe_write(const char *s)$/;"	f	file:
tor_log_get_logfile_names	src/common/log.c	/^tor_log_get_logfile_names(smartlist_t *out)$/;"	f
tor_log_get_sigsafe_err_fds	src/common/log.c	/^tor_log_get_sigsafe_err_fds(const int **out)$/;"	f
tor_log_mallinfo	src/common/util.c	/^tor_log_mallinfo(int severity)$/;"	f
tor_log_update_sigsafe_err_fds	src/common/log.c	/^tor_log_update_sigsafe_err_fds(void)$/;"	f
tor_lookup_hostname_01010101	src/test/test_config.c	/^tor_lookup_hostname_01010101(const char *name, uint32_t *addr)$/;"	f	file:
tor_lookup_hostname_failure	src/test/test_config.c	/^tor_lookup_hostname_failure(const char *name, uint32_t *addr)$/;"	f	file:
tor_lookup_hostname_localhost	src/test/test_config.c	/^tor_lookup_hostname_localhost(const char *name, uint32_t *addr)$/;"	f	file:
tor_lround	src/common/util.c	/^tor_lround(double d)$/;"	f
tor_main	src/or/main.c	/^tor_main(int argc, char *argv[])$/;"	f
tor_make_rsa_ed25519_crosscert	src/or/torcert.c	/^tor_make_rsa_ed25519_crosscert(const ed25519_public_key_t *ed_key,$/;"	f
tor_malloc	src/common/util.h	/^#define tor_malloc(/;"	d
tor_malloc_	src/common/util.c	/^tor_malloc_(size_t size DMALLOC_PARAMS)$/;"	f
tor_malloc_zero	src/common/util.h	/^#define tor_malloc_zero(/;"	d
tor_malloc_zero_	src/common/util.c	/^tor_malloc_zero_(size_t size DMALLOC_PARAMS)$/;"	f
tor_mathlog	src/common/util.c	/^tor_mathlog(double d)$/;"	f
tor_mem_is_zero	src/common/util.c	/^tor_mem_is_zero(const char *mem, size_t len)$/;"	f
tor_memcmp	src/common/di_ops.c	/^tor_memcmp(const void *a, const void *b, size_t len)$/;"	f
tor_memdup	src/common/util.h	/^#define tor_memdup(/;"	d
tor_memdup_	src/common/util.c	/^tor_memdup_(const void *mem, size_t len DMALLOC_PARAMS)$/;"	f
tor_memdup_nulterm	src/common/util.h	/^#define tor_memdup_nulterm(/;"	d
tor_memdup_nulterm_	src/common/util.c	/^tor_memdup_nulterm_(const void *mem, size_t len DMALLOC_PARAMS)$/;"	f
tor_memeq	src/common/di_ops.c	/^tor_memeq(const void *a, const void *b, size_t sz)$/;"	f
tor_memmem	src/common/compat.c	/^tor_memmem(const void *_haystack, size_t hlen,$/;"	f
tor_memneq	src/common/di_ops.h	/^#define tor_memneq(/;"	d
tor_memstr	src/common/compat.h	/^tor_memstr(const void *haystack, size_t hlen, const char *needle)$/;"	f
tor_mlockall	src/common/compat.c	/^tor_mlockall(void)$/;"	f
tor_mmap_file	src/common/compat.c	/^tor_mmap_file(const char *filename)$/;"	f
tor_mmap_t	src/common/compat.h	/^typedef struct tor_mmap_t {$/;"	s
tor_mmap_t	src/common/compat.h	/^} tor_mmap_t;$/;"	t	typeref:struct:tor_mmap_t
tor_munmap_file	src/common/compat.c	/^tor_munmap_file(tor_mmap_t *handle)$/;"	f
tor_mutex_acquire	src/common/compat_pthreads.c	/^tor_mutex_acquire(tor_mutex_t *m)$/;"	f
tor_mutex_free	src/common/compat_threads.c	/^tor_mutex_free(tor_mutex_t *m)$/;"	f
tor_mutex_init	src/common/compat_pthreads.c	/^tor_mutex_init(tor_mutex_t *mutex)$/;"	f
tor_mutex_init_for_cond	src/common/compat_threads.h	/^#define tor_mutex_init_for_cond(/;"	d
tor_mutex_init_nonrecursive	src/common/compat_pthreads.c	/^tor_mutex_init_nonrecursive(tor_mutex_t *mutex)$/;"	f
tor_mutex_new	src/common/compat_threads.c	/^tor_mutex_new(void)$/;"	f
tor_mutex_new_nonrecursive	src/common/compat_threads.c	/^tor_mutex_new_nonrecursive(void)$/;"	f
tor_mutex_release	src/common/compat_pthreads.c	/^tor_mutex_release(tor_mutex_t *m)$/;"	f
tor_mutex_t	src/common/compat_threads.h	/^typedef struct tor_mutex_t {$/;"	s
tor_mutex_t	src/common/compat_threads.h	/^} tor_mutex_t;$/;"	t	typeref:struct:tor_mutex_t
tor_mutex_uninit	src/common/compat_pthreads.c	/^tor_mutex_uninit(tor_mutex_t *m)$/;"	f
tor_open_cloexec	src/common/compat.c	/^tor_open_cloexec(const char *path, int flags, unsigned mode)$/;"	f
tor_open_socket_nonblocking	src/common/compat.c	/^tor_open_socket_nonblocking(int domain, int type, int protocol)$/;"	f
tor_open_socket_with_extensions	src/common/compat.c	/^tor_open_socket_with_extensions(int domain, int type, int protocol,$/;"	f
tor_parse_double	src/common/util.c	/^tor_parse_double(const char *s, double min, double max, int *ok, char **next)$/;"	f
tor_parse_long	src/common/util.c	/^tor_parse_long(const char *s, int base, long min, long max,$/;"	f
tor_parse_uint64	src/common/util.c	/^tor_parse_uint64(const char *s, int base, uint64_t min,$/;"	f
tor_parse_ulong	src/common/util.c	/^tor_parse_ulong(const char *s, int base, unsigned long min,$/;"	f
tor_passwd_dup	src/common/compat.c	/^tor_passwd_dup(const struct passwd *pw)$/;"	f	file:
tor_passwd_free	src/common/compat.c	/^tor_passwd_free(struct passwd *pw)$/;"	f	file:
tor_process_get_pid	src/common/util.c	/^tor_process_get_pid(process_handle_t *process_handle)$/;"	f
tor_process_get_stdout_pipe	src/common/util.c	/^tor_process_get_stdout_pipe(process_handle_t *process_handle)$/;"	f
tor_process_handle_destroy_replacement	src/test/test_pt.c	/^tor_process_handle_destroy_replacement(process_handle_t *process_handle,$/;"	f	file:
tor_process_monitor_free	src/common/procmon.c	/^tor_process_monitor_free(tor_process_monitor_t *procmon)$/;"	f
tor_process_monitor_new	src/common/procmon.c	/^tor_process_monitor_new(struct event_base *base,$/;"	f
tor_process_monitor_poll_cb	src/common/procmon.c	/^tor_process_monitor_poll_cb(evutil_socket_t unused1, short unused2,$/;"	f	file:
tor_process_monitor_t	src/common/procmon.c	/^struct tor_process_monitor_t {$/;"	s	file:
tor_process_monitor_t	src/common/procmon.h	/^typedef struct tor_process_monitor_t tor_process_monitor_t;$/;"	t	typeref:struct:tor_process_monitor_t
tor_procmon_callback_t	src/common/procmon.h	/^typedef void (*tor_procmon_callback_t)(void *);$/;"	t
tor_pthread_data_t	src/common/compat_pthreads.c	/^typedef struct tor_pthread_data_t {$/;"	s	file:
tor_pthread_data_t	src/common/compat_pthreads.c	/^} tor_pthread_data_t;$/;"	t	typeref:struct:tor_pthread_data_t	file:
tor_pthread_helper_fn	src/common/compat_pthreads.c	/^tor_pthread_helper_fn(void *_data)$/;"	f	file:
tor_read_all_from_process_stderr	src/common/util.c	/^tor_read_all_from_process_stderr(const process_handle_t *process_handle,$/;"	f
tor_read_all_from_process_stdout	src/common/util.c	/^tor_read_all_from_process_stdout(const process_handle_t *process_handle,$/;"	f
tor_read_all_handle	src/common/util.c	/^tor_read_all_handle(FILE *h, char *buf, size_t count,$/;"	f
tor_read_all_handle	src/common/util.c	/^tor_read_all_handle(HANDLE h, char *buf, size_t count,$/;"	f
tor_realloc	src/common/util.h	/^#define tor_realloc(/;"	d
tor_realloc_	src/common/util.c	/^tor_realloc_(void *ptr, size_t size DMALLOC_PARAMS)$/;"	f
tor_reallocarray	src/common/util.h	/^#define tor_reallocarray(/;"	d
tor_reallocarray_	src/common/util.c	/^tor_reallocarray_(void *ptr, size_t sz1, size_t sz2 DMALLOC_PARAMS)$/;"	f
tor_rename	src/common/compat.c	/^tor_rename(const char *path_old, const char *path_new)$/;"	f
tor_set_bufferevent_rate_limit	src/common/compat_libevent.c	/^tor_set_bufferevent_rate_limit(struct bufferevent *bev,$/;"	f
tor_set_max_memlock	src/common/compat.c	/^tor_set_max_memlock(void)$/;"	f	file:
tor_set_openssl_thread_id	src/common/crypto.c	/^tor_set_openssl_thread_id(CRYPTO_THREADID *threadid)$/;"	f	file:
tor_sleep_msec	src/common/compat.c	/^tor_sleep_msec(int msec)$/;"	f
tor_snprintf	src/common/compat.c	/^tor_snprintf(char *str, size_t size, const char *format, ...)$/;"	f
tor_sockaddr_to_str	src/common/address.c	/^tor_sockaddr_to_str(const struct sockaddr *sa)$/;"	f
tor_socket_errno	src/common/compat.c	/^tor_socket_errno(tor_socket_t sock)$/;"	f
tor_socket_errno	src/common/compat.h	/^#define tor_socket_errno(/;"	d
tor_socket_recv	src/common/compat.h	/^#define tor_socket_recv(/;"	d
tor_socket_send	src/common/compat.h	/^#define tor_socket_send(/;"	d
tor_socket_strerror	src/common/compat.c	/^tor_socket_strerror(int e)$/;"	f
tor_socket_strerror	src/common/compat.h	/^#define tor_socket_strerror(/;"	d
tor_socket_t	src/common/compat.h	/^#define tor_socket_t /;"	d
tor_socketpair	src/common/compat.c	/^tor_socketpair(int family, int type, int protocol, tor_socket_t fd[2])$/;"	f
tor_spawn_background	src/common/util.c	/^tor_spawn_background(const char *const filename, const char **argv,$/;"	f
tor_split_lines	src/common/util.c	/^tor_split_lines(smartlist_t *sl, char *buf, int len)$/;"	f
tor_sscanf	src/common/util.c	/^tor_sscanf(const char *buf, const char *pattern, ...)$/;"	f
tor_strdup	src/common/util.h	/^#define tor_strdup(/;"	d
tor_strdup_	src/common/util.c	/^tor_strdup_(const char *s DMALLOC_PARAMS)$/;"	f
tor_strisnonupper	src/common/util.c	/^tor_strisnonupper(const char *s)$/;"	f
tor_strisprint	src/common/util.c	/^tor_strisprint(const char *s)$/;"	f
tor_strlower	src/common/util.c	/^tor_strlower(char *s)$/;"	f
tor_strndup	src/common/util.h	/^#define tor_strndup(/;"	d
tor_strndup_	src/common/util.c	/^tor_strndup_(const char *s, size_t n DMALLOC_PARAMS)$/;"	f
tor_strstrip	src/common/util.c	/^tor_strstrip(char *s, const char *strip)$/;"	f
tor_strtok_r	src/common/compat.h	/^#define tor_strtok_r(/;"	d
tor_strtok_r_impl	src/common/compat.c	/^tor_strtok_r_impl(char *str, const char *sep, char **lasts)$/;"	f
tor_strupper	src/common/util.c	/^tor_strupper(char *s)$/;"	f
tor_terminate_process	src/common/util.c	/^tor_terminate_process(process_handle_t *process_handle)$/;"	f
tor_threadlocal_destroy	src/common/compat_pthreads.c	/^tor_threadlocal_destroy(tor_threadlocal_t *threadlocal)$/;"	f
tor_threadlocal_get	src/common/compat_pthreads.c	/^tor_threadlocal_get(tor_threadlocal_t *threadlocal)$/;"	f
tor_threadlocal_init	src/common/compat_pthreads.c	/^tor_threadlocal_init(tor_threadlocal_t *threadlocal)$/;"	f
tor_threadlocal_s	src/common/compat_threads.h	/^typedef struct tor_threadlocal_s {$/;"	s
tor_threadlocal_set	src/common/compat_pthreads.c	/^tor_threadlocal_set(tor_threadlocal_t *threadlocal, void *value)$/;"	f
tor_threadlocal_t	src/common/compat_threads.h	/^} tor_threadlocal_t;$/;"	t	typeref:struct:tor_threadlocal_s
tor_threads_init	src/common/compat_pthreads.c	/^tor_threads_init(void)$/;"	f
tor_timegm	src/common/util.c	/^tor_timegm(const struct tm *tm, time_t *time_out)$/;"	f
tor_timegm	src/test/test_util.c	/^#define tor_timegm /;"	d	file:
tor_timegm_wrapper	src/test/test_util.c	/^tor_timegm_wrapper(const struct tm *tm)$/;"	f	file:
tor_tls_allocate_tor_tls_object_ex_data_index	src/common/tortls.c	/^tor_tls_allocate_tor_tls_object_ex_data_index(void)$/;"	f
tor_tls_assert_renegotiation_unblocked	src/common/tortls.c	/^tor_tls_assert_renegotiation_unblocked(tor_tls_t *tls)$/;"	f
tor_tls_block_renegotiation	src/common/tortls.c	/^tor_tls_block_renegotiation(tor_tls_t *tls)$/;"	f
tor_tls_cert_get_key	src/common/tortls.c	/^tor_tls_cert_get_key(tor_x509_cert_t *cert)$/;"	f
tor_tls_cert_is_valid	src/common/tortls.c	/^tor_tls_cert_is_valid(int severity,$/;"	f
tor_tls_check_lifetime	src/common/tortls.c	/^tor_tls_check_lifetime(int severity, tor_tls_t *tls,$/;"	f
tor_tls_classify_client_ciphers	src/common/tortls.c	/^tor_tls_classify_client_ciphers(const SSL *ssl,$/;"	f
tor_tls_client_is_using_v2_ciphers	src/common/tortls.c	/^tor_tls_client_is_using_v2_ciphers(const SSL *ssl)$/;"	f
tor_tls_context_decref	src/common/tortls.c	/^tor_tls_context_decref(tor_tls_context_t *ctx)$/;"	f	file:
tor_tls_context_incref	src/common/tortls.c	/^tor_tls_context_incref(tor_tls_context_t *ctx)$/;"	f	file:
tor_tls_context_init	src/common/tortls.c	/^tor_tls_context_init(unsigned flags,$/;"	f
tor_tls_context_init_one	src/common/tortls.c	/^tor_tls_context_init_one(tor_tls_context_t **ppcontext,$/;"	f	file:
tor_tls_context_new	src/common/tortls.c	/^tor_tls_context_new(crypto_pk_t *identity, unsigned int key_lifetime,$/;"	f	file:
tor_tls_context_t	src/common/tortls.h	/^typedef struct tor_tls_context_t {$/;"	s
tor_tls_context_t	src/common/tortls.h	/^} tor_tls_context_t;$/;"	t	typeref:struct:tor_tls_context_t
tor_tls_create_certificate	src/common/tortls.c	/^tor_tls_create_certificate(crypto_pk_t *rsa,$/;"	f	file:
tor_tls_debug_state_callback	src/common/tortls.c	/^tor_tls_debug_state_callback(const SSL *ssl, int type, int val)$/;"	f	file:
tor_tls_err_to_string	src/common/tortls.c	/^tor_tls_err_to_string(int err)$/;"	f
tor_tls_finish_handshake	src/common/tortls.c	/^tor_tls_finish_handshake(tor_tls_t *tls)$/;"	f
tor_tls_free	src/common/tortls.c	/^tor_tls_free(tor_tls_t *tls)$/;"	f
tor_tls_free_all	src/common/tortls.c	/^tor_tls_free_all(void)$/;"	f
tor_tls_get_buffer_sizes	src/common/tortls.c	/^tor_tls_get_buffer_sizes(tor_tls_t *tls,$/;"	f
tor_tls_get_by_ssl	src/common/tortls.c	/^tor_tls_get_by_ssl(const SSL *ssl)$/;"	f
tor_tls_get_ciphersuite_name	src/common/tortls.c	/^tor_tls_get_ciphersuite_name(tor_tls_t *tls)$/;"	f
tor_tls_get_error	src/common/tortls.c	/^tor_tls_get_error(tor_tls_t *tls, int r, int extra,$/;"	f
tor_tls_get_forced_write_size	src/common/tortls.c	/^tor_tls_get_forced_write_size(tor_tls_t *tls)$/;"	f
tor_tls_get_my_certs	src/common/tortls.c	/^tor_tls_get_my_certs(int server,$/;"	f
tor_tls_get_my_client_auth_key	src/common/tortls.c	/^tor_tls_get_my_client_auth_key(void)$/;"	f
tor_tls_get_n_raw_bytes	src/common/tortls.c	/^tor_tls_get_n_raw_bytes(tor_tls_t *tls, size_t *n_read, size_t *n_written)$/;"	f
tor_tls_get_num_server_handshakes	src/common/tortls.c	/^tor_tls_get_num_server_handshakes(tor_tls_t *tls)$/;"	f
tor_tls_get_pending_bytes	src/common/tortls.c	/^tor_tls_get_pending_bytes(tor_tls_t *tls)$/;"	f
tor_tls_get_state_description	src/common/tortls.c	/^tor_tls_get_state_description(tor_tls_t *tls, char *buf, size_t sz)$/;"	f
tor_tls_handshake	src/common/tortls.c	/^tor_tls_handshake(tor_tls_t *tls)$/;"	f
tor_tls_init	src/common/tortls.c	/^tor_tls_init(void)$/;"	f	file:
tor_tls_init_bufferevent	src/common/tortls.c	/^tor_tls_init_bufferevent(tor_tls_t *tls, struct bufferevent *bufev_in,$/;"	f
tor_tls_is_server	src/common/tortls.c	/^tor_tls_is_server(tor_tls_t *tls)$/;"	f
tor_tls_log_one_error	src/common/tortls.c	/^tor_tls_log_one_error(tor_tls_t *tls, unsigned long err,$/;"	f
tor_tls_new	src/common/tortls.c	/^tor_tls_new(int sock, int isServer)$/;"	f
tor_tls_object_ex_data_index	src/common/tortls.c	/^STATIC int tor_tls_object_ex_data_index = -1;$/;"	v
tor_tls_peer_has_cert	src/common/tortls.c	/^tor_tls_peer_has_cert(tor_tls_t *tls)$/;"	f
tor_tls_received_v3_certificate	src/common/tortls.c	/^tor_tls_received_v3_certificate(tor_tls_t *tls)$/;"	f
tor_tls_renegotiate	src/common/tortls.c	/^tor_tls_renegotiate(tor_tls_t *tls)$/;"	f
tor_tls_server_got_renegotiate	src/common/tortls.c	/^tor_tls_server_got_renegotiate(tor_tls_t *tls)$/;"	f
tor_tls_server_info_callback	src/common/tortls.c	/^tor_tls_server_info_callback(const SSL *ssl, int type, int val)$/;"	f	file:
tor_tls_session_secret_cb	src/common/tortls.c	/^tor_tls_session_secret_cb(SSL *ssl, void *secret, int *secret_len,$/;"	f	file:
tor_tls_set_logged_address	src/common/tortls.c	/^tor_tls_set_logged_address(tor_tls_t *tls, const char *address)$/;"	f
tor_tls_set_renegotiate_callback	src/common/tortls.c	/^tor_tls_set_renegotiate_callback(tor_tls_t *tls,$/;"	f
tor_tls_setup_session_secret_cb	src/common/tortls.c	/^tor_tls_setup_session_secret_cb(tor_tls_t *tls)$/;"	f	file:
tor_tls_shutdown	src/common/tortls.c	/^tor_tls_shutdown(tor_tls_t *tls)$/;"	f
tor_tls_start_renegotiating	src/common/tortls.c	/^tor_tls_start_renegotiating(tor_tls_t *tls)$/;"	f
tor_tls_state_bitfield_t	src/common/tortls.h	/^#define tor_tls_state_bitfield_t /;"	d
tor_tls_state_t	src/common/tortls.h	/^} tor_tls_state_t;$/;"	t	typeref:enum:__anon30
tor_tls_t	src/common/tortls.h	/^struct tor_tls_t {$/;"	s
tor_tls_t	src/common/tortls.h	/^typedef struct tor_tls_t tor_tls_t;$/;"	t	typeref:struct:tor_tls_t
tor_tls_unblock_renegotiation	src/common/tortls.c	/^tor_tls_unblock_renegotiation(tor_tls_t *tls)$/;"	f
tor_tls_used_v1_handshake	src/common/tortls.c	/^tor_tls_used_v1_handshake(tor_tls_t *tls)$/;"	f
tor_tls_verify	src/common/tortls.c	/^tor_tls_verify(int severity, tor_tls_t *tls, crypto_pk_t **identity_key)$/;"	f
tor_tls_write	src/common/tortls.c	/^tor_tls_write(tor_tls_t *tls, const char *cp, size_t n)$/;"	f
tor_validate_process_specifier	src/common/procmon.c	/^tor_validate_process_specifier(const char *process_spec,$/;"	f
tor_vasprintf	src/common/compat.c	/^tor_vasprintf(char **strp, const char *fmt, va_list args)$/;"	f
tor_version_as_new_as	src/or/routerparse.c	/^tor_version_as_new_as(const char *platform, const char *cutoff)$/;"	f
tor_version_compare	src/or/routerparse.c	/^tor_version_compare(tor_version_t *a, tor_version_t *b)$/;"	f
tor_version_is_obsolete	src/or/routerparse.c	/^tor_version_is_obsolete(const char *myversion, const char *versionlist)$/;"	f
tor_version_parse	src/or/routerparse.c	/^tor_version_parse(const char *s, tor_version_t *out)$/;"	f
tor_version_same_series	src/or/routerparse.c	/^tor_version_same_series(tor_version_t *a, tor_version_t *b)$/;"	f
tor_version_t	src/or/or.h	/^typedef struct tor_version_t {$/;"	s
tor_version_t	src/or/or.h	/^} tor_version_t;$/;"	t	typeref:struct:tor_version_t
tor_vsnprintf	src/common/compat.c	/^tor_vsnprintf(char *str, size_t size, const char *format, va_list args)$/;"	f
tor_vsscanf	src/common/util.c	/^tor_vsscanf(const char *buf, const char *pattern, va_list ap)$/;"	f
tor_weak_random	src/common/util.c	/^tor_weak_random(tor_weak_rng_t *rng)$/;"	f
tor_weak_random_one_in_n	src/common/util.h	/^#define tor_weak_random_one_in_n(/;"	d
tor_weak_random_range	src/common/util.c	/^tor_weak_random_range(tor_weak_rng_t *rng, int32_t top)$/;"	f
tor_weak_rng_t	src/common/util.h	/^typedef struct tor_weak_rng_t {$/;"	s
tor_weak_rng_t	src/common/util.h	/^} tor_weak_rng_t;$/;"	t	typeref:struct:tor_weak_rng_t
tor_x509_cert_decode	src/common/tortls.c	/^tor_x509_cert_decode(const uint8_t *certificate, size_t certificate_len)$/;"	f
tor_x509_cert_free	src/common/tortls.c	/^tor_x509_cert_free(tor_x509_cert_t *cert)$/;"	f
tor_x509_cert_get_cert_digests	src/common/tortls.c	/^tor_x509_cert_get_cert_digests(const tor_x509_cert_t *cert)$/;"	f
tor_x509_cert_get_der	src/common/tortls.c	/^tor_x509_cert_get_der(const tor_x509_cert_t *cert,$/;"	f
tor_x509_cert_get_id_digests	src/common/tortls.c	/^tor_x509_cert_get_id_digests(const tor_x509_cert_t *cert)$/;"	f
tor_x509_cert_new	src/common/tortls.c	/^tor_x509_cert_new(X509 *x509_cert)$/;"	f	file:
tor_x509_cert_t	src/common/tortls.h	/^struct tor_x509_cert_t {$/;"	s
tor_x509_cert_t	src/common/tortls.h	/^typedef struct tor_x509_cert_t tor_x509_cert_t;$/;"	t	typeref:struct:tor_x509_cert_t
tor_x509_name_new	src/common/tortls.c	/^tor_x509_name_new(const char *cname)$/;"	f	file:
tor_zlib_free	src/common/torgzip.c	/^tor_zlib_free(tor_zlib_state_t *state)$/;"	f
tor_zlib_get_header_version_str	src/common/torgzip.c	/^tor_zlib_get_header_version_str(void)$/;"	f
tor_zlib_get_total_allocation	src/common/torgzip.c	/^tor_zlib_get_total_allocation(void)$/;"	f
tor_zlib_get_version_str	src/common/torgzip.c	/^tor_zlib_get_version_str(void)$/;"	f
tor_zlib_new	src/common/torgzip.c	/^tor_zlib_new(int compress, compress_method_t method,$/;"	f
tor_zlib_output_t	src/common/torgzip.h	/^} tor_zlib_output_t;$/;"	t	typeref:enum:__anon82
tor_zlib_process	src/common/torgzip.c	/^tor_zlib_process(tor_zlib_state_t *state,$/;"	f
tor_zlib_state_size	src/common/torgzip.c	/^tor_zlib_state_size(const tor_zlib_state_t *state)$/;"	f
tor_zlib_state_size_precalc	src/common/torgzip.c	/^tor_zlib_state_size_precalc(int inflate, int windowbits, int memlevel)$/;"	f	file:
tor_zlib_state_t	src/common/torgzip.c	/^struct tor_zlib_state_t {$/;"	s	file:
tor_zlib_state_t	src/common/torgzip.h	/^typedef struct tor_zlib_state_t tor_zlib_state_t;$/;"	t	typeref:struct:tor_zlib_state_t
torrc_defaults_fname	src/or/config.c	/^static char *torrc_defaults_fname;$/;"	v	file:
torrc_fname	src/or/config.c	/^static char *torrc_fname = NULL;$/;"	v	file:
tortls_tests	src/test/test_tortls.c	/^struct testcase_t tortls_tests[] = {$/;"	v	typeref:struct:testcase_t
total	src/or/geoip.c	/^  unsigned total; \/**< Total IP addresses seen in this country. *\/$/;"	m	struct:c_hist_t	file:
total_build_times	src/or/circuitstats.h	/^  int total_build_times;$/;"	m	struct:circuit_build_times_s
total_bytes_allocated_in_chunks	src/or/buffers.c	/^static size_t total_bytes_allocated_in_chunks = 0;$/;"	v	file:
total_bytes_written_by_tls	src/common/tortls.c	/^STATIC uint64_t total_bytes_written_by_tls = 0;$/;"	v
total_bytes_written_over_tls	src/common/tortls.c	/^STATIC uint64_t total_bytes_written_over_tls = 0;$/;"	v
total_cell_waiting_time	src/or/or.h	/^  uint64_t total_cell_waiting_time;$/;"	m	struct:or_circuit_t
total_cells_allocated	src/or/relay.c	/^static size_t total_cells_allocated = 0;$/;"	v	file:
total_descriptor_downloads	src/or/rephist.c	/^static unsigned long total_descriptor_downloads;$/;"	v	file:
total_in_period	src/or/rephist.c	/^  uint64_t total_in_period; \/**< Total bytes transferred in the current$/;"	m	struct:bw_array_t	file:
total_len_seen	src/or/microdesc.c	/^  uint64_t total_len_seen;$/;"	m	struct:microdesc_cache_t	file:
total_obs	src/or/rephist.c	/^  uint64_t total_obs; \/**< Total for all members of obs except$/;"	m	struct:bw_array_t	file:
total_pending_tasks	src/or/cpuworker.c	/^static int total_pending_tasks = 0;$/;"	v	file:
total_run_weights	src/or/rephist.c	/^  double total_run_weights;$/;"	m	struct:or_history_t	file:
total_time_appward	src/or/control.h	/^  uint64_t total_time_appward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
total_time_exitward	src/or/control.h	/^  uint64_t total_time_exitward[CELL_COMMAND_MAX_ + 1];$/;"	m	struct:cell_stats_t
total_weighted_time	src/or/rephist.c	/^  unsigned long total_weighted_time;$/;"	m	struct:or_history_t	file:
total_zlib_allocation	src/common/torgzip.c	/^static size_t total_zlib_allocation = 0;$/;"	v	file:
totals	src/or/rephist.c	/^  uint64_t totals[NUM_TOTALS];$/;"	m	struct:bw_array_t	file:
touch_file	src/common/compat.c	/^touch_file(const char *fname)$/;"	f
tp	src/or/routerparse.c	/^  directory_keyword tp;        \/**< Type of the token. *\/$/;"	m	struct:directory_token_t	file:
transport_add	src/or/transports.c	/^transport_add(transport_t *t)$/;"	f	file:
transport_add_from_config_mock	src/test/test_config.c	/^transport_add_from_config_mock(const tor_addr_t *addr,$/;"	f	file:
transport_add_from_config_mock_call_count	src/test/test_config.c	/^static int transport_add_from_config_mock_call_count = 0;$/;"	v	file:
transport_copy	src/or/transports.c	/^transport_copy(const transport_t *transport)$/;"	f	file:
transport_free	src/or/transports.c	/^transport_free(transport_t *transport)$/;"	f
transport_get_by_name	src/or/transports.c	/^transport_get_by_name(const char *name)$/;"	f
transport_is_needed_mock	src/test/test_config.c	/^transport_is_needed_mock(const char *transport_name)$/;"	f	file:
transport_is_needed_mock_call_count	src/test/test_config.c	/^static int transport_is_needed_mock_call_count = 0;$/;"	v	file:
transport_is_needed_mock_return	src/test/test_config.c	/^static int transport_is_needed_mock_return = 0;$/;"	v	file:
transport_list	src/or/transports.c	/^static smartlist_t *transport_list = NULL;$/;"	v	file:
transport_name	src/or/config.h	/^  char *transport_name; \/* The name of the pluggable transport that$/;"	m	struct:bridge_line_t
transport_name	src/or/entrynodes.c	/^  char *transport_name;$/;"	m	struct:__anon32	file:
transport_name	src/or/geoip.c	/^  char *transport_name;$/;"	m	struct:clientmap_entry_t	file:
transport_new	src/or/transports.c	/^transport_new(const tor_addr_t *addr, uint16_t port,$/;"	f	file:
transport_resolve_conflicts	src/or/transports.c	/^transport_resolve_conflicts(const transport_t *t)$/;"	f	file:
transport_t	src/or/transports.h	/^typedef struct transport_t {$/;"	s
transport_t	src/or/transports.h	/^} transport_t;$/;"	t	typeref:struct:transport_t
transports	src/or/transports.h	/^  smartlist_t *transports;$/;"	m	struct:__anon34
transports_to_launch	src/or/transports.h	/^  smartlist_t *transports_to_launch;$/;"	m	struct:__anon34
truncate_logs	src/common/log.c	/^truncate_logs(void)$/;"	f
truncated_md	src/test/test_microdesc.c	/^static const char truncated_md[] =$/;"	v	file:
trunnel_abort	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_abort(/;"	d
trunnel_assert	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_assert(/;"	d
trunnel_assert	src/trunnel/trunnel-local.h	/^#define trunnel_assert /;"	d
trunnel_calloc	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_calloc(/;"	d
trunnel_calloc	src/ext/trunnel/trunnel-impl.h	/^trunnel_calloc(size_t a, size_t b)$/;"	f
trunnel_calloc	src/trunnel/trunnel-local.h	/^#define trunnel_calloc /;"	d
trunnel_dynarray_expand	src/ext/trunnel/trunnel.c	/^trunnel_dynarray_expand(size_t *allocated_p, void *ptr,$/;"	f
trunnel_dynarray_setlen	src/ext/trunnel/trunnel.c	/^trunnel_dynarray_setlen(size_t *allocated_p, size_t *len_p,$/;"	f
trunnel_error_code_	src/trunnel/ed25519_cert.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:ed25519_cert_extension_st
trunnel_error_code_	src/trunnel/ed25519_cert.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:ed25519_cert_st
trunnel_error_code_	src/trunnel/link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:auth1_st
trunnel_error_code_	src/trunnel/link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:auth_challenge_cell_st
trunnel_error_code_	src/trunnel/link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:auth_ctx_st
trunnel_error_code_	src/trunnel/link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:certs_cell_cert_st
trunnel_error_code_	src/trunnel/link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:certs_cell_st
trunnel_error_code_	src/trunnel/link_handshake.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:rsa_ed_crosscert_st
trunnel_error_code_	src/trunnel/pwbox.h	/^  uint8_t trunnel_error_code_;$/;"	m	struct:pwbox_encoded_st
trunnel_free	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_free(/;"	d
trunnel_free_	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_free_(/;"	d
trunnel_free_	src/trunnel/trunnel-local.h	/^#define trunnel_free_ /;"	d
trunnel_free_fn_t	src/ext/trunnel/trunnel-impl.h	/^typedef void (*trunnel_free_fn_t)(void *);$/;"	t
trunnel_get_uint16	src/ext/trunnel/trunnel-impl.h	/^trunnel_get_uint16(const void *p) {$/;"	f
trunnel_get_uint32	src/ext/trunnel/trunnel-impl.h	/^trunnel_get_uint32(const void *p) {$/;"	f
trunnel_get_uint64	src/ext/trunnel/trunnel-impl.h	/^trunnel_get_uint64(const void *p) {$/;"	f
trunnel_get_uint8	src/ext/trunnel/trunnel-impl.h	/^trunnel_get_uint8(const void *p) {$/;"	f
trunnel_htonl	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_htonl(/;"	d
trunnel_htonl	src/ext/trunnel/trunnel.c	/^trunnel_htonl(uint32_t s)$/;"	f
trunnel_htonll	src/ext/trunnel/trunnel.c	/^trunnel_htonll(uint64_t a)$/;"	f
trunnel_htons	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_htons(/;"	d
trunnel_htons	src/ext/trunnel/trunnel.c	/^trunnel_htons(uint16_t s)$/;"	f
trunnel_malloc	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_malloc(/;"	d
trunnel_malloc	src/ext/trunnel/trunnel-impl.h	/^trunnel_malloc(size_t n)$/;"	f
trunnel_malloc	src/trunnel/trunnel-local.h	/^#define trunnel_malloc /;"	d
trunnel_memwipe	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_memwipe(/;"	d
trunnel_memwipe	src/trunnel/trunnel-local.h	/^#define trunnel_memwipe(/;"	d
trunnel_ntohl	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_ntohl(/;"	d
trunnel_ntohl	src/ext/trunnel/trunnel.c	/^trunnel_ntohl(uint32_t s)$/;"	f
trunnel_ntohll	src/ext/trunnel/trunnel.c	/^trunnel_ntohll(uint64_t a)$/;"	f
trunnel_ntohs	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_ntohs(/;"	d
trunnel_ntohs	src/ext/trunnel/trunnel.c	/^trunnel_ntohs(uint16_t s)$/;"	f
trunnel_provoke_alloc_failure	src/ext/trunnel/trunnel.c	/^int trunnel_provoke_alloc_failure = 0;$/;"	v
trunnel_realloc	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_realloc(/;"	d
trunnel_realloc	src/trunnel/trunnel-local.h	/^#define trunnel_realloc /;"	d
trunnel_reallocarray	src/ext/trunnel/trunnel.c	/^trunnel_reallocarray(void *a, size_t x, size_t y)$/;"	f
trunnel_reallocarray	src/trunnel/trunnel-local.h	/^#define trunnel_reallocarray /;"	d
trunnel_set_uint16	src/ext/trunnel/trunnel-impl.h	/^trunnel_set_uint16(void *p, uint16_t v) {$/;"	f
trunnel_set_uint32	src/ext/trunnel/trunnel-impl.h	/^trunnel_set_uint32(void *p, uint32_t v) {$/;"	f
trunnel_set_uint64	src/ext/trunnel/trunnel-impl.h	/^trunnel_set_uint64(void *p, uint64_t v) {$/;"	f
trunnel_set_uint8	src/ext/trunnel/trunnel-impl.h	/^trunnel_set_uint8(void *p, uint8_t v) {$/;"	f
trunnel_strdup	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_strdup(/;"	d
trunnel_strdup	src/ext/trunnel/trunnel-impl.h	/^trunnel_strdup(const char *s)$/;"	f
trunnel_strdup	src/trunnel/trunnel-local.h	/^#define trunnel_strdup /;"	d
trunnel_string_getstr	src/ext/trunnel/trunnel.c	/^trunnel_string_getstr(trunnel_string_t *str)$/;"	f
trunnel_string_setlen	src/ext/trunnel/trunnel.c	/^trunnel_string_setlen(trunnel_string_t *str, size_t newlen,$/;"	f
trunnel_string_setstr0	src/ext/trunnel/trunnel.c	/^trunnel_string_setstr0(trunnel_string_t *str, const char *val, size_t len,$/;"	f
trunnel_string_t	src/ext/trunnel/trunnel.h	/^typedef TRUNNEL_DYNARRAY_HEAD(trunnel_string_st, char) trunnel_string_t;$/;"	t
trunnel_wipestr	src/ext/trunnel/trunnel-impl.h	/^#define trunnel_wipestr(/;"	d
trusted_dir_certs	src/or/routerlist.c	/^static digestmap_t *trusted_dir_certs = NULL;$/;"	v	file:
trusted_dir_server_new	src/or/routerlist.c	/^trusted_dir_server_new(const char *nickname, const char *address,$/;"	f
trusted_dir_servers	src/or/routerlist.c	/^static smartlist_t *trusted_dir_servers = NULL;$/;"	v	file:
trusted_dir_servers_certs_changed	src/or/routerlist.c	/^static int trusted_dir_servers_certs_changed = 0;$/;"	v	file:
trusted_dirs_flush_certs_to_disk	src/or/routerlist.c	/^trusted_dirs_flush_certs_to_disk(void)$/;"	f
trusted_dirs_load_certs_from_string	src/or/routerlist.c	/^trusted_dirs_load_certs_from_string(const char *contents, int source,$/;"	f
trusted_dirs_reload_certs	src/or/routerlist.c	/^trusted_dirs_reload_certs(void)$/;"	f
trusted_dirs_remove_old_certs	src/or/routerlist.c	/^trusted_dirs_remove_old_certs(void)$/;"	f	file:
trusteddirserver_get_by_v3_auth_digest	src/or/routerlist.c	/^trusteddirserver_get_by_v3_auth_digest(const char *digest)$/;"	f
try_getting_descriptors	src/or/main.h	/^  time_t try_getting_descriptors;$/;"	m	struct:__anon5
try_load_engine	src/common/crypto.c	/^try_load_engine(const char *path, const char *engine)$/;"	f	file:
try_locking	src/test/test_config.c	/^NS(try_locking)(const or_options_t *options, int err_if_locked)$/;"	f
try_to_register	src/or/main.c	/^  int try_to_register;$/;"	m	struct:__anon4	file:
tt_abort	src/ext/tinytest_macros.h	/^#define tt_abort(/;"	d
tt_abort_msg	src/ext/tinytest_macros.h	/^#define tt_abort_msg(/;"	d
tt_abort_perror	src/ext/tinytest_macros.h	/^#define tt_abort_perror(/;"	d
tt_abort_printf	src/ext/tinytest_macros.h	/^#define tt_abort_printf(/;"	d
tt_assert	src/ext/tinytest_macros.h	/^#define tt_assert(/;"	d
tt_assert_msg	src/ext/tinytest_macros.h	/^#define tt_assert_msg(/;"	d
tt_assert_op_type	src/ext/tinytest_macros.h	/^#define tt_assert_op_type(/;"	d
tt_assert_test_fmt_type	src/ext/tinytest_macros.h	/^#define tt_assert_test_fmt_type(/;"	d
tt_assert_test_type	src/ext/tinytest_macros.h	/^#define tt_assert_test_type(/;"	d
tt_assert_test_type_opt	src/ext/tinytest_macros.h	/^#define tt_assert_test_type_opt(/;"	d
tt_char_op	src/test/test_util.c	/^#define tt_char_op(/;"	d	file:
tt_char_op	src/test/test_util.c	/^#undef tt_char_op$/;"	d	file:
tt_ci_char_op	src/test/test_util.c	/^#define tt_ci_char_op(/;"	d	file:
tt_ci_char_op	src/test/test_util.c	/^#undef tt_ci_char_op$/;"	d	file:
tt_double_eq	src/test/test.h	/^#define tt_double_eq(/;"	d
tt_double_op	src/test/test.h	/^#define tt_double_op(/;"	d
tt_fail	src/ext/tinytest_macros.h	/^#define tt_fail(/;"	d
tt_fail_msg	src/ext/tinytest_macros.h	/^#define tt_fail_msg(/;"	d
tt_fail_perror	src/ext/tinytest_macros.h	/^#define tt_fail_perror(/;"	d
tt_failprint_f	src/ext/tinytest_macros.h	/^#define tt_failprint_f(/;"	d
tt_i64_op	src/test/test.h	/^#define tt_i64_op(/;"	d
tt_int_op	src/ext/tinytest_macros.h	/^#define tt_int_op(/;"	d
tt_int_op_nowin	src/test/test_checkdir.c	/^#define tt_int_op_nowin(/;"	d	file:
tt_mem_op	src/ext/tinytest_macros.h	/^#define tt_mem_op(/;"	d
tt_ptr_op	src/ext/tinytest_macros.h	/^#define tt_ptr_op(/;"	d
tt_size_op	src/test/test.h	/^#define tt_size_op(/;"	d
tt_skip	src/ext/tinytest_macros.h	/^#define tt_skip(/;"	d
tt_str_op	src/ext/tinytest_macros.h	/^#define tt_str_op(/;"	d
tt_u64_op	src/test/test.h	/^#define tt_u64_op(/;"	d
tt_uint_op	src/ext/tinytest_macros.h	/^#define tt_uint_op(/;"	d
tt_versionstatus_op	src/test/test_dir.c	/^#define tt_versionstatus_op(/;"	d	file:
tt_want	src/ext/tinytest_macros.h	/^#define tt_want(/;"	d
tt_want_	src/ext/tinytest_macros.h	/^#define tt_want_(/;"	d
tt_want_int_op	src/ext/tinytest_macros.h	/^#define tt_want_int_op(/;"	d
tt_want_msg	src/ext/tinytest_macros.h	/^#define tt_want_msg(/;"	d
tt_want_ptr_op	src/ext/tinytest_macros.h	/^#define tt_want_ptr_op(/;"	d
tt_want_str_op	src/ext/tinytest_macros.h	/^#define tt_want_str_op(/;"	d
tt_want_uint_op	src/ext/tinytest_macros.h	/^#define tt_want_uint_op(/;"	d
ttl	src/or/relay.h	/^  int ttl;$/;"	m	struct:address_ttl_s
ttl_hostname	src/or/dns_structs.h	/^  uint32_t ttl_hostname; \/**< What TTL did the nameserver tell us? *\/$/;"	m	struct:cached_resolve_t
ttl_ipv4	src/or/dns_structs.h	/^  uint32_t ttl_ipv4; \/**< What TTL did the nameserver tell us? *\/$/;"	m	struct:cached_resolve_t
ttl_ipv6	src/or/dns_structs.h	/^  uint32_t ttl_ipv6; \/**< What TTL did the nameserver tell us? *\/$/;"	m	struct:cached_resolve_t
tv	src/common/compat_libevent.c	/^  struct timeval tv;$/;"	m	struct:periodic_timer_t	typeref:struct:periodic_timer_t::timeval	file:
tv	src/test/test_threads.c	/^  const struct timeval *tv;$/;"	m	struct:cv_testinfo_s	typeref:struct:cv_testinfo_s::timeval	file:
tv_mdiff	src/common/util.c	/^tv_mdiff(const struct timeval *start, const struct timeval *end)$/;"	f
tv_sec	src/common/compat.h	/^  time_t tv_sec;$/;"	m	struct:timeval
tv_start	src/test/bench.c	/^static struct timeval tv_start = { 0, 0 };$/;"	v	typeref:struct:timeval	file:
tv_to_msec	src/common/util.c	/^tv_to_msec(const struct timeval *tv)$/;"	f
tv_udiff	src/common/util.c	/^tv_udiff(const struct timeval *start, const struct timeval *end)$/;"	f
tv_usec	src/common/compat.h	/^  unsigned int tv_usec;$/;"	m	struct:timeval
tweakset_t	src/or/onion_ntor.c	/^typedef struct tweakset_t {$/;"	s	file:
tweakset_t	src/or/onion_ntor.c	/^} tweakset_t;$/;"	t	typeref:struct:tweakset_t	file:
twoP0	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^static const uint32_t twoP0       = 0x07ffffda;$/;"	v
twoP0	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^static const uint64_t twoP0      = 0x0fffffffffffda;$/;"	v
twoP1234	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^static const uint64_t twoP1234   = 0x0ffffffffffffe;$/;"	v
twoP13579	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^static const uint32_t twoP13579   = 0x03fffffe;$/;"	v
twoP2468	src/ext/ed25519/donna/curve25519-donna-32bit.h	/^static const uint32_t twoP2468    = 0x07fffffe;$/;"	v
type	src/ext/eventdns.h	/^	int type;$/;"	m	struct:evdns_server_question
type	src/or/channel.h	/^  } type;$/;"	m	struct:cell_queue_entry_s	typeref:enum:cell_queue_entry_s::__anon91
type	src/or/confparse.h	/^  config_type_t type; \/**< How to interpret the type and turn it into a$/;"	m	struct:config_var_t
type	src/or/geoip.c	/^  unsigned int type:1; \/**< Is this a direct or a tunneled request? *\/$/;"	m	struct:dirreq_map_entry_t	file:
type	src/or/or.h	/^  dirinfo_type_t type;$/;"	m	struct:dir_server_t
type	src/or/or.h	/^  networkstatus_type_t type; \/**< Vote, consensus, or opinion? *\/$/;"	m	struct:networkstatus_t
type	src/or/or.h	/^  store_type_t type; \/**< What's stored in this store? *\/$/;"	m	struct:desc_store_t
type	src/or/or.h	/^  uint8_t type; \/**< One of CONN_TYPE_*_LISTENER *\/$/;"	m	struct:port_cfg_t
type	src/or/or.h	/^  unsigned int type:5; \/**< What kind of connection is this? *\/$/;"	m	struct:connection_t
type	src/or/rendservice.h	/^  uint8_t type;$/;"	m	struct:rend_intro_cell_s
type	src/trunnel/link_handshake.h	/^  uint8_t type[8];$/;"	m	struct:auth1_st
u	src/common/memarea.c	/^  } u;$/;"	m	struct:memarea_chunk_t	typeref:union:memarea_chunk_t::__anon8	file:
u	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	uint32_t u[4];$/;"	m	union:packedelem32_t
u	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	uint64_t u[2];$/;"	m	union:packedelem64_t
u	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	unsigned char u[16];$/;"	m	union:packedelem8_t
u	src/or/channel.h	/^  } u;$/;"	m	struct:cell_queue_entry_s	typeref:union:cell_queue_entry_s::__anon92
u	src/or/cpuworker.c	/^  } u;$/;"	m	struct:cpuworker_job_u	typeref:union:cpuworker_job_u::__anon100	file:
u	src/or/or.h	/^  } u;$/;"	m	struct:__anon50	typeref:union:__anon50::__anon51
u	src/or/rendservice.h	/^  } u;$/;"	m	struct:rend_intro_cell_s	typeref:union:rend_intro_cell_s::__anon108
u	src/test/test_workqueue.c	/^  } u;$/;"	m	struct:ecdh_work_s	typeref:union:ecdh_work_s::__anon87	file:
u1_cid_ed	src/trunnel/link_handshake.h	/^  uint8_t u1_cid_ed[32];$/;"	m	struct:auth1_st
u1_sid_ed	src/trunnel/link_handshake.h	/^  uint8_t u1_sid_ed[32];$/;"	m	struct:auth1_st
u64	src/or/routerlist.h	/^  uint64_t u64;$/;"	m	union:u64_dbl_t
u64_dbl_t	src/or/routerlist.h	/^typedef union u64_dbl_t {$/;"	u
u64_dbl_t	src/or/routerlist.h	/^} u64_dbl_t;$/;"	t	typeref:union:u64_dbl_t
u6_addr16	src/common/compat.h	/^    uint16_t u6_addr16[8];$/;"	m	union:in6_addr::__anon27
u6_addr32	src/common/compat.h	/^    uint32_t u6_addr32[4];$/;"	m	union:in6_addr::__anon27
u6_addr8	src/common/compat.h	/^    uint8_t u6_addr8[16];$/;"	m	union:in6_addr::__anon27
u8	src/ext/curve25519_donna/curve25519-donna-c64.c	/^typedef uint8_t u8;$/;"	t	file:
u_char	src/or/eventdns_tor.h	/^typedef unsigned char u_char;$/;"	t
uint	src/or/eventdns_tor.h	/^typedef unsigned int uint;$/;"	t
uint128_t	src/ext/curve25519_donna/curve25519-donna-c64.c	/^typedef unsigned uint128_t __attribute__((mode(TI)));$/;"	t	file:
uint128_t	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			typedef struct uint128_t {$/;"	s
uint128_t	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			typedef unsigned __int128 uint128_t;$/;"	t
uint128_t	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			typedef unsigned uint128_t __attribute__((mode(TI)));$/;"	t
uint128_t	src/ext/ed25519/donna/ed25519-donna-portable.h	/^			} uint128_t;$/;"	t	typeref:struct:uint128_t
uint128_t	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		typedef struct uint128_t {$/;"	s
uint128_t	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		typedef unsigned __int128 uint128_t;$/;"	t
uint128_t	src/ext/ed25519/donna/ed25519-donna-portable.h	/^		} uint128_t;$/;"	t	typeref:struct:uint128_t
uint16_t	src/common/torint.h	/^typedef unsigned int uint16_t;$/;"	t
uint16_t	src/common/torint.h	/^typedef unsigned short uint16_t;$/;"	t
uint16_t	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	typedef unsigned short uint16_t;$/;"	t
uint16_t	src/ext/trunnel/trunnel-impl.h	/^#define uint16_t /;"	d
uint32_t	src/common/torint.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	src/common/torint.h	/^typedef unsigned long uint32_t;$/;"	t
uint32_t	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	typedef unsigned int uint32_t;$/;"	t
uint32_t	src/ext/trunnel/trunnel-impl.h	/^#define uint32_t /;"	d
uint64_t	src/common/torint.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	src/common/torint.h	/^typedef unsigned long long uint64_t;$/;"	t
uint64_t	src/common/torint.h	/^typedef unsigned long uint64_t;$/;"	t
uint64_t	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	src/ext/trunnel/trunnel-impl.h	/^#define uint64_t /;"	d
uint8_t	src/common/torint.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	src/ext/ed25519/donna/ed25519-donna-portable-identify.h	/^	typedef unsigned char uint8_t;$/;"	t
uint8_t	src/ext/trunnel/trunnel-impl.h	/^#define uint8_t /;"	d
uintptr_t	src/common/torint.h	/^typedef uint32_t uintptr_t;$/;"	t
uintptr_t	src/common/torint.h	/^typedef uint64_t uintptr_t;$/;"	t
umask	src/test/test_checkdir.c	/^#define umask(/;"	d	file:
un_signing_key	src/trunnel/ed25519_cert.h	/^  uint8_t un_signing_key[32];$/;"	m	struct:ed25519_cert_extension_st
un_unparsed	src/trunnel/ed25519_cert.h	/^  TRUNNEL_DYNARRAY_HEAD(, uint8_t) un_unparsed;$/;"	m	struct:ed25519_cert_extension_st
uname_result	src/common/compat.c	/^static char uname_result[256];$/;"	v	file:
uname_result_is_set	src/common/compat.c	/^static int uname_result_is_set = 0;$/;"	v	file:
unattachment_reason_spy	src/test/test_connection_edge_ap_handshake.c	/^static int unattachment_reason_spy;$/;"	v	file:
unconfigured_proxies_n	src/or/transports.c	/^static int unconfigured_proxies_n = 0;$/;"	v	file:
unescape_string	src/common/util.c	/^unescape_string(const char *s, char **result, size_t *size_out)$/;"	f	file:
unit	src/or/confparse.c	/^  const char *unit; \/**< The name of the unit *\/$/;"	m	struct:unit_table_t	file:
unit_table_t	src/or/confparse.c	/^struct unit_table_t {$/;"	s	file:
unit_tests	src/or/circuitstats.c	/^#define unit_tests /;"	d	file:
unit_tests	src/or/circuitstats.c	/^static int unit_tests = 0;$/;"	v	file:
unix_addr	src/or/or.h	/^  char unix_addr[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:port_cfg_t
unix_addr	src/or/rendservice.c	/^  char unix_addr[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:rend_service_port_config_s	file:
unix_socket_prefix	src/or/config.c	/^static const char unix_socket_prefix[] = "unix:";$/;"	v	file:
unix_socket_purpose_to_string	src/or/connection.c	/^unix_socket_purpose_to_string(int purpose)$/;"	f	file:
unixoid_environment_block	src/common/util.h	/^  char **unixoid_environment_block;$/;"	m	struct:process_environment_t
unnamed_server_map	src/or/networkstatus.c	/^static strmap_t *unnamed_server_map = NULL;$/;"	v	file:
unreachable_count	src/or/or.h	/^  unsigned int unreachable_count : 3;$/;"	m	struct:rend_intro_point_t
unreachable_since	src/or/entrynodes.h	/^  time_t unreachable_since; \/**< 0 if we can connect to this guard, or the$/;"	m	struct:entry_guard_t
unusable_circuits	src/or/entrynodes.h	/^  double unusable_circuits; \/**< Number of circuits for which streams were$/;"	m	struct:entry_guard_t
unusable_for_new_conns	src/or/or.h	/^  unsigned int unusable_for_new_conns : 1;$/;"	m	struct:origin_circuit_t
up_since	src/or/rephist.c	/^  time_t up_since;$/;"	m	struct:or_history_t	file:
update_all_descriptor_downloads	src/or/routerlist.c	/^update_all_descriptor_downloads(time_t now)$/;"	f
update_approx_time	src/common/util.c	/^update_approx_time(time_t now)$/;"	f
update_approx_time	src/common/util.h	/^#define update_approx_time(/;"	d
update_args	src/common/workqueue.c	/^  void **update_args;$/;"	m	struct:threadpool_s	file:
update_certificate_downloads	src/or/networkstatus.c	/^update_certificate_downloads(time_t now)$/;"	f
update_circuit_on_cmux	src/or/relay.h	/^#define update_circuit_on_cmux(/;"	d
update_circuit_on_cmux_	src/or/relay.c	/^update_circuit_on_cmux_(circuit_t *circ, cell_direction_t direction,$/;"	f
update_consensus_networkstatus_downloads	src/or/networkstatus.c	/^update_consensus_networkstatus_downloads(time_t now)$/;"	f	file:
update_consensus_networkstatus_fetch_time	src/or/networkstatus.c	/^update_consensus_networkstatus_fetch_time(time_t now)$/;"	f
update_consensus_networkstatus_fetch_time_impl	src/or/networkstatus.c	/^update_consensus_networkstatus_fetch_time_impl(time_t now, int flav)$/;"	f	file:
update_consensus_router_descriptor_downloads	src/or/routerlist.c	/^update_consensus_router_descriptor_downloads(time_t now, int is_vote,$/;"	f
update_difference	src/test/test_addr.c	/^update_difference(int ipv6, uint8_t *d,$/;"	f	file:
update_expected_bandwidth	src/or/hibernate.c	/^update_expected_bandwidth(void)$/;"	f	file:
update_extrainfo_downloads	src/or/routerlist.c	/^update_extrainfo_downloads(time_t now)$/;"	f
update_fn	src/common/workqueue.c	/^  workqueue_reply_t (*update_fn)(void *, void *);$/;"	m	struct:threadpool_s	file:
update_microdesc_downloads	src/or/microdesc.c	/^update_microdesc_downloads(time_t now)$/;"	f
update_microdescs_from_networkstatus	src/or/microdesc.c	/^update_microdescs_from_networkstatus(time_t now)$/;"	f
update_networkstatus_downloads	src/or/networkstatus.c	/^update_networkstatus_downloads(time_t now)$/;"	f
update_node_guard_status	src/or/entrynodes.c	/^update_node_guard_status(void)$/;"	f	file:
update_or_history	src/or/rephist.c	/^update_or_history(or_history_t *hist, time_t when)$/;"	f	file:
update_router_descriptor_downloads	src/or/routerlist.c	/^update_router_descriptor_downloads(time_t now)$/;"	f
update_router_have_minimum_dir_info	src/or/nodelist.c	/^update_router_have_minimum_dir_info(void)$/;"	f	file:
update_state_threadfn	src/or/cpuworker.c	/^update_state_threadfn(void *state_, void *work_)$/;"	f	file:
update_total_bandwidth_weights	src/or/dirvote.c	/^update_total_bandwidth_weights(const routerstatus_t *rs,$/;"	f	file:
upload_service_descriptor	src/or/rendservice.c	/^upload_service_descriptor(rend_service_t *service)$/;"	f	file:
uptime	src/or/or.h	/^  long uptime; \/**< How many seconds the router claims to have been up *\/$/;"	m	struct:__anon45
uptime	src/or/rephist.c	/^  unsigned long uptime;$/;"	m	struct:or_history_t	file:
usable_consensus_flavor	src/or/microdesc.c	/^usable_consensus_flavor(void)$/;"	f
usable_descriptor_t	src/or/nodelist.c	/^} usable_descriptor_t;$/;"	t	typeref:enum:__anon24	file:
usage	src/ext/tinytest.c	/^usage(struct testgroup_t *groups, int list_groups)$/;"	f	file:
usage	src/tools/tor-resolve.c	/^usage(void)$/;"	f	file:
use_attempts	src/or/entrynodes.h	/^  double use_attempts; \/**< Number of circuits we tried to use with streams *\/$/;"	m	struct:entry_guard_t
use_begindir	src/or/or.h	/^  unsigned int use_begindir:1;$/;"	m	struct:entry_connection_t
use_cached_ipv4_answers	src/or/or.h	/^  unsigned int use_cached_ipv4_answers : 1;$/;"	m	struct:entry_port_cfg_t
use_cached_ipv6_answers	src/or/or.h	/^  unsigned int use_cached_ipv6_answers : 1;$/;"	m	struct:entry_port_cfg_t
use_keygen_passphrase_fd	src/or/or.h	/^  int use_keygen_passphrase_fd;$/;"	m	struct:__anon55
use_successes	src/or/entrynodes.h	/^  double use_successes; \/**< Number of successfully used circuits using$/;"	m	struct:entry_guard_t
userdata	src/common/util_process.c	/^  void *userdata;$/;"	m	struct:waitpid_callback_t	file:
userfn	src/common/util_process.c	/^  void (*userfn)(int, void *userdata);$/;"	m	struct:waitpid_callback_t	file:
username	src/or/or.h	/^  char *username;$/;"	m	struct:socks_request_t
usernamelen	src/or/or.h	/^  size_t usernamelen;$/;"	m	struct:socks_request_t
using_as_guard	src/or/or.h	/^  unsigned int using_as_guard:1;$/;"	m	struct:node_t
using_evp	src/common/aes.c	/^  uint8_t using_evp;$/;"	m	struct:aes_cnt_cipher	file:
using_iocp_bufferevents	src/common/compat_libevent.c	/^static int using_iocp_bufferevents = 0;$/;"	v	file:
util_format_tests	src/test/test_util_format.c	/^struct testcase_t util_format_tests[] = {$/;"	v	typeref:struct:testcase_t
util_process_tests	src/test/test_util_process.c	/^struct testcase_t util_process_tests[] = {$/;"	v	typeref:struct:testcase_t
util_tests	src/test/test_util.c	/^struct testcase_t util_tests[] = {$/;"	v	typeref:struct:testcase_t
v	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	xmmi v;$/;"	m	union:packedelem32_t
v	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	xmmi v;$/;"	m	union:packedelem64_t
v	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^	xmmi v;$/;"	m	union:packedelem8_t
v	src/or/dirvote.c	/^  networkstatus_t *v;$/;"	m	struct:dir_src_ent_t	file:
v	src/or/routerparse.c	/^  directory_keyword v;$/;"	m	struct:token_rule_t	file:
v0_test_plaintext	src/test/test_introduce.c	/^static uint8_t v0_test_plaintext[] =$/;"	v	file:
v0_v1	src/or/rendservice.h	/^    } v0_v1;$/;"	m	union:rend_intro_cell_s::__anon108	typeref:struct:rend_intro_cell_s::__anon108::__anon109
v1_test_plaintext	src/test/test_introduce.c	/^static uint8_t v1_test_plaintext[] =$/;"	v	file:
v2	src/or/rendservice.h	/^    } v2;$/;"	m	union:rend_intro_cell_s::__anon108	typeref:struct:rend_intro_cell_s::__anon108::__anon110
v2_cipher_list	src/common/tortls.c	/^STATIC uint16_t v2_cipher_list[] = {$/;"	v
v2_cipher_list_pruned	src/common/tortls.c	/^static int v2_cipher_list_pruned = 0;$/;"	v	file:
v2_test_plaintext	src/test/test_introduce.c	/^static uint8_t v2_test_plaintext[] =$/;"	v	file:
v3	src/or/rendservice.h	/^    } v3;$/;"	m	union:rend_intro_cell_s::__anon108	typeref:struct:rend_intro_cell_s::__anon108::__anon111
v3_authority_check_key_expiry	src/or/router.c	/^v3_authority_check_key_expiry(void)$/;"	f
v3_basic_auth_test_plaintext	src/test/test_introduce.c	/^static uint8_t v3_basic_auth_test_plaintext[] =$/;"	v	file:
v3_identity_digest	src/or/or.h	/^  char v3_identity_digest[DIGEST_LEN]; \/**< Digest of v3 (authority only,$/;"	m	struct:dir_server_t
v3_no_auth_test_plaintext	src/test/test_introduce.c	/^static uint8_t v3_no_auth_test_plaintext[] =$/;"	v	file:
val	src/common/di_ops.c	/^  void *val;$/;"	m	struct:di_digest256_map_t	file:
val	src/or/fp_pair.c	/^  void *val;$/;"	m	struct:fp_pair_map_entry_s	file:
val	src/test/test_containers.c	/^  const char *val;$/;"	m	struct:pq_entry_t	file:
validCertString	src/test/test_tortls.c	/^static const char* validCertString = "-----BEGIN CERTIFICATE-----\\n"$/;"	v	file:
valid_after	src/or/or.h	/^  time_t valid_after; \/**< Time after which this vote or consensus applies. *\/$/;"	m	struct:networkstatus_t
valid_after	src/or/or.h	/^  time_t valid_after;$/;"	m	struct:ns_detached_signatures_t
valid_until	src/or/or.h	/^  time_t valid_until; \/**< Time after which this vote or consensus should not$/;"	m	struct:networkstatus_t
valid_until	src/or/or.h	/^  time_t valid_until;$/;"	m	struct:ns_detached_signatures_t
valid_until	src/or/torcert.h	/^  time_t valid_until;$/;"	m	struct:tor_cert_st
validate_addr_policies	src/or/policies.c	/^validate_addr_policies(const or_options_t *options, char **msg)$/;"	f
validate_bridge_stats	src/or/geoip.c	/^validate_bridge_stats(const char *stats_str, time_t now)$/;"	f	file:
validate_data_directory	src/or/config.c	/^validate_data_directory(or_options_t *options)$/;"	f	file:
validate_dir_servers	src/or/config.c	/^validate_dir_servers(or_options_t *options, or_options_t *old_options)$/;"	f	file:
validate_fn	src/or/confparse.h	/^  validate_fn_t validate_fn; \/**< Function to validate config. *\/$/;"	m	struct:config_format_t
validate_fn_t	src/or/confparse.h	/^typedef int (*validate_fn_t)(void*,void*,void*,int,char**);$/;"	t
validate_intro_point_failure	src/or/rendcache.c	/^validate_intro_point_failure(const rend_service_descriptor_t *desc,$/;"	f
validate_ports_csv	src/or/config.c	/^validate_ports_csv(smartlist_t *sl, const char *name, char **msg)$/;"	f	file:
validate_recommended_package_line	src/or/dirserv.c	/^validate_recommended_package_line(const char *line)$/;"	f
validate_transport_socks_arguments	src/or/config.c	/^validate_transport_socks_arguments(const smartlist_t *args)$/;"	f	file:
validate_transports_in_state	src/or/statefile.c	/^validate_transports_in_state(or_state_t *state)$/;"	f	file:
value	src/common/sandbox.h	/^  char *value;$/;"	m	struct:smp_param
value	src/or/or.h	/^  char *value;$/;"	m	struct:config_line_t
value	src/test/test_threads.c	/^  int value;$/;"	m	struct:cv_testinfo_s	file:
value2	src/common/sandbox.h	/^  char *value2;$/;"	m	struct:smp_param
var	src/or/channel.h	/^    } var;$/;"	m	union:cell_queue_entry_s::__anon92	typeref:struct:cell_queue_entry_s::__anon92::__anon94
var_cell	src/or/channel.h	/^      var_cell_t *var_cell;$/;"	m	struct:cell_queue_entry_s::__anon92::__anon94
var_cell_free	src/or/connection_or.c	/^var_cell_free(var_cell_t *cell)$/;"	f
var_cell_handler	src/or/channel.h	/^  channel_var_cell_handler_fn_ptr var_cell_handler;$/;"	m	struct:channel_s
var_cell_new	src/or/connection_or.c	/^var_cell_new(uint16_t payload_len)$/;"	f
var_cell_pack_header	src/or/connection_or.c	/^var_cell_pack_header(const var_cell_t *cell, char *hdr_out, int wide_circ_ids)$/;"	f
var_cell_t	src/or/or.h	/^typedef struct var_cell_t {$/;"	s
var_cell_t	src/or/or.h	/^} var_cell_t;$/;"	t	typeref:struct:var_cell_t
var_offset	src/or/confparse.h	/^  off_t var_offset; \/**< Offset of the corresponding member of or_options_t. *\/$/;"	m	struct:config_var_t
varname	src/or/control.c	/^  const char *varname; \/**< The value (or prefix) of the question. *\/$/;"	m	struct:getinfo_item_t	file:
vars	src/or/confparse.h	/^  config_var_t *vars; \/**< List of variables we recognize, their default$/;"	m	struct:config_format_t
verbose	src/tools/tor-gencert.c	/^int verbose = 0;$/;"	v
verbosity_flag	src/ext/tinytest.c	/^const char *verbosity_flag = "";$/;"	v
verified_digests	src/or/routerparse.c	/^static digestmap_t *verified_digests = NULL;$/;"	v	file:
version	src/or/or.h	/^  char *version; \/**< The version that the authority says this router is$/;"	m	struct:vote_routerstatus_t
version	src/or/or.h	/^  int version; \/**< Version of the descriptor format: 0 or 2. *\/$/;"	m	struct:rend_service_descriptor_t
version	src/or/rendservice.h	/^  uint8_t version;$/;"	m	struct:rend_intro_cell_s
version	src/trunnel/ed25519_cert.h	/^  uint8_t version;$/;"	m	struct:ed25519_cert_st
version_from_platform	src/or/dirserv.c	/^version_from_platform(const char *platform)$/;"	f	file:
version_known	src/or/or.h	/^  unsigned int version_known:1;$/;"	m	struct:routerstatus_t
version_status_t	src/or/or.h	/^typedef enum version_status_t {$/;"	g
version_status_t	src/or/or.h	/^} version_status_t;$/;"	t	typeref:enum:version_status_t
version_supports_extend2_cells	src/or/or.h	/^  unsigned int version_supports_extend2_cells:1;$/;"	m	struct:routerstatus_t
virtaddr_conf_ipv4	src/or/addressmap.c	/^static virtual_addr_conf_t virtaddr_conf_ipv4;$/;"	v	file:
virtaddr_conf_ipv6	src/or/addressmap.c	/^static virtual_addr_conf_t virtaddr_conf_ipv6;$/;"	v	file:
virtaddress_entry_t	src/or/addressmap.c	/^} virtaddress_entry_t;$/;"	t	typeref:struct:__anon84	file:
virtaddress_reversemap	src/or/addressmap.c	/^static strmap_t *virtaddress_reversemap=NULL;$/;"	v	file:
virtual_addr_conf_t	src/or/addressmap.h	/^typedef struct virtual_addr_conf_t {$/;"	s
virtual_addr_conf_t	src/or/addressmap.h	/^} virtual_addr_conf_t;$/;"	t	typeref:struct:virtual_addr_conf_t
virtual_port	src/or/rendservice.c	/^  uint16_t virtual_port;$/;"	m	struct:rend_service_port_config_s	file:
vmemeq	src/test/test-memwipe.c	/^vmemeq(volatile char *a, const char *b, size_t n)$/;"	f	file:
void_for_alignment_	src/common/memarea.c	/^    void *void_for_alignment_; \/**< Dummy; used to make sure mem is aligned. *\/$/;"	m	union:memarea_chunk_t::__anon8	file:
vote	src/or/dirvote.c	/^  networkstatus_t *vote;$/;"	m	struct:pending_vote_t	file:
vote_body	src/or/dirvote.c	/^  cached_dir_t *vote_body;$/;"	m	struct:pending_vote_t	file:
vote_delay	src/or/or.h	/^  int vote_delay;$/;"	m	struct:vote_timing_t
vote_digest	src/or/or.h	/^  char vote_digest[DIGEST_LEN]; \/**< Digest of this voter's vote, as signed. *\/$/;"	m	struct:networkstatus_voter_info_t
vote_interval	src/or/or.h	/^  int vote_interval;$/;"	m	struct:vote_timing_t
vote_microdesc_hash_t	src/or/or.h	/^typedef struct vote_microdesc_hash_t {$/;"	s
vote_microdesc_hash_t	src/or/or.h	/^} vote_microdesc_hash_t;$/;"	t	typeref:struct:vote_microdesc_hash_t
vote_routerstatus_find_microdesc_hash	src/or/dirvote.c	/^vote_routerstatus_find_microdesc_hash(char *digest256_out,$/;"	f
vote_routerstatus_free	src/or/networkstatus.c	/^vote_routerstatus_free(vote_routerstatus_t *rs)$/;"	f
vote_routerstatus_t	src/or/or.h	/^typedef struct vote_routerstatus_t {$/;"	s
vote_routerstatus_t	src/or/or.h	/^} vote_routerstatus_t;$/;"	t	typeref:struct:vote_routerstatus_t
vote_seconds	src/or/or.h	/^  int vote_seconds;$/;"	m	struct:networkstatus_t
vote_timing_t	src/or/or.h	/^typedef struct vote_timing_t {$/;"	s
vote_timing_t	src/or/or.h	/^} vote_timing_t;$/;"	t	typeref:struct:vote_timing_t
vote_tweaks	src/test/test_dir.c	/^    int (*vote_tweaks)(networkstatus_t *v, int voter, time_t now),$/;"	v	file:
vote_tweaks_for_umbw	src/test/test_dir.c	/^vote_tweaks_for_umbw(networkstatus_t *v, int voter, time_t now)$/;"	f	file:
vote_tweaks_for_v3ns	src/test/test_dir.c	/^vote_tweaks_for_v3ns(networkstatus_t *v, int voter, time_t now)$/;"	f	file:
voter_get_sig_by_algorithm	src/or/dirvote.c	/^voter_get_sig_by_algorithm(const networkstatus_voter_info_t *voter,$/;"	f
voters	src/or/or.h	/^  smartlist_t *voters;$/;"	m	struct:networkstatus_t
voting_ends	src/or/dirvote.c	/^  time_t voting_ends;$/;"	m	struct:__anon99	file:
voting_schedule	src/or/dirvote.c	/^} voting_schedule = {0,0,0,0,0,0,0,0,0,0};$/;"	v	typeref:struct:__anon99	file:
voting_starts	src/or/dirvote.c	/^  time_t voting_starts;$/;"	m	struct:__anon99	file:
vrs_lst	src/or/dircollate.c	/^  vote_routerstatus_t *vrs_lst[FLEXIBLE_ARRAY_MEMBER];$/;"	m	struct:ddmap_entry_s	file:
vrs_test	src/test/test_dir.c	/^    void (*vrs_test)(vote_routerstatus_t *vrs, int voter, time_t now),$/;"	v	file:
waiting_time	src/or/or.h	/^  unsigned int waiting_time:22;$/;"	m	struct:testing_cell_stats_entry_t
waitpid_callback_t	src/common/util_process.c	/^struct waitpid_callback_t {$/;"	s	file:
waitpid_callback_t	src/common/util_process.h	/^typedef struct waitpid_callback_t waitpid_callback_t;$/;"	t	typeref:struct:waitpid_callback_t
waitpid_cb	src/common/util.h	/^  struct waitpid_callback_t *waitpid_cb;$/;"	m	struct:process_handle_t	typeref:struct:process_handle_t::waitpid_callback_t
waitpid_exit_status	src/common/util.h	/^  int waitpid_exit_status;$/;"	m	struct:process_handle_t
want_onehop	src/or/or.h	/^  unsigned int want_onehop:1;$/;"	m	struct:entry_connection_t
wants_to_be_hs_dir	src/or/or.h	/^  unsigned int wants_to_be_hs_dir:1; \/**< True iff this router claims to be$/;"	m	struct:__anon45
wantwrite_n	src/common/tortls.h	/^  size_t wantwrite_n; \/**< 0 normally, >0 if we returned wantwrite last$/;"	m	struct:tor_tls_t
warn	src/or/confparse.h	/^  int warn;$/;"	m	struct:config_abbrev_t
warn_about_relative_paths	src/or/config.c	/^warn_about_relative_paths(or_options_t *options)$/;"	f	file:
warn_if_last_router_excluded	src/or/circuitbuild.c	/^warn_if_last_router_excluded(origin_circuit_t *circ, const extend_info_t *exit)$/;"	f	file:
warn_if_option_path_is_relative	src/or/config.c	/^warn_if_option_path_is_relative(const char *option,$/;"	f	file:
warn_nonlocal_client_ports	src/or/config.c	/^warn_nonlocal_client_ports(const smartlist_t *ports, const char *portname,$/;"	f	file:
warn_nonlocal_controller_ports	src/or/config.c	/^warn_nonlocal_controller_ports(smartlist_t *ports, unsigned forbid_nonlocal)$/;"	f	file:
warn_nonlocal_ext_orports	src/or/config.c	/^warn_nonlocal_ext_orports(const smartlist_t *ports, const char *portname)$/;"	f	file:
warn_too_many_conns	src/or/connection.c	/^warn_too_many_conns(void)$/;"	f	file:
warned_nicknames	src/or/routerlist.c	/^static smartlist_t *warned_nicknames = NULL;$/;"	v	file:
warned_nonexistent_family	src/or/router.c	/^static smartlist_t *warned_nonexistent_family = NULL;$/;"	v	file:
wasV2Handshake	src/common/tortls.h	/^  unsigned int wasV2Handshake:1; \/**< True iff the original handshake for$/;"	m	struct:tor_tls_t
was_around_before_config_read	src/or/transports.h	/^  unsigned int was_around_before_config_read : 1;$/;"	m	struct:__anon34
was_router_added_t	src/or/or.h	/^typedef enum was_router_added_t {$/;"	g
was_router_added_t	src/or/or.h	/^} was_router_added_t;$/;"	t	typeref:enum:was_router_added_t
watchable_events	src/or/main.h	/^typedef enum watchable_events {$/;"	g
watchable_events_t	src/or/main.h	/^} watchable_events_t;$/;"	t	typeref:enum:watchable_events
we_are_hibernating	src/test/test_status.c	/^NS(we_are_hibernating)(void)$/;"	f	file:
we_fetch_microdescriptors	src/or/microdesc.c	/^we_fetch_microdescriptors(const or_options_t *options)$/;"	f
we_fetch_router_descriptors	src/or/microdesc.c	/^we_fetch_router_descriptors(const or_options_t *options)$/;"	f
we_use_microdescriptors_for_circuits	src/or/microdesc.c	/^we_use_microdescriptors_for_circuits(const or_options_t *options)$/;"	f
we_want_to_fetch_flavor	src/or/networkstatus.c	/^we_want_to_fetch_flavor(const or_options_t *options, int flavor)$/;"	f	file:
we_weave	src/test/test_bt_cl.c	/^we_weave(int x)$/;"	f
weak_rng	src/test/test_workqueue.c	/^static tor_weak_rng_t weak_rng;$/;"	v	file:
weight	src/or/or.h	/^  double weight; \/** Weight used when selecting this node at random *\/$/;"	m	struct:dir_server_t
weight_params	src/or/or.h	/^  smartlist_t *weight_params;$/;"	m	struct:networkstatus_t
weighted_run_length	src/or/rephist.c	/^  unsigned long weighted_run_length;$/;"	m	struct:or_history_t	file:
weighted_uptime	src/or/rephist.c	/^  unsigned long weighted_uptime;$/;"	m	struct:or_history_t	file:
when_added	src/or/onion.c	/^  time_t when_added;$/;"	m	struct:onion_queue_t	file:
wide_circ_ids	src/or/channel.h	/^  unsigned wide_circ_ids:1;$/;"	m	struct:channel_s
wide_circ_ids	src/or/or.h	/^  unsigned int wide_circ_ids:1;$/;"	m	struct:or_connection_t
wildcard_increment_answer	src/or/dns.c	/^wildcard_increment_answer(const char *id)$/;"	f	file:
windows_environment_block	src/common/util.h	/^  char *windows_environment_block;$/;"	m	struct:process_environment_t
windows_socket_errors	src/common/compat.c	/^struct { int code; const char *msg; } windows_socket_errors[] = {$/;"	v	typeref:struct:__anon25
worker_state_free	src/or/cpuworker.c	/^worker_state_free(void *arg)$/;"	f	file:
worker_state_new	src/or/cpuworker.c	/^worker_state_new(void *arg)$/;"	f	file:
worker_state_s	src/or/cpuworker.c	/^typedef struct worker_state_s {$/;"	s	file:
worker_state_t	src/or/cpuworker.c	/^} worker_state_t;$/;"	t	typeref:struct:worker_state_s	file:
worker_thread_has_work	src/common/workqueue.c	/^worker_thread_has_work(workerthread_t *thread)$/;"	f	file:
worker_thread_main	src/common/workqueue.c	/^worker_thread_main(void *thread_)$/;"	f	file:
workerthread_new	src/common/workqueue.c	/^workerthread_new(void *state, threadpool_t *pool, replyqueue_t *replyqueue)$/;"	f	file:
workerthread_s	src/common/workqueue.c	/^typedef struct workerthread_s {$/;"	s	file:
workerthread_t	src/common/workqueue.c	/^} workerthread_t;$/;"	t	typeref:struct:workerthread_s	file:
workqueue_do_ecdh	src/test/test_workqueue.c	/^workqueue_do_ecdh(void *state, void *work)$/;"	f	file:
workqueue_do_rsa	src/test/test_workqueue.c	/^workqueue_do_rsa(void *state, void *work)$/;"	f	file:
workqueue_do_shutdown	src/test/test_workqueue.c	/^workqueue_do_shutdown(void *state, void *work)$/;"	f	file:
workqueue_entry	src/or/or.h	/^  struct workqueue_entry_s *workqueue_entry;$/;"	m	struct:or_circuit_t	typeref:struct:or_circuit_t::workqueue_entry_s
workqueue_entry_cancel	src/common/workqueue.c	/^workqueue_entry_cancel(workqueue_entry_t *ent)$/;"	f
workqueue_entry_free	src/common/workqueue.c	/^workqueue_entry_free(workqueue_entry_t *ent)$/;"	f	file:
workqueue_entry_new	src/common/workqueue.c	/^workqueue_entry_new(workqueue_reply_t (*fn)(void*, void*),$/;"	f	file:
workqueue_entry_s	src/common/workqueue.c	/^struct workqueue_entry_s {$/;"	s	file:
workqueue_entry_t	src/common/workqueue.h	/^typedef struct workqueue_entry_s workqueue_entry_t;$/;"	t	typeref:struct:workqueue_entry_s
workqueue_reply_t	src/common/workqueue.h	/^} workqueue_reply_t;$/;"	t	typeref:enum:__anon3
workqueue_shutdown_error	src/test/test_workqueue.c	/^workqueue_shutdown_error(void *state, void *work)$/;"	f	file:
write51	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^	#define write51(/;"	d
write51full	src/ext/ed25519/donna/curve25519-donna-64bit.h	/^	#define write51full(/;"	d
write_all	src/common/util.c	/^write_all(tor_socket_t fd, const char *buf, size_t count, int isSocket)$/;"	f
write_array	src/or/rephist.c	/^static bw_array_t *write_array = NULL;$/;"	v	file:
write_blocked_on_bw	src/or/or.h	/^  unsigned int write_blocked_on_bw:1; \/**< Boolean: should we start writing$/;"	m	struct:connection_t
write_bridge_stats	src/or/main.h	/^  time_t write_bridge_stats;$/;"	m	struct:__anon5
write_bridge_status_file	src/or/main.h	/^  time_t write_bridge_status_file;$/;"	m	struct:__anon5
write_bucket	src/or/or.h	/^  int write_bucket; \/**< When this hits 0, stop writing. Like read_bucket. *\/$/;"	m	struct:or_connection_t
write_buckets_empty_last_second	src/or/connection.c	/^static int write_buckets_empty_last_second = 0;$/;"	v	file:
write_bytes_to_file_fail	src/test/test_extorport.c	/^write_bytes_to_file_fail(const char *fname, const char *str, size_t len,$/;"	f	file:
write_bytes_to_file_impl	src/common/util.c	/^write_bytes_to_file_impl(const char *fname, const char *str, size_t len,$/;"	f	file:
write_bytes_to_new_file	src/common/util.c	/^write_bytes_to_new_file(const char *fname, const char *str, size_t len,$/;"	f
write_cell	src/or/channel.h	/^  int (*write_cell)(channel_t *, cell_t *);$/;"	m	struct:channel_s
write_chunks_to_file	src/common/util.c	/^write_chunks_to_file(const char *fname, const smartlist_t *chunks, int bin,$/;"	f
write_chunks_to_file_impl	src/common/util.c	/^write_chunks_to_file_impl(const char *fname, const smartlist_t *chunks,$/;"	f	file:
write_configuration_file	src/or/config.c	/^write_configuration_file(const char *fname, const or_options_t *options)$/;"	f	file:
write_emptied_time	src/or/or.h	/^  uint32_t write_emptied_time;$/;"	m	struct:or_connection_t
write_encrypted_secret_key	src/or/routerkeys.c	/^write_encrypted_secret_key(const ed25519_secret_key_t *key,$/;"	f
write_escaped_data	src/or/control.c	/^write_escaped_data(const char *data, size_t len, char **out)$/;"	f
write_event	src/or/or.h	/^  struct event *write_event; \/**< Libevent event structure. *\/$/;"	m	struct:connection_t	typeref:struct:connection_t::event
write_fd	src/common/compat_threads.h	/^  tor_socket_t write_fd;$/;"	m	struct:alert_sockets_s
write_http_response_header	src/or/directory.c	/^write_http_response_header(dir_connection_t *conn, ssize_t length,$/;"	f	file:
write_http_response_header_impl	src/or/directory.c	/^write_http_response_header_impl(dir_connection_t *conn, ssize_t length,$/;"	f	file:
write_http_status_line	src/or/directory.c	/^write_http_status_line(dir_connection_t *conn, int status,$/;"	f	file:
write_ni	src/common/compat_threads.c	/^write_ni(int fd, const void *buf, size_t n)$/;"	f	file:
write_packed_cell	src/or/channel.h	/^  int (*write_packed_cell)(channel_t *, packed_cell_t *);$/;"	m	struct:channel_s
write_pidfile	src/common/util.c	/^write_pidfile(const char *filename)$/;"	f
write_secret_key	src/or/routerkeys.c	/^write_secret_key(const ed25519_secret_key_t *key, int encrypted,$/;"	f	file:
write_short_policy	src/or/policies.c	/^write_short_policy(const short_policy_t *policy)$/;"	f
write_stats_files	src/or/main.h	/^  time_t write_stats_files;$/;"	m	struct:__anon5
write_str_to_file	src/common/util.c	/^write_str_to_file(const char *fname, const char *str, int bin)$/;"	f
write_stream_target_to_buf	src/or/control.c	/^write_stream_target_to_buf(entry_connection_t *conn, char *buf, size_t len)$/;"	f	file:
write_to_buf	src/or/buffers.c	/^write_to_buf(const char *string, size_t string_len, buf_t *buf)$/;"	f
write_to_buf_zlib	src/or/buffers.c	/^write_to_buf_zlib(buf_t *buf, tor_zlib_state_t *state,$/;"	f
write_to_data_subdir	src/or/config.c	/^write_to_data_subdir(const char* subdir, const char* fname,$/;"	f
write_to_evbuffer_zlib	src/or/buffers.c	/^write_to_evbuffer_zlib(struct evbuffer *buf, tor_zlib_state_t *state,$/;"	f
write_var_cell	src/or/channel.h	/^  int (*write_var_cell)(channel_t *, var_cell_t *);$/;"	m	struct:channel_s
writing_to_linked_conn	src/or/or.h	/^  unsigned int writing_to_linked_conn:1;$/;"	m	struct:connection_t
written	src/or/rephist.c	/^  size_t written; \/**< Number of written bytes *\/$/;"	m	struct:bidi_map_entry_t	file:
x	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_p1p1_t
x	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_t
x509	src/test/test_tortls.c	/^	X509 *x509;$/;"	m	struct:cert_pkey_st_local	file:
xaddy	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 ysubx, xaddy, t2d;$/;"	m	struct:ge25519_niels_t
xaddy	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 ysubx, xaddy, z, t2d;$/;"	m	struct:ge25519_pniels_t
xmmi	src/ext/ed25519/donna/curve25519-donna-sse2.h	/^typedef __m128i xmmi;$/;"	t
xy2d	src/ext/ed25519/ref10/ge.h	/^  fe xy2d;$/;"	m	struct:__anon104
y	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_p1p1_t
y	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_t
yminusx	src/ext/ed25519/ref10/ge.h	/^  fe yminusx;$/;"	m	struct:__anon104
yplusx	src/ext/ed25519/ref10/ge.h	/^  fe yplusx;$/;"	m	struct:__anon104
ysubx	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 ysubx, xaddy, t2d;$/;"	m	struct:ge25519_niels_t
ysubx	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 ysubx, xaddy, z, t2d;$/;"	m	struct:ge25519_pniels_t
z	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_p1p1_t
z	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 x, y, z, t;$/;"	m	struct:ge25519_t
z	src/ext/ed25519/donna/ed25519-donna.h	/^	bignum25519 ysubx, xaddy, z, t2d;$/;"	m	struct:ge25519_pniels_t
zero	src/ext/ed25519/ref10/fe_isnonzero.c	/^static const unsigned char zero[32];$/;"	v	file:
zlib_compression_level_t	src/common/torgzip.h	/^} zlib_compression_level_t;$/;"	t	typeref:enum:__anon81
zlib_state	src/or/or.h	/^  tor_zlib_state_t *zlib_state;$/;"	m	struct:dir_connection_t
